
STM32F429I-DISC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .AI_RAM       00000000  20000000  20000000  000879e0  2**0
                  CONTENTS
  1 .AI_CCMRAM    00000000  10000000  10000000  000879e0  2**0
                  CONTENTS
  2 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00010a20  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0006f26c  08010be0  08010be0  00011be0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0807fe4c  0807fe4c  000879e0  2**0
                  CONTENTS, READONLY
  6 .ARM          00000008  0807fe4c  0807fe4c  00080e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0807fe54  0807fe54  000879e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0807fe54  0807fe54  00080e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000004  0807fe58  0807fe58  00080e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         000069e0  20000000  0807fe5c  00081000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .AI_CCMRAM    00000000  10000000  10000000  000879e0  2**0
                  CONTENTS
 12 .ccmram       00000000  10000000  10000000  000879e0  2**0
                  CONTENTS
 13 .bss          0000c9b8  200069e0  200069e0  000879e0  2**3
                  ALLOC
 14 ._user_heap_stack 00001000  20013398  20013398  000879e0  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000879e0  2**0
                  CONTENTS, READONLY
 16 .debug_info   000229cf  00000000  00000000  00087a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00005619  00000000  00000000  000aa3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000f48  00000000  00000000  000af9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000011be  00000000  00000000  000b0940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b1f3  00000000  00000000  000b1afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0001ccbc  00000000  00000000  000dccf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f5954  00000000  00000000  000f99ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000086  00000000  00000000  001ef301  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00003e0c  00000000  00000000  001ef388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loclists 0000ae04  00000000  00000000  001f3194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000a2  00000000  00000000  001fdf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200069e0 	.word	0x200069e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010bb8 	.word	0x08010bb8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200069e4 	.word	0x200069e4
 80001ec:	08010bb8 	.word	0x08010bb8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_frsub>:
 8000bc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	e002      	b.n	8000bd4 <__addsf3>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fsub>:
 8000bd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bd4 <__addsf3>:
 8000bd4:	0042      	lsls	r2, r0, #1
 8000bd6:	bf1f      	itttt	ne
 8000bd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bdc:	ea92 0f03 	teqne	r2, r3
 8000be0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be8:	d06a      	beq.n	8000cc0 <__addsf3+0xec>
 8000bea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bf2:	bfc1      	itttt	gt
 8000bf4:	18d2      	addgt	r2, r2, r3
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	4048      	eorgt	r0, r1
 8000bfa:	4041      	eorgt	r1, r0
 8000bfc:	bfb8      	it	lt
 8000bfe:	425b      	neglt	r3, r3
 8000c00:	2b19      	cmp	r3, #25
 8000c02:	bf88      	it	hi
 8000c04:	4770      	bxhi	lr
 8000c06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c12:	bf18      	it	ne
 8000c14:	4240      	negne	r0, r0
 8000c16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c22:	bf18      	it	ne
 8000c24:	4249      	negne	r1, r1
 8000c26:	ea92 0f03 	teq	r2, r3
 8000c2a:	d03f      	beq.n	8000cac <__addsf3+0xd8>
 8000c2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c30:	fa41 fc03 	asr.w	ip, r1, r3
 8000c34:	eb10 000c 	adds.w	r0, r0, ip
 8000c38:	f1c3 0320 	rsb	r3, r3, #32
 8000c3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c44:	d502      	bpl.n	8000c4c <__addsf3+0x78>
 8000c46:	4249      	negs	r1, r1
 8000c48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c50:	d313      	bcc.n	8000c7a <__addsf3+0xa6>
 8000c52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c56:	d306      	bcc.n	8000c66 <__addsf3+0x92>
 8000c58:	0840      	lsrs	r0, r0, #1
 8000c5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5e:	f102 0201 	add.w	r2, r2, #1
 8000c62:	2afe      	cmp	r2, #254	@ 0xfe
 8000c64:	d251      	bcs.n	8000d0a <__addsf3+0x136>
 8000c66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6e:	bf08      	it	eq
 8000c70:	f020 0001 	biceq.w	r0, r0, #1
 8000c74:	ea40 0003 	orr.w	r0, r0, r3
 8000c78:	4770      	bx	lr
 8000c7a:	0049      	lsls	r1, r1, #1
 8000c7c:	eb40 0000 	adc.w	r0, r0, r0
 8000c80:	3a01      	subs	r2, #1
 8000c82:	bf28      	it	cs
 8000c84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c88:	d2ed      	bcs.n	8000c66 <__addsf3+0x92>
 8000c8a:	fab0 fc80 	clz	ip, r0
 8000c8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c92:	ebb2 020c 	subs.w	r2, r2, ip
 8000c96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c9a:	bfaa      	itet	ge
 8000c9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca0:	4252      	neglt	r2, r2
 8000ca2:	4318      	orrge	r0, r3
 8000ca4:	bfbc      	itt	lt
 8000ca6:	40d0      	lsrlt	r0, r2
 8000ca8:	4318      	orrlt	r0, r3
 8000caa:	4770      	bx	lr
 8000cac:	f092 0f00 	teq	r2, #0
 8000cb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cb4:	bf06      	itte	eq
 8000cb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cba:	3201      	addeq	r2, #1
 8000cbc:	3b01      	subne	r3, #1
 8000cbe:	e7b5      	b.n	8000c2c <__addsf3+0x58>
 8000cc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc8:	bf18      	it	ne
 8000cca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cce:	d021      	beq.n	8000d14 <__addsf3+0x140>
 8000cd0:	ea92 0f03 	teq	r2, r3
 8000cd4:	d004      	beq.n	8000ce0 <__addsf3+0x10c>
 8000cd6:	f092 0f00 	teq	r2, #0
 8000cda:	bf08      	it	eq
 8000cdc:	4608      	moveq	r0, r1
 8000cde:	4770      	bx	lr
 8000ce0:	ea90 0f01 	teq	r0, r1
 8000ce4:	bf1c      	itt	ne
 8000ce6:	2000      	movne	r0, #0
 8000ce8:	4770      	bxne	lr
 8000cea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cee:	d104      	bne.n	8000cfa <__addsf3+0x126>
 8000cf0:	0040      	lsls	r0, r0, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cf8:	4770      	bx	lr
 8000cfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cfe:	bf3c      	itt	cc
 8000d00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bxcc	lr
 8000d06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d12:	4770      	bx	lr
 8000d14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d18:	bf16      	itet	ne
 8000d1a:	4608      	movne	r0, r1
 8000d1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d20:	4601      	movne	r1, r0
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	bf06      	itte	eq
 8000d26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d2a:	ea90 0f01 	teqeq	r0, r1
 8000d2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_ui2f>:
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e004      	b.n	8000d44 <__aeabi_i2f+0x8>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_i2f>:
 8000d3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d40:	bf48      	it	mi
 8000d42:	4240      	negmi	r0, r0
 8000d44:	ea5f 0c00 	movs.w	ip, r0
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d50:	4601      	mov	r1, r0
 8000d52:	f04f 0000 	mov.w	r0, #0
 8000d56:	e01c      	b.n	8000d92 <__aeabi_l2f+0x2a>

08000d58 <__aeabi_ul2f>:
 8000d58:	ea50 0201 	orrs.w	r2, r0, r1
 8000d5c:	bf08      	it	eq
 8000d5e:	4770      	bxeq	lr
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e00a      	b.n	8000d7c <__aeabi_l2f+0x14>
 8000d66:	bf00      	nop

08000d68 <__aeabi_l2f>:
 8000d68:	ea50 0201 	orrs.w	r2, r0, r1
 8000d6c:	bf08      	it	eq
 8000d6e:	4770      	bxeq	lr
 8000d70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d74:	d502      	bpl.n	8000d7c <__aeabi_l2f+0x14>
 8000d76:	4240      	negs	r0, r0
 8000d78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d7c:	ea5f 0c01 	movs.w	ip, r1
 8000d80:	bf02      	ittt	eq
 8000d82:	4684      	moveq	ip, r0
 8000d84:	4601      	moveq	r1, r0
 8000d86:	2000      	moveq	r0, #0
 8000d88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d8c:	bf08      	it	eq
 8000d8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d96:	fabc f28c 	clz	r2, ip
 8000d9a:	3a08      	subs	r2, #8
 8000d9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da0:	db10      	blt.n	8000dc4 <__aeabi_l2f+0x5c>
 8000da2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da6:	4463      	add	r3, ip
 8000da8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000db4:	fa20 f202 	lsr.w	r2, r0, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	f020 0001 	biceq.w	r0, r0, #1
 8000dc2:	4770      	bx	lr
 8000dc4:	f102 0220 	add.w	r2, r2, #32
 8000dc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de2:	4770      	bx	lr

08000de4 <__aeabi_uldivmod>:
 8000de4:	b953      	cbnz	r3, 8000dfc <__aeabi_uldivmod+0x18>
 8000de6:	b94a      	cbnz	r2, 8000dfc <__aeabi_uldivmod+0x18>
 8000de8:	2900      	cmp	r1, #0
 8000dea:	bf08      	it	eq
 8000dec:	2800      	cmpeq	r0, #0
 8000dee:	bf1c      	itt	ne
 8000df0:	f04f 31ff 	movne.w	r1, #4294967295
 8000df4:	f04f 30ff 	movne.w	r0, #4294967295
 8000df8:	f000 b9da 	b.w	80011b0 <__aeabi_idiv0>
 8000dfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e04:	f000 f858 	bl	8000eb8 <__udivmoddi4>
 8000e08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e10:	b004      	add	sp, #16
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_f2lz>:
 8000e14:	ee07 0a90 	vmov	s15, r0
 8000e18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e20:	d401      	bmi.n	8000e26 <__aeabi_f2lz+0x12>
 8000e22:	f000 b80b 	b.w	8000e3c <__aeabi_f2ulz>
 8000e26:	eef1 7a67 	vneg.f32	s15, s15
 8000e2a:	b508      	push	{r3, lr}
 8000e2c:	ee17 0a90 	vmov	r0, s15
 8000e30:	f000 f804 	bl	8000e3c <__aeabi_f2ulz>
 8000e34:	4240      	negs	r0, r0
 8000e36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3a:	bd08      	pop	{r3, pc}

08000e3c <__aeabi_f2ulz>:
 8000e3c:	b5d0      	push	{r4, r6, r7, lr}
 8000e3e:	f7ff fb93 	bl	8000568 <__aeabi_f2d>
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <__aeabi_f2ulz+0x38>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	4606      	mov	r6, r0
 8000e48:	460f      	mov	r7, r1
 8000e4a:	f7ff fbe5 	bl	8000618 <__aeabi_dmul>
 8000e4e:	f000 f9b1 	bl	80011b4 <__aeabi_d2uiz>
 8000e52:	4604      	mov	r4, r0
 8000e54:	f7ff fb66 	bl	8000524 <__aeabi_ui2d>
 8000e58:	4b07      	ldr	r3, [pc, #28]	@ (8000e78 <__aeabi_f2ulz+0x3c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f7ff fbdc 	bl	8000618 <__aeabi_dmul>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	4630      	mov	r0, r6
 8000e66:	4639      	mov	r1, r7
 8000e68:	f7ff fa1e 	bl	80002a8 <__aeabi_dsub>
 8000e6c:	f000 f9a2 	bl	80011b4 <__aeabi_d2uiz>
 8000e70:	4621      	mov	r1, r4
 8000e72:	bdd0      	pop	{r4, r6, r7, pc}
 8000e74:	3df00000 	.word	0x3df00000
 8000e78:	41f00000 	.word	0x41f00000

08000e7c <__aeabi_d2ulz>:
 8000e7c:	b5d0      	push	{r4, r6, r7, lr}
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <__aeabi_d2ulz+0x34>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	4606      	mov	r6, r0
 8000e84:	460f      	mov	r7, r1
 8000e86:	f7ff fbc7 	bl	8000618 <__aeabi_dmul>
 8000e8a:	f000 f993 	bl	80011b4 <__aeabi_d2uiz>
 8000e8e:	4604      	mov	r4, r0
 8000e90:	f7ff fb48 	bl	8000524 <__aeabi_ui2d>
 8000e94:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <__aeabi_d2ulz+0x38>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	f7ff fbbe 	bl	8000618 <__aeabi_dmul>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	4639      	mov	r1, r7
 8000ea4:	f7ff fa00 	bl	80002a8 <__aeabi_dsub>
 8000ea8:	f000 f984 	bl	80011b4 <__aeabi_d2uiz>
 8000eac:	4621      	mov	r1, r4
 8000eae:	bdd0      	pop	{r4, r6, r7, pc}
 8000eb0:	3df00000 	.word	0x3df00000
 8000eb4:	41f00000 	.word	0x41f00000

08000eb8 <__udivmoddi4>:
 8000eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ebc:	9d08      	ldr	r5, [sp, #32]
 8000ebe:	468e      	mov	lr, r1
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	4688      	mov	r8, r1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d14a      	bne.n	8000f5e <__udivmoddi4+0xa6>
 8000ec8:	428a      	cmp	r2, r1
 8000eca:	4617      	mov	r7, r2
 8000ecc:	d962      	bls.n	8000f94 <__udivmoddi4+0xdc>
 8000ece:	fab2 f682 	clz	r6, r2
 8000ed2:	b14e      	cbz	r6, 8000ee8 <__udivmoddi4+0x30>
 8000ed4:	f1c6 0320 	rsb	r3, r6, #32
 8000ed8:	fa01 f806 	lsl.w	r8, r1, r6
 8000edc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ee0:	40b7      	lsls	r7, r6
 8000ee2:	ea43 0808 	orr.w	r8, r3, r8
 8000ee6:	40b4      	lsls	r4, r6
 8000ee8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000efa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000efe:	fb01 f20c 	mul.w	r2, r1, ip
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d909      	bls.n	8000f1a <__udivmoddi4+0x62>
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f0c:	f080 80ea 	bcs.w	80010e4 <__udivmoddi4+0x22c>
 8000f10:	429a      	cmp	r2, r3
 8000f12:	f240 80e7 	bls.w	80010e4 <__udivmoddi4+0x22c>
 8000f16:	3902      	subs	r1, #2
 8000f18:	443b      	add	r3, r7
 8000f1a:	1a9a      	subs	r2, r3, r2
 8000f1c:	b2a3      	uxth	r3, r4
 8000f1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f2e:	459c      	cmp	ip, r3
 8000f30:	d909      	bls.n	8000f46 <__udivmoddi4+0x8e>
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f38:	f080 80d6 	bcs.w	80010e8 <__udivmoddi4+0x230>
 8000f3c:	459c      	cmp	ip, r3
 8000f3e:	f240 80d3 	bls.w	80010e8 <__udivmoddi4+0x230>
 8000f42:	443b      	add	r3, r7
 8000f44:	3802      	subs	r0, #2
 8000f46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f4a:	eba3 030c 	sub.w	r3, r3, ip
 8000f4e:	2100      	movs	r1, #0
 8000f50:	b11d      	cbz	r5, 8000f5a <__udivmoddi4+0xa2>
 8000f52:	40f3      	lsrs	r3, r6
 8000f54:	2200      	movs	r2, #0
 8000f56:	e9c5 3200 	strd	r3, r2, [r5]
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d905      	bls.n	8000f6e <__udivmoddi4+0xb6>
 8000f62:	b10d      	cbz	r5, 8000f68 <__udivmoddi4+0xb0>
 8000f64:	e9c5 0100 	strd	r0, r1, [r5]
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e7f5      	b.n	8000f5a <__udivmoddi4+0xa2>
 8000f6e:	fab3 f183 	clz	r1, r3
 8000f72:	2900      	cmp	r1, #0
 8000f74:	d146      	bne.n	8001004 <__udivmoddi4+0x14c>
 8000f76:	4573      	cmp	r3, lr
 8000f78:	d302      	bcc.n	8000f80 <__udivmoddi4+0xc8>
 8000f7a:	4282      	cmp	r2, r0
 8000f7c:	f200 8105 	bhi.w	800118a <__udivmoddi4+0x2d2>
 8000f80:	1a84      	subs	r4, r0, r2
 8000f82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000f86:	2001      	movs	r0, #1
 8000f88:	4690      	mov	r8, r2
 8000f8a:	2d00      	cmp	r5, #0
 8000f8c:	d0e5      	beq.n	8000f5a <__udivmoddi4+0xa2>
 8000f8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000f92:	e7e2      	b.n	8000f5a <__udivmoddi4+0xa2>
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	f000 8090 	beq.w	80010ba <__udivmoddi4+0x202>
 8000f9a:	fab2 f682 	clz	r6, r2
 8000f9e:	2e00      	cmp	r6, #0
 8000fa0:	f040 80a4 	bne.w	80010ec <__udivmoddi4+0x234>
 8000fa4:	1a8a      	subs	r2, r1, r2
 8000fa6:	0c03      	lsrs	r3, r0, #16
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	b280      	uxth	r0, r0
 8000fae:	b2bc      	uxth	r4, r7
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000fb6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000fba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x11e>
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000fcc:	d202      	bcs.n	8000fd4 <__udivmoddi4+0x11c>
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	f200 80e0 	bhi.w	8001194 <__udivmoddi4+0x2dc>
 8000fd4:	46c4      	mov	ip, r8
 8000fd6:	1a9b      	subs	r3, r3, r2
 8000fd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000fdc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000fe0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000fe4:	fb02 f404 	mul.w	r4, r2, r4
 8000fe8:	429c      	cmp	r4, r3
 8000fea:	d907      	bls.n	8000ffc <__udivmoddi4+0x144>
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ff2:	d202      	bcs.n	8000ffa <__udivmoddi4+0x142>
 8000ff4:	429c      	cmp	r4, r3
 8000ff6:	f200 80ca 	bhi.w	800118e <__udivmoddi4+0x2d6>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	1b1b      	subs	r3, r3, r4
 8000ffe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001002:	e7a5      	b.n	8000f50 <__udivmoddi4+0x98>
 8001004:	f1c1 0620 	rsb	r6, r1, #32
 8001008:	408b      	lsls	r3, r1
 800100a:	fa22 f706 	lsr.w	r7, r2, r6
 800100e:	431f      	orrs	r7, r3
 8001010:	fa0e f401 	lsl.w	r4, lr, r1
 8001014:	fa20 f306 	lsr.w	r3, r0, r6
 8001018:	fa2e fe06 	lsr.w	lr, lr, r6
 800101c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001020:	4323      	orrs	r3, r4
 8001022:	fa00 f801 	lsl.w	r8, r0, r1
 8001026:	fa1f fc87 	uxth.w	ip, r7
 800102a:	fbbe f0f9 	udiv	r0, lr, r9
 800102e:	0c1c      	lsrs	r4, r3, #16
 8001030:	fb09 ee10 	mls	lr, r9, r0, lr
 8001034:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001038:	fb00 fe0c 	mul.w	lr, r0, ip
 800103c:	45a6      	cmp	lr, r4
 800103e:	fa02 f201 	lsl.w	r2, r2, r1
 8001042:	d909      	bls.n	8001058 <__udivmoddi4+0x1a0>
 8001044:	193c      	adds	r4, r7, r4
 8001046:	f100 3aff 	add.w	sl, r0, #4294967295
 800104a:	f080 809c 	bcs.w	8001186 <__udivmoddi4+0x2ce>
 800104e:	45a6      	cmp	lr, r4
 8001050:	f240 8099 	bls.w	8001186 <__udivmoddi4+0x2ce>
 8001054:	3802      	subs	r0, #2
 8001056:	443c      	add	r4, r7
 8001058:	eba4 040e 	sub.w	r4, r4, lr
 800105c:	fa1f fe83 	uxth.w	lr, r3
 8001060:	fbb4 f3f9 	udiv	r3, r4, r9
 8001064:	fb09 4413 	mls	r4, r9, r3, r4
 8001068:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800106c:	fb03 fc0c 	mul.w	ip, r3, ip
 8001070:	45a4      	cmp	ip, r4
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x1ce>
 8001074:	193c      	adds	r4, r7, r4
 8001076:	f103 3eff 	add.w	lr, r3, #4294967295
 800107a:	f080 8082 	bcs.w	8001182 <__udivmoddi4+0x2ca>
 800107e:	45a4      	cmp	ip, r4
 8001080:	d97f      	bls.n	8001182 <__udivmoddi4+0x2ca>
 8001082:	3b02      	subs	r3, #2
 8001084:	443c      	add	r4, r7
 8001086:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800108a:	eba4 040c 	sub.w	r4, r4, ip
 800108e:	fba0 ec02 	umull	lr, ip, r0, r2
 8001092:	4564      	cmp	r4, ip
 8001094:	4673      	mov	r3, lr
 8001096:	46e1      	mov	r9, ip
 8001098:	d362      	bcc.n	8001160 <__udivmoddi4+0x2a8>
 800109a:	d05f      	beq.n	800115c <__udivmoddi4+0x2a4>
 800109c:	b15d      	cbz	r5, 80010b6 <__udivmoddi4+0x1fe>
 800109e:	ebb8 0203 	subs.w	r2, r8, r3
 80010a2:	eb64 0409 	sbc.w	r4, r4, r9
 80010a6:	fa04 f606 	lsl.w	r6, r4, r6
 80010aa:	fa22 f301 	lsr.w	r3, r2, r1
 80010ae:	431e      	orrs	r6, r3
 80010b0:	40cc      	lsrs	r4, r1
 80010b2:	e9c5 6400 	strd	r6, r4, [r5]
 80010b6:	2100      	movs	r1, #0
 80010b8:	e74f      	b.n	8000f5a <__udivmoddi4+0xa2>
 80010ba:	fbb1 fcf2 	udiv	ip, r1, r2
 80010be:	0c01      	lsrs	r1, r0, #16
 80010c0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80010c4:	b280      	uxth	r0, r0
 80010c6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80010ca:	463b      	mov	r3, r7
 80010cc:	4638      	mov	r0, r7
 80010ce:	463c      	mov	r4, r7
 80010d0:	46b8      	mov	r8, r7
 80010d2:	46be      	mov	lr, r7
 80010d4:	2620      	movs	r6, #32
 80010d6:	fbb1 f1f7 	udiv	r1, r1, r7
 80010da:	eba2 0208 	sub.w	r2, r2, r8
 80010de:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80010e2:	e766      	b.n	8000fb2 <__udivmoddi4+0xfa>
 80010e4:	4601      	mov	r1, r0
 80010e6:	e718      	b.n	8000f1a <__udivmoddi4+0x62>
 80010e8:	4610      	mov	r0, r2
 80010ea:	e72c      	b.n	8000f46 <__udivmoddi4+0x8e>
 80010ec:	f1c6 0220 	rsb	r2, r6, #32
 80010f0:	fa2e f302 	lsr.w	r3, lr, r2
 80010f4:	40b7      	lsls	r7, r6
 80010f6:	40b1      	lsls	r1, r6
 80010f8:	fa20 f202 	lsr.w	r2, r0, r2
 80010fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001100:	430a      	orrs	r2, r1
 8001102:	fbb3 f8fe 	udiv	r8, r3, lr
 8001106:	b2bc      	uxth	r4, r7
 8001108:	fb0e 3318 	mls	r3, lr, r8, r3
 800110c:	0c11      	lsrs	r1, r2, #16
 800110e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001112:	fb08 f904 	mul.w	r9, r8, r4
 8001116:	40b0      	lsls	r0, r6
 8001118:	4589      	cmp	r9, r1
 800111a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800111e:	b280      	uxth	r0, r0
 8001120:	d93e      	bls.n	80011a0 <__udivmoddi4+0x2e8>
 8001122:	1879      	adds	r1, r7, r1
 8001124:	f108 3cff 	add.w	ip, r8, #4294967295
 8001128:	d201      	bcs.n	800112e <__udivmoddi4+0x276>
 800112a:	4589      	cmp	r9, r1
 800112c:	d81f      	bhi.n	800116e <__udivmoddi4+0x2b6>
 800112e:	eba1 0109 	sub.w	r1, r1, r9
 8001132:	fbb1 f9fe 	udiv	r9, r1, lr
 8001136:	fb09 f804 	mul.w	r8, r9, r4
 800113a:	fb0e 1119 	mls	r1, lr, r9, r1
 800113e:	b292      	uxth	r2, r2
 8001140:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001144:	4542      	cmp	r2, r8
 8001146:	d229      	bcs.n	800119c <__udivmoddi4+0x2e4>
 8001148:	18ba      	adds	r2, r7, r2
 800114a:	f109 31ff 	add.w	r1, r9, #4294967295
 800114e:	d2c4      	bcs.n	80010da <__udivmoddi4+0x222>
 8001150:	4542      	cmp	r2, r8
 8001152:	d2c2      	bcs.n	80010da <__udivmoddi4+0x222>
 8001154:	f1a9 0102 	sub.w	r1, r9, #2
 8001158:	443a      	add	r2, r7
 800115a:	e7be      	b.n	80010da <__udivmoddi4+0x222>
 800115c:	45f0      	cmp	r8, lr
 800115e:	d29d      	bcs.n	800109c <__udivmoddi4+0x1e4>
 8001160:	ebbe 0302 	subs.w	r3, lr, r2
 8001164:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001168:	3801      	subs	r0, #1
 800116a:	46e1      	mov	r9, ip
 800116c:	e796      	b.n	800109c <__udivmoddi4+0x1e4>
 800116e:	eba7 0909 	sub.w	r9, r7, r9
 8001172:	4449      	add	r1, r9
 8001174:	f1a8 0c02 	sub.w	ip, r8, #2
 8001178:	fbb1 f9fe 	udiv	r9, r1, lr
 800117c:	fb09 f804 	mul.w	r8, r9, r4
 8001180:	e7db      	b.n	800113a <__udivmoddi4+0x282>
 8001182:	4673      	mov	r3, lr
 8001184:	e77f      	b.n	8001086 <__udivmoddi4+0x1ce>
 8001186:	4650      	mov	r0, sl
 8001188:	e766      	b.n	8001058 <__udivmoddi4+0x1a0>
 800118a:	4608      	mov	r0, r1
 800118c:	e6fd      	b.n	8000f8a <__udivmoddi4+0xd2>
 800118e:	443b      	add	r3, r7
 8001190:	3a02      	subs	r2, #2
 8001192:	e733      	b.n	8000ffc <__udivmoddi4+0x144>
 8001194:	f1ac 0c02 	sub.w	ip, ip, #2
 8001198:	443b      	add	r3, r7
 800119a:	e71c      	b.n	8000fd6 <__udivmoddi4+0x11e>
 800119c:	4649      	mov	r1, r9
 800119e:	e79c      	b.n	80010da <__udivmoddi4+0x222>
 80011a0:	eba1 0109 	sub.w	r1, r1, r9
 80011a4:	46c4      	mov	ip, r8
 80011a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80011aa:	fb09 f804 	mul.w	r8, r9, r4
 80011ae:	e7c4      	b.n	800113a <__udivmoddi4+0x282>

080011b0 <__aeabi_idiv0>:
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop

080011b4 <__aeabi_d2uiz>:
 80011b4:	004a      	lsls	r2, r1, #1
 80011b6:	d211      	bcs.n	80011dc <__aeabi_d2uiz+0x28>
 80011b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80011bc:	d211      	bcs.n	80011e2 <__aeabi_d2uiz+0x2e>
 80011be:	d50d      	bpl.n	80011dc <__aeabi_d2uiz+0x28>
 80011c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80011c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80011c8:	d40e      	bmi.n	80011e8 <__aeabi_d2uiz+0x34>
 80011ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80011ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80011d6:	fa23 f002 	lsr.w	r0, r3, r2
 80011da:	4770      	bx	lr
 80011dc:	f04f 0000 	mov.w	r0, #0
 80011e0:	4770      	bx	lr
 80011e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80011e6:	d102      	bne.n	80011ee <__aeabi_d2uiz+0x3a>
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	4770      	bx	lr
 80011ee:	f04f 0000 	mov.w	r0, #0
 80011f2:	4770      	bx	lr

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b510      	push	{r4, lr}
 80011f6:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f8:	2210      	movs	r2, #16
 80011fa:	2100      	movs	r1, #0
 80011fc:	a80a      	add	r0, sp, #40	@ 0x28
 80011fe:	f00d fa58 	bl	800e6b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001202:	2214      	movs	r2, #20
 8001204:	2100      	movs	r1, #0
 8001206:	a803      	add	r0, sp, #12
 8001208:	f00d fa53 	bl	800e6b2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800120c:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <SystemClock_Config+0xa4>)
 800120e:	2100      	movs	r1, #0
 8001210:	9101      	str	r1, [sp, #4]
 8001212:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001214:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001218:	641a      	str	r2, [r3, #64]	@ 0x40
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001224:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <SystemClock_Config+0xa8>)
 8001226:	9102      	str	r1, [sp, #8]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123a:	2101      	movs	r1, #1
 800123c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001240:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001242:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001246:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
 800124a:	2004      	movs	r0, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124c:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001250:	23b4      	movs	r3, #180	@ 0xb4
 8001252:	e9cd 0310 	strd	r0, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001256:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125a:	9412      	str	r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800125c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125e:	f000 feff 	bl	8002060 <HAL_RCC_OscConfig>
 8001262:	b108      	cbz	r0, 8001268 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001266:	e7fe      	b.n	8001266 <SystemClock_Config+0x72>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001268:	f000 fec0 	bl	8001fec <HAL_PWREx_EnableOverDrive>
 800126c:	b108      	cbz	r0, 8001272 <SystemClock_Config+0x7e>
 800126e:	b672      	cpsid	i
  while (1)
 8001270:	e7fe      	b.n	8001270 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001272:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001278:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800127a:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800127e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001282:	2105      	movs	r1, #5
 8001284:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001286:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800128a:	f001 f8c5 	bl	8002418 <HAL_RCC_ClockConfig>
 800128e:	b108      	cbz	r0, 8001294 <SystemClock_Config+0xa0>
 8001290:	b672      	cpsid	i
  while (1)
 8001292:	e7fe      	b.n	8001292 <SystemClock_Config+0x9e>
}
 8001294:	b014      	add	sp, #80	@ 0x50
 8001296:	bd10      	pop	{r4, pc}
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <main>:
{
 80012a0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80012a4:	b091      	sub	sp, #68	@ 0x44
  HAL_Init();
 80012a6:	f000 fc41 	bl	8001b2c <HAL_Init>
  SystemClock_Config();
 80012aa:	f7ff ffa3 	bl	80011f4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	2214      	movs	r2, #20
 80012b0:	2100      	movs	r1, #0
 80012b2:	a809      	add	r0, sp, #36	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b4:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f00d f9fc 	bl	800e6b2 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	4bb8      	ldr	r3, [pc, #736]	@ (800159c <main+0x2fc>)
 80012bc:	9401      	str	r4, [sp, #4]
 80012be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80012c0:	48b7      	ldr	r0, [pc, #732]	@ (80015a0 <main+0x300>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	f042 0204 	orr.w	r2, r2, #4
 80012c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80012c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ca:	f002 0204 	and.w	r2, r2, #4
 80012ce:	9201      	str	r2, [sp, #4]
 80012d0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d2:	9402      	str	r4, [sp, #8]
 80012d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012d6:	f042 0220 	orr.w	r2, r2, #32
 80012da:	631a      	str	r2, [r3, #48]	@ 0x30
 80012dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012de:	f002 0220 	and.w	r2, r2, #32
 80012e2:	9202      	str	r2, [sp, #8]
 80012e4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	9403      	str	r4, [sp, #12]
 80012e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80012f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012f2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80012f6:	9203      	str	r2, [sp, #12]
 80012f8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	9404      	str	r4, [sp, #16]
 80012fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012fe:	f042 0201 	orr.w	r2, r2, #1
 8001302:	631a      	str	r2, [r3, #48]	@ 0x30
 8001304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001306:	f002 0201 	and.w	r2, r2, #1
 800130a:	9204      	str	r2, [sp, #16]
 800130c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	9405      	str	r4, [sp, #20]
 8001310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001312:	f042 0202 	orr.w	r2, r2, #2
 8001316:	631a      	str	r2, [r3, #48]	@ 0x30
 8001318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800131a:	f002 0202 	and.w	r2, r2, #2
 800131e:	9205      	str	r2, [sp, #20]
 8001320:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001322:	9406      	str	r4, [sp, #24]
 8001324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800132a:	631a      	str	r2, [r3, #48]	@ 0x30
 800132c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800132e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001332:	9206      	str	r2, [sp, #24]
 8001334:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001336:	9407      	str	r4, [sp, #28]
 8001338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800133a:	f042 0210 	orr.w	r2, r2, #16
 800133e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001340:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001342:	f002 0210 	and.w	r2, r2, #16
 8001346:	9207      	str	r2, [sp, #28]
 8001348:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	9408      	str	r4, [sp, #32]
 800134c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800134e:	f042 0208 	orr.w	r2, r2, #8
 8001352:	631a      	str	r2, [r3, #48]	@ 0x30
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800135c:	4622      	mov	r2, r4
 800135e:	2116      	movs	r1, #22
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001360:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001362:	f000 fe3d 	bl	8001fe0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001366:	488f      	ldr	r0, [pc, #572]	@ (80015a4 <main+0x304>)
 8001368:	4622      	mov	r2, r4
 800136a:	2180      	movs	r1, #128	@ 0x80
 800136c:	f000 fe38 	bl	8001fe0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001370:	488d      	ldr	r0, [pc, #564]	@ (80015a8 <main+0x308>)
 8001372:	4622      	mov	r2, r4
 8001374:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001378:	f000 fe32 	bl	8001fe0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800137c:	4622      	mov	r2, r4
 800137e:	488b      	ldr	r0, [pc, #556]	@ (80015ac <main+0x30c>)
 8001380:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001384:	f000 fe2c 	bl	8001fe0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2502      	movs	r5, #2
 800138a:	f44f 7360 	mov.w	r3, #896	@ 0x380
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800138e:	4888      	ldr	r0, [pc, #544]	@ (80015b0 <main+0x310>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001390:	f04f 0905 	mov.w	r9, #5
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001394:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001396:	260e      	movs	r6, #14
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013a0:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a4:	f000 fd38 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80013a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80013ac:	4880      	ldr	r0, [pc, #512]	@ (80015b0 <main+0x310>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013ae:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80013b0:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f000 fd2c 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2316      	movs	r3, #22
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c2:	4877      	ldr	r0, [pc, #476]	@ (80015a0 <main+0x300>)
 80013c4:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013c6:	f44f 1890 	mov.w	r8, #1179648	@ 0x120000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d2:	f000 fd21 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013d6:	f248 0307 	movw	r3, #32775	@ 0x8007
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	4872      	ldr	r0, [pc, #456]	@ (80015a4 <main+0x304>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013e0:	e9cd 3809 	strd	r3, r8, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f000 fd18 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80013e8:	f641 0358 	movw	r3, #6232	@ 0x1858
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	486d      	ldr	r0, [pc, #436]	@ (80015a4 <main+0x304>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013ee:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f000 fd0d 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80013fe:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001400:	4868      	ldr	r0, [pc, #416]	@ (80015a4 <main+0x304>)
 8001402:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800140c:	f000 fd04 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001410:	2320      	movs	r3, #32
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001412:	4863      	ldr	r0, [pc, #396]	@ (80015a0 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001416:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001418:	e9cd 3809 	strd	r3, r8, [sp, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800141c:	f000 fcfc 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001420:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	4863      	ldr	r0, [pc, #396]	@ (80015b4 <main+0x314>)
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001428:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800142c:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800142e:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f000 fcef 	bl	8001e18 <HAL_GPIO_Init>
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800143a:	485e      	ldr	r0, [pc, #376]	@ (80015b4 <main+0x314>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800143e:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001440:	e9cd 8409 	strd	r8, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001444:	f000 fce8 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001448:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	4859      	ldr	r0, [pc, #356]	@ (80015b4 <main+0x314>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800144e:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	e9cd 2509 	strd	r2, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f000 fcdd 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800145e:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	e9cd 2509 	strd	r2, r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	4853      	ldr	r0, [pc, #332]	@ (80015b4 <main+0x314>)
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001468:	220c      	movs	r2, #12
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800146c:	920d      	str	r2, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f000 fcd1 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001476:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800147a:	484e      	ldr	r0, [pc, #312]	@ (80015b4 <main+0x314>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800147e:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	e9cd 2409 	strd	r2, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = TE_Pin;
 8001484:	f44f 6a00 	mov.w	sl, #2048	@ 0x800
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001488:	f000 fcc6 	bl	8001e18 <HAL_GPIO_Init>
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800148c:	4846      	ldr	r0, [pc, #280]	@ (80015a8 <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001490:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	e9cd a409 	strd	sl, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001496:	f000 fcbf 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800149a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149e:	4842      	ldr	r0, [pc, #264]	@ (80015a8 <main+0x308>)
 80014a0:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	e9cd 2709 	strd	r2, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014aa:	f000 fcb5 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80014ae:	f44f 620c 	mov.w	r2, #2240	@ 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b2:	483e      	ldr	r0, [pc, #248]	@ (80015ac <main+0x30c>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014b4:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b6:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	e9cd 2509 	strd	r2, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c0:	f000 fcaa 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80014c4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c8:	4835      	ldr	r0, [pc, #212]	@ (80015a0 <main+0x300>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014ca:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014cc:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	e9cd 2509 	strd	r2, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d6:	f000 fc9f 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014de:	2212      	movs	r2, #18
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80014e0:	482f      	ldr	r0, [pc, #188]	@ (80015a0 <main+0x300>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014e2:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80014e6:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e8:	e9cd 3209 	strd	r3, r2, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ec:	f44f 7b80 	mov.w	fp, #256	@ 0x100
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f000 fc90 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f8:	2212      	movs	r2, #18
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80014fa:	482a      	ldr	r0, [pc, #168]	@ (80015a4 <main+0x304>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014fc:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001500:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001502:	e9cd b209 	strd	fp, r2, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800150a:	f000 fc85 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800150e:	2248      	movs	r2, #72	@ 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001510:	4825      	ldr	r0, [pc, #148]	@ (80015a8 <main+0x308>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001512:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001514:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	e9cd 2509 	strd	r2, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151e:	f000 fc7b 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001522:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001526:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001528:	4820      	ldr	r0, [pc, #128]	@ (80015ac <main+0x30c>)
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800152a:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800152c:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	e9cd 2509 	strd	r2, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001536:	f000 fc6f 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800153a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800153e:	481b      	ldr	r0, [pc, #108]	@ (80015ac <main+0x30c>)
 8001540:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800154a:	f000 fc65 	bl	8001e18 <HAL_GPIO_Init>
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 800154e:	481a      	ldr	r0, [pc, #104]	@ (80015b8 <main+0x318>)
 8001550:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <main+0x31c>)
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001552:	f8c0 a020 	str.w	sl, [r0, #32]
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8001556:	e9c0 3700 	strd	r3, r7, [r0]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800155a:	2210      	movs	r2, #16
 800155c:	2340      	movs	r3, #64	@ 0x40
 800155e:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001562:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001566:	e9c0 3409 	strd	r3, r4, [r0, #36]	@ 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
 800156a:	2307      	movs	r3, #7
  SdramTiming.SelfRefreshTime = 5;
 800156c:	e9cd 390a 	strd	r3, r9, [sp, #40]	@ 0x28
  SdramTiming.RowCycleDelay = 7;
 8001570:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8001572:	a909      	add	r1, sp, #36	@ 0x24
  SdramTiming.WriteRecoveryTime = 3;
 8001574:	2303      	movs	r3, #3
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001576:	e9c0 4802 	strd	r4, r8, [r0, #8]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800157a:	e9c0 b406 	strd	fp, r4, [r0, #24]
  SdramTiming.RPDelay = 2;
 800157e:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  SdramTiming.LoadToActiveDelay = 2;
 8001582:	9509      	str	r5, [sp, #36]	@ 0x24
  SdramTiming.RCDDelay = 2;
 8001584:	950f      	str	r5, [sp, #60]	@ 0x3c
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8001586:	f001 f807 	bl	8002598 <HAL_SDRAM_Init>
 800158a:	b108      	cbz	r0, 8001590 <main+0x2f0>
 800158c:	b672      	cpsid	i
  while (1)
 800158e:	e7fe      	b.n	800158e <main+0x2ee>
  MX_X_CUBE_AI_Init();
 8001590:	f003 f890 	bl	80046b4 <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 8001594:	f003 f897 	bl	80046c6 <MX_X_CUBE_AI_Process>
  while (1)
 8001598:	e7fc      	b.n	8001594 <main+0x2f4>
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	40021800 	.word	0x40021800
 80015b0:	40021400 	.word	0x40021400
 80015b4:	40020400 	.word	0x40020400
 80015b8:	200069fc 	.word	0x200069fc
 80015bc:	a0000140 	.word	0xa0000140

080015c0 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 80015c0:	480a      	ldr	r0, [pc, #40]	@ (80015ec <MX_USART1_UART_Init+0x2c>)
  huart1.Init.BaudRate = 115200;
 80015c2:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <MX_USART1_UART_Init+0x30>)
{
 80015c4:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 115200;
 80015c6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80015ca:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d0:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015d2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015da:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015de:	f001 f8ef 	bl	80027c0 <HAL_UART_Init>
 80015e2:	b108      	cbz	r0, 80015e8 <MX_USART1_UART_Init+0x28>
 80015e4:	b672      	cpsid	i
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <MX_USART1_UART_Init+0x26>
}
 80015e8:	bd08      	pop	{r3, pc}
 80015ea:	bf00      	nop
 80015ec:	20006a30 	.word	0x20006a30
 80015f0:	40011000 	.word	0x40011000

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <HAL_MspInit+0x38>)
 80015f8:	2100      	movs	r1, #0
 80015fa:	9100      	str	r1, [sp, #0]
 80015fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001602:	645a      	str	r2, [r3, #68]	@ 0x44
 8001604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001606:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800160a:	9200      	str	r2, [sp, #0]
 800160c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	9101      	str	r1, [sp, #4]
 8001610:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001612:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001616:	641a      	str	r2, [r3, #64]	@ 0x40
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001622:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001624:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001626:	f000 bad3 	b.w	8001bd0 <HAL_NVIC_SetPriorityGrouping>
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001630:	b570      	push	{r4, r5, r6, lr}
 8001632:	4604      	mov	r4, r0
 8001634:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	2214      	movs	r2, #20
 8001638:	2100      	movs	r1, #0
 800163a:	a803      	add	r0, sp, #12
 800163c:	f00d f839 	bl	800e6b2 <memset>
  if(huart->Instance==USART1)
 8001640:	6822      	ldr	r2, [r4, #0]
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_UART_MspInit+0x7c>)
 8001644:	429a      	cmp	r2, r3
 8001646:	d12f      	bne.n	80016a8 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001648:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 800164c:	2100      	movs	r1, #0
 800164e:	9101      	str	r1, [sp, #4]
 8001650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8001652:	4817      	ldr	r0, [pc, #92]	@ (80016b0 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001654:	f042 0210 	orr.w	r2, r2, #16
 8001658:	645a      	str	r2, [r3, #68]	@ 0x44
 800165a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800165c:	f002 0210 	and.w	r2, r2, #16
 8001660:	9201      	str	r2, [sp, #4]
 8001662:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	9102      	str	r1, [sp, #8]
 8001666:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001668:	f042 0201 	orr.w	r2, r2, #1
 800166c:	631a      	str	r2, [r3, #48]	@ 0x30
 800166e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2602      	movs	r6, #2
 800167a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800167e:	2503      	movs	r5, #3
 8001680:	2407      	movs	r4, #7
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8001682:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001688:	e9cd 5406 	strd	r5, r4, [sp, #24]
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 800168c:	f000 fbc4 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 8001690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 8001698:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <HAL_UART_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800169a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169c:	2301      	movs	r3, #1
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 800169e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f000 fbb8 	bl	8001e18 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80016a8:	b008      	add	sp, #32
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
 80016ac:	40011000 	.word	0x40011000
 80016b0:	40020000 	.word	0x40020000

080016b4 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80016b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80016ba:	2300      	movs	r3, #0
 80016bc:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <HAL_SDRAM_MspInit+0xb8>)
 80016c0:	681c      	ldr	r4, [r3, #0]
 80016c2:	2c00      	cmp	r4, #0
 80016c4:	d14f      	bne.n	8001766 <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 80016c6:	f04f 0801 	mov.w	r8, #1
 80016ca:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 80016ce:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <HAL_SDRAM_MspInit+0xbc>)
 80016d0:	9400      	str	r4, [sp, #0]
 80016d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d4:	4827      	ldr	r0, [pc, #156]	@ (8001774 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80016d6:	ea42 0208 	orr.w	r2, r2, r8
 80016da:	639a      	str	r2, [r3, #56]	@ 0x38
 80016dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016de:	ea03 0308 	and.w	r3, r3, r8
 80016e2:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016e6:	2603      	movs	r6, #3
 80016e8:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80016ea:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ec:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80016f2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016f6:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016fa:	f000 fb8d 	bl	8001e18 <HAL_GPIO_Init>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80016fe:	481e      	ldr	r0, [pc, #120]	@ (8001778 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001700:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001702:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800170c:	f000 fb84 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001710:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001714:	4819      	ldr	r0, [pc, #100]	@ (800177c <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001716:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001718:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001722:	f000 fb79 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001726:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800172a:	4815      	ldr	r0, [pc, #84]	@ (8001780 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800172c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800172e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001738:	f000 fb6e 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800173c:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001740:	4810      	ldr	r0, [pc, #64]	@ (8001784 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001742:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001744:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174e:	f000 fb63 	bl	8001e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001752:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	480c      	ldr	r0, [pc, #48]	@ (8001788 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001756:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f000 fb59 	bl	8001e18 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001766:	b006      	add	sp, #24
 8001768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800176c:	20006a78 	.word	0x20006a78
 8001770:	40023800 	.word	0x40023800
 8001774:	40021400 	.word	0x40021400
 8001778:	40020800 	.word	0x40020800
 800177c:	40021800 	.word	0x40021800
 8001780:	40021000 	.word	0x40021000
 8001784:	40020c00 	.word	0x40020c00
 8001788:	40020400 	.word	0x40020400

0800178c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler>

0800178e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <HardFault_Handler>

08001790 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <MemManage_Handler>

08001792 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler>

08001794 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <UsageFault_Handler>

08001796 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001796:	4770      	bx	lr

08001798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001798:	4770      	bx	lr

0800179a <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800179a:	4770      	bx	lr

0800179c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 b9e0 	b.w	8001b60 <HAL_IncTick>

080017a0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a0:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <_sbrk+0x30>)
 80017a2:	6811      	ldr	r1, [r2, #0]
{
 80017a4:	b510      	push	{r4, lr}
 80017a6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80017a8:	b909      	cbnz	r1, 80017ae <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80017aa:	490a      	ldr	r1, [pc, #40]	@ (80017d4 <_sbrk+0x34>)
 80017ac:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ae:	6810      	ldr	r0, [r2, #0]
 80017b0:	4909      	ldr	r1, [pc, #36]	@ (80017d8 <_sbrk+0x38>)
 80017b2:	4c0a      	ldr	r4, [pc, #40]	@ (80017dc <_sbrk+0x3c>)
 80017b4:	4403      	add	r3, r0
 80017b6:	1b09      	subs	r1, r1, r4
 80017b8:	428b      	cmp	r3, r1
 80017ba:	d906      	bls.n	80017ca <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80017bc:	f00c ffee 	bl	800e79c <__errno>
 80017c0:	230c      	movs	r3, #12
 80017c2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80017c8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80017ca:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80017cc:	e7fc      	b.n	80017c8 <_sbrk+0x28>
 80017ce:	bf00      	nop
 80017d0:	20006a7c 	.word	0x20006a7c
 80017d4:	20013398 	.word	0x20013398
 80017d8:	20030000 	.word	0x20030000
 80017dc:	00000800 	.word	0x00000800

080017e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e0:	4a03      	ldr	r2, [pc, #12]	@ (80017f0 <SystemInit+0x10>)
 80017e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80017e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800182c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017f8:	f7ff fff2 	bl	80017e0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017fc:	480c      	ldr	r0, [pc, #48]	@ (8001830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017fe:	490d      	ldr	r1, [pc, #52]	@ (8001834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001814:	4c0a      	ldr	r4, [pc, #40]	@ (8001840 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001822:	f00c ffc1 	bl	800e7a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7ff fd3b 	bl	80012a0 <main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800182c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	200069e0 	.word	0x200069e0
  ldr r2, =_sidata
 8001838:	0807fe5c 	.word	0x0807fe5c
  ldr r2, =_sbss
 800183c:	200069e0 	.word	0x200069e0
  ldr r4, =_ebss
 8001840:	20013398 	.word	0x20013398

08001844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>
	...

08001848 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001848:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd = 0;

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800184c:	4c21      	ldr	r4, [pc, #132]	@ (80018d4 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800184e:	4d22      	ldr	r5, [pc, #136]	@ (80018d8 <BSP_SDRAM_Initialization_sequence+0x90>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001850:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 8001852:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001856:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001858:	4621      	mov	r1, r4
{
 800185a:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800185c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001860:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001862:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 8001866:	e9c4 6802 	strd	r6, r8, [r4, #8]
  __IO uint32_t tmpmrd = 0;
 800186a:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800186e:	f000 feb3 	bl	80025d8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001872:	4630      	mov	r0, r6
 8001874:	f000 f986 	bl	8001b84 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001878:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800187a:	4621      	mov	r1, r4
 800187c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001880:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001882:	e9c4 3700 	strd	r3, r7, [r4]

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 8001886:	f04f 0a04 	mov.w	sl, #4
  Command.ModeRegisterDefinition  = 0;
 800188a:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800188e:	f000 fea3 	bl	80025d8 <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001892:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001894:	4621      	mov	r1, r4
 8001896:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800189a:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800189c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 80018a0:	e9c4 a802 	strd	sl, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80018a4:	f000 fe98 	bl	80025d8 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80018a8:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80018ac:	9301      	str	r3, [sp, #4]
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 80018ae:	9b01      	ldr	r3, [sp, #4]
  Command.AutoRefreshNumber       = 1;
 80018b0:	60a6      	str	r6, [r4, #8]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80018b2:	4621      	mov	r1, r4
 80018b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018b8:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80018ba:	e9c4 a700 	strd	sl, r7, [r4]
  Command.ModeRegisterDefinition  = tmpmrd;
 80018be:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80018c0:	f000 fe8a 	bl	80025d8 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 80018c4:	4649      	mov	r1, r9
 80018c6:	4628      	mov	r0, r5
}
 80018c8:	b002      	add	sp, #8
 80018ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 80018ce:	f000 bea1 	b.w	8002614 <HAL_SDRAM_ProgramRefreshRate>
 80018d2:	bf00      	nop
 80018d4:	20006ae0 	.word	0x20006ae0
 80018d8:	20006b0c 	.word	0x20006b0c

080018dc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80018dc:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 80018de:	4606      	mov	r6, r0
{
 80018e0:	b08e      	sub	sp, #56	@ 0x38
  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 80018e2:	2800      	cmp	r0, #0
 80018e4:	f000 80ab 	beq.w	8001a3e <BSP_SDRAM_MspInit+0x162>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 80018e8:	4b56      	ldr	r3, [pc, #344]	@ (8001a44 <BSP_SDRAM_MspInit+0x168>)
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80018ea:	4857      	ldr	r0, [pc, #348]	@ (8001a48 <BSP_SDRAM_MspInit+0x16c>)
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80018ec:	4c57      	ldr	r4, [pc, #348]	@ (8001a4c <BSP_SDRAM_MspInit+0x170>)
    __HAL_RCC_FMC_CLK_ENABLE();
 80018ee:	2500      	movs	r5, #0
 80018f0:	9501      	str	r5, [sp, #4]
 80018f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018f4:	f042 0201 	orr.w	r2, r2, #1
 80018f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80018fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018fc:	f002 0201 	and.w	r2, r2, #1
 8001900:	9201      	str	r2, [sp, #4]
 8001902:	9a01      	ldr	r2, [sp, #4]
    __DMAx_CLK_ENABLE();
 8001904:	9502      	str	r5, [sp, #8]
 8001906:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001908:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800190c:	631a      	str	r2, [r3, #48]	@ 0x30
 800190e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001910:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8001914:	9202      	str	r2, [sp, #8]
 8001916:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001918:	9503      	str	r5, [sp, #12]
 800191a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800191c:	f042 0202 	orr.w	r2, r2, #2
 8001920:	631a      	str	r2, [r3, #48]	@ 0x30
 8001922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001924:	f002 0202 	and.w	r2, r2, #2
 8001928:	9203      	str	r2, [sp, #12]
 800192a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192c:	9504      	str	r5, [sp, #16]
 800192e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001930:	f042 0204 	orr.w	r2, r2, #4
 8001934:	631a      	str	r2, [r3, #48]	@ 0x30
 8001936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001938:	f002 0204 	and.w	r2, r2, #4
 800193c:	9204      	str	r2, [sp, #16]
 800193e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001940:	9505      	str	r5, [sp, #20]
 8001942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001944:	f042 0208 	orr.w	r2, r2, #8
 8001948:	631a      	str	r2, [r3, #48]	@ 0x30
 800194a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800194c:	f002 0208 	and.w	r2, r2, #8
 8001950:	9205      	str	r2, [sp, #20]
 8001952:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001954:	9506      	str	r5, [sp, #24]
 8001956:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001958:	f042 0210 	orr.w	r2, r2, #16
 800195c:	631a      	str	r2, [r3, #48]	@ 0x30
 800195e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001960:	f002 0210 	and.w	r2, r2, #16
 8001964:	9206      	str	r2, [sp, #24]
 8001966:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001968:	9507      	str	r5, [sp, #28]
 800196a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	631a      	str	r2, [r3, #48]	@ 0x30
 8001972:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001974:	f002 0220 	and.w	r2, r2, #32
 8001978:	9207      	str	r2, [sp, #28]
 800197a:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800197c:	9508      	str	r5, [sp, #32]
 800197e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001984:	631a      	str	r2, [r3, #48]	@ 0x30
 8001986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800198c:	9308      	str	r3, [sp, #32]
 800198e:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001992:	e9cd 530b 	strd	r5, r3, [sp, #44]	@ 0x2c
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001996:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001998:	230c      	movs	r3, #12
 800199a:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800199c:	a909      	add	r1, sp, #36	@ 0x24
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800199e:	2360      	movs	r3, #96	@ 0x60
 80019a0:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80019a2:	f000 fa39 	bl	8001e18 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 80019a6:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80019a8:	4829      	ldr	r0, [pc, #164]	@ (8001a50 <BSP_SDRAM_MspInit+0x174>)
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 80019aa:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80019ac:	a909      	add	r1, sp, #36	@ 0x24
 80019ae:	f000 fa33 	bl	8001e18 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80019b2:	f24c 7303 	movw	r3, #50947	@ 0xc703
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80019b6:	4827      	ldr	r0, [pc, #156]	@ (8001a54 <BSP_SDRAM_MspInit+0x178>)
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80019b8:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80019ba:	a909      	add	r1, sp, #36	@ 0x24
 80019bc:	f000 fa2c 	bl	8001e18 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80019c0:	f64f 7383 	movw	r3, #65411	@ 0xff83
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80019c4:	4824      	ldr	r0, [pc, #144]	@ (8001a58 <BSP_SDRAM_MspInit+0x17c>)
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80019c6:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80019c8:	a909      	add	r1, sp, #36	@ 0x24
 80019ca:	f000 fa25 	bl	8001e18 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 80019ce:	f64f 033f 	movw	r3, #63551	@ 0xf83f
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80019d2:	4822      	ldr	r0, [pc, #136]	@ (8001a5c <BSP_SDRAM_MspInit+0x180>)
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 80019d4:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80019d6:	a909      	add	r1, sp, #36	@ 0x24
 80019d8:	f000 fa1e 	bl	8001e18 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80019dc:	f248 1333 	movw	r3, #33075	@ 0x8133
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80019e0:	481f      	ldr	r0, [pc, #124]	@ (8001a60 <BSP_SDRAM_MspInit+0x184>)
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80019e2:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80019e4:	a909      	add	r1, sp, #36	@ 0x24
 80019e6:	f000 fa17 	bl	8001e18 <HAL_GPIO_Init>
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80019ea:	2180      	movs	r1, #128	@ 0x80
 80019ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019f0:	e9c4 1302 	strd	r1, r3, [r4, #8]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019f4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80019f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019fc:	e9c4 0304 	strd	r0, r3, [r4, #16]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001a00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8001a04:	e9c4 3506 	strd	r3, r5, [r4, #24]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001a08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001a0c:	e9c4 3508 	strd	r3, r5, [r4, #32]
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001a10:	2303      	movs	r3, #3
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001a12:	e9c4 350a 	strd	r3, r5, [r4, #40]	@ 0x28
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8001a16:	6325      	str	r5, [r4, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <BSP_SDRAM_MspInit+0x188>)

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001a1a:	6334      	str	r4, [r6, #48]	@ 0x30

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8001a1c:	4620      	mov	r0, r4
    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001a1e:	6023      	str	r3, [r4, #0]
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001a20:	6065      	str	r5, [r4, #4]
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001a22:	63a6      	str	r6, [r4, #56]	@ 0x38
    HAL_DMA_DeInit(&dmaHandle);
 8001a24:	f000 f9ce 	bl	8001dc4 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f000 f94d 	bl	8001cc8 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001a2e:	2038      	movs	r0, #56	@ 0x38
 8001a30:	462a      	mov	r2, r5
 8001a32:	210f      	movs	r1, #15
 8001a34:	f000 f8de 	bl	8001bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001a38:	2038      	movs	r0, #56	@ 0x38
 8001a3a:	f000 f90d 	bl	8001c58 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001a3e:	b00e      	add	sp, #56	@ 0x38
 8001a40:	bd70      	pop	{r4, r5, r6, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	20006a80 	.word	0x20006a80
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40021400 	.word	0x40021400
 8001a60:	40021800 	.word	0x40021800
 8001a64:	40026410 	.word	0x40026410

08001a68 <BSP_SDRAM_Init>:
{
 8001a68:	b538      	push	{r3, r4, r5, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a6a:	4c1a      	ldr	r4, [pc, #104]	@ (8001ad4 <BSP_SDRAM_Init+0x6c>)
  Timing.LoadToActiveDelay    = 2;
 8001a6c:	4d1a      	ldr	r5, [pc, #104]	@ (8001ad8 <BSP_SDRAM_Init+0x70>)
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <BSP_SDRAM_Init+0x74>)
 8001a70:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001a72:	2107      	movs	r1, #7
 8001a74:	2302      	movs	r3, #2
  Timing.SelfRefreshTime      = 4;
 8001a76:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 8001a78:	e9c5 3100 	strd	r3, r1, [r5]
  Timing.RowCycleDelay        = 7;
 8001a7c:	e9c5 2102 	strd	r2, r1, [r5, #8]
  Timing.RPDelay              = 2;
 8001a80:	e9c5 3304 	strd	r3, r3, [r5, #16]
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a84:	2100      	movs	r1, #0
  Timing.RCDDelay             = 2;
 8001a86:	61ab      	str	r3, [r5, #24]
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e9c4 3101 	strd	r3, r1, [r4, #4]
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a8e:	60e2      	str	r2, [r4, #12]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a90:	2340      	movs	r3, #64	@ 0x40
 8001a92:	2210      	movs	r2, #16
 8001a94:	e9c4 2304 	strd	r2, r3, [r4, #16]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001a98:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a9c:	e9c4 3106 	strd	r3, r1, [r4, #24]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001aa0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001aa4:	e9c4 3108 	strd	r3, r1, [r4, #32]
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001aa8:	4620      	mov	r0, r4
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001aaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aae:	62a3      	str	r3, [r4, #40]	@ 0x28
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001ab0:	f7ff ff14 	bl	80018dc <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f000 fd6e 	bl	8002598 <HAL_SDRAM_Init>
 8001abc:	4c08      	ldr	r4, [pc, #32]	@ (8001ae0 <BSP_SDRAM_Init+0x78>)
 8001abe:	3800      	subs	r0, #0
 8001ac0:	bf18      	it	ne
 8001ac2:	2001      	movne	r0, #1
 8001ac4:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001ac6:	f240 506a 	movw	r0, #1386	@ 0x56a
 8001aca:	f7ff febd 	bl	8001848 <BSP_SDRAM_Initialization_sequence>
}
 8001ace:	7820      	ldrb	r0, [r4, #0]
 8001ad0:	bd38      	pop	{r3, r4, r5, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20006b0c 	.word	0x20006b0c
 8001ad8:	20006af0 	.word	0x20006af0
 8001adc:	a0000140 	.word	0xa0000140
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <HAL_InitTick+0x3c>)
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aee:	fbb3 f3f2 	udiv	r3, r3, r2
 8001af2:	4a0c      	ldr	r2, [pc, #48]	@ (8001b24 <HAL_InitTick+0x40>)
{
 8001af4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af6:	6810      	ldr	r0, [r2, #0]
 8001af8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001afc:	f000 f8ba 	bl	8001c74 <HAL_SYSTICK_Config>
 8001b00:	4604      	mov	r4, r0
 8001b02:	b958      	cbnz	r0, 8001b1c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b04:	2d0f      	cmp	r5, #15
 8001b06:	d809      	bhi.n	8001b1c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f000 f870 	bl	8001bf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b14:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <HAL_InitTick+0x44>)
 8001b16:	4620      	mov	r0, r4
 8001b18:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001b1a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	e7fc      	b.n	8001b1a <HAL_InitTick+0x36>
 8001b20:	20000005 	.word	0x20000005
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000008 	.word	0x20000008

08001b2c <HAL_Init>:
{
 8001b2c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <HAL_Init+0x30>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b36:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b3e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b46:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f000 f841 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff ffc8 	bl	8001ae4 <HAL_InitTick>
  HAL_MspInit();
 8001b54:	f7ff fd4e 	bl	80015f4 <HAL_MspInit>
}
 8001b58:	2000      	movs	r0, #0
 8001b5a:	bd08      	pop	{r3, pc}
 8001b5c:	40023c00 	.word	0x40023c00

08001b60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b60:	4a03      	ldr	r2, [pc, #12]	@ (8001b70 <HAL_IncTick+0x10>)
 8001b62:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <HAL_IncTick+0x14>)
 8001b64:	6811      	ldr	r1, [r2, #0]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	440b      	add	r3, r1
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20006b40 	.word	0x20006b40
 8001b74:	20000005 	.word	0x20000005

08001b78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b78:	4b01      	ldr	r3, [pc, #4]	@ (8001b80 <HAL_GetTick+0x8>)
 8001b7a:	6818      	ldr	r0, [r3, #0]
}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20006b40 	.word	0x20006b40

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b538      	push	{r3, r4, r5, lr}
 8001b86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff fff6 	bl	8001b78 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8e:	bf1c      	itt	ne
 8001b90:	4b05      	ldrne	r3, [pc, #20]	@ (8001ba8 <HAL_Delay+0x24>)
 8001b92:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001b94:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001b96:	bf18      	it	ne
 8001b98:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b9a:	f7ff ffed 	bl	8001b78 <HAL_GetTick>
 8001b9e:	1b43      	subs	r3, r0, r5
 8001ba0:	42a3      	cmp	r3, r4
 8001ba2:	d3fa      	bcc.n	8001b9a <HAL_Delay+0x16>
  {
  }
}
 8001ba4:	bd38      	pop	{r3, r4, r5, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000005 	.word	0x20000005

08001bac <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F4xx_HAL_VERSION;
}
 8001bac:	4800      	ldr	r0, [pc, #0]	@ (8001bb0 <HAL_GetHalVersion+0x4>)
 8001bae:	4770      	bx	lr
 8001bb0:	01080300 	.word	0x01080300

08001bb4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001bb4:	4b01      	ldr	r3, [pc, #4]	@ (8001bbc <HAL_GetREVID+0x8>)
 8001bb6:	6818      	ldr	r0, [r3, #0]
}
 8001bb8:	0c00      	lsrs	r0, r0, #16
 8001bba:	4770      	bx	lr
 8001bbc:	e0042000 	.word	0xe0042000

08001bc0 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001bc0:	4b02      	ldr	r3, [pc, #8]	@ (8001bcc <HAL_GetDEVID+0xc>)
 8001bc2:	6818      	ldr	r0, [r3, #0]
}
 8001bc4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e0042000 	.word	0xe0042000

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4907      	ldr	r1, [pc, #28]	@ (8001bf0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001bd2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001bec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf4:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf6:	b530      	push	{r4, r5, lr}
 8001bf8:	68dc      	ldr	r4, [r3, #12]
 8001bfa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	bf28      	it	cs
 8001c08:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c10:	bf8c      	ite	hi
 8001c12:	3c03      	subhi	r4, #3
 8001c14:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c16:	fa05 f303 	lsl.w	r3, r5, r3
 8001c1a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1e:	40a5      	lsls	r5, r4
 8001c20:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001c26:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	bfac      	ite	ge
 8001c2e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c32:	4a08      	ldrlt	r2, [pc, #32]	@ (8001c54 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	bfb8      	it	lt
 8001c3a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	bfaa      	itet	ge
 8001c42:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001c4c:	bd30      	pop	{r4, r5, pc}
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	e000ed14 	.word	0xe000ed14

08001c58 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	db07      	blt.n	8001c6c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5c:	4a04      	ldr	r2, [pc, #16]	@ (8001c70 <HAL_NVIC_EnableIRQ+0x18>)
 8001c5e:	0941      	lsrs	r1, r0, #5
 8001c60:	2301      	movs	r3, #1
 8001c62:	f000 001f 	and.w	r0, r0, #31
 8001c66:	4083      	lsls	r3, r0
 8001c68:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	3801      	subs	r0, #1
 8001c76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001c7a:	d20b      	bcs.n	8001c94 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	21f0      	movs	r1, #240	@ 0xf0
 8001c86:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c8a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c8e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c90:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c92:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001c94:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c9c:	6803      	ldr	r3, [r0, #0]
{
 8001c9e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ca0:	4c08      	ldr	r4, [pc, #32]	@ (8001cc4 <DMA_CalcBaseAndBitshift+0x28>)
{
 8001ca2:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ca4:	b2d9      	uxtb	r1, r3
 8001ca6:	3910      	subs	r1, #16
 8001ca8:	2018      	movs	r0, #24
 8001caa:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cae:	5c20      	ldrb	r0, [r4, r0]
 8001cb0:	65d0      	str	r0, [r2, #92]	@ 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cb2:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8001cb6:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8001cba:	295f      	cmp	r1, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cbc:	bf88      	it	hi
 8001cbe:	3004      	addhi	r0, #4
 8001cc0:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001cc2:	bd10      	pop	{r4, pc}
 8001cc4:	08011590 	.word	0x08011590

08001cc8 <HAL_DMA_Init>:
{
 8001cc8:	b570      	push	{r4, r5, r6, lr}
 8001cca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff ff54 	bl	8001b78 <HAL_GetTick>
 8001cd0:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d060      	beq.n	8001d98 <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_DMA_DISABLE(hdma);
 8001cdc:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001ce4:	6813      	ldr	r3, [r2, #0]
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cec:	6822      	ldr	r2, [r4, #0]
 8001cee:	6813      	ldr	r3, [r2, #0]
 8001cf0:	07d8      	lsls	r0, r3, #31
 8001cf2:	d42e      	bmi.n	8001d52 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8001cf4:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf6:	4832      	ldr	r0, [pc, #200]	@ (8001dc0 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf8:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cfa:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8001d00:	432b      	orrs	r3, r5
 8001d02:	68e5      	ldr	r5, [r4, #12]
 8001d04:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	6925      	ldr	r5, [r4, #16]
 8001d08:	432b      	orrs	r3, r5
 8001d0a:	6965      	ldr	r5, [r4, #20]
 8001d0c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0e:	69e5      	ldr	r5, [r4, #28]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d14:	6a25      	ldr	r5, [r4, #32]
 8001d16:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d18:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d1a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001d1c:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d1e:	bf02      	ittt	eq
 8001d20:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8001d24:	4335      	orreq	r5, r6
 8001d26:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001d28:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8001d2a:	6953      	ldr	r3, [r2, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2c:	2804      	cmp	r0, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d2e:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001d32:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d36:	d135      	bne.n	8001da4 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 8001d38:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d3a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001d3c:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d3e:	b38d      	cbz	r5, 8001da4 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d40:	b991      	cbnz	r1, 8001d68 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8001d42:	2801      	cmp	r0, #1
 8001d44:	d020      	beq.n	8001d88 <HAL_DMA_Init+0xc0>
 8001d46:	f030 0102 	bics.w	r1, r0, #2
 8001d4a:	d12b      	bne.n	8001da4 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d4c:	01e9      	lsls	r1, r5, #7
 8001d4e:	d529      	bpl.n	8001da4 <HAL_DMA_Init+0xdc>
 8001d50:	e01d      	b.n	8001d8e <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d52:	f7ff ff11 	bl	8001b78 <HAL_GetTick>
 8001d56:	1b40      	subs	r0, r0, r5
 8001d58:	2805      	cmp	r0, #5
 8001d5a:	d9c7      	bls.n	8001cec <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d5c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d5e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d60:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d62:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001d66:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d68:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8001d6c:	d116      	bne.n	8001d9c <HAL_DMA_Init+0xd4>
    switch (tmp)
 8001d6e:	2803      	cmp	r0, #3
 8001d70:	d818      	bhi.n	8001da4 <HAL_DMA_Init+0xdc>
 8001d72:	a101      	add	r1, pc, #4	@ (adr r1, 8001d78 <HAL_DMA_Init+0xb0>)
 8001d74:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8001d78:	08001d8f 	.word	0x08001d8f
 8001d7c:	08001d4d 	.word	0x08001d4d
 8001d80:	08001d8f 	.word	0x08001d8f
 8001d84:	08001d89 	.word	0x08001d89
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d88:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8001d8c:	d10a      	bne.n	8001da4 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d8e:	2340      	movs	r3, #64	@ 0x40
 8001d90:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001d92:	2301      	movs	r3, #1
 8001d94:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8001d98:	2001      	movs	r0, #1
 8001d9a:	e7e4      	b.n	8001d66 <HAL_DMA_Init+0x9e>
    switch (tmp)
 8001d9c:	2802      	cmp	r0, #2
 8001d9e:	d9f6      	bls.n	8001d8e <HAL_DMA_Init+0xc6>
 8001da0:	2803      	cmp	r0, #3
 8001da2:	d0d3      	beq.n	8001d4c <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8001da4:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001da6:	4620      	mov	r0, r4
 8001da8:	f7ff ff78 	bl	8001c9c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dac:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001dae:	233f      	movs	r3, #63	@ 0x3f
 8001db0:	4093      	lsls	r3, r2
 8001db2:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001db6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001dba:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001dbe:	e7d2      	b.n	8001d66 <HAL_DMA_Init+0x9e>
 8001dc0:	f010803f 	.word	0xf010803f

08001dc4 <HAL_DMA_DeInit>:
{
 8001dc4:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8001dc6:	4605      	mov	r5, r0
 8001dc8:	b320      	cbz	r0, 8001e14 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001dca:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	b2dc      	uxtb	r4, r3
 8001dd2:	d01d      	beq.n	8001e10 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001dd4:	6803      	ldr	r3, [r0, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8001ddc:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8001dde:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8001de0:	2221      	movs	r2, #33	@ 0x21
  hdma->Instance->CR   = 0U;
 8001de2:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001de4:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001de6:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001de8:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001dea:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8001dec:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dee:	f7ff ff55 	bl	8001c9c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df2:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001df4:	233f      	movs	r3, #63	@ 0x3f
 8001df6:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8001df8:	e9c5 440f 	strd	r4, r4, [r5, #60]	@ 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001dfc:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
  hdma->XferAbortCallback = NULL;
 8001e00:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e04:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e06:	656c      	str	r4, [r5, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 8001e08:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001e0c:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
}
 8001e10:	4620      	mov	r0, r4
 8001e12:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001e14:	2401      	movs	r4, #1
 8001e16:	e7fb      	b.n	8001e10 <HAL_DMA_DeInit+0x4c>

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1c:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8001fdc <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e20:	4a6c      	ldr	r2, [pc, #432]	@ (8001fd4 <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e22:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e24:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001e26:	2401      	movs	r4, #1
 8001e28:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2a:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8001e2e:	43ac      	bics	r4, r5
 8001e30:	f040 80b7 	bne.w	8001fa2 <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e34:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e36:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e38:	f005 0403 	and.w	r4, r5, #3
 8001e3c:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e40:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e44:	1e67      	subs	r7, r4, #1
 8001e46:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e48:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e4c:	d834      	bhi.n	8001eb8 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001e4e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e50:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e54:	68cf      	ldr	r7, [r1, #12]
 8001e56:	fa07 f708 	lsl.w	r7, r7, r8
 8001e5a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001e5e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e60:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e62:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e66:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001e6a:	409f      	lsls	r7, r3
 8001e6c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001e70:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001e72:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e74:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e78:	688f      	ldr	r7, [r1, #8]
 8001e7a:	fa07 f708 	lsl.w	r7, r7, r8
 8001e7e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e82:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001e84:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	d119      	bne.n	8001ebc <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001e88:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001e8c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e90:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001e94:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e98:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001e9c:	f04f 0e0f 	mov.w	lr, #15
 8001ea0:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001ea4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ea8:	690f      	ldr	r7, [r1, #16]
 8001eaa:	fa07 f70b 	lsl.w	r7, r7, fp
 8001eae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001eb2:	f8ca 7020 	str.w	r7, [sl, #32]
 8001eb6:	e001      	b.n	8001ebc <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb8:	2c03      	cmp	r4, #3
 8001eba:	d1da      	bne.n	8001e72 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001ebc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ebe:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec2:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec6:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec8:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001ecc:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ece:	d068      	beq.n	8001fa2 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed0:	2400      	movs	r4, #0
 8001ed2:	9401      	str	r4, [sp, #4]
 8001ed4:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8001ed8:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001edc:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8001ee0:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8001ee4:	f023 0703 	bic.w	r7, r3, #3
 8001ee8:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001eec:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8001ef0:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8001ef4:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001efc:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f00:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001f04:	240f      	movs	r4, #15
 8001f06:	fa04 f40c 	lsl.w	r4, r4, ip
 8001f0a:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f0e:	4c32      	ldr	r4, [pc, #200]	@ (8001fd8 <HAL_GPIO_Init+0x1c0>)
 8001f10:	42a0      	cmp	r0, r4
 8001f12:	d04d      	beq.n	8001fb0 <HAL_GPIO_Init+0x198>
 8001f14:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f18:	42a0      	cmp	r0, r4
 8001f1a:	d04b      	beq.n	8001fb4 <HAL_GPIO_Init+0x19c>
 8001f1c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f20:	42a0      	cmp	r0, r4
 8001f22:	d049      	beq.n	8001fb8 <HAL_GPIO_Init+0x1a0>
 8001f24:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f28:	42a0      	cmp	r0, r4
 8001f2a:	d047      	beq.n	8001fbc <HAL_GPIO_Init+0x1a4>
 8001f2c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f30:	42a0      	cmp	r0, r4
 8001f32:	d045      	beq.n	8001fc0 <HAL_GPIO_Init+0x1a8>
 8001f34:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f38:	42a0      	cmp	r0, r4
 8001f3a:	d043      	beq.n	8001fc4 <HAL_GPIO_Init+0x1ac>
 8001f3c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f40:	42a0      	cmp	r0, r4
 8001f42:	d041      	beq.n	8001fc8 <HAL_GPIO_Init+0x1b0>
 8001f44:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f48:	42a0      	cmp	r0, r4
 8001f4a:	d03f      	beq.n	8001fcc <HAL_GPIO_Init+0x1b4>
 8001f4c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f50:	42a0      	cmp	r0, r4
 8001f52:	d03d      	beq.n	8001fd0 <HAL_GPIO_Init+0x1b8>
 8001f54:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f58:	42a0      	cmp	r0, r4
 8001f5a:	bf14      	ite	ne
 8001f5c:	240a      	movne	r4, #10
 8001f5e:	2409      	moveq	r4, #9
 8001f60:	fa04 f40c 	lsl.w	r4, r4, ip
 8001f64:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f68:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8001f6a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f6e:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001f72:	bf0c      	ite	eq
 8001f74:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001f76:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8001f78:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001f7a:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f7c:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001f80:	bf0c      	ite	eq
 8001f82:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001f84:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8001f86:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8001f88:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f8a:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	bf0c      	ite	eq
 8001f90:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001f92:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8001f94:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f96:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f98:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001f9a:	bf54      	ite	pl
 8001f9c:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001f9e:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8001fa0:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	2b10      	cmp	r3, #16
 8001fa6:	f47f af3d 	bne.w	8001e24 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001faa:	b003      	add	sp, #12
 8001fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fb0:	2400      	movs	r4, #0
 8001fb2:	e7d5      	b.n	8001f60 <HAL_GPIO_Init+0x148>
 8001fb4:	2401      	movs	r4, #1
 8001fb6:	e7d3      	b.n	8001f60 <HAL_GPIO_Init+0x148>
 8001fb8:	2402      	movs	r4, #2
 8001fba:	e7d1      	b.n	8001f60 <HAL_GPIO_Init+0x148>
 8001fbc:	2403      	movs	r4, #3
 8001fbe:	e7cf      	b.n	8001f60 <HAL_GPIO_Init+0x148>
 8001fc0:	2404      	movs	r4, #4
 8001fc2:	e7cd      	b.n	8001f60 <HAL_GPIO_Init+0x148>
 8001fc4:	2405      	movs	r4, #5
 8001fc6:	e7cb      	b.n	8001f60 <HAL_GPIO_Init+0x148>
 8001fc8:	2406      	movs	r4, #6
 8001fca:	e7c9      	b.n	8001f60 <HAL_GPIO_Init+0x148>
 8001fcc:	2407      	movs	r4, #7
 8001fce:	e7c7      	b.n	8001f60 <HAL_GPIO_Init+0x148>
 8001fd0:	2408      	movs	r4, #8
 8001fd2:	e7c5      	b.n	8001f60 <HAL_GPIO_Init+0x148>
 8001fd4:	40013c00 	.word	0x40013c00
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	b10a      	cbz	r2, 8001fe6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fe2:	6181      	str	r1, [r0, #24]
  }
}
 8001fe4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fe6:	0409      	lsls	r1, r1, #16
 8001fe8:	e7fb      	b.n	8001fe2 <HAL_GPIO_WritePin+0x2>
	...

08001fec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ff4:	4d18      	ldr	r5, [pc, #96]	@ (8002058 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ff8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ffc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002008:	4b14      	ldr	r3, [pc, #80]	@ (800205c <HAL_PWREx_EnableOverDrive+0x70>)
 800200a:	2201      	movs	r2, #1
 800200c:	641a      	str	r2, [r3, #64]	@ 0x40
  tickstart = HAL_GetTick();
 800200e:	f7ff fdb3 	bl	8001b78 <HAL_GetTick>
 8002012:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002014:	686b      	ldr	r3, [r5, #4]
 8002016:	03da      	lsls	r2, r3, #15
 8002018:	d50b      	bpl.n	8002032 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800201a:	4b10      	ldr	r3, [pc, #64]	@ (800205c <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800201c:	4d0e      	ldr	r5, [pc, #56]	@ (8002058 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800201e:	2201      	movs	r2, #1
 8002020:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 8002022:	f7ff fda9 	bl	8001b78 <HAL_GetTick>
 8002026:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002028:	686b      	ldr	r3, [r5, #4]
 800202a:	039b      	lsls	r3, r3, #14
 800202c:	d50a      	bpl.n	8002044 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800202e:	2000      	movs	r0, #0
 8002030:	e006      	b.n	8002040 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002032:	f7ff fda1 	bl	8001b78 <HAL_GetTick>
 8002036:	1b00      	subs	r0, r0, r4
 8002038:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800203c:	d9ea      	bls.n	8002014 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 800203e:	2003      	movs	r0, #3
}
 8002040:	b003      	add	sp, #12
 8002042:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002044:	f7ff fd98 	bl	8001b78 <HAL_GetTick>
 8002048:	1b00      	subs	r0, r0, r4
 800204a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800204e:	d9eb      	bls.n	8002028 <HAL_PWREx_EnableOverDrive+0x3c>
 8002050:	e7f5      	b.n	800203e <HAL_PWREx_EnableOverDrive+0x52>
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	40007000 	.word	0x40007000
 800205c:	420e0000 	.word	0x420e0000

08002060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002060:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002064:	4604      	mov	r4, r0
 8002066:	b340      	cbz	r0, 80020ba <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002068:	6803      	ldr	r3, [r0, #0]
 800206a:	07de      	lsls	r6, r3, #31
 800206c:	d410      	bmi.n	8002090 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	079d      	lsls	r5, r3, #30
 8002072:	d45b      	bmi.n	800212c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	0719      	lsls	r1, r3, #28
 8002078:	f100 809d 	bmi.w	80021b6 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	075a      	lsls	r2, r3, #29
 8002080:	f100 80bd 	bmi.w	80021fe <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002084:	69a3      	ldr	r3, [r4, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 8124 	bne.w	80022d4 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800208c:	2000      	movs	r0, #0
 800208e:	e02c      	b.n	80020ea <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002090:	4b8d      	ldr	r3, [pc, #564]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	f002 020c 	and.w	r2, r2, #12
 8002098:	2a04      	cmp	r2, #4
 800209a:	d007      	beq.n	80020ac <HAL_RCC_OscConfig+0x4c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020a2:	2a08      	cmp	r2, #8
 80020a4:	d10b      	bne.n	80020be <HAL_RCC_OscConfig+0x5e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	0259      	lsls	r1, r3, #9
 80020aa:	d508      	bpl.n	80020be <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	4b86      	ldr	r3, [pc, #536]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	039a      	lsls	r2, r3, #14
 80020b2:	d5dc      	bpl.n	800206e <HAL_RCC_OscConfig+0xe>
 80020b4:	6863      	ldr	r3, [r4, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1d9      	bne.n	800206e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80020ba:	2001      	movs	r0, #1
 80020bc:	e015      	b.n	80020ea <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	4d81      	ldr	r5, [pc, #516]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 80020c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c6:	d113      	bne.n	80020f0 <HAL_RCC_OscConfig+0x90>
 80020c8:	682b      	ldr	r3, [r5, #0]
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80020d0:	f7ff fd52 	bl	8001b78 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d4:	4e7c      	ldr	r6, [pc, #496]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80020d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d8:	6833      	ldr	r3, [r6, #0]
 80020da:	039b      	lsls	r3, r3, #14
 80020dc:	d4c7      	bmi.n	800206e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020de:	f7ff fd4b 	bl	8001b78 <HAL_GetTick>
 80020e2:	1b40      	subs	r0, r0, r5
 80020e4:	2864      	cmp	r0, #100	@ 0x64
 80020e6:	d9f7      	bls.n	80020d8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80020e8:	2003      	movs	r0, #3
}
 80020ea:	b002      	add	sp, #8
 80020ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020f4:	d104      	bne.n	8002100 <HAL_RCC_OscConfig+0xa0>
 80020f6:	682b      	ldr	r3, [r5, #0]
 80020f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020fc:	602b      	str	r3, [r5, #0]
 80020fe:	e7e3      	b.n	80020c8 <HAL_RCC_OscConfig+0x68>
 8002100:	682a      	ldr	r2, [r5, #0]
 8002102:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002106:	602a      	str	r2, [r5, #0]
 8002108:	682a      	ldr	r2, [r5, #0]
 800210a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800210e:	602a      	str	r2, [r5, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1dd      	bne.n	80020d0 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8002114:	f7ff fd30 	bl	8001b78 <HAL_GetTick>
 8002118:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	682b      	ldr	r3, [r5, #0]
 800211c:	039f      	lsls	r7, r3, #14
 800211e:	d5a6      	bpl.n	800206e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff fd2a 	bl	8001b78 <HAL_GetTick>
 8002124:	1b80      	subs	r0, r0, r6
 8002126:	2864      	cmp	r0, #100	@ 0x64
 8002128:	d9f7      	bls.n	800211a <HAL_RCC_OscConfig+0xba>
 800212a:	e7dd      	b.n	80020e8 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800212c:	4b66      	ldr	r3, [pc, #408]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	f012 0f0c 	tst.w	r2, #12
 8002134:	d007      	beq.n	8002146 <HAL_RCC_OscConfig+0xe6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800213c:	2a08      	cmp	r2, #8
 800213e:	d111      	bne.n	8002164 <HAL_RCC_OscConfig+0x104>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	025d      	lsls	r5, r3, #9
 8002144:	d40e      	bmi.n	8002164 <HAL_RCC_OscConfig+0x104>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	4a60      	ldr	r2, [pc, #384]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	0799      	lsls	r1, r3, #30
 800214c:	d502      	bpl.n	8002154 <HAL_RCC_OscConfig+0xf4>
 800214e:	68e3      	ldr	r3, [r4, #12]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d1b2      	bne.n	80020ba <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	6813      	ldr	r3, [r2, #0]
 8002156:	6921      	ldr	r1, [r4, #16]
 8002158:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800215c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002160:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	e787      	b.n	8002074 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002164:	68e2      	ldr	r2, [r4, #12]
 8002166:	4b59      	ldr	r3, [pc, #356]	@ (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002168:	b1b2      	cbz	r2, 8002198 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800216e:	f7ff fd03 	bl	8001b78 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002172:	4d55      	ldr	r5, [pc, #340]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8002174:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	682b      	ldr	r3, [r5, #0]
 8002178:	079b      	lsls	r3, r3, #30
 800217a:	d507      	bpl.n	800218c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217c:	682b      	ldr	r3, [r5, #0]
 800217e:	6922      	ldr	r2, [r4, #16]
 8002180:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002184:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002188:	602b      	str	r3, [r5, #0]
 800218a:	e773      	b.n	8002074 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218c:	f7ff fcf4 	bl	8001b78 <HAL_GetTick>
 8002190:	1b80      	subs	r0, r0, r6
 8002192:	2802      	cmp	r0, #2
 8002194:	d9ef      	bls.n	8002176 <HAL_RCC_OscConfig+0x116>
 8002196:	e7a7      	b.n	80020e8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8002198:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800219a:	f7ff fced 	bl	8001b78 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219e:	4e4a      	ldr	r6, [pc, #296]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80021a0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a2:	6833      	ldr	r3, [r6, #0]
 80021a4:	079f      	lsls	r7, r3, #30
 80021a6:	f57f af65 	bpl.w	8002074 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021aa:	f7ff fce5 	bl	8001b78 <HAL_GetTick>
 80021ae:	1b40      	subs	r0, r0, r5
 80021b0:	2802      	cmp	r0, #2
 80021b2:	d9f6      	bls.n	80021a2 <HAL_RCC_OscConfig+0x142>
 80021b4:	e798      	b.n	80020e8 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021b6:	6962      	ldr	r2, [r4, #20]
 80021b8:	4b44      	ldr	r3, [pc, #272]	@ (80022cc <HAL_RCC_OscConfig+0x26c>)
 80021ba:	b182      	cbz	r2, 80021de <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80021bc:	2201      	movs	r2, #1
 80021be:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80021c2:	f7ff fcd9 	bl	8001b78 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c6:	4e40      	ldr	r6, [pc, #256]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80021c8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80021cc:	079b      	lsls	r3, r3, #30
 80021ce:	f53f af55 	bmi.w	800207c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d2:	f7ff fcd1 	bl	8001b78 <HAL_GetTick>
 80021d6:	1b40      	subs	r0, r0, r5
 80021d8:	2802      	cmp	r0, #2
 80021da:	d9f6      	bls.n	80021ca <HAL_RCC_OscConfig+0x16a>
 80021dc:	e784      	b.n	80020e8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80021de:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80021e2:	f7ff fcc9 	bl	8001b78 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e6:	4e38      	ldr	r6, [pc, #224]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80021e8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ea:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80021ec:	079f      	lsls	r7, r3, #30
 80021ee:	f57f af45 	bpl.w	800207c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f2:	f7ff fcc1 	bl	8001b78 <HAL_GetTick>
 80021f6:	1b40      	subs	r0, r0, r5
 80021f8:	2802      	cmp	r0, #2
 80021fa:	d9f6      	bls.n	80021ea <HAL_RCC_OscConfig+0x18a>
 80021fc:	e774      	b.n	80020e8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fe:	4b32      	ldr	r3, [pc, #200]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002200:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002202:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8002206:	d128      	bne.n	800225a <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002208:	9201      	str	r2, [sp, #4]
 800220a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800220c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002210:	641a      	str	r2, [r3, #64]	@ 0x40
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800221c:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	4d2c      	ldr	r5, [pc, #176]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002220:	682b      	ldr	r3, [r5, #0]
 8002222:	05d8      	lsls	r0, r3, #23
 8002224:	d51b      	bpl.n	800225e <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002226:	68a3      	ldr	r3, [r4, #8]
 8002228:	4d27      	ldr	r5, [pc, #156]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 800222a:	2b01      	cmp	r3, #1
 800222c:	d127      	bne.n	800227e <HAL_RCC_OscConfig+0x21e>
 800222e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002236:	f7ff fc9f 	bl	8001b78 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223a:	4e23      	ldr	r6, [pc, #140]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 800223c:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002242:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002244:	079a      	lsls	r2, r3, #30
 8002246:	d539      	bpl.n	80022bc <HAL_RCC_OscConfig+0x25c>
    if (pwrclkchanged == SET)
 8002248:	2f00      	cmp	r7, #0
 800224a:	f43f af1b 	beq.w	8002084 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4a1e      	ldr	r2, [pc, #120]	@ (80022c8 <HAL_RCC_OscConfig+0x268>)
 8002250:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002256:	6413      	str	r3, [r2, #64]	@ 0x40
 8002258:	e714      	b.n	8002084 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800225a:	2700      	movs	r7, #0
 800225c:	e7df      	b.n	800221e <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225e:	682b      	ldr	r3, [r5, #0]
 8002260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002264:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002266:	f7ff fc87 	bl	8001b78 <HAL_GetTick>
 800226a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	682b      	ldr	r3, [r5, #0]
 800226e:	05d9      	lsls	r1, r3, #23
 8002270:	d4d9      	bmi.n	8002226 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002272:	f7ff fc81 	bl	8001b78 <HAL_GetTick>
 8002276:	1b80      	subs	r0, r0, r6
 8002278:	2802      	cmp	r0, #2
 800227a:	d9f7      	bls.n	800226c <HAL_RCC_OscConfig+0x20c>
 800227c:	e734      	b.n	80020e8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227e:	2b05      	cmp	r3, #5
 8002280:	d104      	bne.n	800228c <HAL_RCC_OscConfig+0x22c>
 8002282:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	672b      	str	r3, [r5, #112]	@ 0x70
 800228a:	e7d0      	b.n	800222e <HAL_RCC_OscConfig+0x1ce>
 800228c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	672a      	str	r2, [r5, #112]	@ 0x70
 8002294:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8002296:	f022 0204 	bic.w	r2, r2, #4
 800229a:	672a      	str	r2, [r5, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ca      	bne.n	8002236 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 80022a0:	f7ff fc6a 	bl	8001b78 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80022a8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022aa:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80022ac:	079b      	lsls	r3, r3, #30
 80022ae:	d5cb      	bpl.n	8002248 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7ff fc62 	bl	8001b78 <HAL_GetTick>
 80022b4:	1b80      	subs	r0, r0, r6
 80022b6:	4540      	cmp	r0, r8
 80022b8:	d9f7      	bls.n	80022aa <HAL_RCC_OscConfig+0x24a>
 80022ba:	e715      	b.n	80020e8 <HAL_RCC_OscConfig+0x88>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022bc:	f7ff fc5c 	bl	8001b78 <HAL_GetTick>
 80022c0:	1b40      	subs	r0, r0, r5
 80022c2:	4540      	cmp	r0, r8
 80022c4:	d9bd      	bls.n	8002242 <HAL_RCC_OscConfig+0x1e2>
 80022c6:	e70f      	b.n	80020e8 <HAL_RCC_OscConfig+0x88>
 80022c8:	40023800 	.word	0x40023800
 80022cc:	42470000 	.word	0x42470000
 80022d0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022d4:	4d37      	ldr	r5, [pc, #220]	@ (80023b4 <HAL_RCC_OscConfig+0x354>)
 80022d6:	68aa      	ldr	r2, [r5, #8]
 80022d8:	f002 020c 	and.w	r2, r2, #12
 80022dc:	2a08      	cmp	r2, #8
 80022de:	d03e      	beq.n	800235e <HAL_RCC_OscConfig+0x2fe>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	4b35      	ldr	r3, [pc, #212]	@ (80023b8 <HAL_RCC_OscConfig+0x358>)
 80022e4:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 80022e8:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ea:	d12b      	bne.n	8002344 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 80022ec:	f7ff fc44 	bl	8001b78 <HAL_GetTick>
 80022f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	682b      	ldr	r3, [r5, #0]
 80022f4:	0199      	lsls	r1, r3, #6
 80022f6:	d41f      	bmi.n	8002338 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022f8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002300:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002304:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002306:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800230a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800230c:	0852      	lsrs	r2, r2, #1
 800230e:	3a01      	subs	r2, #1
 8002310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002314:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002316:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <HAL_RCC_OscConfig+0x358>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002318:	4d26      	ldr	r5, [pc, #152]	@ (80023b4 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 800231a:	2201      	movs	r2, #1
 800231c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800231e:	f7ff fc2b 	bl	8001b78 <HAL_GetTick>
 8002322:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002324:	682b      	ldr	r3, [r5, #0]
 8002326:	019a      	lsls	r2, r3, #6
 8002328:	f53f aeb0 	bmi.w	800208c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7ff fc24 	bl	8001b78 <HAL_GetTick>
 8002330:	1b00      	subs	r0, r0, r4
 8002332:	2802      	cmp	r0, #2
 8002334:	d9f6      	bls.n	8002324 <HAL_RCC_OscConfig+0x2c4>
 8002336:	e6d7      	b.n	80020e8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002338:	f7ff fc1e 	bl	8001b78 <HAL_GetTick>
 800233c:	1b80      	subs	r0, r0, r6
 800233e:	2802      	cmp	r0, #2
 8002340:	d9d7      	bls.n	80022f2 <HAL_RCC_OscConfig+0x292>
 8002342:	e6d1      	b.n	80020e8 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8002344:	f7ff fc18 	bl	8001b78 <HAL_GetTick>
 8002348:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	682b      	ldr	r3, [r5, #0]
 800234c:	019b      	lsls	r3, r3, #6
 800234e:	f57f ae9d 	bpl.w	800208c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002352:	f7ff fc11 	bl	8001b78 <HAL_GetTick>
 8002356:	1b00      	subs	r0, r0, r4
 8002358:	2802      	cmp	r0, #2
 800235a:	d9f6      	bls.n	800234a <HAL_RCC_OscConfig+0x2ea>
 800235c:	e6c4      	b.n	80020e8 <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800235e:	2b01      	cmp	r3, #1
 8002360:	f43f aeab 	beq.w	80020ba <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8002364:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002366:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002368:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236c:	4291      	cmp	r1, r2
 800236e:	f47f aea4 	bne.w	80020ba <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002374:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002378:	428a      	cmp	r2, r1
 800237a:	f47f ae9e 	bne.w	80020ba <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800237e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002380:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002384:	401a      	ands	r2, r3
 8002386:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800238a:	f47f ae96 	bne.w	80020ba <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800238e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002390:	0852      	lsrs	r2, r2, #1
 8002392:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002396:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002398:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800239c:	f47f ae8d 	bne.w	80020ba <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023a0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80023a2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a6:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80023aa:	bf14      	ite	ne
 80023ac:	2001      	movne	r0, #1
 80023ae:	2000      	moveq	r0, #0
 80023b0:	e69b      	b.n	80020ea <HAL_RCC_OscConfig+0x8a>
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	42470000 	.word	0x42470000

080023bc <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023bc:	4913      	ldr	r1, [pc, #76]	@ (800240c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80023be:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c0:	688b      	ldr	r3, [r1, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d01c      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x48>
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d11c      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ce:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023d0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d2:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023d4:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d8:	bf14      	ite	ne
 80023da:	480d      	ldrne	r0, [pc, #52]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023dc:	480d      	ldreq	r0, [pc, #52]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023de:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80023e2:	bf18      	it	ne
 80023e4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ea:	fba1 0100 	umull	r0, r1, r1, r0
 80023ee:	f7fe fcf9 	bl	8000de4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_RCC_GetSysClockFreq+0x50>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80023fa:	3301      	adds	r3, #1
 80023fc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80023fe:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002402:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002404:	4802      	ldr	r0, [pc, #8]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x54>)
 8002406:	e7fc      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002408:	4802      	ldr	r0, [pc, #8]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800240a:	e7fa      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x46>
 800240c:	40023800 	.word	0x40023800
 8002410:	007a1200 	.word	0x007a1200
 8002414:	00f42400 	.word	0x00f42400

08002418 <HAL_RCC_ClockConfig>:
{
 8002418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800241c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800241e:	4604      	mov	r4, r0
 8002420:	b910      	cbnz	r0, 8002428 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002422:	2001      	movs	r0, #1
}
 8002424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002428:	4b43      	ldr	r3, [pc, #268]	@ (8002538 <HAL_RCC_ClockConfig+0x120>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	f002 020f 	and.w	r2, r2, #15
 8002430:	428a      	cmp	r2, r1
 8002432:	d328      	bcc.n	8002486 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002434:	6821      	ldr	r1, [r4, #0]
 8002436:	078f      	lsls	r7, r1, #30
 8002438:	d42d      	bmi.n	8002496 <HAL_RCC_ClockConfig+0x7e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	07c8      	lsls	r0, r1, #31
 800243c:	d440      	bmi.n	80024c0 <HAL_RCC_ClockConfig+0xa8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800243e:	4b3e      	ldr	r3, [pc, #248]	@ (8002538 <HAL_RCC_ClockConfig+0x120>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	f002 020f 	and.w	r2, r2, #15
 8002446:	42aa      	cmp	r2, r5
 8002448:	d865      	bhi.n	8002516 <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	0751      	lsls	r1, r2, #29
 800244e:	d46b      	bmi.n	8002528 <HAL_RCC_ClockConfig+0x110>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	0713      	lsls	r3, r2, #28
 8002452:	d507      	bpl.n	8002464 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002454:	4a39      	ldr	r2, [pc, #228]	@ (800253c <HAL_RCC_ClockConfig+0x124>)
 8002456:	6921      	ldr	r1, [r4, #16]
 8002458:	6893      	ldr	r3, [r2, #8]
 800245a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800245e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002462:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002464:	f7ff ffaa 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8002468:	4b34      	ldr	r3, [pc, #208]	@ (800253c <HAL_RCC_ClockConfig+0x124>)
 800246a:	4a35      	ldr	r2, [pc, #212]	@ (8002540 <HAL_RCC_ClockConfig+0x128>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	40d8      	lsrs	r0, r3
 8002476:	4b33      	ldr	r3, [pc, #204]	@ (8002544 <HAL_RCC_ClockConfig+0x12c>)
 8002478:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800247a:	4b33      	ldr	r3, [pc, #204]	@ (8002548 <HAL_RCC_ClockConfig+0x130>)
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	f7ff fb31 	bl	8001ae4 <HAL_InitTick>
  return HAL_OK;
 8002482:	2000      	movs	r0, #0
 8002484:	e7ce      	b.n	8002424 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	b2ca      	uxtb	r2, r1
 8002488:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	428b      	cmp	r3, r1
 8002492:	d1c6      	bne.n	8002422 <HAL_RCC_ClockConfig+0xa>
 8002494:	e7ce      	b.n	8002434 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002496:	4b29      	ldr	r3, [pc, #164]	@ (800253c <HAL_RCC_ClockConfig+0x124>)
 8002498:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800249c:	bf1e      	ittt	ne
 800249e:	689a      	ldrne	r2, [r3, #8]
 80024a0:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 80024a4:	609a      	strne	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a8:	bf42      	ittt	mi
 80024aa:	689a      	ldrmi	r2, [r3, #8]
 80024ac:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 80024b0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	68a0      	ldr	r0, [r4, #8]
 80024b6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80024ba:	4302      	orrs	r2, r0
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	e7bc      	b.n	800243a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c0:	6862      	ldr	r2, [r4, #4]
 80024c2:	4b1e      	ldr	r3, [pc, #120]	@ (800253c <HAL_RCC_ClockConfig+0x124>)
 80024c4:	2a01      	cmp	r2, #1
 80024c6:	d11c      	bne.n	8002502 <HAL_RCC_ClockConfig+0xea>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ce:	d0a8      	beq.n	8002422 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d0:	4e1a      	ldr	r6, [pc, #104]	@ (800253c <HAL_RCC_ClockConfig+0x124>)
 80024d2:	68b3      	ldr	r3, [r6, #8]
 80024d4:	f023 0303 	bic.w	r3, r3, #3
 80024d8:	4313      	orrs	r3, r2
 80024da:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80024dc:	f7ff fb4c 	bl	8001b78 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80024e4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	68b3      	ldr	r3, [r6, #8]
 80024e8:	6862      	ldr	r2, [r4, #4]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80024f2:	d0a4      	beq.n	800243e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f4:	f7ff fb40 	bl	8001b78 <HAL_GetTick>
 80024f8:	1bc0      	subs	r0, r0, r7
 80024fa:	4540      	cmp	r0, r8
 80024fc:	d9f3      	bls.n	80024e6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80024fe:	2003      	movs	r0, #3
 8002500:	e790      	b.n	8002424 <HAL_RCC_ClockConfig+0xc>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002502:	1e91      	subs	r1, r2, #2
 8002504:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002506:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002508:	d802      	bhi.n	8002510 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800250e:	e7de      	b.n	80024ce <HAL_RCC_ClockConfig+0xb6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	f013 0f02 	tst.w	r3, #2
 8002514:	e7db      	b.n	80024ce <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	b2ea      	uxtb	r2, r5
 8002518:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	42ab      	cmp	r3, r5
 8002522:	f47f af7e 	bne.w	8002422 <HAL_RCC_ClockConfig+0xa>
 8002526:	e790      	b.n	800244a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002528:	4904      	ldr	r1, [pc, #16]	@ (800253c <HAL_RCC_ClockConfig+0x124>)
 800252a:	68e0      	ldr	r0, [r4, #12]
 800252c:	688b      	ldr	r3, [r1, #8]
 800252e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002532:	4303      	orrs	r3, r0
 8002534:	608b      	str	r3, [r1, #8]
 8002536:	e78b      	b.n	8002450 <HAL_RCC_ClockConfig+0x38>
 8002538:	40023c00 	.word	0x40023c00
 800253c:	40023800 	.word	0x40023800
 8002540:	08011580 	.word	0x08011580
 8002544:	20000000 	.word	0x20000000
 8002548:	20000008 	.word	0x20000008

0800254c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800254c:	4b01      	ldr	r3, [pc, #4]	@ (8002554 <HAL_RCC_GetHCLKFreq+0x8>)
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000000 	.word	0x20000000

08002558 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002558:	4b04      	ldr	r3, [pc, #16]	@ (800256c <HAL_RCC_GetPCLK1Freq+0x14>)
 800255a:	4a05      	ldr	r2, [pc, #20]	@ (8002570 <HAL_RCC_GetPCLK1Freq+0x18>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002562:	5cd3      	ldrb	r3, [r2, r3]
 8002564:	4a03      	ldr	r2, [pc, #12]	@ (8002574 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002566:	6810      	ldr	r0, [r2, #0]
}
 8002568:	40d8      	lsrs	r0, r3
 800256a:	4770      	bx	lr
 800256c:	40023800 	.word	0x40023800
 8002570:	08011578 	.word	0x08011578
 8002574:	20000000 	.word	0x20000000

08002578 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002578:	4b04      	ldr	r3, [pc, #16]	@ (800258c <HAL_RCC_GetPCLK2Freq+0x14>)
 800257a:	4a05      	ldr	r2, [pc, #20]	@ (8002590 <HAL_RCC_GetPCLK2Freq+0x18>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	4a03      	ldr	r2, [pc, #12]	@ (8002594 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002586:	6810      	ldr	r0, [r2, #0]
}
 8002588:	40d8      	lsrs	r0, r3
 800258a:	4770      	bx	lr
 800258c:	40023800 	.word	0x40023800
 8002590:	08011578 	.word	0x08011578
 8002594:	20000000 	.word	0x20000000

08002598 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8002598:	b538      	push	{r3, r4, r5, lr}
 800259a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800259c:	4604      	mov	r4, r0
 800259e:	b1c8      	cbz	r0, 80025d4 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80025a0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80025a4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80025a8:	b91b      	cbnz	r3, 80025b2 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80025aa:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80025ae:	f7ff f881 	bl	80016b4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80025b2:	2302      	movs	r3, #2
 80025b4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80025b8:	1d21      	adds	r1, r4, #4
 80025ba:	6820      	ldr	r0, [r4, #0]
 80025bc:	f000 f9d4 	bl	8002968 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80025c0:	6862      	ldr	r2, [r4, #4]
 80025c2:	6820      	ldr	r0, [r4, #0]
 80025c4:	4629      	mov	r1, r5
 80025c6:	f000 fa05 	bl	80029d4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 80025d0:	2000      	movs	r0, #0
}
 80025d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80025d4:	2001      	movs	r0, #1
 80025d6:	e7fc      	b.n	80025d2 <HAL_SDRAM_Init+0x3a>

080025d8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80025d8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80025da:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80025de:	2b02      	cmp	r3, #2
{
 80025e0:	4605      	mov	r5, r0
 80025e2:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80025e4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80025e6:	d012      	beq.n	800260e <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80025e8:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 80025ec:	2c01      	cmp	r4, #1
 80025ee:	d10f      	bne.n	8002610 <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80025f0:	2302      	movs	r3, #2
 80025f2:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80025f6:	6828      	ldr	r0, [r5, #0]
 80025f8:	f000 fa22 	bl	8002a40 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80025fc:	6833      	ldr	r3, [r6, #0]
 80025fe:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8002600:	bf06      	itte	eq
 8002602:	2305      	moveq	r3, #5
 8002604:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8002608:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800260c:	2000      	movs	r0, #0
}
 800260e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002610:	2001      	movs	r0, #1
 8002612:	e7fc      	b.n	800260e <HAL_SDRAM_SendCommand+0x36>

08002614 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8002614:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002616:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800261a:	2b02      	cmp	r3, #2
{
 800261c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800261e:	b2d8      	uxtb	r0, r3
 8002620:	d00d      	beq.n	800263e <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8002622:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8002626:	2b01      	cmp	r3, #1
 8002628:	b2dd      	uxtb	r5, r3
 800262a:	d109      	bne.n	8002640 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800262c:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800262e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002630:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8002634:	f000 fa28 	bl	8002a88 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002638:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800263c:	2000      	movs	r0, #0
}
 800263e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002640:	2001      	movs	r0, #1
 8002642:	e7fc      	b.n	800263e <HAL_SDRAM_ProgramRefreshRate+0x2a>

08002644 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002644:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002646:	f102 030c 	add.w	r3, r2, #12
 800264a:	e853 3f00 	ldrex	r3, [r3]
 800264e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002652:	320c      	adds	r2, #12
 8002654:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002658:	6802      	ldr	r2, [r0, #0]
 800265a:	2900      	cmp	r1, #0
 800265c:	d1f2      	bne.n	8002644 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265e:	f102 0314 	add.w	r3, r2, #20
 8002662:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002666:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266a:	f102 0c14 	add.w	ip, r2, #20
 800266e:	e84c 3100 	strex	r1, r3, [ip]
 8002672:	2900      	cmp	r1, #0
 8002674:	d1f3      	bne.n	800265e <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002676:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10b      	bne.n	8002694 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267c:	f102 030c 	add.w	r3, r2, #12
 8002680:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002684:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002688:	f102 0c0c 	add.w	ip, r2, #12
 800268c:	e84c 3100 	strex	r1, r3, [ip]
 8002690:	2900      	cmp	r1, #0
 8002692:	d1f3      	bne.n	800267c <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002694:	2320      	movs	r3, #32
 8002696:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269a:	2300      	movs	r3, #0
 800269c:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800269e:	4770      	bx	lr

080026a0 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a0:	6802      	ldr	r2, [r0, #0]
 80026a2:	68c1      	ldr	r1, [r0, #12]
{
 80026a4:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a6:	6913      	ldr	r3, [r2, #16]
 80026a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6113      	str	r3, [r2, #16]
{
 80026b0:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026b2:	6883      	ldr	r3, [r0, #8]
 80026b4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80026b6:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026b8:	4303      	orrs	r3, r0
 80026ba:	6968      	ldr	r0, [r5, #20]
 80026bc:	4303      	orrs	r3, r0
 80026be:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 80026c0:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 80026c4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026c8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80026ca:	430b      	orrs	r3, r1
 80026cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026ce:	6953      	ldr	r3, [r2, #20]
 80026d0:	69a9      	ldr	r1, [r5, #24]
 80026d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d6:	430b      	orrs	r3, r1
 80026d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026da:	4b1f      	ldr	r3, [pc, #124]	@ (8002758 <UART_SetConfig+0xb8>)
 80026dc:	429a      	cmp	r2, r3
 80026de:	d003      	beq.n	80026e8 <UART_SetConfig+0x48>
 80026e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d124      	bne.n	8002732 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026e8:	f7ff ff46 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ec:	69ea      	ldr	r2, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026ee:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026f0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026f4:	e9d5 4300 	ldrd	r4, r3, [r5]
 80026f8:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026fc:	d11c      	bne.n	8002738 <UART_SetConfig+0x98>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026fe:	18da      	adds	r2, r3, r3
 8002700:	f04f 0500 	mov.w	r5, #0
 8002704:	eb45 0305 	adc.w	r3, r5, r5
 8002708:	f7fe fb6c 	bl	8000de4 <__aeabi_uldivmod>
 800270c:	2264      	movs	r2, #100	@ 0x64
 800270e:	fbb0 f1f2 	udiv	r1, r0, r2
 8002712:	fb02 0311 	mls	r3, r2, r1, r0
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	3332      	adds	r3, #50	@ 0x32
 800271a:	fbb3 f3f2 	udiv	r3, r3, r2
 800271e:	f003 0207 	and.w	r2, r3, #7
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002728:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800272c:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800272e:	60a3      	str	r3, [r4, #8]
  }
}
 8002730:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002732:	f7ff ff11 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 8002736:	e7d9      	b.n	80026ec <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002738:	009a      	lsls	r2, r3, #2
 800273a:	0f9b      	lsrs	r3, r3, #30
 800273c:	f7fe fb52 	bl	8000de4 <__aeabi_uldivmod>
 8002740:	2264      	movs	r2, #100	@ 0x64
 8002742:	fbb0 f1f2 	udiv	r1, r0, r2
 8002746:	fb02 0311 	mls	r3, r2, r1, r0
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	3332      	adds	r3, #50	@ 0x32
 800274e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002752:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002756:	e7ea      	b.n	800272e <UART_SetConfig+0x8e>
 8002758:	40011000 	.word	0x40011000

0800275c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 800275c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800275e:	4605      	mov	r5, r0
 8002760:	460c      	mov	r4, r1
 8002762:	4617      	mov	r7, r2
 8002764:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002766:	682a      	ldr	r2, [r5, #0]
 8002768:	6813      	ldr	r3, [r2, #0]
 800276a:	ea34 0303 	bics.w	r3, r4, r3
 800276e:	d101      	bne.n	8002774 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002770:	2000      	movs	r0, #0
 8002772:	e021      	b.n	80027b8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002774:	1c70      	adds	r0, r6, #1
 8002776:	d0f7      	beq.n	8002768 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002778:	f7ff f9fe 	bl	8001b78 <HAL_GetTick>
 800277c:	1bc0      	subs	r0, r0, r7
 800277e:	4286      	cmp	r6, r0
 8002780:	d31c      	bcc.n	80027bc <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8002782:	b1de      	cbz	r6, 80027bc <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	0751      	lsls	r1, r2, #29
 800278a:	d5ec      	bpl.n	8002766 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800278c:	2c80      	cmp	r4, #128	@ 0x80
 800278e:	d0ea      	beq.n	8002766 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8002790:	2c40      	cmp	r4, #64	@ 0x40
 8002792:	d0e8      	beq.n	8002766 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	0712      	lsls	r2, r2, #28
 8002798:	d5e5      	bpl.n	8002766 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800279a:	2400      	movs	r4, #0
 800279c:	9401      	str	r4, [sp, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	9201      	str	r2, [sp, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	9301      	str	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80027a6:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027a8:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80027aa:	f7ff ff4b 	bl	8002644 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027ae:	2308      	movs	r3, #8
 80027b0:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80027b2:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80027b6:	2001      	movs	r0, #1
}
 80027b8:	b003      	add	sp, #12
 80027ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80027bc:	2003      	movs	r0, #3
 80027be:	e7fb      	b.n	80027b8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

080027c0 <HAL_UART_Init>:
{
 80027c0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80027c2:	4604      	mov	r4, r0
 80027c4:	b348      	cbz	r0, 800281a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80027c6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80027ca:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80027ce:	b91b      	cbnz	r3, 80027d8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80027d0:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80027d4:	f7fe ff2c 	bl	8001630 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80027d8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80027da:	2324      	movs	r3, #36	@ 0x24
 80027dc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80027e0:	68d3      	ldr	r3, [r2, #12]
 80027e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027e6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80027e8:	4620      	mov	r0, r4
 80027ea:	f7ff ff59 	bl	80026a0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027fe:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002806:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002808:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800280a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800280e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002812:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002816:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002818:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800281a:	2001      	movs	r0, #1
 800281c:	e7fc      	b.n	8002818 <HAL_UART_Init+0x58>

0800281e <HAL_UART_Transmit>:
{
 800281e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002822:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002824:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002828:	2b20      	cmp	r3, #32
{
 800282a:	4604      	mov	r4, r0
 800282c:	460e      	mov	r6, r1
 800282e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002830:	d13f      	bne.n	80028b2 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8002832:	2900      	cmp	r1, #0
 8002834:	d03f      	beq.n	80028b6 <HAL_UART_Transmit+0x98>
 8002836:	2a00      	cmp	r2, #0
 8002838:	d03d      	beq.n	80028b6 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800283a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283c:	2500      	movs	r5, #0
 800283e:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002840:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002844:	f7ff f998 	bl	8001b78 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002848:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 800284a:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800284c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8002850:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8002852:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002854:	d103      	bne.n	800285e <HAL_UART_Transmit+0x40>
 8002856:	6923      	ldr	r3, [r4, #16]
 8002858:	b90b      	cbnz	r3, 800285e <HAL_UART_Transmit+0x40>
      pdata16bits = (const uint16_t *) pData;
 800285a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800285c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800285e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002860:	b29b      	uxth	r3, r3
 8002862:	b953      	cbnz	r3, 800287a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002864:	4643      	mov	r3, r8
 8002866:	464a      	mov	r2, r9
 8002868:	2140      	movs	r1, #64	@ 0x40
 800286a:	4620      	mov	r0, r4
 800286c:	f7ff ff76 	bl	800275c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002870:	2320      	movs	r3, #32
 8002872:	b950      	cbnz	r0, 800288a <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8002874:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002878:	e00a      	b.n	8002890 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800287a:	4643      	mov	r3, r8
 800287c:	464a      	mov	r2, r9
 800287e:	2180      	movs	r1, #128	@ 0x80
 8002880:	4620      	mov	r0, r4
 8002882:	f7ff ff6b 	bl	800275c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002886:	b128      	cbz	r0, 8002894 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8002888:	2320      	movs	r3, #32
 800288a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800288e:	2003      	movs	r0, #3
}
 8002890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002894:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002896:	b94e      	cbnz	r6, 80028ac <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002898:	f835 3b02 	ldrh.w	r3, [r5], #2
 800289c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028a0:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80028a2:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 80028a4:	3901      	subs	r1, #1
 80028a6:	b289      	uxth	r1, r1
 80028a8:	84e1      	strh	r1, [r4, #38]	@ 0x26
 80028aa:	e7d8      	b.n	800285e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028ac:	f816 3b01 	ldrb.w	r3, [r6], #1
 80028b0:	e7f6      	b.n	80028a0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80028b2:	2002      	movs	r0, #2
 80028b4:	e7ec      	b.n	8002890 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80028b6:	2001      	movs	r0, #1
 80028b8:	e7ea      	b.n	8002890 <HAL_UART_Transmit+0x72>

080028ba <HAL_UART_Receive>:
{
 80028ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028be:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80028c0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80028c4:	2b20      	cmp	r3, #32
{
 80028c6:	4604      	mov	r4, r0
 80028c8:	460e      	mov	r6, r1
 80028ca:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80028cc:	d148      	bne.n	8002960 <HAL_UART_Receive+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80028ce:	2900      	cmp	r1, #0
 80028d0:	d048      	beq.n	8002964 <HAL_UART_Receive+0xaa>
 80028d2:	2a00      	cmp	r2, #0
 80028d4:	d046      	beq.n	8002964 <HAL_UART_Receive+0xaa>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028d6:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d8:	2500      	movs	r5, #0
 80028da:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028dc:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e0:	6305      	str	r5, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 80028e2:	f7ff f949 	bl	8001b78 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e6:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 80028e8:	f8a4 902c 	strh.w	r9, [r4, #44]	@ 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 80028f0:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 80028f2:	f8a4 902e 	strh.w	r9, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f6:	d103      	bne.n	8002900 <HAL_UART_Receive+0x46>
 80028f8:	6923      	ldr	r3, [r4, #16]
 80028fa:	b90b      	cbnz	r3, 8002900 <HAL_UART_Receive+0x46>
      pdata16bits = (uint16_t *) pData;
 80028fc:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80028fe:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8002900:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
 8002902:	b280      	uxth	r0, r0
 8002904:	b918      	cbnz	r0, 800290e <HAL_UART_Receive+0x54>
    huart->RxState = HAL_UART_STATE_READY;
 8002906:	2320      	movs	r3, #32
 8002908:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 800290c:	e00a      	b.n	8002924 <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	463b      	mov	r3, r7
 8002910:	4642      	mov	r2, r8
 8002912:	2120      	movs	r1, #32
 8002914:	4620      	mov	r0, r4
 8002916:	f7ff ff21 	bl	800275c <UART_WaitOnFlagUntilTimeout.constprop.0>
 800291a:	b128      	cbz	r0, 8002928 <HAL_UART_Receive+0x6e>
        huart->RxState = HAL_UART_STATE_READY;
 800291c:	2320      	movs	r3, #32
 800291e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        return HAL_TIMEOUT;
 8002922:	2003      	movs	r0, #3
}
 8002924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002928:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800292a:	b94e      	cbnz	r6, 8002940 <HAL_UART_Receive+0x86>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002932:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8002936:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002938:	3b01      	subs	r3, #1
 800293a:	b29b      	uxth	r3, r3
 800293c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800293e:	e7df      	b.n	8002900 <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002940:	68a2      	ldr	r2, [r4, #8]
 8002942:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8002946:	d002      	beq.n	800294e <HAL_UART_Receive+0x94>
 8002948:	b932      	cbnz	r2, 8002958 <HAL_UART_Receive+0x9e>
 800294a:	6922      	ldr	r2, [r4, #16]
 800294c:	b922      	cbnz	r2, 8002958 <HAL_UART_Receive+0x9e>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	b2c9      	uxtb	r1, r1
 8002952:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 8002956:	e7ee      	b.n	8002936 <HAL_UART_Receive+0x7c>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800295e:	e7f8      	b.n	8002952 <HAL_UART_Receive+0x98>
    return HAL_BUSY;
 8002960:	2002      	movs	r0, #2
 8002962:	e7df      	b.n	8002924 <HAL_UART_Receive+0x6a>
      return  HAL_ERROR;
 8002964:	2001      	movs	r0, #1
 8002966:	e7dd      	b.n	8002924 <HAL_UART_Receive+0x6a>

08002968 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800296c:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8002970:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8002974:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8002978:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 800297c:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8002980:	6809      	ldr	r1, [r1, #0]
 8002982:	ea43 0308 	orr.w	r3, r3, r8
 8002986:	b981      	cbnz	r1, 80029aa <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002988:	ea43 030e 	orr.w	r3, r3, lr
 800298c:	4313      	orrs	r3, r2
 800298e:	ea43 030c 	orr.w	r3, r3, ip
 8002992:	433b      	orrs	r3, r7
 8002994:	6801      	ldr	r1, [r0, #0]
 8002996:	4333      	orrs	r3, r6
 8002998:	432b      	orrs	r3, r5
 800299a:	4323      	orrs	r3, r4
 800299c:	f36f 010e 	bfc	r1, #0, #15
 80029a0:	430b      	orrs	r3, r1
 80029a2:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80029a4:	2000      	movs	r0, #0
 80029a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80029aa:	6801      	ldr	r1, [r0, #0]
 80029ac:	ea43 030e 	orr.w	r3, r3, lr
 80029b0:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 80029b4:	430b      	orrs	r3, r1
 80029b6:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80029b8:	ea42 030c 	orr.w	r3, r2, ip
 80029bc:	6841      	ldr	r1, [r0, #4]
 80029be:	433b      	orrs	r3, r7
 80029c0:	4333      	orrs	r3, r6
 80029c2:	432b      	orrs	r3, r5
 80029c4:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 80029c8:	4323      	orrs	r3, r4
 80029ca:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 80029ce:	4313      	orrs	r3, r2
 80029d0:	6043      	str	r3, [r0, #4]
 80029d2:	e7e7      	b.n	80029a4 <FMC_SDRAM_Init+0x3c>

080029d4 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80029d4:	68cb      	ldr	r3, [r1, #12]
 80029d6:	f103 3cff 	add.w	ip, r3, #4294967295
 80029da:	694b      	ldr	r3, [r1, #20]
{
 80029dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80029de:	684c      	ldr	r4, [r1, #4]
 80029e0:	688f      	ldr	r7, [r1, #8]
 80029e2:	690e      	ldr	r6, [r1, #16]
 80029e4:	698d      	ldr	r5, [r1, #24]
 80029e6:	6809      	ldr	r1, [r1, #0]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	051b      	lsls	r3, r3, #20
 80029ec:	3c01      	subs	r4, #1
 80029ee:	3f01      	subs	r7, #1
 80029f0:	3e01      	subs	r6, #1
 80029f2:	3d01      	subs	r5, #1
 80029f4:	0124      	lsls	r4, r4, #4
 80029f6:	023f      	lsls	r7, r7, #8
 80029f8:	0436      	lsls	r6, r6, #16
 80029fa:	062d      	lsls	r5, r5, #24
 80029fc:	3901      	subs	r1, #1
 80029fe:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8002a02:	b95a      	cbnz	r2, 8002a1c <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002a04:	430b      	orrs	r3, r1
 8002a06:	4323      	orrs	r3, r4
 8002a08:	6882      	ldr	r2, [r0, #8]
 8002a0a:	433b      	orrs	r3, r7
 8002a0c:	4333      	orrs	r3, r6
 8002a0e:	432b      	orrs	r3, r5
 8002a10:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8002a14:	4313      	orrs	r3, r2
 8002a16:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8002a18:	2000      	movs	r0, #0
 8002a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002a1c:	6882      	ldr	r2, [r0, #8]
 8002a1e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a22:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8002a26:	4313      	orrs	r3, r2
 8002a28:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8002a2a:	ea44 0307 	orr.w	r3, r4, r7
 8002a2e:	68c2      	ldr	r2, [r0, #12]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	4333      	orrs	r3, r6
 8002a34:	432b      	orrs	r3, r5
 8002a36:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60c3      	str	r3, [r0, #12]
 8002a3e:	e7eb      	b.n	8002a18 <FMC_SDRAM_Timing_Init+0x44>

08002a40 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	4604      	mov	r4, r0
 8002a44:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8002a46:	6902      	ldr	r2, [r0, #16]
 8002a48:	e9d1 3000 	ldrd	r3, r0, [r1]
 8002a4c:	4303      	orrs	r3, r0
 8002a4e:	68c8      	ldr	r0, [r1, #12]
 8002a50:	f36f 0215 	bfc	r2, #0, #22
 8002a54:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	688a      	ldr	r2, [r1, #8]
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002a62:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8002a64:	f7ff f888 	bl	8001b78 <HAL_GetTick>
 8002a68:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8002a6a:	69a0      	ldr	r0, [r4, #24]
 8002a6c:	f010 0020 	ands.w	r0, r0, #32
 8002a70:	d003      	beq.n	8002a7a <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a72:	1c6b      	adds	r3, r5, #1
 8002a74:	d0f9      	beq.n	8002a6a <FMC_SDRAM_SendCommand+0x2a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a76:	b90d      	cbnz	r5, 8002a7c <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 8002a78:	2003      	movs	r0, #3
      }
    }
  }
  return HAL_OK;
}
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a7c:	f7ff f87c 	bl	8001b78 <HAL_GetTick>
 8002a80:	1b80      	subs	r0, r0, r6
 8002a82:	42a8      	cmp	r0, r5
 8002a84:	d9f1      	bls.n	8002a6a <FMC_SDRAM_SendCommand+0x2a>
 8002a86:	e7f7      	b.n	8002a78 <FMC_SDRAM_SendCommand+0x38>

08002a88 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8002a88:	6943      	ldr	r3, [r0, #20]
 8002a8a:	f36f 034d 	bfc	r3, #1, #13
 8002a8e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002a92:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8002a94:	2000      	movs	r0, #0
 8002a96:	4770      	bx	lr

08002a98 <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 8002a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002a9a:	4d0e      	ldr	r5, [pc, #56]	@ (8002ad4 <write_callback+0x3c>)
{
 8002a9c:	460e      	mov	r6, r1
 8002a9e:	4614      	mov	r4, r2
  bool res = true;
 8002aa0:	2001      	movs	r0, #1
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 8002aa2:	2700      	movs	r7, #0
  while (count) {
 8002aa4:	b93c      	cbnz	r4, 8002ab6 <write_callback+0x1e>
 8002aa6:	e00b      	b.n	8002ac0 <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 8002aa8:	18ea      	adds	r2, r5, r3
 8002aaa:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002aae:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002ab0:	3301      	adds	r3, #1
      count--;
 8002ab2:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002ab4:	702b      	strb	r3, [r5, #0]
 8002ab6:	782b      	ldrb	r3, [r5, #0]
 8002ab8:	2b1f      	cmp	r3, #31
 8002aba:	d802      	bhi.n	8002ac2 <write_callback+0x2a>
 8002abc:	2c00      	cmp	r4, #0
 8002abe:	d1f3      	bne.n	8002aa8 <write_callback+0x10>
    }
  }
  return res;
}
 8002ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d1ee      	bne.n	8002aa4 <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002ac6:	2121      	movs	r1, #33	@ 0x21
 8002ac8:	4628      	mov	r0, r5
 8002aca:	f000 fca1 	bl	8003410 <ioRawWriteBuffer>
      o_packet.pw = 0;
 8002ace:	702f      	strb	r7, [r5, #0]
 8002ad0:	e7e8      	b.n	8002aa4 <write_callback+0xc>
 8002ad2:	bf00      	nop
 8002ad4:	20006b69 	.word	0x20006b69

08002ad8 <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8002ad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002adc:	460c      	mov	r4, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 8002ade:	4615      	mov	r5, r2
 8002ae0:	b35a      	cbz	r2, 8002b3a <read_callback+0x62>
    return true;

  if (i_packet.pr == 0xFF)
 8002ae2:	4e20      	ldr	r6, [pc, #128]	@ (8002b64 <read_callback+0x8c>)
 8002ae4:	4f20      	ldr	r7, [pc, #128]	@ (8002b68 <read_callback+0x90>)
 8002ae6:	7833      	ldrb	r3, [r6, #0]
 8002ae8:	2bff      	cmp	r3, #255	@ 0xff
 8002aea:	d008      	beq.n	8002afe <read_callback+0x26>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002aec:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8002b64 <read_callback+0x8c>
{
 8002af0:	f04f 0900 	mov.w	r9, #0
    res = read_packet();

  if (res == false)
    return res;

  while (count) {
 8002af4:	683b      	ldr	r3, [r7, #0]
{
 8002af6:	2200      	movs	r2, #0
 8002af8:	18f0      	adds	r0, r6, r3
 8002afa:	1b1b      	subs	r3, r3, r4
 8002afc:	e013      	b.n	8002b26 <read_callback+0x4e>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002afe:	2121      	movs	r1, #33	@ 0x21
 8002b00:	4630      	mov	r0, r6
 8002b02:	f000 fc93 	bl	800342c <ioRawReadBuffer>
  i_ridx = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	603b      	str	r3, [r7, #0]
  if (res == false)
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	d1ee      	bne.n	8002aec <read_callback+0x14>
      read_packet();
    }
  }

  return res;
}
 8002b0e:	b003      	add	sp, #12
 8002b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 8002b14:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8002b18:	f804 2b01 	strb.w	r2, [r4], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002b1c:	7832      	ldrb	r2, [r6, #0]
 8002b1e:	3a01      	subs	r2, #1
 8002b20:	7032      	strb	r2, [r6, #0]
      count--;
 8002b22:	3d01      	subs	r5, #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002b24:	2201      	movs	r2, #1
 8002b26:	f896 c000 	ldrb.w	ip, [r6]
 8002b2a:	18e1      	adds	r1, r4, r3
 8002b2c:	f1bc 0f00 	cmp.w	ip, #0
 8002b30:	d005      	beq.n	8002b3e <read_callback+0x66>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	d1ee      	bne.n	8002b14 <read_callback+0x3c>
 8002b36:	b102      	cbz	r2, 8002b3a <read_callback+0x62>
 8002b38:	6039      	str	r1, [r7, #0]
    return true;
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	e7e7      	b.n	8002b0e <read_callback+0x36>
 8002b3e:	b102      	cbz	r2, 8002b42 <read_callback+0x6a>
 8002b40:	6039      	str	r1, [r7, #0]
    if (count && i_packet.pr == 0) {
 8002b42:	2d00      	cmp	r5, #0
 8002b44:	d0f9      	beq.n	8002b3a <read_callback+0x62>
      uint8_t sync = 0xAA;
 8002b46:	23aa      	movs	r3, #170	@ 0xaa
      ioRawWriteBuffer(&sync, 1);
 8002b48:	2101      	movs	r1, #1
 8002b4a:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 8002b4e:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 8002b52:	f000 fc5d 	bl	8003410 <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002b56:	2121      	movs	r1, #33	@ 0x21
 8002b58:	4640      	mov	r0, r8
 8002b5a:	f000 fc67 	bl	800342c <ioRawReadBuffer>
  i_ridx = 0;
 8002b5e:	f8c7 9000 	str.w	r9, [r7]
  return res;
 8002b62:	e7c7      	b.n	8002af4 <read_callback+0x1c>
 8002b64:	20006b48 	.word	0x20006b48
 8002b68:	20006b44 	.word	0x20006b44

08002b6c <pb_io_flush_ostream>:
{
 8002b6c:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002b6e:	4c06      	ldr	r4, [pc, #24]	@ (8002b88 <pb_io_flush_ostream+0x1c>)
 8002b70:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002b72:	2121      	movs	r1, #33	@ 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002b74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002b78:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002b7a:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002b7c:	f000 fc48 	bl	8003410 <ioRawWriteBuffer>
  o_packet.pw = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	7023      	strb	r3, [r4, #0]
}
 8002b84:	bd10      	pop	{r4, pc}
 8002b86:	bf00      	nop
 8002b88:	20006b69 	.word	0x20006b69

08002b8c <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	@ (8002b9c <pb_io_flush_istream+0x10>)
 8002b8e:	22ff      	movs	r2, #255	@ 0xff
 8002b90:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 8002b92:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <pb_io_flush_istream+0x14>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20006b48 	.word	0x20006b48
 8002ba0:	20006b44 	.word	0x20006b44

08002ba4 <pb_io_ostream>:
#ifndef PB_NO_ERRMSG
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0, NULL};
#else
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
#endif
  return stream;
 8002ba4:	4a04      	ldr	r2, [pc, #16]	@ (8002bb8 <pb_io_ostream+0x14>)
 8002ba6:	e9c0 2100 	strd	r2, r1, [r0]
 8002baa:	f04f 31ff 	mov.w	r1, #4294967295
 8002bae:	2200      	movs	r2, #0
 8002bb0:	e9c0 1202 	strd	r1, r2, [r0, #8]
}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	08002a99 	.word	0x08002a99

08002bbc <pb_io_istream>:
#ifndef PB_NO_ERRMSG
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX, NULL};
#else
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
#endif
  return stream;
 8002bbc:	4a03      	ldr	r2, [pc, #12]	@ (8002bcc <pb_io_istream+0x10>)
 8002bbe:	e9c0 2100 	strd	r2, r1, [r0]
 8002bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc6:	6082      	str	r2, [r0, #8]
}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	08002ad9 	.word	0x08002ad9

08002bd0 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 8002bd0:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 8002bd2:	f000 fc39 	bl	8003448 <ioRawDisableLLWrite>
  return 0;
}
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	bd08      	pop	{r3, pc}

08002bda <encode_uint32>:
/*
 * Callback function to encode array of uint32
 */
bool encode_uint32(pb_ostream_t *stream, const pb_field_t *field,
                   void * const *arg)
{
 8002bda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct _encode_uint32* array = (struct _encode_uint32 *)*arg;
 8002bde:	f8d2 8000 	ldr.w	r8, [r2]
  int offset = (array->offset == 0)?4:array->offset;
 8002be2:	f8d8 4008 	ldr.w	r4, [r8, #8]
  for (size_t i = 0; i < array->size; i++)
 8002be6:	2600      	movs	r6, #0
  int offset = (array->offset == 0)?4:array->offset;
 8002be8:	2c00      	cmp	r4, #0
{
 8002bea:	4607      	mov	r7, r0
 8002bec:	4689      	mov	r9, r1
  int offset = (array->offset == 0)?4:array->offset;
 8002bee:	bf08      	it	eq
 8002bf0:	2404      	moveq	r4, #4
  for (size_t i = 0; i < array->size; i++)
 8002bf2:	4635      	mov	r5, r6
 8002bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8002bf8:	42ab      	cmp	r3, r5
 8002bfa:	d801      	bhi.n	8002c00 <encode_uint32+0x26>
    else
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
      return false;
  }
  return true;
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	e005      	b.n	8002c0c <encode_uint32+0x32>
    if (!pb_encode_tag_for_field(stream, field))
 8002c00:	4649      	mov	r1, r9
 8002c02:	4638      	mov	r0, r7
 8002c04:	f003 ff66 	bl	8006ad4 <pb_encode_tag_for_field>
 8002c08:	b910      	cbnz	r0, 8002c10 <encode_uint32+0x36>
      return false;
 8002c0a:	2000      	movs	r0, #0
}
 8002c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8002c10:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (offset == 2)
 8002c14:	2c02      	cmp	r4, #2
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
 8002c16:	bf14      	ite	ne
 8002c18:	599a      	ldrne	r2, [r3, r6]
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8002c1a:	f833 2015 	ldrheq.w	r2, [r3, r5, lsl #1]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8002c1e:	4638      	mov	r0, r7
 8002c20:	17d3      	asrs	r3, r2, #31
 8002c22:	f003 feac 	bl	800697e <pb_encode_varint>
 8002c26:	4426      	add	r6, r4
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d0ee      	beq.n	8002c0a <encode_uint32+0x30>
  for (size_t i = 0; i < array->size; i++)
 8002c2c:	3501      	adds	r5, #1
 8002c2e:	e7e1      	b.n	8002bf4 <encode_uint32+0x1a>

08002c30 <encode_data_cb>:
/*
 * Local callback function to encode datas field from aiDataMsg msg
 */
bool encode_data_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 8002c30:	b570      	push	{r4, r5, r6, lr}
  aiPbData *data = (aiPbData *)*arg;
 8002c32:	6815      	ldr	r5, [r2, #0]
{
 8002c34:	4604      	mov	r4, r0

  pb_byte_t *pr = (pb_byte_t *)data->addr;
 8002c36:	68ae      	ldr	r6, [r5, #8]

  if (!pb_encode_tag_for_field(stream, field))
 8002c38:	f003 ff4c 	bl	8006ad4 <pb_encode_tag_for_field>
 8002c3c:	b130      	cbz	r0, 8002c4c <encode_data_cb+0x1c>
    return false;

  if (!pb_encode_string(stream, pr, data->size))
 8002c3e:	686a      	ldr	r2, [r5, #4]
 8002c40:	4631      	mov	r1, r6
 8002c42:	4620      	mov	r0, r4
    return false;

  return true;
}
 8002c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (!pb_encode_string(stream, pr, data->size))
 8002c48:	f004 b870 	b.w	8006d2c <pb_encode_string>
}
 8002c4c:	bd70      	pop	{r4, r5, r6, pc}

08002c4e <decode_data_cb>:
{
 8002c4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  aiPbData *data = (aiPbData *)*arg;
 8002c50:	6814      	ldr	r4, [r2, #0]
  uint8_t *pw = (uint8_t *)data->addr;
 8002c52:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
{
 8002c56:	4605      	mov	r5, r0
  data->nb_read = 0;
 8002c58:	2300      	movs	r3, #0
    data->nb_read += itsize;
 8002c5a:	60e3      	str	r3, [r4, #12]
  while (stream->bytes_left) {
 8002c5c:	68ab      	ldr	r3, [r5, #8]
 8002c5e:	b913      	cbnz	r3, 8002c66 <decode_data_cb+0x18>
  return true;
 8002c60:	2001      	movs	r0, #1
}
 8002c62:	b003      	add	sp, #12
 8002c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 8002c66:	2201      	movs	r2, #1
 8002c68:	4669      	mov	r1, sp
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f003 fa2e 	bl	80060cc <pb_read>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d0f6      	beq.n	8002c62 <decode_data_cb+0x14>
    if ((pw) && (maxr > 0)) /* additional data are skipped */
 8002c74:	b13f      	cbz	r7, 8002c86 <decode_data_cb+0x38>
 8002c76:	2e00      	cmp	r6, #0
      *pw = *(uint8_t *)&number;
 8002c78:	bfc2      	ittt	gt
 8002c7a:	f89d 3000 	ldrbgt.w	r3, [sp]
 8002c7e:	f807 3b01 	strbgt.w	r3, [r7], #1
      maxr--;
 8002c82:	f106 36ff 	addgt.w	r6, r6, #4294967295
    data->nb_read += itsize;
 8002c86:	68e3      	ldr	r3, [r4, #12]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	e7e6      	b.n	8002c5a <decode_data_cb+0xc>

08002c8c <aiPbMgrInit>:
{
 8002c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8002c8e:	4c1b      	ldr	r4, [pc, #108]	@ (8002cfc <aiPbMgrInit+0x70>)
{
 8002c90:	b089      	sub	sp, #36	@ 0x24
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8002c92:	f44f 72ec 	mov.w	r2, #472	@ 0x1d8
 8002c96:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 8002c98:	ae04      	add	r6, sp, #16
{
 8002c9a:	4605      	mov	r5, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f00b fd08 	bl	800e6b2 <memset>
  pb_io_stream_init();
 8002ca2:	f7ff ff95 	bl	8002bd0 <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	2100      	movs	r1, #0
 8002caa:	f7ff ff87 	bl	8002bbc <pb_io_istream>
 8002cae:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  pbContextMgr.output = pb_io_ostream(0);
 8002cb2:	466e      	mov	r6, sp
  pbContextMgr.input = pb_io_istream(0);
 8002cb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pbContextMgr.output = pb_io_ostream(0);
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4630      	mov	r0, r6
 8002cbc:	f7ff ff72 	bl	8002ba4 <pb_io_ostream>
 8002cc0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002cc4:	f104 070c 	add.w	r7, r4, #12
 8002cc8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  pbContextMgr.n_func = 0;
 8002ccc:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 8002cce:	e9c4 3307 	strd	r3, r3, [r4, #28]
  if (funcs) {
 8002cd2:	b97d      	cbnz	r5, 8002cf4 <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f884 31d0 	strb.w	r3, [r4, #464]	@ 0x1d0
}
 8002cda:	b009      	add	sp, #36	@ 0x24
 8002cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 8002cde:	320c      	adds	r2, #12
 8002ce0:	4633      	mov	r3, r6
 8002ce2:	2101      	movs	r1, #1
    while (cfunc->process) {
 8002ce4:	6850      	ldr	r0, [r2, #4]
 8002ce6:	1c5e      	adds	r6, r3, #1
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d1f8      	bne.n	8002cde <aiPbMgrInit+0x52>
 8002cec:	b101      	cbz	r1, 8002cf0 <aiPbMgrInit+0x64>
 8002cee:	6223      	str	r3, [r4, #32]
    pbContextMgr.funcs = funcs;
 8002cf0:	61e5      	str	r5, [r4, #28]
 8002cf2:	e7ef      	b.n	8002cd4 <aiPbMgrInit+0x48>
    cfunc = funcs;
 8002cf4:	462a      	mov	r2, r5
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	e7f4      	b.n	8002ce4 <aiPbMgrInit+0x58>
 8002cfa:	bf00      	nop
 8002cfc:	20006b90 	.word	0x20006b90

08002d00 <aiPbStrCopy>:
{
 8002d00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002d02:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 8002d04:	4a10      	ldr	r2, [pc, #64]	@ (8002d48 <aiPbStrCopy+0x48>)
{
 8002d06:	4605      	mov	r5, r0
 8002d08:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 8002d0a:	6810      	ldr	r0, [r2, #0]
 8002d0c:	6851      	ldr	r1, [r2, #4]
 8002d0e:	8912      	ldrh	r2, [r2, #8]
 8002d10:	ab01      	add	r3, sp, #4
 8002d12:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 8002d14:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 8002d16:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 8002d18:	f7fd faba 	bl	8000290 <strlen>
  if (l > max)
 8002d1c:	42b0      	cmp	r0, r6
    l = max-1;
 8002d1e:	bf88      	it	hi
 8002d20:	f106 30ff 	addhi.w	r0, r6, #4294967295
  if (!dst)
 8002d24:	b174      	cbz	r4, 8002d44 <aiPbStrCopy+0x44>
  if (src && l)
 8002d26:	b138      	cbz	r0, 8002d38 <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 8002d28:	1c42      	adds	r2, r0, #1
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	4620      	mov	r0, r4
}
 8002d2e:	b004      	add	sp, #16
 8002d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 8002d34:	f00b bd5f 	b.w	800e7f6 <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 8002d38:	ab01      	add	r3, sp, #4
 8002d3a:	cb03      	ldmia	r3!, {r0, r1}
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	6020      	str	r0, [r4, #0]
 8002d40:	6061      	str	r1, [r4, #4]
 8002d42:	8123      	strh	r3, [r4, #8]
}
 8002d44:	b004      	add	sp, #16
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	08011598 	.word	0x08011598

08002d4c <encode_tensor_desc>:
{
 8002d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct _encode_tensor_desc* tensors = (struct _encode_tensor_desc *)*arg;
 8002d50:	6816      	ldr	r6, [r2, #0]
    msg.dims.funcs.encode = encode_uint32;
 8002d52:	f8df 9058 	ldr.w	r9, [pc, #88]	@ 8002dac <encode_tensor_desc+0x60>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8002d56:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8002db0 <encode_tensor_desc+0x64>
{
 8002d5a:	b09c      	sub	sp, #112	@ 0x70
 8002d5c:	4605      	mov	r5, r0
 8002d5e:	4688      	mov	r8, r1
  for (size_t i = 0; i < tensors->size; i++)
 8002d60:	2400      	movs	r4, #0
 8002d62:	6873      	ldr	r3, [r6, #4]
 8002d64:	42a3      	cmp	r3, r4
 8002d66:	d801      	bhi.n	8002d6c <encode_tensor_desc+0x20>
  return true;
 8002d68:	2001      	movs	r0, #1
 8002d6a:	e01c      	b.n	8002da6 <encode_tensor_desc+0x5a>
    aiTensorDescMsg msg = aiTensorDescMsg_init_zero;
 8002d6c:	2264      	movs	r2, #100	@ 0x64
 8002d6e:	2100      	movs	r1, #0
 8002d70:	a803      	add	r0, sp, #12
 8002d72:	f00b fc9e 	bl	800e6b2 <memset>
    tensors->cb(i, tensors->data, &msg, &array_u32);
 8002d76:	68b1      	ldr	r1, [r6, #8]
 8002d78:	6837      	ldr	r7, [r6, #0]
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	466b      	mov	r3, sp
 8002d7e:	aa03      	add	r2, sp, #12
 8002d80:	47b8      	blx	r7
    if (!pb_encode_tag_for_field(stream, field))
 8002d82:	4641      	mov	r1, r8
 8002d84:	4628      	mov	r0, r5
    msg.dims.funcs.encode = encode_uint32;
 8002d86:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
    msg.dims.arg = &array_u32;
 8002d8a:	f8cd d05c 	str.w	sp, [sp, #92]	@ 0x5c
    if (!pb_encode_tag_for_field(stream, field))
 8002d8e:	f003 fea1 	bl	8006ad4 <pb_encode_tag_for_field>
 8002d92:	b138      	cbz	r0, 8002da4 <encode_tensor_desc+0x58>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8002d94:	aa03      	add	r2, sp, #12
 8002d96:	4651      	mov	r1, sl
 8002d98:	4628      	mov	r0, r5
 8002d9a:	f004 f808 	bl	8006dae <pb_encode_submessage>
 8002d9e:	b108      	cbz	r0, 8002da4 <encode_tensor_desc+0x58>
  for (size_t i = 0; i < tensors->size; i++)
 8002da0:	3401      	adds	r4, #1
 8002da2:	e7de      	b.n	8002d62 <encode_tensor_desc+0x16>
      return false;
 8002da4:	2000      	movs	r0, #0
}
 8002da6:	b01c      	add	sp, #112	@ 0x70
 8002da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dac:	08002bdb 	.word	0x08002bdb
 8002db0:	0807fad8 	.word	0x0807fad8

08002db4 <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 8002db4:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 8002db6:	6803      	ldr	r3, [r0, #0]
 8002db8:	600b      	str	r3, [r1, #0]
  resp->state = state;
 8002dba:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8002dbc:	4804      	ldr	r0, [pc, #16]	@ (8002dd0 <aiPbMgrSendResp+0x1c>)
 8002dbe:	460a      	mov	r2, r1
 8002dc0:	4904      	ldr	r1, [pc, #16]	@ (8002dd4 <aiPbMgrSendResp+0x20>)
 8002dc2:	f003 ff7f 	bl	8006cc4 <pb_encode>
  pb_io_flush_ostream();
}
 8002dc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 8002dca:	f7ff becf 	b.w	8002b6c <pb_io_flush_ostream>
 8002dce:	bf00      	nop
 8002dd0:	20006b9c 	.word	0x20006b9c
 8002dd4:	0807f6f8 	.word	0x0807f6f8

08002dd8 <aiPbMgrWaitAndProcess>:
{
 8002dd8:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8002dda:	4c1d      	ldr	r4, [pc, #116]	@ (8002e50 <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 8002ddc:	f7ff fed6 	bl	8002b8c <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8002de0:	491c      	ldr	r1, [pc, #112]	@ (8002e54 <aiPbMgrWaitAndProcess+0x7c>)
 8002de2:	f104 0224 	add.w	r2, r4, #36	@ 0x24
 8002de6:	4620      	mov	r0, r4
 8002de8:	f003 fcf1 	bl	80067ce <pb_decode_delimited>
 8002dec:	b348      	cbz	r0, 8002e42 <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 8002dee:	f7ff fecd 	bl	8002b8c <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 8002df2:	2302      	movs	r3, #2
 8002df4:	f884 31d0 	strb.w	r3, [r4, #464]	@ 0x1d0
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002df8:	6a21      	ldr	r1, [r4, #32]
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8002dfa:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8002dfe:	69e3      	ldr	r3, [r4, #28]
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002e00:	2500      	movs	r5, #0
 8002e02:	42a9      	cmp	r1, r5
 8002e04:	d00d      	beq.n	8002e22 <aiPbMgrWaitAndProcess+0x4a>
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8002e06:	461a      	mov	r2, r3
 8002e08:	f812 6b0c 	ldrb.w	r6, [r2], #12
 8002e0c:	4286      	cmp	r6, r0
 8002e0e:	d11c      	bne.n	8002e4a <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 8002e10:	4911      	ldr	r1, [pc, #68]	@ (8002e58 <aiPbMgrWaitAndProcess+0x80>)
 8002e12:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
 8002e16:	f1a1 0054 	sub.w	r0, r1, #84	@ 0x54
 8002e1a:	47b0      	blx	r6
    if (idx == pbContextMgr.n_func) {
 8002e1c:	6a23      	ldr	r3, [r4, #32]
 8002e1e:	42ab      	cmp	r3, r5
 8002e20:	d10c      	bne.n	8002e3c <aiPbMgrWaitAndProcess+0x64>
    EnumState state, uint32_t param, EnumError error)
{
  resp->which_payload = respMsg_ack_tag;
  resp->payload.ack.param = param;
  resp->payload.ack.error = error;
  aiPbMgrSendResp(req, resp, state);
 8002e22:	490d      	ldr	r1, [pc, #52]	@ (8002e58 <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 8002e24:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 8002e26:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 8002e28:	f1a1 0054 	sub.w	r0, r1, #84	@ 0x54
  resp->which_payload = respMsg_ack_tag;
 8002e2c:	f8a4 307e 	strh.w	r3, [r4, #126]	@ 0x7e
  resp->payload.ack.param = param;
 8002e30:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  resp->payload.ack.error = error;
 8002e34:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  aiPbMgrSendResp(req, resp, state);
 8002e38:	f7ff ffbc 	bl	8002db4 <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f884 31d0 	strb.w	r3, [r4, #464]	@ 0x1d0
  pb_io_flush_istream();
 8002e42:	f7ff fea3 	bl	8002b8c <pb_io_flush_istream>
}
 8002e46:	2000      	movs	r0, #0
 8002e48:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002e4a:	3501      	adds	r5, #1
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	e7d8      	b.n	8002e02 <aiPbMgrWaitAndProcess+0x2a>
 8002e50:	20006b90 	.word	0x20006b90
 8002e54:	0807fb78 	.word	0x0807fb78
 8002e58:	20006c08 	.word	0x20006c08

08002e5c <aiPbMgrSendAck>:
{
 8002e5c:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 8002e5e:	260c      	movs	r6, #12
{
 8002e60:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->which_payload = respMsg_ack_tag;
 8002e64:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 8002e66:	730d      	strb	r5, [r1, #12]
  resp->payload.ack.param = param;
 8002e68:	608b      	str	r3, [r1, #8]
}
 8002e6a:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 8002e6c:	f7ff bfa2 	b.w	8002db4 <aiPbMgrSendResp>

08002e70 <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 8002e70:	b513      	push	{r0, r1, r4, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;
 8002e72:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002e74:	4906      	ldr	r1, [pc, #24]	@ (8002e90 <aiPbMgrWaitAck+0x20>)
 8002e76:	4807      	ldr	r0, [pc, #28]	@ (8002e94 <aiPbMgrWaitAck+0x24>)
  ackMsg ack = ackMsg_init_default;
 8002e78:	9300      	str	r3, [sp, #0]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002e7a:	466a      	mov	r2, sp
  ackMsg ack = ackMsg_init_default;
 8002e7c:	f88d 3004 	strb.w	r3, [sp, #4]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002e80:	f003 fca5 	bl	80067ce <pb_decode_delimited>
 8002e84:	4604      	mov	r4, r0
  pb_io_flush_istream();
 8002e86:	f7ff fe81 	bl	8002b8c <pb_io_flush_istream>
  return res;
}
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd10      	pop	{r4, pc}
 8002e90:	0807f7d8 	.word	0x0807f7d8
 8002e94:	20006b90 	.word	0x20006b90

08002e98 <aiPbMgrSendLogV2>:
  pb_io_flush_istream();
  return res;
}

bool aiPbMgrSendLogV2(EnumState state, uint32_t lvl, const char *str)
{
 8002e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;

  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002e9a:	4c19      	ldr	r4, [pc, #100]	@ (8002f00 <aiPbMgrSendLogV2+0x68>)
 8002e9c:	f894 31d0 	ldrb.w	r3, [r4, #464]	@ 0x1d0
{
 8002ea0:	4606      	mov	r6, r0
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002ea2:	2b02      	cmp	r3, #2
  ackMsg ack = ackMsg_init_default;
 8002ea4:	f04f 0000 	mov.w	r0, #0
{
 8002ea8:	460f      	mov	r7, r1
 8002eaa:	4615      	mov	r5, r2
  ackMsg ack = ackMsg_init_default;
 8002eac:	9000      	str	r0, [sp, #0]
 8002eae:	f88d 0004 	strb.w	r0, [sp, #4]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002eb2:	d122      	bne.n	8002efa <aiPbMgrSendLogV2+0x62>
    return false;

  size_t len = strlen(str);
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	f7fd f9eb 	bl	8000290 <strlen>

  pbContextMgr.resp.which_payload = respMsg_log_tag;
  pbContextMgr.resp.payload.log.level = lvl;
  if (len >= sizeof(pbContextMgr.resp.payload.log.str))
 8002eba:	287f      	cmp	r0, #127	@ 0x7f
 8002ebc:	bf28      	it	cs
 8002ebe:	207f      	movcs	r0, #127	@ 0x7f
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 8002ec0:	230d      	movs	r3, #13
    len = sizeof(pbContextMgr.resp.payload.log.str) - 1;

  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8002ec2:	1c42      	adds	r2, r0, #1
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	f104 0084 	add.w	r0, r4, #132	@ 0x84
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 8002eca:	f8a4 307e 	strh.w	r3, [r4, #126]	@ 0x7e
  pbContextMgr.resp.payload.log.level = lvl;
 8002ece:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8002ed2:	f00b fc90 	bl	800e7f6 <memcpy>

  aiPbMgrSendResp(&(pbContextMgr.req), &(pbContextMgr.resp), state);
 8002ed6:	f104 0178 	add.w	r1, r4, #120	@ 0x78
 8002eda:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002ede:	4632      	mov	r2, r6
 8002ee0:	f7ff ff68 	bl	8002db4 <aiPbMgrSendResp>

  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	4907      	ldr	r1, [pc, #28]	@ (8002f04 <aiPbMgrSendLogV2+0x6c>)
 8002ee8:	466a      	mov	r2, sp
 8002eea:	f003 fc70 	bl	80067ce <pb_decode_delimited>
 8002eee:	4604      	mov	r4, r0
  pb_io_flush_istream();
 8002ef0:	f7ff fe4c 	bl	8002b8c <pb_io_flush_istream>
  return res;
}
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	b003      	add	sp, #12
 8002ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
 8002efa:	4604      	mov	r4, r0
 8002efc:	e7fa      	b.n	8002ef4 <aiPbMgrSendLogV2+0x5c>
 8002efe:	bf00      	nop
 8002f00:	20006b90 	.word	0x20006b90
 8002f04:	0807f7d8 	.word	0x0807f7d8

08002f08 <aiPbMgrReceiveData>:

bool aiPbMgrReceiveData(aiPbData *data)
{
 8002f08:	b510      	push	{r4, lr}
  aiDataMsg msg;

  msg.datas.funcs.decode = &decode_data_cb;
 8002f0a:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <aiPbMgrReceiveData+0x28>)
  msg.datas.arg = (void *)data;

  /* Waiting and decoding aiDataMsg message */
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8002f0c:	4909      	ldr	r1, [pc, #36]	@ (8002f34 <aiPbMgrReceiveData+0x2c>)
{
 8002f0e:	b086      	sub	sp, #24
  msg.datas.arg = (void *)data;
 8002f10:	e9cd 3004 	strd	r3, r0, [sp, #16]
{
 8002f14:	4604      	mov	r4, r0
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8002f16:	aa01      	add	r2, sp, #4
 8002f18:	4807      	ldr	r0, [pc, #28]	@ (8002f38 <aiPbMgrReceiveData+0x30>)
 8002f1a:	f003 fc58 	bl	80067ce <pb_decode_delimited>
  pb_io_flush_istream();
 8002f1e:	f7ff fe35 	bl	8002b8c <pb_io_flush_istream>

  data->type = msg.type;
 8002f22:	9b01      	ldr	r3, [sp, #4]
 8002f24:	6023      	str	r3, [r4, #0]
  data->addr = msg.addr;
 8002f26:	9b03      	ldr	r3, [sp, #12]
 8002f28:	60a3      	str	r3, [r4, #8]

  return true;
}
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	b006      	add	sp, #24
 8002f2e:	bd10      	pop	{r4, pc}
 8002f30:	08002c4f 	.word	0x08002c4f
 8002f34:	0807fa88 	.word	0x0807fa88
 8002f38:	20006b90 	.word	0x20006b90

08002f3c <aiPbMgrSendOperator>:


bool aiPbMgrSendOperator(const reqMsg *req, respMsg *resp,
    EnumState state, const char *name, const uint32_t type, const uint32_t id,
    aiOpPerf *perf)
{
 8002f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	4617      	mov	r7, r2
  struct _encode_uint32 array;
  resp->which_payload = respMsg_op_tag;
 8002f42:	2210      	movs	r2, #16
{
 8002f44:	4606      	mov	r6, r0
 8002f46:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
  resp->which_payload = respMsg_op_tag;
 8002f48:	80ca      	strh	r2, [r1, #6]
{
 8002f4a:	460c      	mov	r4, r1
  if (name)
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	b31b      	cbz	r3, 8002f98 <aiPbMgrSendOperator+0x5c>
    aiPbStrCopy(name, &resp->payload.op.name[0], sizeof(resp->payload.op.name));
 8002f50:	2240      	movs	r2, #64	@ 0x40
 8002f52:	3108      	adds	r1, #8
 8002f54:	f7ff fed4 	bl	8002d00 <aiPbStrCopy>
  else
    resp->payload.op.name[0] = 0;
  resp->payload.op.type = type;
 8002f58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f5a:	64a3      	str	r3, [r4, #72]	@ 0x48
  resp->payload.op.id = id;
 8002f5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002f5e:	64e3      	str	r3, [r4, #76]	@ 0x4c

  if (perf) {
 8002f60:	b1f5      	cbz	r5, 8002fa0 <aiPbMgrSendOperator+0x64>
    resp->payload.op.stack_used = perf->stack_usage;
 8002f62:	692b      	ldr	r3, [r5, #16]
 8002f64:	6623      	str	r3, [r4, #96]	@ 0x60
    resp->payload.op.heap_used = perf->heap_usage;
 8002f66:	696b      	ldr	r3, [r5, #20]
 8002f68:	6663      	str	r3, [r4, #100]	@ 0x64
    resp->payload.op.duration = perf->duration;
 8002f6a:	682b      	ldr	r3, [r5, #0]
 8002f6c:	6523      	str	r3, [r4, #80]	@ 0x50
    resp->payload.op.counter_type = perf->counter_type;
 8002f6e:	686b      	ldr	r3, [r5, #4]
 8002f70:	6563      	str	r3, [r4, #84]	@ 0x54
    if (perf->counters) {
 8002f72:	68eb      	ldr	r3, [r5, #12]
 8002f74:	b193      	cbz	r3, 8002f9c <aiPbMgrSendOperator+0x60>
      array.size = perf->counter_n;
 8002f76:	68aa      	ldr	r2, [r5, #8]
	  array.data = (void *)perf->counters;
 8002f78:	e9cd 2301 	strd	r2, r3, [sp, #4]
	  array.offset = 4;
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	9303      	str	r3, [sp, #12]
      resp->payload.op.counters.funcs.encode = encode_uint32;
 8002f80:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <aiPbMgrSendOperator+0x70>)
 8002f82:	65a3      	str	r3, [r4, #88]	@ 0x58
      resp->payload.op.counters.arg = &array;
 8002f84:	ab01      	add	r3, sp, #4
 8002f86:	65e3      	str	r3, [r4, #92]	@ 0x5c
    resp->payload.op.duration = 0.0f;
    resp->payload.op.counter_type = 0;
    resp->payload.op.counters.funcs.encode = NULL;
  }

  aiPbMgrSendResp(req, resp, state);
 8002f88:	4630      	mov	r0, r6
 8002f8a:	463a      	mov	r2, r7
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	f7ff ff11 	bl	8002db4 <aiPbMgrSendResp>
  // aiPbMgrWaitAck();

  return true;
}
 8002f92:	2001      	movs	r0, #1
 8002f94:	b005      	add	sp, #20
 8002f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.op.name[0] = 0;
 8002f98:	720b      	strb	r3, [r1, #8]
 8002f9a:	e7dd      	b.n	8002f58 <aiPbMgrSendOperator+0x1c>
      resp->payload.op.counters.funcs.encode = NULL;
 8002f9c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002f9e:	e7f3      	b.n	8002f88 <aiPbMgrSendOperator+0x4c>
    resp->payload.op.duration = 0.0f;
 8002fa0:	2300      	movs	r3, #0
    resp->payload.op.counters.funcs.encode = NULL;
 8002fa2:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
    resp->payload.op.duration = 0.0f;
 8002fa6:	6523      	str	r3, [r4, #80]	@ 0x50
    resp->payload.op.counter_type = 0;
 8002fa8:	e7ee      	b.n	8002f88 <aiPbMgrSendOperator+0x4c>
 8002faa:	bf00      	nop
 8002fac:	08002bdb 	.word	0x08002bdb

08002fb0 <aiPbCmdSync>:
#if defined(_IS_GHS_COMPILER) && _IS_GHS_COMPILER
#define _ARM_TOOLS_ID       EnumTools_AI_GHS
#endif

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 8002fb0:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 8002fb2:	240a      	movs	r4, #10
 8002fb4:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 8002fb6:	f240 3401 	movw	r4, #769	@ 0x301
 8002fba:	608c      	str	r4, [r1, #8]
   *  b15..b8  8b : API variant (EnumAiApiRuntime value)
   *  b23..b16 8b : TOOL-CHAIN ID (EnumTools value)
   */

  resp->payload.sync.rtid = ((uint32_t)param >> 16) & 0xFFFF;
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8002fbc:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = ((uint32_t)param >> 16) & 0xFFFF;
 8002fbe:	0c12      	lsrs	r2, r2, #16

  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << EnumTools_AI_TOOLS_POS);
 8002fc0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8002fc4:	60cc      	str	r4, [r1, #12]
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << EnumTools_AI_TOOLS_POS);
 8002fc6:	610a      	str	r2, [r1, #16]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}
 8002fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f7ff bef1 	b.w	8002db4 <aiPbMgrSendResp>
	...

08002fd4 <_aiPrintDataInfo>:
    );
}


static void _aiPrintDataInfo(const int idx, const ai_buffer *buffer)
{
 8002fd4:	b570      	push	{r4, r5, r6, lr}
  const ai_buffer_format fmt = buffer->format;
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 8002fd6:	e9d1 6500 	ldrd	r6, r5, [r1]
{
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4608      	mov	r0, r1
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 8002fde:	2101      	movs	r1, #1
 8002fe0:	f003 ff86 	bl	8006ef0 <ai_buffer_get_size>
 8002fe4:	4631      	mov	r1, r6
 8002fe6:	f003 ffb5 	bl	8006f54 <ai_buffer_get_byte_size>
 8002fea:	462a      	mov	r2, r5
 8002fec:	4603      	mov	r3, r0
 8002fee:	4621      	mov	r1, r4
 8002ff0:	4802      	ldr	r0, [pc, #8]	@ (8002ffc <_aiPrintDataInfo+0x28>)
      idx,
      (int)buffer->data,
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
  );
}
 8002ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 8002ff6:	f000 ba8d 	b.w	8003514 <lc_print>
 8002ffa:	bf00      	nop
 8002ffc:	08010be0 	.word	0x08010be0

08003000 <aiPlatformVersion>:
{
 8003000:	b530      	push	{r4, r5, lr}
  LC_PRINT("\r\n");
 8003002:	4c19      	ldr	r4, [pc, #100]	@ (8003068 <aiPlatformVersion+0x68>)
{
 8003004:	b089      	sub	sp, #36	@ 0x24
  LC_PRINT("\r\n");
 8003006:	f104 0513 	add.w	r5, r4, #19
  stai_runtime_get_info(&netrt_info);
 800300a:	a802      	add	r0, sp, #8
 800300c:	f003 ff14 	bl	8006e38 <stai_runtime_get_info>
  LC_PRINT("\r\n");
 8003010:	4628      	mov	r0, r5
 8003012:	f000 fa7f 	bl	8003514 <lc_print>
  LC_PRINT("ST.AI RT\r\n");
 8003016:	f104 0016 	add.w	r0, r4, #22
 800301a:	f000 fa7b 	bl	8003514 <lc_print>
  LC_PRINT("--------------------------------------------------\r\n");
 800301e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8003022:	f000 fa77 	bl	8003514 <lc_print>
  LC_PRINT(" tools version   : v%d.%d.%d\r\n", (int)netrt_info.tools_version.major,
 8003026:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800302a:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800302e:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8003032:	f104 0056 	add.w	r0, r4, #86	@ 0x56
 8003036:	f000 fa6d 	bl	8003514 <lc_print>
  LC_PRINT(" network rt lib  : v%d.%d.%d-%x\r\n", (int)netrt_info.runtime_version.major,
 800303a:	9b05      	ldr	r3, [sp, #20]
 800303c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003040:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	f104 0075 	add.w	r0, r4, #117	@ 0x75
 800304a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800304e:	f000 fa61 	bl	8003514 <lc_print>
  LC_PRINT("   compiled with : %s\r\n", netrt_info.compiler_desc);
 8003052:	9907      	ldr	r1, [sp, #28]
 8003054:	f104 0097 	add.w	r0, r4, #151	@ 0x97
 8003058:	f000 fa5c 	bl	8003514 <lc_print>
  LC_PRINT("\r\n");
 800305c:	4628      	mov	r0, r5
 800305e:	f000 fa59 	bl	8003514 <lc_print>
}
 8003062:	b009      	add	sp, #36	@ 0x24
 8003064:	bd30      	pop	{r4, r5, pc}
 8003066:	bf00      	nop
 8003068:	08010be0 	.word	0x08010be0

0800306c <aiLogErr>:
{
 800306c:	b410      	push	{r4}
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800306e:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8003072:	b2c4      	uxtb	r4, r0
  if (fct)
 8003074:	b129      	cbz	r1, 8003082 <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003076:	4622      	mov	r2, r4
 8003078:	4805      	ldr	r0, [pc, #20]	@ (8003090 <aiLogErr+0x24>)
}
 800307a:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800307e:	f000 ba49 	b.w	8003514 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003082:	4621      	mov	r1, r4
 8003084:	4803      	ldr	r0, [pc, #12]	@ (8003094 <aiLogErr+0x28>)
}
 8003086:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800308a:	461a      	mov	r2, r3
 800308c:	f000 ba42 	b.w	8003514 <lc_print>
 8003090:	08010c8f 	.word	0x08010c8f
 8003094:	08010cbc 	.word	0x08010cbc

08003098 <aiPrintBufferInfo>:
{
 8003098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LC_PRINT("(%d,%d,%d,",
 800309c:	6981      	ldr	r1, [r0, #24]
  const ai_buffer_format fmt = buffer->format;
 800309e:	6807      	ldr	r7, [r0, #0]
{
 80030a0:	4605      	mov	r5, r0
  LC_PRINT("(%d,%d,%d,",
 80030a2:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 80030a6:	4869      	ldr	r0, [pc, #420]	@ (800324c <aiPrintBufferInfo+0x1b4>)
 80030a8:	6809      	ldr	r1, [r1, #0]
 80030aa:	f000 fa33 	bl	8003514 <lc_print>
  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 80030ae:	696a      	ldr	r2, [r5, #20]
 80030b0:	69a8      	ldr	r0, [r5, #24]
 80030b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030b6:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 80030ba:	d118      	bne.n	80030ee <aiPrintBufferInfo+0x56>
    LC_PRINT("%d,%d)",
 80030bc:	6842      	ldr	r2, [r0, #4]
 80030be:	6901      	ldr	r1, [r0, #16]
 80030c0:	4863      	ldr	r0, [pc, #396]	@ (8003250 <aiPrintBufferInfo+0x1b8>)
 80030c2:	f000 fa27 	bl	8003514 <lc_print>
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 80030c6:	2101      	movs	r1, #1
 80030c8:	4628      	mov	r0, r5
 80030ca:	f003 ff11 	bl	8006ef0 <ai_buffer_get_size>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 80030ce:	f407 16f0 	and.w	r6, r7, #1966080	@ 0x1e0000
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 80030d2:	4601      	mov	r1, r0
 80030d4:	485f      	ldr	r0, [pc, #380]	@ (8003254 <aiPrintBufferInfo+0x1bc>)
 80030d6:	f000 fa1d 	bl	8003514 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 80030da:	f5b6 3f00 	cmp.w	r6, #131072	@ 0x20000
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80030de:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 80030e2:	d113      	bne.n	800310c <aiPrintBufferInfo+0x74>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80030e4:	485c      	ldr	r0, [pc, #368]	@ (8003258 <aiPrintBufferInfo+0x1c0>)
 80030e6:	4621      	mov	r1, r4
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80030e8:	f000 fa14 	bl	8003514 <lc_print>
 80030ec:	e048      	b.n	8003180 <aiPrintBufferInfo+0xe8>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 80030ee:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
    LC_PRINT("%d,%d,%d)",
 80030f2:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 80030f4:	d105      	bne.n	8003102 <aiPrintBufferInfo+0x6a>
    LC_PRINT("%d,%d,%d)",
 80030f6:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 80030fa:	4858      	ldr	r0, [pc, #352]	@ (800325c <aiPrintBufferInfo+0x1c4>)
 80030fc:	f000 fa0a 	bl	8003514 <lc_print>
 8003100:	e7e1      	b.n	80030c6 <aiPrintBufferInfo+0x2e>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 8003102:	4857      	ldr	r0, [pc, #348]	@ (8003260 <aiPrintBufferInfo+0x1c8>)
 8003104:	4619      	mov	r1, r3
 8003106:	f000 fa05 	bl	8003514 <lc_print>
 800310a:	e7dc      	b.n	80030c6 <aiPrintBufferInfo+0x2e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 800310c:	f5b6 2fc0 	cmp.w	r6, #393216	@ 0x60000
 8003110:	d102      	bne.n	8003118 <aiPrintBufferInfo+0x80>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003112:	4854      	ldr	r0, [pc, #336]	@ (8003264 <aiPrintBufferInfo+0x1cc>)
 8003114:	4621      	mov	r1, r4
 8003116:	e7e7      	b.n	80030e8 <aiPrintBufferInfo+0x50>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 8003118:	f8df 8160 	ldr.w	r8, [pc, #352]	@ 800327c <aiPrintBufferInfo+0x1e4>
 800311c:	f417 0f00 	tst.w	r7, #8388608	@ 0x800000
 8003120:	f1a8 0102 	sub.w	r1, r8, #2
 8003124:	4622      	mov	r2, r4
 8003126:	bf08      	it	eq
 8003128:	4641      	moveq	r1, r8
 800312a:	f108 0039 	add.w	r0, r8, #57	@ 0x39
 800312e:	f000 f9f1 	bl	8003514 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8003132:	f5b6 2f80 	cmp.w	r6, #262144	@ 0x40000
 8003136:	d123      	bne.n	8003180 <aiPrintBufferInfo+0xe8>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8003138:	68ab      	ldr	r3, [r5, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d069      	beq.n	8003212 <aiPrintBufferInfo+0x17a>
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	07d2      	lsls	r2, r2, #31
 8003142:	d566      	bpl.n	8003212 <aiPrintBufferInfo+0x17a>
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d063      	beq.n	8003212 <aiPrintBufferInfo+0x17a>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 800314a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
      LC_PRINT(" %d:", s_);
 800314e:	f108 003e 	add.w	r0, r8, #62	@ 0x3e
      const int max_ = s_> 4?4:s_;
 8003152:	f1b9 0f04 	cmp.w	r9, #4
      LC_PRINT(" %d:", s_);
 8003156:	4649      	mov	r1, r9
      const int max_ = s_> 4?4:s_;
 8003158:	46ca      	mov	sl, r9
 800315a:	bf28      	it	cs
 800315c:	f04f 0a04 	movcs.w	sl, #4
      LC_PRINT(" %d:", s_);
 8003160:	f000 f9d8 	bl	8003514 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8003164:	2600      	movs	r6, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003166:	f04f 0b00 	mov.w	fp, #0
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 800316a:	f108 0843 	add.w	r8, r8, #67	@ 0x43
      for (int idx=0; idx<max_; idx++) {
 800316e:	4556      	cmp	r6, sl
 8003170:	db18      	blt.n	80031a4 <aiPrintBufferInfo+0x10c>
      LC_PRINT((s_ > max_)?"..":"");
 8003172:	4b3d      	ldr	r3, [pc, #244]	@ (8003268 <aiPrintBufferInfo+0x1d0>)
 8003174:	1ed8      	subs	r0, r3, #3
 8003176:	45ca      	cmp	sl, r9
 8003178:	bf28      	it	cs
 800317a:	4618      	movcs	r0, r3
 800317c:	f000 f9ca 	bl	8003514 <lc_print>
  if (buffer->data)
 8003180:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 8003182:	2101      	movs	r1, #1
 8003184:	4628      	mov	r0, r5
  if (buffer->data)
 8003186:	2c00      	cmp	r4, #0
 8003188:	d054      	beq.n	8003234 <aiPrintBufferInfo+0x19c>
    LC_PRINT(" @0x%X/%d",
 800318a:	f003 feb1 	bl	8006ef0 <ai_buffer_get_size>
 800318e:	4639      	mov	r1, r7
 8003190:	f003 fee0 	bl	8006f54 <ai_buffer_get_byte_size>
 8003194:	4602      	mov	r2, r0
 8003196:	4835      	ldr	r0, [pc, #212]	@ (800326c <aiPrintBufferInfo+0x1d4>)
 8003198:	4621      	mov	r1, r4
}
 800319a:	b003      	add	sp, #12
 800319c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 80031a0:	f000 b9b8 	b.w	8003514 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80031a4:	68ab      	ldr	r3, [r5, #8]
 80031a6:	b363      	cbz	r3, 8003202 <aiPrintBufferInfo+0x16a>
 80031a8:	681c      	ldr	r4, [r3, #0]
 80031aa:	f014 0401 	ands.w	r4, r4, #1
 80031ae:	d02b      	beq.n	8003208 <aiPrintBufferInfo+0x170>
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	b35a      	cbz	r2, 800320c <aiPrintBufferInfo+0x174>
 80031b4:	6853      	ldr	r3, [r2, #4]
 80031b6:	b1d3      	cbz	r3, 80031ee <aiPrintBufferInfo+0x156>
 80031b8:	8851      	ldrh	r1, [r2, #2]
 80031ba:	42b1      	cmp	r1, r6
 80031bc:	dd17      	ble.n	80031ee <aiPrintBufferInfo+0x156>
 80031be:	6819      	ldr	r1, [r3, #0]
 80031c0:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80031c4:	6808      	ldr	r0, [r1, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80031c6:	8814      	ldrh	r4, [r2, #0]
 80031c8:	f014 0402 	ands.w	r4, r4, #2
 80031cc:	d012      	beq.n	80031f4 <aiPrintBufferInfo+0x15c>
 80031ce:	b1cb      	cbz	r3, 8003204 <aiPrintBufferInfo+0x16c>
 80031d0:	8852      	ldrh	r2, [r2, #2]
 80031d2:	42b2      	cmp	r2, r6
 80031d4:	dd1b      	ble.n	800320e <aiPrintBufferInfo+0x176>
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	5d9c      	ldrb	r4, [r3, r6]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80031da:	f7fd f9c5 	bl	8000568 <__aeabi_f2d>
 80031de:	9400      	str	r4, [sp, #0]
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4640      	mov	r0, r8
 80031e6:	f000 f995 	bl	8003514 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 80031ea:	3601      	adds	r6, #1
 80031ec:	e7bf      	b.n	800316e <aiPrintBufferInfo+0xd6>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80031ee:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80031f2:	e7e8      	b.n	80031c6 <aiPrintBufferInfo+0x12e>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80031f4:	b133      	cbz	r3, 8003204 <aiPrintBufferInfo+0x16c>
 80031f6:	8852      	ldrh	r2, [r2, #2]
 80031f8:	42b2      	cmp	r2, r6
 80031fa:	ddee      	ble.n	80031da <aiPrintBufferInfo+0x142>
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	579c      	ldrsb	r4, [r3, r6]
 8003200:	e7eb      	b.n	80031da <aiPrintBufferInfo+0x142>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003202:	4658      	mov	r0, fp
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003204:	461c      	mov	r4, r3
 8003206:	e7e8      	b.n	80031da <aiPrintBufferInfo+0x142>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003208:	4658      	mov	r0, fp
 800320a:	e7e6      	b.n	80031da <aiPrintBufferInfo+0x142>
 800320c:	2000      	movs	r0, #0
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800320e:	2400      	movs	r4, #0
 8003210:	e7e3      	b.n	80031da <aiPrintBufferInfo+0x142>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8003212:	f417 5f70 	tst.w	r7, #15360	@ 0x3c00
 8003216:	d102      	bne.n	800321e <aiPrintBufferInfo+0x186>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003218:	4815      	ldr	r0, [pc, #84]	@ (8003270 <aiPrintBufferInfo+0x1d8>)
 800321a:	4621      	mov	r1, r4
 800321c:	e764      	b.n	80030e8 <aiPrintBufferInfo+0x50>
      LC_PRINT(" Q%d.%d",
 800321e:	f007 027f 	and.w	r2, r7, #127	@ 0x7f
 8003222:	3a40      	subs	r2, #64	@ 0x40
 8003224:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 8003228:	4411      	add	r1, r2
 800322a:	4812      	ldr	r0, [pc, #72]	@ (8003274 <aiPrintBufferInfo+0x1dc>)
 800322c:	1a61      	subs	r1, r4, r1
 800322e:	f000 f971 	bl	8003514 <lc_print>
 8003232:	e7a5      	b.n	8003180 <aiPrintBufferInfo+0xe8>
    LC_PRINT(" (User Domain)/%d",
 8003234:	f003 fe5c 	bl	8006ef0 <ai_buffer_get_size>
 8003238:	4639      	mov	r1, r7
 800323a:	f003 fe8b 	bl	8006f54 <ai_buffer_get_byte_size>
 800323e:	4601      	mov	r1, r0
 8003240:	480d      	ldr	r0, [pc, #52]	@ (8003278 <aiPrintBufferInfo+0x1e0>)
}
 8003242:	b003      	add	sp, #12
 8003244:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 8003248:	f000 b964 	b.w	8003514 <lc_print>
 800324c:	08010cec 	.word	0x08010cec
 8003250:	08010cf7 	.word	0x08010cf7
 8003254:	08010d0c 	.word	0x08010d0c
 8003258:	08010d10 	.word	0x08010d10
 800325c:	08010cfe 	.word	0x08010cfe
 8003260:	08010d08 	.word	0x08010d08
 8003264:	08010d18 	.word	0x08010d18
 8003268:	08010ceb 	.word	0x08010ceb
 800326c:	08010d45 	.word	0x08010d45
 8003270:	08010d32 	.word	0x08010d32
 8003274:	08010d3d 	.word	0x08010d3d
 8003278:	08010d4f 	.word	0x08010d4f
 800327c:	08010ce6 	.word	0x08010ce6

08003280 <aiPrintNetworkInfo>:


void aiPrintNetworkInfo(const ai_network_report* report)
{
 8003280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003284:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 8003286:	4842      	ldr	r0, [pc, #264]	@ (8003390 <aiPrintNetworkInfo+0x110>)
 8003288:	f000 f944 	bl	8003514 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 800328c:	6821      	ldr	r1, [r4, #0]
 800328e:	4841      	ldr	r0, [pc, #260]	@ (8003394 <aiPrintNetworkInfo+0x114>)
 8003290:	f000 f940 	bl	8003514 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8003294:	6861      	ldr	r1, [r4, #4]
 8003296:	4840      	ldr	r0, [pc, #256]	@ (8003398 <aiPrintNetworkInfo+0x118>)
 8003298:	f000 f93c 	bl	8003514 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 800329c:	68a1      	ldr	r1, [r4, #8]
 800329e:	483f      	ldr	r0, [pc, #252]	@ (800339c <aiPrintNetworkInfo+0x11c>)
 80032a0:	f000 f938 	bl	8003514 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 80032a4:	68e1      	ldr	r1, [r4, #12]
 80032a6:	483e      	ldr	r0, [pc, #248]	@ (80033a0 <aiPrintNetworkInfo+0x120>)
 80032a8:	f000 f934 	bl	8003514 <lc_print>

  if (report->tool_revision[0])
 80032ac:	69a1      	ldr	r1, [r4, #24]
 80032ae:	780b      	ldrb	r3, [r1, #0]
 80032b0:	b113      	cbz	r3, 80032b8 <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 80032b2:	483c      	ldr	r0, [pc, #240]	@ (80033a4 <aiPrintNetworkInfo+0x124>)
 80032b4:	f000 f92e 	bl	8003514 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 80032b8:	7fa3      	ldrb	r3, [r4, #30]
 80032ba:	7f62      	ldrb	r2, [r4, #29]
 80032bc:	7f21      	ldrb	r1, [r4, #28]
 80032be:	483a      	ldr	r0, [pc, #232]	@ (80033a8 <aiPrintNetworkInfo+0x128>)
 80032c0:	f000 f928 	bl	8003514 <lc_print>
      report->tool_version.major,
      report->tool_version.minor,
      report->tool_version.micro);
  LC_PRINT(" complexity         : %s MACC\r\n", uint64ToDecimal(report->n_macc));
 80032c4:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	@ 0x30
 80032c8:	f000 f8e4 	bl	8003494 <uint64ToDecimal>
 80032cc:	4601      	mov	r1, r0
 80032ce:	4837      	ldr	r0, [pc, #220]	@ (80033ac <aiPrintNetworkInfo+0x12c>)
 80032d0:	f000 f920 	bl	8003514 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 80032d4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80032d6:	4836      	ldr	r0, [pc, #216]	@ (80033b0 <aiPrintNetworkInfo+0x130>)
 80032d8:	f000 f91c 	bl	8003514 <lc_print>

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 80032dc:	f8b4 1052 	ldrh.w	r1, [r4, #82]	@ 0x52
 80032e0:	4834      	ldr	r0, [pc, #208]	@ (80033b4 <aiPrintNetworkInfo+0x134>)
 80032e2:	f000 f917 	bl	8003514 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80032e6:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80032e8:	261c      	movs	r6, #28
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80032ea:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80032ee:	42ab      	cmp	r3, r5
 80032f0:	dc21      	bgt.n	8003336 <aiPrintNetworkInfo+0xb6>
      _aiPrintDataInfo(idx, buffer);
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 80032f2:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 80032f6:	4830      	ldr	r0, [pc, #192]	@ (80033b8 <aiPrintNetworkInfo+0x138>)
 80032f8:	f000 f90c 	bl	8003514 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80032fc:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80032fe:	261c      	movs	r6, #28
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003300:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 8003304:	42ab      	cmp	r3, r5
 8003306:	dc1e      	bgt.n	8003346 <aiPrintNetworkInfo+0xc6>
      _aiPrintDataInfo(idx, buffer);
  }

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8003308:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 800330a:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800330c:	482b      	ldr	r0, [pc, #172]	@ (80033bc <aiPrintNetworkInfo+0x13c>)
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    LC_PRINT("  I[%d] ", i);
 800330e:	4e2c      	ldr	r6, [pc, #176]	@ (80033c0 <aiPrintNetworkInfo+0x140>)
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8003310:	f000 f900 	bl	8003514 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8003314:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 8003316:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8003318:	f2a6 28bf 	subw	r8, r6, #703	@ 0x2bf
  for (int i=0; i<report->n_inputs; i++) {
 800331c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800331e:	42ab      	cmp	r3, r5
 8003320:	dc19      	bgt.n	8003356 <aiPrintNetworkInfo+0xd6>
  }

  for (int i=0; i<report->n_outputs; i++) {
    LC_PRINT("  O[%d] ", i);
 8003322:	4e28      	ldr	r6, [pc, #160]	@ (80033c4 <aiPrintNetworkInfo+0x144>)
  for (int i=0; i<report->n_outputs; i++) {
 8003324:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 8003326:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8003328:	f5a6 7832 	sub.w	r8, r6, #712	@ 0x2c8
  for (int i=0; i<report->n_outputs; i++) {
 800332c:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 800332e:	42ab      	cmp	r3, r5
 8003330:	dc1f      	bgt.n	8003372 <aiPrintNetworkInfo+0xf2>
  }
}
 8003332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8003336:	6d61      	ldr	r1, [r4, #84]	@ 0x54
      _aiPrintDataInfo(idx, buffer);
 8003338:	4628      	mov	r0, r5
 800333a:	fb06 1105 	mla	r1, r6, r5, r1
 800333e:	f7ff fe49 	bl	8002fd4 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003342:	3501      	adds	r5, #1
 8003344:	e7d1      	b.n	80032ea <aiPrintNetworkInfo+0x6a>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8003346:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      _aiPrintDataInfo(idx, buffer);
 8003348:	4628      	mov	r0, r5
 800334a:	fb06 1105 	mla	r1, r6, r5, r1
 800334e:	f7ff fe41 	bl	8002fd4 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003352:	3501      	adds	r5, #1
 8003354:	e7d4      	b.n	8003300 <aiPrintNetworkInfo+0x80>
    LC_PRINT("  I[%d] ", i);
 8003356:	4629      	mov	r1, r5
 8003358:	4630      	mov	r0, r6
 800335a:	f000 f8db 	bl	8003514 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 800335e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003360:	fb07 0005 	mla	r0, r7, r5, r0
 8003364:	f7ff fe98 	bl	8003098 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8003368:	4640      	mov	r0, r8
 800336a:	f000 f8d3 	bl	8003514 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 800336e:	3501      	adds	r5, #1
 8003370:	e7d4      	b.n	800331c <aiPrintNetworkInfo+0x9c>
    LC_PRINT("  O[%d] ", i);
 8003372:	4629      	mov	r1, r5
 8003374:	4630      	mov	r0, r6
 8003376:	f000 f8cd 	bl	8003514 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 800337a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800337c:	fb07 0005 	mla	r0, r7, r5, r0
 8003380:	f7ff fe8a 	bl	8003098 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8003384:	4640      	mov	r0, r8
 8003386:	f000 f8c5 	bl	8003514 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 800338a:	3501      	adds	r5, #1
 800338c:	e7ce      	b.n	800332c <aiPrintNetworkInfo+0xac>
 800338e:	bf00      	nop
 8003390:	08010d61 	.word	0x08010d61
 8003394:	08010d7b 	.word	0x08010d7b
 8003398:	08010d96 	.word	0x08010d96
 800339c:	08010db1 	.word	0x08010db1
 80033a0:	08010dcc 	.word	0x08010dcc
 80033a4:	08010de7 	.word	0x08010de7
 80033a8:	08010e02 	.word	0x08010e02
 80033ac:	08010e23 	.word	0x08010e23
 80033b0:	08010e43 	.word	0x08010e43
 80033b4:	08010e5e 	.word	0x08010e5e
 80033b8:	08010e79 	.word	0x08010e79
 80033bc:	08010e94 	.word	0x08010e94
 80033c0:	08010eb2 	.word	0x08010eb2
 80033c4:	08010ebb 	.word	0x08010ebb

080033c8 <_put_c_buffer_cb>:
};

static void _put_c_buffer_cb(void *user, const char c)
{
  struct _buffer *buffer = (struct _buffer *)user;
  if (buffer->pos < (buffer->size - 1)) {
 80033c8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d207      	bcs.n	80033e2 <_put_c_buffer_cb+0x1a>
    buffer->buffer[buffer->pos] = c;
 80033d2:	6803      	ldr	r3, [r0, #0]
 80033d4:	5499      	strb	r1, [r3, r2]
    buffer->pos++;
 80033d6:	6883      	ldr	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 80033d8:	6802      	ldr	r2, [r0, #0]
    buffer->pos++;
 80033da:	3301      	adds	r3, #1
    buffer->buffer[buffer->pos] = 0;
 80033dc:	2100      	movs	r1, #0
    buffer->pos++;
 80033de:	6083      	str	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 80033e0:	54d1      	strb	r1, [r2, r3]
  }
}
 80033e2:	4770      	bx	lr

080033e4 <_put_c_driver>:
{
 80033e4:	b507      	push	{r0, r1, r2, lr}
  if (_ioWriteAllowed)
 80033e6:	4b08      	ldr	r3, [pc, #32]	@ (8003408 <_put_c_driver+0x24>)
{
 80033e8:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b13b      	cbz	r3, 8003400 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80033f0:	4806      	ldr	r0, [pc, #24]	@ (800340c <_put_c_driver+0x28>)
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295
 80033f6:	2201      	movs	r2, #1
 80033f8:	f10d 0107 	add.w	r1, sp, #7
 80033fc:	f7ff fa0f 	bl	800281e <HAL_UART_Transmit>
}
 8003400:	b003      	add	sp, #12
 8003402:	f85d fb04 	ldr.w	pc, [sp], #4
 8003406:	bf00      	nop
 8003408:	2000000c 	.word	0x2000000c
 800340c:	20006a30 	.word	0x20006a30

08003410 <ioRawWriteBuffer>:
{
 8003410:	b508      	push	{r3, lr}
 8003412:	b28a      	uxth	r2, r1
 8003414:	f04f 33ff 	mov.w	r3, #4294967295
 8003418:	4601      	mov	r1, r0
 800341a:	4803      	ldr	r0, [pc, #12]	@ (8003428 <ioRawWriteBuffer+0x18>)
 800341c:	f7ff f9ff 	bl	800281e <HAL_UART_Transmit>
}
 8003420:	fab0 f080 	clz	r0, r0
 8003424:	0940      	lsrs	r0, r0, #5
 8003426:	bd08      	pop	{r3, pc}
 8003428:	20006a30 	.word	0x20006a30

0800342c <ioRawReadBuffer>:
{
 800342c:	b508      	push	{r3, lr}

__STATIC_INLINE bool port_io_read(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 800342e:	b28a      	uxth	r2, r1
 8003430:	f04f 33ff 	mov.w	r3, #4294967295
 8003434:	4601      	mov	r1, r0
 8003436:	4803      	ldr	r0, [pc, #12]	@ (8003444 <ioRawReadBuffer+0x18>)
 8003438:	f7ff fa3f 	bl	80028ba <HAL_UART_Receive>
}
 800343c:	fab0 f080 	clz	r0, r0
 8003440:	0940      	lsrs	r0, r0, #5
 8003442:	bd08      	pop	{r3, pc}
 8003444:	20006a30 	.word	0x20006a30

08003448 <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 8003448:	4b01      	ldr	r3, [pc, #4]	@ (8003450 <ioRawDisableLLWrite+0x8>)
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
}
 800344e:	4770      	bx	lr
 8003450:	2000000c 	.word	0x2000000c

08003454 <_write>:
{
 8003454:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8003456:	1e14      	subs	r4, r2, #0
 8003458:	da0a      	bge.n	8003470 <_write+0x1c>
 800345a:	3801      	subs	r0, #1
 800345c:	2801      	cmp	r0, #1
 800345e:	d907      	bls.n	8003470 <_write+0x1c>
    errno = EBADF;
 8003460:	f00b f99c 	bl	800e79c <__errno>
 8003464:	2309      	movs	r3, #9
 8003466:	6003      	str	r3, [r0, #0]
    return -1;
 8003468:	f04f 34ff 	mov.w	r4, #4294967295
}
 800346c:	4620      	mov	r0, r4
 800346e:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <_write+0x38>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f9      	beq.n	800346c <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003478:	b2a2      	uxth	r2, r4
 800347a:	4805      	ldr	r0, [pc, #20]	@ (8003490 <_write+0x3c>)
 800347c:	f04f 33ff 	mov.w	r3, #4294967295
 8003480:	f7ff f9cd 	bl	800281e <HAL_UART_Transmit>
  return (status ? count : 0);
 8003484:	2800      	cmp	r0, #0
 8003486:	bf18      	it	ne
 8003488:	2400      	movne	r4, #0
 800348a:	e7ef      	b.n	800346c <_write+0x18>
 800348c:	2000000c 	.word	0x2000000c
 8003490:	20006a30 	.word	0x20006a30

08003494 <uint64ToDecimal>:
{ /* see https://www.eevblog.com/forum/microcontrollers/printf-uint64_t-with-arm-gcc/ */
 8003494:	b510      	push	{r4, lr}
  *(--p) = '\0';
 8003496:	4c0a      	ldr	r4, [pc, #40]	@ (80034c0 <uint64ToDecimal+0x2c>)
 8003498:	2300      	movs	r3, #0
 800349a:	f804 3f14 	strb.w	r3, [r4, #20]!
  for (bool first = true; v || first; first = false) {
 800349e:	2301      	movs	r3, #1
 80034a0:	ea50 0201 	orrs.w	r2, r0, r1
 80034a4:	d102      	bne.n	80034ac <uint64ToDecimal+0x18>
 80034a6:	b90b      	cbnz	r3, 80034ac <uint64ToDecimal+0x18>
}
 80034a8:	4620      	mov	r0, r4
 80034aa:	bd10      	pop	{r4, pc}
    const uint32_t digit = v % 10;
 80034ac:	220a      	movs	r2, #10
 80034ae:	2300      	movs	r3, #0
 80034b0:	f7fd fc98 	bl	8000de4 <__aeabi_uldivmod>
    const char c = '0' + digit;
 80034b4:	3230      	adds	r2, #48	@ 0x30
    *(--p) = c;
 80034b6:	f804 2d01 	strb.w	r2, [r4, #-1]!
  for (bool first = true; v || first; first = false) {
 80034ba:	2300      	movs	r3, #0
 80034bc:	e7f0      	b.n	80034a0 <uint64ToDecimal+0xc>
 80034be:	bf00      	nop
 80034c0:	20006db0 	.word	0x20006db0

080034c4 <uint32_to_str>:
  dest[0] = ' ';
 80034c4:	2320      	movs	r3, #32
    if (max < 2)
 80034c6:	2a02      	cmp	r2, #2
{
 80034c8:	b570      	push	{r4, r5, r6, lr}
  dest[0] = ' ';
 80034ca:	700b      	strb	r3, [r1, #0]
    int off = (val >> ((7 - i) * 4)) & 0xF;
 80034cc:	ea4f 7410 	mov.w	r4, r0, lsr #28
    if (max < 2)
 80034d0:	dd1d      	ble.n	800350e <uint32_to_str+0x4a>
 80034d2:	3a01      	subs	r2, #1
 80034d4:	2301      	movs	r3, #1
    int off = (val >> ((7 - i) * 4)) & 0xF;
 80034d6:	f06f 0603 	mvn.w	r6, #3
    if (off > 9) {
 80034da:	2c09      	cmp	r4, #9
      dest[i+1] = 'A' + (off - 10);
 80034dc:	b2e5      	uxtb	r5, r4
 80034de:	bf8c      	ite	hi
 80034e0:	f105 0437 	addhi.w	r4, r5, #55	@ 0x37
      dest[i+1] = '0' + off;
 80034e4:	f105 0430 	addls.w	r4, r5, #48	@ 0x30
  for (i = 0; i < 8; i++)
 80034e8:	2b08      	cmp	r3, #8
      dest[i+1] = 'A' + (off - 10);
 80034ea:	54cc      	strb	r4, [r1, r3]
  for (i = 0; i < 8; i++)
 80034ec:	d103      	bne.n	80034f6 <uint32_to_str+0x32>
  dest[i+1] = 0;
 80034ee:	4419      	add	r1, r3
 80034f0:	2300      	movs	r3, #0
 80034f2:	704b      	strb	r3, [r1, #1]
}
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
    int off = (val >> ((7 - i) * 4)) & 0xF;
 80034f6:	fb06 f403 	mul.w	r4, r6, r3
 80034fa:	341c      	adds	r4, #28
    if (max < 2)
 80034fc:	1c5d      	adds	r5, r3, #1
    int off = (val >> ((7 - i) * 4)) & 0xF;
 80034fe:	fa20 f404 	lsr.w	r4, r0, r4
    if (max < 2)
 8003502:	42aa      	cmp	r2, r5
 8003504:	f004 040f 	and.w	r4, r4, #15
 8003508:	d0f1      	beq.n	80034ee <uint32_to_str+0x2a>
 800350a:	462b      	mov	r3, r5
 800350c:	e7e5      	b.n	80034da <uint32_to_str+0x16>
  for (i = 0; i < 8; i++)
 800350e:	2300      	movs	r3, #0
 8003510:	e7ed      	b.n	80034ee <uint32_to_str+0x2a>
	...

08003514 <lc_print>:
{
 8003514:	b40f      	push	{r0, r1, r2, r3}
 8003516:	b507      	push	{r0, r1, r2, lr}
 8003518:	ab04      	add	r3, sp, #16
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 800351a:	2100      	movs	r1, #0
{
 800351c:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003520:	4804      	ldr	r0, [pc, #16]	@ (8003534 <lc_print+0x20>)
  va_start(ap, fmt);
 8003522:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003524:	f001 fa14 	bl	8004950 <vlc_print>
}
 8003528:	b003      	add	sp, #12
 800352a:	f85d eb04 	ldr.w	lr, [sp], #4
 800352e:	b004      	add	sp, #16
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	080033e5 	.word	0x080033e5

08003538 <lc_vsnprint>:

size_t lc_vsnprint(char *buff, size_t size, const char* fmt, va_list vlist)
{
 8003538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct _buffer buffer = {buff, size, 0};
 800353a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800353e:	2100      	movs	r1, #0
 8003540:	9103      	str	r1, [sp, #12]
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 8003542:	4804      	ldr	r0, [pc, #16]	@ (8003554 <lc_vsnprint+0x1c>)
 8003544:	a901      	add	r1, sp, #4
 8003546:	f001 fa03 	bl	8004950 <vlc_print>
  return buffer.pos - 1;
}
 800354a:	9803      	ldr	r0, [sp, #12]
 800354c:	3801      	subs	r0, #1
 800354e:	b005      	add	sp, #20
 8003550:	f85d fb04 	ldr.w	pc, [sp], #4
 8003554:	080033c9 	.word	0x080033c9

08003558 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8003558:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 800355a:	4d11      	ldr	r5, [pc, #68]	@ (80035a0 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 800355c:	1cc4      	adds	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 800355e:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8003560:	f024 0403 	bic.w	r4, r4, #3
  io_malloc.cfg |= 1 << 1;
 8003564:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003568:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 800356c:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800356e:	f00a fa87 	bl	800da80 <malloc>

  /* remember size */
  if (ptr) {
 8003572:	b1a0      	cbz	r0, 800359e <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003574:	1903      	adds	r3, r0, r4
 8003576:	4a0b      	ldr	r2, [pc, #44]	@ (80035a4 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8003578:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 800357a:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	07db      	lsls	r3, r3, #31
 8003580:	d50c      	bpl.n	800359c <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8003582:	68eb      	ldr	r3, [r5, #12]
 8003584:	3301      	adds	r3, #1
 8003586:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8003588:	686b      	ldr	r3, [r5, #4]
 800358a:	4423      	add	r3, r4
 800358c:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 800358e:	69ab      	ldr	r3, [r5, #24]
 8003590:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8003592:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 8003594:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 8003596:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 8003598:	bf88      	it	hi
 800359a:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 800359c:	3004      	adds	r0, #4
}
 800359e:	bd38      	pop	{r3, r4, r5, pc}
 80035a0:	20006d94 	.word	0x20006d94
 80035a4:	efdcba98 	.word	0xefdcba98

080035a8 <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 80035a8:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <__wrap_free+0x48>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	f042 0204 	orr.w	r2, r2, #4
{
 80035b0:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 80035b2:	601a      	str	r2, [r3, #0]

  if (!ptr)
 80035b4:	4602      	mov	r2, r0
 80035b6:	b1c0      	cbz	r0, 80035ea <__wrap_free+0x42>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 80035b8:	f852 1c04 	ldr.w	r1, [r2, #-4]

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 80035bc:	4c0d      	ldr	r4, [pc, #52]	@ (80035f4 <__wrap_free+0x4c>)
 80035be:	5855      	ldr	r5, [r2, r1]
 80035c0:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 80035c2:	bf04      	itt	eq
 80035c4:	2400      	moveq	r4, #0
 80035c6:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	07d2      	lsls	r2, r2, #31
  p = (uint8_t*)ptr - 4;
 80035cc:	f1a0 0004 	sub.w	r0, r0, #4
  if (io_malloc.cfg & 1UL) {
 80035d0:	d508      	bpl.n	80035e4 <__wrap_free+0x3c>
    io_malloc.free_req++;
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	3201      	adds	r2, #1
 80035d6:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	440a      	add	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 80035de:	699a      	ldr	r2, [r3, #24]
 80035e0:	1a52      	subs	r2, r2, r1
 80035e2:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 80035e4:	bc30      	pop	{r4, r5}
  __real_free(p);
 80035e6:	f00a ba53 	b.w	800da90 <free>
}
 80035ea:	bc30      	pop	{r4, r5}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20006d94 	.word	0x20006d94
 80035f4:	efdcba98 	.word	0xefdcba98

080035f8 <stackMonInit>:
struct io_stack io_stack;

#if defined(_APP_STACK_MONITOR_) && _APP_STACK_MONITOR_ == 1 && defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 80035f8:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 80035fa:	4b12      	ldr	r3, [pc, #72]	@ (8003644 <stackMonInit+0x4c>)
 80035fc:	2500      	movs	r5, #0

  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
 80035fe:	1f1c      	subs	r4, r3, #4
  memset(&io_stack, 0, sizeof(struct io_stack));
 8003600:	609d      	str	r5, [r3, #8]
 8003602:	e9c3 5500 	strd	r5, r5, [r3]
  io_stack.ctrl = ctrl;
 8003606:	f843 0c04 	str.w	r0, [r3, #-4]
  io_stack.cstack = cstack;

#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  io_stack.estack = (uint32_t)_estack;
 800360a:	4b0f      	ldr	r3, [pc, #60]	@ (8003648 <stackMonInit+0x50>)
 800360c:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	61e3      	str	r3, [r4, #28]
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  (void)msize;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8003612:	0783      	lsls	r3, r0, #30
  io_stack.mstack_size = msize;
 8003614:	6162      	str	r2, [r4, #20]
  io_stack.cstack = cstack;
 8003616:	61a1      	str	r1, [r4, #24]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8003618:	d511      	bpl.n	800363e <stackMonInit+0x46>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 800361a:	480c      	ldr	r0, [pc, #48]	@ (800364c <stackMonInit+0x54>)
 800361c:	f7ff ff7a 	bl	8003514 <lc_print>
    io_stack.stack_mon = false;
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8003620:	6921      	ldr	r1, [r4, #16]
 8003622:	69a3      	ldr	r3, [r4, #24]
    io_stack.stack_mon = false;
 8003624:	7125      	strb	r5, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8003626:	1ac9      	subs	r1, r1, r3
 8003628:	60e1      	str	r1, [r4, #12]

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 800362a:	b13d      	cbz	r5, 800363c <stackMonInit+0x44>
 800362c:	6962      	ldr	r2, [r4, #20]
 800362e:	4291      	cmp	r1, r2
 8003630:	d904      	bls.n	800363c <stackMonInit+0x44>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 8003632:	4807      	ldr	r0, [pc, #28]	@ (8003650 <stackMonInit+0x58>)
 8003634:	f7ff ff6e 	bl	8003514 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 8003638:	2300      	movs	r3, #0
 800363a:	7123      	strb	r3, [r4, #4]
  }
}
 800363c:	bd38      	pop	{r3, r4, r5, pc}
 800363e:	2501      	movs	r5, #1
 8003640:	e7ee      	b.n	8003620 <stackMonInit+0x28>
 8003642:	bf00      	nop
 8003644:	20006d78 	.word	0x20006d78
 8003648:	20030000 	.word	0x20030000
 800364c:	08010ec4 	.word	0x08010ec4
 8003650:	08010f04 	.word	0x08010f04

08003654 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8003654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003658:	4604      	mov	r4, r0
 800365a:	468a      	mov	sl, r1
  if (!t)
 800365c:	4616      	mov	r6, r2
 800365e:	b38a      	cbz	r2, 80036c4 <dwtCyclesToTime+0x70>
    return -1;
  uint32_t fcpu = port_hal_get_frequency();
 8003660:	f7fe ff74 	bl	800254c <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8003664:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_frequency();
 8003666:	4607      	mov	r7, r0
  uint64_t s  = clks / fcpu;
 8003668:	4602      	mov	r2, r0
 800366a:	4651      	mov	r1, sl
 800366c:	4620      	mov	r0, r4
 800366e:	f7fd fbb9 	bl	8000de4 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 8003672:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
  uint64_t s  = clks / fcpu;
 8003676:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8003678:	fba4 0105 	umull	r0, r1, r4, r5
 800367c:	463a      	mov	r2, r7
 800367e:	2300      	movs	r3, #0
 8003680:	fb05 110a 	mla	r1, r5, sl, r1
 8003684:	f7fd fbae 	bl	8000de4 <__aeabi_uldivmod>
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003688:	f8df 9040 	ldr.w	r9, [pc, #64]	@ 80036cc <dwtCyclesToTime+0x78>
  ms -= (s * 1000);
 800368c:	fbab 3205 	umull	r3, r2, fp, r5
 8003690:	1ac3      	subs	r3, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003692:	fba4 0109 	umull	r0, r1, r4, r9
  ms -= (s * 1000);
 8003696:	9301      	str	r3, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003698:	fb09 110a 	mla	r1, r9, sl, r1
 800369c:	2300      	movs	r3, #0
 800369e:	463a      	mov	r2, r7
 80036a0:	f7fd fba0 	bl	8000de4 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 80036a4:	9b01      	ldr	r3, [sp, #4]
 80036a6:	60b3      	str	r3, [r6, #8]
  us -= (ms * 1000 + s * 1000000);
 80036a8:	fbab 8909 	umull	r8, r9, fp, r9
 80036ac:	eba0 0008 	sub.w	r0, r0, r8
 80036b0:	fba3 3505 	umull	r3, r5, r3, r5
  t->s = s;
 80036b4:	e9c6 7b00 	strd	r7, fp, [r6]
  us -= (ms * 1000 + s * 1000000);
 80036b8:	1ac0      	subs	r0, r0, r3
  t->us = us;
 80036ba:	60f0      	str	r0, [r6, #12]
  return 0;
 80036bc:	2000      	movs	r0, #0
}
 80036be:	b003      	add	sp, #12
 80036c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 80036c4:	f04f 30ff 	mov.w	r0, #4294967295
 80036c8:	e7f9      	b.n	80036be <dwtCyclesToTime+0x6a>
 80036ca:	bf00      	nop
 80036cc:	000f4240 	.word	0x000f4240

080036d0 <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	ed2d 8b02 	vpush	{d8}
 80036d6:	4605      	mov	r5, r0
 80036d8:	460c      	mov	r4, r1
  float res;
  float fcpu = (float)port_hal_get_frequency();
 80036da:	f7fe ff37 	bl	800254c <HAL_RCC_GetHCLKFreq>
  res = ((float)clks * (float)1000.0) / fcpu;
 80036de:	4621      	mov	r1, r4
  float fcpu = (float)port_hal_get_frequency();
 80036e0:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 80036e4:	4628      	mov	r0, r5
 80036e6:	f7fd fb37 	bl	8000d58 <__aeabi_ul2f>
 80036ea:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8003704 <dwtCyclesToFloatMs+0x34>
 80036ee:	ee00 0a10 	vmov	s0, r0
  float fcpu = (float)port_hal_get_frequency();
 80036f2:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 80036f6:	ee20 0a27 	vmul.f32	s0, s0, s15
  return res;
}
 80036fa:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80036fe:	ecbd 8b02 	vpop	{d8}
 8003702:	bd38      	pop	{r3, r4, r5, pc}
 8003704:	447a0000 	.word	0x447a0000

08003708 <getFlashCacheConf>:

#if defined(STM32L4) || defined(STM32F4)

  mconf |= MCONF_L4_F4;

  __I uint32_t acr = FLASH->ACR ;
 8003708:	4b0d      	ldr	r3, [pc, #52]	@ (8003740 <getFlashCacheConf+0x38>)
{
 800370a:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR ;
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003710:	9801      	ldr	r0, [sp, #4]

  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8003712:	9b01      	ldr	r3, [sp, #4]
 8003714:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_DCACHE;
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003716:	9b01      	ldr	r3, [sp, #4]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003718:	f000 000f 	and.w	r0, r0, #15
    mconf |= MCONF_ART_DCACHE;
 800371c:	bf4c      	ite	mi
 800371e:	f040 2001 	orrmi.w	r0, r0, #16777472	@ 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003722:	f040 7080 	orrpl.w	r0, r0, #16777216	@ 0x1000000
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003726:	059a      	lsls	r2, r3, #22
    mconf |= MCONF_ART_ICACHE;
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003728:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_ICACHE;
 800372a:	bf48      	it	mi
 800372c:	f440 7000 	orrmi.w	r0, r0, #512	@ 0x200
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003730:	055b      	lsls	r3, r3, #21
    mconf |= MCONF_ART_PREFETCH;
 8003732:	bf48      	it	mi
 8003734:	f440 6080 	orrmi.w	r0, r0, #1024	@ 0x400
  mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 8003738:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800373c:	b002      	add	sp, #8
 800373e:	4770      	bx	lr
 8003740:	40023c00 	.word	0x40023c00

08003744 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8003744:	b510      	push	{r4, lr}
 8003746:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 8003748:	f7fe ff00 	bl	800254c <HAL_RCC_GetHCLKFreq>
 800374c:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 800374e:	f7fe fefd 	bl	800254c <HAL_RCC_GetHCLKFreq>
 8003752:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8003754:	f7ff ffd8 	bl	8003708 <getFlashCacheConf>
 8003758:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 800375a:	f7fe fa31 	bl	8001bc0 <HAL_GetDEVID>
 800375e:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8003760:	f7fe fa28 	bl	8001bb4 <HAL_GetREVID>
 8003764:	6120      	str	r0, [r4, #16]
}
 8003766:	bd10      	pop	{r4, pc}

08003768 <getSysConf>:
  if (!conf)
 8003768:	b108      	cbz	r0, 800376e <getSysConf+0x6>
 800376a:	f7ff bfeb 	b.w	8003744 <getSysConf.part.0>
}
 800376e:	4770      	bx	lr

08003770 <systemSettingLog>:

void systemSettingLog(void)
{
 8003770:	b530      	push	{r4, r5, lr}
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003772:	2203      	movs	r2, #3
{
 8003774:	b089      	sub	sp, #36	@ 0x24
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003776:	2301      	movs	r3, #1
 8003778:	210d      	movs	r1, #13
 800377a:	4826      	ldr	r0, [pc, #152]	@ (8003814 <systemSettingLog+0xa4>)
#else
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
#endif


  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 800377c:	4c26      	ldr	r4, [pc, #152]	@ (8003818 <systemSettingLog+0xa8>)
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800377e:	f7ff fec9 	bl	8003514 <lc_print>
  if (!conf)
 8003782:	a803      	add	r0, sp, #12
 8003784:	f7ff ffde 	bl	8003744 <getSysConf.part.0>
  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 8003788:	4824      	ldr	r0, [pc, #144]	@ (800381c <systemSettingLog+0xac>)
 800378a:	f7ff fec3 	bl	8003514 <lc_print>
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 800378e:	9906      	ldr	r1, [sp, #24]
 8003790:	4823      	ldr	r0, [pc, #140]	@ (8003820 <systemSettingLog+0xb0>)
 8003792:	f2a1 4313 	subw	r3, r1, #1043	@ 0x413
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b50      	cmp	r3, #80	@ 0x50
 800379a:	bf96      	itet	ls
 800379c:	4a21      	ldrls	r2, [pc, #132]	@ (8003824 <systemSettingLog+0xb4>)
 800379e:	4a22      	ldrhi	r2, [pc, #136]	@ (8003828 <systemSettingLog+0xb8>)
 80037a0:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 80037a4:	9b07      	ldr	r3, [sp, #28]
 80037a6:	f7ff feb5 	bl	8003514 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 80037aa:	4b20      	ldr	r3, [pc, #128]	@ (800382c <systemSettingLog+0xbc>)
 80037ac:	2104      	movs	r1, #4
 80037ae:	1d5a      	adds	r2, r3, #5
 80037b0:	f103 000a 	add.w	r0, r3, #10
 80037b4:	f7ff feae 	bl	8003514 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 80037b8:	f7fe f9f8 	bl	8001bac <HAL_GetHalVersion>
 80037bc:	4601      	mov	r1, r0
 80037be:	481c      	ldr	r0, [pc, #112]	@ (8003830 <systemSettingLog+0xc0>)
 80037c0:	f7ff fea8 	bl	8003514 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80037c4:	9903      	ldr	r1, [sp, #12]
 80037c6:	481b      	ldr	r0, [pc, #108]	@ (8003834 <systemSettingLog+0xc4>)
 80037c8:	fb91 f1f4 	sdiv	r1, r1, r4
 80037cc:	f7ff fea2 	bl	8003514 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 80037d0:	9904      	ldr	r1, [sp, #16]
 80037d2:	4819      	ldr	r0, [pc, #100]	@ (8003838 <systemSettingLog+0xc8>)
 80037d4:	fb91 f1f4 	sdiv	r1, r1, r4
 80037d8:	f7ff fe9c 	bl	8003514 <lc_print>
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif
#endif

#if defined(STM32F4) || defined(STM32L4)
  uint32_t acr = FLASH->ACR;
 80037dc:	4b17      	ldr	r3, [pc, #92]	@ (800383c <systemSettingLog+0xcc>)
    return "True";
 80037de:	4818      	ldr	r0, [pc, #96]	@ (8003840 <systemSettingLog+0xd0>)
  uint32_t acr = FLASH->ACR;
 80037e0:	6819      	ldr	r1, [r3, #0]
    return "True";
 80037e2:	1f44      	subs	r4, r0, #5
 80037e4:	f411 7f80 	tst.w	r1, #256	@ 0x100
 80037e8:	bf0c      	ite	eq
 80037ea:	4602      	moveq	r2, r0
 80037ec:	4622      	movne	r2, r4
 80037ee:	f411 7f00 	tst.w	r1, #512	@ 0x200
 80037f2:	bf0c      	ite	eq
 80037f4:	4603      	moveq	r3, r0
 80037f6:	4623      	movne	r3, r4
 80037f8:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 80037fc:	bf08      	it	eq
 80037fe:	4604      	moveq	r4, r0
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8003800:	f001 050f 	and.w	r5, r1, #15
 8003804:	e9cd 4500 	strd	r4, r5, [sp]
 8003808:	30e7      	adds	r0, #231	@ 0xe7
 800380a:	f7ff fe83 	bl	8003514 <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(sys_conf.conf & MCONF_CORE_ICACHE),
      bitToStr(sys_conf.conf & MCONF_CORE_DCACHE));
#endif

}
 800380e:	b009      	add	sp, #36	@ 0x24
 8003810:	bd30      	pop	{r4, r5, pc}
 8003812:	bf00      	nop
 8003814:	08010f3d 	.word	0x08010f3d
 8003818:	000f4240 	.word	0x000f4240
 800381c:	08010f5a 	.word	0x08010f5a
 8003820:	08010f7a 	.word	0x08010f7a
 8003824:	08011774 	.word	0x08011774
 8003828:	08010f2a 	.word	0x08010f2a
 800382c:	08010fab 	.word	0x08010fab
 8003830:	08010fd3 	.word	0x08010fd3
 8003834:	08010fec 	.word	0x08010fec
 8003838:	08011005 	.word	0x08011005
 800383c:	40023c00 	.word	0x40023c00
 8003840:	08010f37 	.word	0x08010f37

08003844 <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 8003848:	221c      	movs	r2, #28
 800384a:	2100      	movs	r1, #0
 800384c:	4805      	ldr	r0, [pc, #20]	@ (8003864 <_mon_alloc_reset+0x20>)
 800384e:	f00a ff30 	bl	800e6b2 <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 8003852:	200a      	movs	r0, #10
 8003854:	f7ff fe80 	bl	8003558 <__wrap_malloc>
 8003858:	4603      	mov	r3, r0
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fea4 	bl	80035a8 <__wrap_free>
}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20006d94 	.word	0x20006d94

08003868 <aiPbCmdSysInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8003868:	b530      	push	{r4, r5, lr}
 800386a:	b089      	sub	sp, #36	@ 0x24
 800386c:	460c      	mov	r4, r1
 800386e:	4605      	mov	r5, r0
  UNUSED(param);
  struct mcu_conf conf;
  struct _encode_uint32 array_u32;

  getSysConf(&conf);
 8003870:	a803      	add	r0, sp, #12
 8003872:	f7ff ff79 	bl	8003768 <getSysConf>

  resp->which_payload = respMsg_sinfo_tag;
 8003876:	230b      	movs	r3, #11
 8003878:	80e3      	strh	r3, [r4, #6]

  resp->payload.sinfo.devid = conf.devid;
 800387a:	9b06      	ldr	r3, [sp, #24]
 800387c:	60a3      	str	r3, [r4, #8]
  resp->payload.sinfo.sclock = conf.sclk;
 800387e:	9b03      	ldr	r3, [sp, #12]
 8003880:	60e3      	str	r3, [r4, #12]
  resp->payload.sinfo.hclock = conf.hclk;
 8003882:	9b04      	ldr	r3, [sp, #16]
 8003884:	6123      	str	r3, [r4, #16]
  resp->payload.sinfo.cache = conf.conf;
 8003886:	9b05      	ldr	r3, [sp, #20]
 8003888:	6163      	str	r3, [r4, #20]
#if defined(HAS_EXTRA_CONF) && HAS_EXTRA_CONF > 0
  array_u32.size = HAS_EXTRA_CONF;
  array_u32.offset = 4;
  array_u32.data = &conf.extra[0];
#else
  array_u32.size = 0;
 800388a:	2200      	movs	r2, #0
  array_u32.offset = 4;
 800388c:	2304      	movs	r3, #4
  array_u32.data = NULL;
 800388e:	e9cd 2301 	strd	r2, r3, [sp, #4]
#endif

  resp->payload.sinfo.extra.funcs.encode = encode_uint32;
 8003892:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <aiPbCmdSysInfo+0x40>)
 8003894:	61a3      	str	r3, [r4, #24]
  resp->payload.sinfo.extra.arg = &array_u32;
 8003896:	f8c4 d01c 	str.w	sp, [r4, #28]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800389a:	4621      	mov	r1, r4
 800389c:	4628      	mov	r0, r5
  array_u32.size = 0;
 800389e:	9200      	str	r2, [sp, #0]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80038a0:	f7ff fa88 	bl	8002db4 <aiPbMgrSendResp>
}
 80038a4:	b009      	add	sp, #36	@ 0x24
 80038a6:	bd30      	pop	{r4, r5, pc}
 80038a8:	08002bdb 	.word	0x08002bdb

080038ac <aiExecCtx>:
{
 80038ac:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80038b0:	4604      	mov	r4, r0
  if (!nn_name[0]) {
 80038b2:	7800      	ldrb	r0, [r0, #0]
 80038b4:	b140      	cbz	r0, 80038c8 <aiExecCtx+0x1c>
      if (cur->handle &&
 80038b6:	4e12      	ldr	r6, [pc, #72]	@ (8003900 <aiExecCtx+0x54>)
 80038b8:	6830      	ldr	r0, [r6, #0]
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 80038ba:	f8d6 9008 	ldr.w	r9, [r6, #8]
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 80038be:	f04f 0800 	mov.w	r8, #0
      if (cur->handle &&
 80038c2:	b948      	cbnz	r0, 80038d8 <aiExecCtx+0x2c>
}
 80038c4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 80038c8:	2900      	cmp	r1, #0
 80038ca:	d1fb      	bne.n	80038c4 <aiExecCtx+0x18>
 80038cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003900 <aiExecCtx+0x54>)
 80038ce:	6818      	ldr	r0, [r3, #0]
      cur = &net_exec_ctx[idx];
 80038d0:	2800      	cmp	r0, #0
 80038d2:	bf18      	it	ne
 80038d4:	4618      	movne	r0, r3
 80038d6:	e7f5      	b.n	80038c4 <aiExecCtx+0x18>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 80038d8:	4648      	mov	r0, r9
 80038da:	f7fc fcd9 	bl	8000290 <strlen>
 80038de:	4605      	mov	r5, r0
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7fc fcd5 	bl	8000290 <strlen>
      if (cur->handle &&
 80038e6:	4285      	cmp	r5, r0
 80038e8:	d105      	bne.n	80038f6 <aiExecCtx+0x4a>
          (strncmp(cur->report.model_name, nn_name,
 80038ea:	462a      	mov	r2, r5
 80038ec:	4621      	mov	r1, r4
 80038ee:	4648      	mov	r0, r9
 80038f0:	f00a fee7 	bl	800e6c2 <strncmp>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 80038f4:	b108      	cbz	r0, 80038fa <aiExecCtx+0x4e>
    return NULL;
 80038f6:	4640      	mov	r0, r8
 80038f8:	e7e4      	b.n	80038c4 <aiExecCtx+0x18>
      cur = &net_exec_ctx[idx];
 80038fa:	4630      	mov	r0, r6
 80038fc:	e7e2      	b.n	80038c4 <aiExecCtx+0x18>
 80038fe:	bf00      	nop
 8003900:	20006dc8 	.word	0x20006dc8

08003904 <encode_mempool_to_tensor_desc>:
{
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	461e      	mov	r6, r3
  array_u32->size = 1;
 8003908:	2301      	movs	r3, #1
 800390a:	6033      	str	r3, [r6, #0]
  if (info->name)
 800390c:	6808      	ldr	r0, [r1, #0]
  array_u32->data = (void *)&info->size;
 800390e:	1d0b      	adds	r3, r1, #4
 8003910:	6073      	str	r3, [r6, #4]
  array_u32->offset = 4;
 8003912:	2304      	movs	r3, #4
{
 8003914:	460d      	mov	r5, r1
 8003916:	4614      	mov	r4, r2
  array_u32->offset = 4;
 8003918:	60b3      	str	r3, [r6, #8]
  if (info->name)
 800391a:	b1a0      	cbz	r0, 8003946 <encode_mempool_to_tensor_desc+0x42>
    aiPbStrCopy(info->name, &msg->name[0],
 800391c:	2240      	movs	r2, #64	@ 0x40
 800391e:	4621      	mov	r1, r4
 8003920:	f7ff f9ee 	bl	8002d00 <aiPbStrCopy>
  msg->format = AI_BUFFER_FORMAT_U8;
 8003924:	4b09      	ldr	r3, [pc, #36]	@ (800394c <encode_mempool_to_tensor_desc+0x48>)
 8003926:	6423      	str	r3, [r4, #64]	@ 0x40
  msg->size = info->size;
 8003928:	686b      	ldr	r3, [r5, #4]
 800392a:	6463      	str	r3, [r4, #68]	@ 0x44
  msg->n_dims = EnumShapeFmt_F_SHAPE_FMT_BCWH << EnumShapeFmt_F_SHAPE_FMT_POS | array_u32->size;
 800392c:	6833      	ldr	r3, [r6, #0]
 800392e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003932:	64a3      	str	r3, [r4, #72]	@ 0x48
  msg->scale = 0.0;
 8003934:	2300      	movs	r3, #0
 8003936:	6563      	str	r3, [r4, #84]	@ 0x54
  msg->zeropoint = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	65a3      	str	r3, [r4, #88]	@ 0x58
  msg->addr = (uint32_t)info->addr;
 800393c:	68ab      	ldr	r3, [r5, #8]
 800393e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  msg->flags = EnumTensorFlag_TENSOR_FLAG_MEMPOOL;
 8003940:	2308      	movs	r3, #8
 8003942:	6623      	str	r3, [r4, #96]	@ 0x60
}
 8003944:	bd70      	pop	{r4, r5, r6, pc}
    msg->name[0] = 0;
 8003946:	7010      	strb	r0, [r2, #0]
 8003948:	e7ec      	b.n	8003924 <encode_mempool_to_tensor_desc+0x20>
 800394a:	bf00      	nop
 800394c:	00040440 	.word	0x00040440

08003950 <fill_tensor_desc_msg>:
{
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	460c      	mov	r4, r1
  array_u32->size = buff->shape.size;
 8003954:	6941      	ldr	r1, [r0, #20]
  array_u32->data = (uint32_t *)buff->shape.data;
 8003956:	6986      	ldr	r6, [r0, #24]
  array_u32->size = buff->shape.size;
 8003958:	f3c1 2117 	ubfx	r1, r1, #8, #24
  array_u32->offset = sizeof(buff->shape.data[0]);
 800395c:	f04f 0c04 	mov.w	ip, #4
{
 8003960:	ed2d 8b02 	vpush	{d8}
  array_u32->offset = sizeof(buff->shape.data[0]);
 8003964:	f8c2 c008 	str.w	ip, [r2, #8]
  array_u32->size = buff->shape.size;
 8003968:	6011      	str	r1, [r2, #0]
  array_u32->data = (uint32_t *)buff->shape.data;
 800396a:	6056      	str	r6, [r2, #4]
  msg->name[0] = 0;
 800396c:	2200      	movs	r2, #0
 800396e:	7022      	strb	r2, [r4, #0]
  msg->format = (uint32_t)buff->format;
 8003970:	6802      	ldr	r2, [r0, #0]
  msg->flags = flags;
 8003972:	6623      	str	r3, [r4, #96]	@ 0x60
  if (buff->shape.type == AI_SHAPE_BCWH)
 8003974:	7d03      	ldrb	r3, [r0, #20]
  msg->format = (uint32_t)buff->format;
 8003976:	6422      	str	r2, [r4, #64]	@ 0x40
  if (buff->shape.type == AI_SHAPE_BCWH)
 8003978:	f103 3cff 	add.w	ip, r3, #4294967295
 800397c:	f1dc 0300 	rsbs	r3, ip, #0
 8003980:	eb43 030c 	adc.w	r3, r3, ip
  n_dims = shape_fmt << EnumShapeFmt_F_SHAPE_FMT_POS | buff->shape.size;
 8003984:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  msg->n_dims = _shape_to_n_dims(buff);
 8003988:	64a1      	str	r1, [r4, #72]	@ 0x48
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 800398a:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 800398c:	6836      	ldr	r6, [r6, #0]
{
 800398e:	4605      	mov	r5, r0
 8003990:	eeb0 8a40 	vmov.f32	s16, s0
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8003994:	f003 faac 	bl	8006ef0 <ai_buffer_get_size>
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);
 8003998:	68ab      	ldr	r3, [r5, #8]
  msg->zeropoint = zero_point;
 800399a:	9a06      	ldr	r2, [sp, #24]
  msg->scale = scale;
 800399c:	ed84 8a15 	vstr	s16, [r4, #84]	@ 0x54
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 80039a0:	4346      	muls	r6, r0
  msg->size = _get_buffer_element_size(buff);
 80039a2:	6466      	str	r6, [r4, #68]	@ 0x44
  msg->zeropoint = zero_point;
 80039a4:	65a2      	str	r2, [r4, #88]	@ 0x58
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 80039a6:	b1a3      	cbz	r3, 80039d2 <fill_tensor_desc_msg+0x82>
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	07d0      	lsls	r0, r2, #31
 80039ac:	d511      	bpl.n	80039d2 <fill_tensor_desc_msg+0x82>
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	b17b      	cbz	r3, 80039d2 <fill_tensor_desc_msg+0x82>
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	b192      	cbz	r2, 80039dc <fill_tensor_desc_msg+0x8c>
 80039b6:	8859      	ldrh	r1, [r3, #2]
 80039b8:	b181      	cbz	r1, 80039dc <fill_tensor_desc_msg+0x8c>
 80039ba:	6811      	ldr	r1, [r2, #0]
 80039bc:	6809      	ldr	r1, [r1, #0]
 80039be:	6561      	str	r1, [r4, #84]	@ 0x54
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 80039c0:	8819      	ldrh	r1, [r3, #0]
 80039c2:	0789      	lsls	r1, r1, #30
 80039c4:	d50d      	bpl.n	80039e2 <fill_tensor_desc_msg+0x92>
 80039c6:	b1a2      	cbz	r2, 80039f2 <fill_tensor_desc_msg+0xa2>
 80039c8:	885b      	ldrh	r3, [r3, #2]
 80039ca:	b10b      	cbz	r3, 80039d0 <fill_tensor_desc_msg+0x80>
 80039cc:	6853      	ldr	r3, [r2, #4]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 80039d2:	ecbd 8b02 	vpop	{d8}
  msg->addr = (uint32_t)buff->data;
 80039d6:	686b      	ldr	r3, [r5, #4]
 80039d8:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 80039da:	bd70      	pop	{r4, r5, r6, pc}
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 80039dc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80039e0:	e7ed      	b.n	80039be <fill_tensor_desc_msg+0x6e>
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 80039e2:	b132      	cbz	r2, 80039f2 <fill_tensor_desc_msg+0xa2>
 80039e4:	885b      	ldrh	r3, [r3, #2]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f2      	beq.n	80039d0 <fill_tensor_desc_msg+0x80>
 80039ea:	6853      	ldr	r3, [r2, #4]
 80039ec:	f993 3000 	ldrsb.w	r3, [r3]
 80039f0:	e7ee      	b.n	80039d0 <fill_tensor_desc_msg+0x80>
 80039f2:	4613      	mov	r3, r2
 80039f4:	e7ec      	b.n	80039d0 <fill_tensor_desc_msg+0x80>

080039f6 <encode_ai_buffer_to_tensor_desc>:
{
 80039f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039f8:	460c      	mov	r4, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	461a      	mov	r2, r3
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 80039fe:	68e3      	ldr	r3, [r4, #12]
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];
 8003a00:	6825      	ldr	r5, [r4, #0]
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	ed94 0a02 	vldr	s0, [r4, #8]
 8003a08:	6863      	ldr	r3, [r4, #4]
 8003a0a:	241c      	movs	r4, #28
 8003a0c:	fb04 5000 	mla	r0, r4, r0, r5
 8003a10:	f7ff ff9e 	bl	8003950 <fill_tensor_desc_msg>
}
 8003a14:	b003      	add	sp, #12
 8003a16:	bd30      	pop	{r4, r5, pc}

08003a18 <cyclesCounterStart>:
  port_dwt_init();
#endif /* !USE_SYSTICK_ONLY */
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 8003a18:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  port_dwt_reset();
  cyclesCount.dwt_start = port_dwt_get_cycles();
#else
  cyclesCount.tick_start = port_hal_get_tick();
 8003a1a:	f7fe f8ad 	bl	8001b78 <HAL_GetTick>
 8003a1e:	4b04      	ldr	r3, [pc, #16]	@ (8003a30 <cyclesCounterStart+0x18>)
  port_dwt_reset();
 8003a20:	4a04      	ldr	r2, [pc, #16]	@ (8003a34 <cyclesCounterStart+0x1c>)
  cyclesCount.tick_start = port_hal_get_tick();
 8003a22:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 8003a24:	2100      	movs	r1, #0
 8003a26:	6051      	str	r1, [r2, #4]
  cyclesCount.dwt_start = port_dwt_get_cycles();
 8003a28:	6852      	ldr	r2, [r2, #4]
 8003a2a:	605a      	str	r2, [r3, #4]
#endif
#endif
}
 8003a2c:	bd08      	pop	{r3, pc}
 8003a2e:	bf00      	nop
 8003a30:	20006d68 	.word	0x20006d68
 8003a34:	e0001000 	.word	0xe0001000

08003a38 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8003a38:	b570      	push	{r4, r5, r6, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a78 <cyclesCounterEnd+0x40>)
 8003a3c:	4e0f      	ldr	r6, [pc, #60]	@ (8003a7c <cyclesCounterEnd+0x44>)
 8003a3e:	685d      	ldr	r5, [r3, #4]
 8003a40:	6873      	ldr	r3, [r6, #4]
 8003a42:	1aed      	subs	r5, r5, r3
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8003a44:	f7fe f898 	bl	8001b78 <HAL_GetTick>
 8003a48:	68b3      	ldr	r3, [r6, #8]
  if (tick_e > cyclesCount.dwt_max) {
 8003a4a:	6832      	ldr	r2, [r6, #0]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8003a4c:	1ac0      	subs	r0, r0, r3
  if (tick_e > cyclesCount.dwt_max) {
 8003a4e:	4290      	cmp	r0, r2
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 8003a50:	f04f 0400 	mov.w	r4, #0
  if (tick_e > cyclesCount.dwt_max) {
 8003a54:	d90d      	bls.n	8003a72 <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8003a56:	4623      	mov	r3, r4
 8003a58:	4621      	mov	r1, r4
 8003a5a:	f7fd f9c3 	bl	8000de4 <__aeabi_uldivmod>
 8003a5e:	f04f 34ff 	mov.w	r4, #4294967295
 8003a62:	fba0 0404 	umull	r0, r4, r0, r4
 8003a66:	1940      	adds	r0, r0, r5
 8003a68:	eba4 0401 	sub.w	r4, r4, r1
 8003a6c:	4605      	mov	r5, r0
 8003a6e:	f144 0400 	adc.w	r4, r4, #0
  }
  return dwt_e;
#endif
#endif
}
 8003a72:	4628      	mov	r0, r5
 8003a74:	4621      	mov	r1, r4
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
 8003a78:	e0001000 	.word	0xe0001000
 8003a7c:	20006d68 	.word	0x20006d68

08003a80 <_get_buffer_size>:
{
 8003a80:	b538      	push	{r3, r4, r5, lr}
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8003a82:	6983      	ldr	r3, [r0, #24]
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8003a84:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8003a86:	681d      	ldr	r5, [r3, #0]
{
 8003a88:	4604      	mov	r4, r0
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8003a8a:	f003 fa31 	bl	8006ef0 <ai_buffer_get_size>
 8003a8e:	6821      	ldr	r1, [r4, #0]
 8003a90:	4368      	muls	r0, r5
}
 8003a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8003a96:	f003 ba5d 	b.w	8006f54 <ai_buffer_get_byte_size>
	...

08003a9c <send_ai_io_tensor.isra.0>:
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8003a9c:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8003aa0:	b08b      	sub	sp, #44	@ 0x2c
 8003aa2:	461d      	mov	r5, r3
 8003aa4:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
  resp->which_payload = respMsg_tensor_tag;
 8003aa8:	2311      	movs	r3, #17
 8003aaa:	80cb      	strh	r3, [r1, #6]
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8003aac:	f10d 0a0c 	add.w	sl, sp, #12
 8003ab0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003ab2:	9300      	str	r3, [sp, #0]
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8003ab4:	460c      	mov	r4, r1
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8003ab6:	464b      	mov	r3, r9
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8003ab8:	4606      	mov	r6, r0
 8003aba:	4690      	mov	r8, r2
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8003abc:	3108      	adds	r1, #8
 8003abe:	4652      	mov	r2, sl
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	f7ff ff45 	bl	8003950 <fill_tensor_desc_msg>
  resp->payload.tensor.desc.dims.funcs.encode = encode_uint32;
 8003ac6:	4b10      	ldr	r3, [pc, #64]	@ (8003b08 <send_ai_io_tensor.isra.0+0x6c>)
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8003ac8:	f419 7f00 	tst.w	r9, #512	@ 0x200
  resp->payload.tensor.desc.dims.arg = &array_u32;
 8003acc:	e9c4 3a15 	strd	r3, sl, [r4, #84]	@ 0x54
  resp->payload.tensor.data.addr = (uint32_t)buffer->data;
 8003ad0:	686b      	ldr	r3, [r5, #4]
 8003ad2:	6763      	str	r3, [r4, #116]	@ 0x74
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8003ad4:	d115      	bne.n	8003b02 <send_ai_io_tensor.isra.0+0x66>
    resp->payload.tensor.data.size = _get_buffer_size(buffer);
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	f7ff ffd2 	bl	8003a80 <_get_buffer_size>
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8003adc:	6f62      	ldr	r2, [r4, #116]	@ 0x74
    resp->payload.tensor.data.size = 0;
 8003ade:	6720      	str	r0, [r4, #112]	@ 0x70
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e9cd 3006 	strd	r3, r0, [sp, #24]
 8003ae6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  resp->payload.tensor.data.datas.funcs.encode = &encode_data_cb;
 8003aea:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <send_ai_io_tensor.isra.0+0x70>)
 8003aec:	67a3      	str	r3, [r4, #120]	@ 0x78
  resp->payload.tensor.data.datas.arg = (void *)&data;
 8003aee:	ab06      	add	r3, sp, #24
 8003af0:	67e3      	str	r3, [r4, #124]	@ 0x7c
  aiPbMgrSendResp(req, resp, state);
 8003af2:	4642      	mov	r2, r8
 8003af4:	4621      	mov	r1, r4
 8003af6:	4630      	mov	r0, r6
 8003af8:	f7ff f95c 	bl	8002db4 <aiPbMgrSendResp>
}
 8003afc:	b00b      	add	sp, #44	@ 0x2c
 8003afe:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
 8003b02:	2000      	movs	r0, #0
 8003b04:	e7ea      	b.n	8003adc <send_ai_io_tensor.isra.0+0x40>
 8003b06:	bf00      	nop
 8003b08:	08002bdb 	.word	0x08002bdb
 8003b0c:	08002c31 	.word	0x08002c31

08003b10 <aiOnExecNode_cb>:
    const ai_observer_node *node) {
 8003b10:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8003b14:	ed2d 8b02 	vpush	{d8}
 8003b18:	b095      	sub	sp, #84	@ 0x54
 8003b1a:	4688      	mov	r8, r1
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003b1c:	f8d0 4098 	ldr.w	r4, [r0, #152]	@ 0x98
    const ai_observer_node *node) {
 8003b20:	4615      	mov	r5, r2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8003b22:	f7ff ff89 	bl	8003a38 <cyclesCounterEnd>
  if (flags & AI_OBSERVER_PRE_EVT) {
 8003b26:	f018 0602 	ands.w	r6, r8, #2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8003b2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if (flags & AI_OBSERVER_PRE_EVT) {
 8003b2e:	d012      	beq.n	8003b56 <aiOnExecNode_cb+0x46>
    obs_ctx->n_cb_in++;
 8003b30:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8003b32:	f418 7f80 	tst.w	r8, #256	@ 0x100
    obs_ctx->n_cb_in++;
 8003b36:	f103 0301 	add.w	r3, r3, #1
 8003b3a:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8003b3c:	d003      	beq.n	8003b46 <aiOnExecNode_cb+0x36>
      obs_ctx->tnodes = ts;
 8003b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b42:	e9c4 2308 	strd	r2, r3, [r4, #32]
  cyclesCounterStart();
 8003b46:	f7ff ff67 	bl	8003a18 <cyclesCounterStart>
}
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	b015      	add	sp, #84	@ 0x54
 8003b4e:	ecbd 8b02 	vpop	{d8}
 8003b52:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8003b56:	f018 0f04 	tst.w	r8, #4
 8003b5a:	d0f4      	beq.n	8003b46 <aiOnExecNode_cb+0x36>
    cyclesCounterStart();
 8003b5c:	f7ff ff5c 	bl	8003a18 <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 8003b60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b64:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8003b68:	181b      	adds	r3, r3, r0
 8003b6a:	eb42 0201 	adc.w	r2, r2, r1
 8003b6e:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 8003b72:	68a3      	ldr	r3, [r4, #8]
    type = (EnumOperatorFlag_OPERATOR_FLAG_INTERNAL << 24);
 8003b74:	f418 7f00 	tst.w	r8, #512	@ 0x200
    type |= (node->type & (ai_u16)0x7FFF);
 8003b78:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    obs_ctx->n_cb_out++;
 8003b7c:	f103 0301 	add.w	r3, r3, #1
 8003b80:	60a3      	str	r3, [r4, #8]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8003b82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    type = (EnumOperatorFlag_OPERATOR_FLAG_INTERNAL << 24);
 8003b86:	bf14      	ite	ne
 8003b88:	f04f 7340 	movne.w	r3, #50331648	@ 0x3000000
 8003b8c:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
    type |= (node->type & (ai_u16)0x7FFF);
 8003b90:	f3c8 080e 	ubfx	r8, r8, #0, #15
 8003b94:	ea48 0803 	orr.w	r8, r8, r3
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8003b98:	f7ff fd9a 	bl	80036d0 <dwtCyclesToFloatMs>
 8003b9c:	ab04      	add	r3, sp, #16
 8003b9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba4:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003ba8:	ab07      	add	r3, sp, #28
 8003baa:	9302      	str	r3, [sp, #8]
 8003bac:	88ab      	ldrh	r3, [r5, #4]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8003bae:	ed8d 0a07 	vstr	s0, [sp, #28]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003bb2:	e9cd 8300 	strd	r8, r3, [sp]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8003bb6:	2202      	movs	r2, #2
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003bb8:	4633      	mov	r3, r6
 8003bba:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8003bbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bc0:	9608      	str	r6, [sp, #32]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003bc2:	f7ff f9bb 	bl	8002f3c <aiPbMgrSendOperator>
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 8003bc6:	68eb      	ldr	r3, [r5, #12]
 8003bc8:	881a      	ldrh	r2, [r3, #0]
 8003bca:	2a01      	cmp	r2, #1
 8003bcc:	d90e      	bls.n	8003bec <aiOnExecNode_cb+0xdc>
 8003bce:	f8d3 9004 	ldr.w	r9, [r3, #4]
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003bd2:	46b2      	mov	sl, r6
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8003bd4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003bd8:	42b3      	cmp	r3, r6
 8003bda:	d907      	bls.n	8003bec <aiOnExecNode_cb+0xdc>
 8003bdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003be0:	b123      	cbz	r3, 8003bec <aiOnExecNode_cb+0xdc>
 8003be2:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 8003be6:	f1b8 0f00 	cmp.w	r8, #0
 8003bea:	d109      	bne.n	8003c00 <aiOnExecNode_cb+0xf0>
    obs_ctx->tcom += cyclesCounterEnd();
 8003bec:	f7ff ff24 	bl	8003a38 <cyclesCounterEnd>
 8003bf0:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8003bf4:	181b      	adds	r3, r3, r0
 8003bf6:	eb42 0201 	adc.w	r2, r2, r1
 8003bfa:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8003bfe:	e7a2      	b.n	8003b46 <aiOnExecNode_cb+0x36>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003c00:	f8d8 3000 	ldr.w	r3, [r8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d04b      	beq.n	8003ca0 <aiOnExecNode_cb+0x190>
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	2a00      	cmp	r2, #0
 8003c0c:	d048      	beq.n	8003ca0 <aiOnExecNode_cb+0x190>
 8003c0e:	8859      	ldrh	r1, [r3, #2]
 8003c10:	2900      	cmp	r1, #0
 8003c12:	d045      	beq.n	8003ca0 <aiOnExecNode_cb+0x190>
 8003c14:	6812      	ldr	r2, [r2, #0]
 8003c16:	ed92 8a00 	vldr	s16, [r2]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 8003c1a:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8003c1e:	6802      	ldr	r2, [r0, #0]
 8003c20:	f412 0500 	ands.w	r5, r2, #8388608	@ 0x800000
 8003c24:	d03f      	beq.n	8003ca6 <aiOnExecNode_cb+0x196>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d048      	beq.n	8003cbc <aiOnExecNode_cb+0x1ac>
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	2900      	cmp	r1, #0
 8003c2e:	d047      	beq.n	8003cc0 <aiOnExecNode_cb+0x1b0>
 8003c30:	885d      	ldrh	r5, [r3, #2]
 8003c32:	b115      	cbz	r5, 8003c3a <aiOnExecNode_cb+0x12a>
 8003c34:	684b      	ldr	r3, [r1, #4]
 8003c36:	f993 5000 	ldrsb.w	r5, [r3]
      ai_buffer buffer =
 8003c3a:	68c3      	ldr	r3, [r0, #12]
 8003c3c:	920d      	str	r2, [sp, #52]	@ 0x34
          AI_BUFFER_INIT(
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4640      	mov	r0, r8
      ai_buffer buffer =
 8003c42:	e9cd 3a0e 	strd	r3, sl, [sp, #56]	@ 0x38
 8003c46:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
          AI_BUFFER_INIT(
 8003c4a:	f003 f925 	bl	8006e98 <get_tensor_size>
      ai_buffer buffer =
 8003c4e:	f898 3008 	ldrb.w	r3, [r8, #8]
 8003c52:	f88d 3048 	strb.w	r3, [sp, #72]	@ 0x48
          AI_BUFFER_INIT(
 8003c56:	f8d8 3008 	ldr.w	r3, [r8, #8]
      ai_buffer buffer =
 8003c5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003c5c:	9011      	str	r0, [sp, #68]	@ 0x44
          AI_BUFFER_INIT(
 8003c5e:	f3c3 2317 	ubfx	r3, r3, #8, #24
      ai_buffer buffer =
 8003c62:	f363 221f 	bfi	r2, r3, #8, #24
 8003c66:	9212      	str	r2, [sp, #72]	@ 0x48
 8003c68:	f8d8 300c 	ldr.w	r3, [r8, #12]
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1U))
 8003c6c:	f8b9 200c 	ldrh.w	r2, [r9, #12]
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003c70:	9501      	str	r5, [sp, #4]
      ai_buffer buffer =
 8003c72:	9313      	str	r3, [sp, #76]	@ 0x4c
      if (obs_ctx->no_data)
 8003c74:	7d23      	ldrb	r3, [r4, #20]
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1U))
 8003c76:	3a01      	subs	r2, #1
      if (obs_ctx->no_data)
 8003c78:	425b      	negs	r3, r3
      uint32_t tens_flags = EnumTensorFlag_TENSOR_FLAG_INTERNAL;
 8003c7a:	42b2      	cmp	r2, r6
 8003c7c:	bf0c      	ite	eq
 8003c7e:	f44f 7282 	moveq.w	r2, #260	@ 0x104
 8003c82:	2204      	movne	r2, #4
      if (obs_ctx->no_data)
 8003c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c88:	4313      	orrs	r3, r2
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8003c90:	eeb0 0a48 	vmov.f32	s0, s16
 8003c94:	ab0d      	add	r3, sp, #52	@ 0x34
 8003c96:	2202      	movs	r2, #2
 8003c98:	f7ff ff00 	bl	8003a9c <send_ai_io_tensor.isra.0>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8003c9c:	3601      	adds	r6, #1
 8003c9e:	e799      	b.n	8003bd4 <aiOnExecNode_cb+0xc4>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003ca0:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8003ca4:	e7b9      	b.n	8003c1a <aiOnExecNode_cb+0x10a>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0c7      	beq.n	8003c3a <aiOnExecNode_cb+0x12a>
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	2900      	cmp	r1, #0
 8003cae:	d0c4      	beq.n	8003c3a <aiOnExecNode_cb+0x12a>
 8003cb0:	885b      	ldrh	r3, [r3, #2]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0c1      	beq.n	8003c3a <aiOnExecNode_cb+0x12a>
 8003cb6:	684b      	ldr	r3, [r1, #4]
 8003cb8:	781d      	ldrb	r5, [r3, #0]
 8003cba:	e7be      	b.n	8003c3a <aiOnExecNode_cb+0x12a>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003cbc:	461d      	mov	r5, r3
 8003cbe:	e7bc      	b.n	8003c3a <aiOnExecNode_cb+0x12a>
 8003cc0:	460d      	mov	r5, r1
 8003cc2:	e7ba      	b.n	8003c3a <aiOnExecNode_cb+0x12a>

08003cc4 <aiPbCmdNNInfo>:

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8003cc4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8003cc8:	4606      	mov	r6, r0
 8003cca:	b0a2      	sub	sp, #136	@ 0x88
 8003ccc:	460c      	mov	r4, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 8003cce:	300c      	adds	r0, #12
 8003cd0:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8003cd4:	f7ff fdea 	bl	80038ac <aiExecCtx>
  if (ctx)
 8003cd8:	4605      	mov	r5, r0
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	f000 80e8 	beq.w	8003eb0 <aiPbCmdNNInfo+0x1ec>
  resp->which_payload = respMsg_minfo_tag;
 8003ce0:	2316      	movs	r3, #22
    send_model_info(req, resp, EnumState_S_IDLE, &ctx->report,
 8003ce2:	f890 9090 	ldrb.w	r9, [r0, #144]	@ 0x90
 8003ce6:	f890 8091 	ldrb.w	r8, [r0, #145]	@ 0x91
  resp->which_payload = respMsg_minfo_tag;
 8003cea:	80e3      	strh	r3, [r4, #6]
  stai_runtime_get_info(&rt_info);
 8003cec:	a81c      	add	r0, sp, #112	@ 0x70
 8003cee:	f003 f8a3 	bl	8006e38 <stai_runtime_get_info>
  memset(&resp->payload.minfo, 0, sizeof(aiModelInfoMsg));
 8003cf2:	f104 0308 	add.w	r3, r4, #8
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	f00a fcd8 	bl	800e6b2 <memset>
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 8003d02:	2240      	movs	r2, #64	@ 0x40
 8003d04:	4601      	mov	r1, r0
 8003d06:	68a8      	ldr	r0, [r5, #8]
 8003d08:	f7fe fffa 	bl	8002d00 <aiPbStrCopy>
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 8003d0c:	68e8      	ldr	r0, [r5, #12]
 8003d0e:	2240      	movs	r2, #64	@ 0x40
 8003d10:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 8003d14:	f7fe fff4 	bl	8002d00 <aiPbStrCopy>
  aiPbStrCopy(nn->compile_datetime, &resp->payload.minfo.compile_datetime[0],
 8003d18:	6968      	ldr	r0, [r5, #20]
 8003d1a:	2240      	movs	r2, #64	@ 0x40
 8003d1c:	f104 018c 	add.w	r1, r4, #140	@ 0x8c
 8003d20:	f7fe ffee 	bl	8002d00 <aiPbStrCopy>
  resp->payload.minfo.runtime_version = _ai_version_to_uint32((const ai_platform_version *)&rt_info.runtime_version);
 8003d24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8003d26:	ba1b      	rev	r3, r3
 8003d28:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 8003d2c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003d2e:	ba1b      	rev	r3, r3
 8003d30:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 8003d34:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
  if (id == STAI_COMPILER_ID_GCC) {
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d00f      	beq.n	8003d5c <aiPbCmdNNInfo+0x98>
  else if (id == STAI_COMPILER_ID_GHS) {
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	f000 80ab 	beq.w	8003e98 <aiPbCmdNNInfo+0x1d4>
  else if  (id == STAI_COMPILER_ID_HIGHTECH) {
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	f000 80aa 	beq.w	8003e9c <aiPbCmdNNInfo+0x1d8>
  else if  (id == STAI_COMPILER_ID_IAR) {
 8003d48:	2b30      	cmp	r3, #48	@ 0x30
 8003d4a:	f000 80a9 	beq.w	8003ea0 <aiPbCmdNNInfo+0x1dc>
  else if  (id == STAI_COMPILER_ID_KEIL_AC6) {
 8003d4e:	2b50      	cmp	r3, #80	@ 0x50
 8003d50:	f000 80a8 	beq.w	8003ea4 <aiPbCmdNNInfo+0x1e0>
  return STAI_COMPILER_ID_NONE;
 8003d54:	2b40      	cmp	r3, #64	@ 0x40
 8003d56:	bf0c      	ite	eq
 8003d58:	2303      	moveq	r3, #3
 8003d5a:	2300      	movne	r3, #0
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 8003d5c:	041b      	lsls	r3, r3, #16
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	64a3      	str	r3, [r4, #72]	@ 0x48
  aiPbStrCopy(rt_info.compiler_desc, &resp->payload.minfo.runtime_desc[0],
 8003d64:	2240      	movs	r2, #64	@ 0x40
 8003d66:	f504 718a 	add.w	r1, r4, #276	@ 0x114
 8003d6a:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8003d6c:	f7fe ffc8 	bl	8002d00 <aiPbStrCopy>
  uint32_to_str(rt_info.runtime_build, &resp->payload.minfo.runtime_desc[strlen(rt_info.compiler_desc)],
 8003d70:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8003d72:	f7fc fa8d 	bl	8000290 <strlen>
 8003d76:	f500 718a 	add.w	r1, r0, #276	@ 0x114
 8003d7a:	f1c0 023f 	rsb	r2, r0, #63	@ 0x3f
 8003d7e:	4421      	add	r1, r4
 8003d80:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8003d82:	f7ff fb9f 	bl	80034c4 <uint32_to_str>
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 8003d86:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
  flags = EnumTensorFlag_TENSOR_FLAG_INPUT;
 8003d8a:	f1b9 0f00 	cmp.w	r9, #0
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 8003d8e:	e9c4 2336 	strd	r2, r3, [r4, #216]	@ 0xd8
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8003d92:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003d96:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8003d98:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  flags = EnumTensorFlag_TENSOR_FLAG_INPUT;
 8003d9c:	f240 4301 	movw	r3, #1025	@ 0x401
 8003da0:	bf08      	it	eq
 8003da2:	2301      	moveq	r3, #1
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003da4:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
      &encode_ai_buffer_to_tensor_desc, nn->n_inputs, &tensor_desc_ins };
 8003da8:	f8b5 2040 	ldrh.w	r2, [r5, #64]	@ 0x40
  struct _encode_tensor_desc tensor_ins = {
 8003dac:	9203      	str	r2, [sp, #12]
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003dae:	2300      	movs	r3, #0
  resp->payload.minfo.n_inputs = nn->n_inputs;
 8003db0:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8003db4:	aa02      	add	r2, sp, #8
  flags = EnumTensorFlag_TENSOR_FLAG_OUTPUT;
 8003db6:	4598      	cmp	r8, r3
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8003db8:	f8c4 20ec 	str.w	r2, [r4, #236]	@ 0xec
  flags = EnumTensorFlag_TENSOR_FLAG_OUTPUT;
 8003dbc:	f240 4202 	movw	r2, #1026	@ 0x402
 8003dc0:	bf18      	it	ne
 8003dc2:	4694      	movne	ip, r2
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8003dc4:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  struct _encode_tensor_desc tensor_ins = {
 8003dc6:	483e      	ldr	r0, [pc, #248]	@ (8003ec0 <aiPbCmdNNInfo+0x1fc>)
 8003dc8:	9002      	str	r0, [sp, #8]
 8003dca:	a914      	add	r1, sp, #80	@ 0x50
  flags = EnumTensorFlag_TENSOR_FLAG_OUTPUT;
 8003dcc:	bf08      	it	eq
 8003dce:	f04f 0c02 	moveq.w	ip, #2
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8003dd2:	e9cd 2c18 	strd	r2, ip, [sp, #96]	@ 0x60
  struct _encode_tensor_desc tensor_ins = {
 8003dd6:	9104      	str	r1, [sp, #16]
      &encode_ai_buffer_to_tensor_desc, nn->n_outputs, &tensor_desc_outs };
 8003dd8:	f8b5 2042 	ldrh.w	r2, [r5, #66]	@ 0x42
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8003ddc:	4939      	ldr	r1, [pc, #228]	@ (8003ec4 <aiPbCmdNNInfo+0x200>)
  if (nn->map_activations.size) {
 8003dde:	f8b5 c05a 	ldrh.w	ip, [r5, #90]	@ 0x5a
  struct _encode_tensor_desc tensor_outs = {
 8003de2:	9005      	str	r0, [sp, #20]
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003de4:	f04f 0e00 	mov.w	lr, #0
  resp->payload.minfo.outputs.funcs.encode = encode_tensor_desc;
 8003de8:	e9c4 213c 	strd	r2, r1, [r4, #240]	@ 0xf0
  struct _encode_tensor_desc tensor_outs = {
 8003dec:	9206      	str	r2, [sp, #24]
 8003dee:	a818      	add	r0, sp, #96	@ 0x60
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 8003df0:	aa05      	add	r2, sp, #20
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003df2:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 8003df6:	9317      	str	r3, [sp, #92]	@ 0x5c
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8003df8:	f8c4 10e8 	str.w	r1, [r4, #232]	@ 0xe8
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8003dfc:	f8cd e068 	str.w	lr, [sp, #104]	@ 0x68
 8003e00:	931b      	str	r3, [sp, #108]	@ 0x6c
  struct _encode_tensor_desc tensor_outs = {
 8003e02:	9007      	str	r0, [sp, #28]
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 8003e04:	f8c4 20f8 	str.w	r2, [r4, #248]	@ 0xf8
  if (nn->map_activations.size) {
 8003e08:	f1bc 0f00 	cmp.w	ip, #0
 8003e0c:	d04c      	beq.n	8003ea8 <aiPbCmdNNInfo+0x1e4>
      size_acts += nn->map_activations.buffer[i].size;
 8003e0e:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
    for (int i=0; i<nn->map_activations.size; i++)
 8003e10:	4618      	mov	r0, r3
      size_acts += nn->map_activations.buffer[i].size;
 8003e12:	3210      	adds	r2, #16
 8003e14:	f04f 081c 	mov.w	r8, #28
 8003e18:	fb08 fe00 	mul.w	lr, r8, r0
    for (int i=0; i<nn->map_activations.size; i++)
 8003e1c:	3001      	adds	r0, #1
      size_acts += nn->map_activations.buffer[i].size;
 8003e1e:	f852 e00e 	ldr.w	lr, [r2, lr]
    for (int i=0; i<nn->map_activations.size; i++)
 8003e22:	4560      	cmp	r0, ip
      size_acts += nn->map_activations.buffer[i].size;
 8003e24:	4473      	add	r3, lr
    for (int i=0; i<nn->map_activations.size; i++)
 8003e26:	dbf7      	blt.n	8003e18 <aiPbCmdNNInfo+0x154>
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003e28:	4a27      	ldr	r2, [pc, #156]	@ (8003ec8 <aiPbCmdNNInfo+0x204>)
  struct _encode_tensor_desc tensor_acts = {
 8003e2a:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8003ed0 <aiPbCmdNNInfo+0x20c>
 8003e2e:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8003e32:	a808      	add	r0, sp, #32
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003e34:	e9cd 2308 	strd	r2, r3, [sp, #32]
  struct _encode_tensor_desc tensor_acts = {
 8003e38:	900d      	str	r0, [sp, #52]	@ 0x34
 8003e3a:	2201      	movs	r2, #1
  if (nn->map_weights.size) {
 8003e3c:	f8b5 0052 	ldrh.w	r0, [r5, #82]	@ 0x52
  struct _encode_tensor_desc tensor_acts = {
 8003e40:	920c      	str	r2, [sp, #48]	@ 0x30
  resp->payload.minfo.activations.funcs.encode = encode_tensor_desc;
 8003e42:	e9c4 213f 	strd	r2, r1, [r4, #252]	@ 0xfc
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003e46:	2300      	movs	r3, #0
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 8003e48:	aa0b      	add	r2, sp, #44	@ 0x2c
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003e4a:	930a      	str	r3, [sp, #40]	@ 0x28
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 8003e4c:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
  if (nn->map_weights.size) {
 8003e50:	b360      	cbz	r0, 8003eac <aiPbCmdNNInfo+0x1e8>
      size_params += nn->map_weights.buffer[i].size;
 8003e52:	6d6d      	ldr	r5, [r5, #84]	@ 0x54
    for (int i=0; i<nn->map_weights.size; i++)
 8003e54:	461a      	mov	r2, r3
      size_params += nn->map_weights.buffer[i].size;
 8003e56:	3510      	adds	r5, #16
 8003e58:	f04f 081c 	mov.w	r8, #28
 8003e5c:	fb08 fe02 	mul.w	lr, r8, r2
    for (int i=0; i<nn->map_weights.size; i++)
 8003e60:	3201      	adds	r2, #1
      size_params += nn->map_weights.buffer[i].size;
 8003e62:	f855 e00e 	ldr.w	lr, [r5, lr]
    for (int i=0; i<nn->map_weights.size; i++)
 8003e66:	4290      	cmp	r0, r2
      size_params += nn->map_weights.buffer[i].size;
 8003e68:	4473      	add	r3, lr
    for (int i=0; i<nn->map_weights.size; i++)
 8003e6a:	dcf7      	bgt.n	8003e5c <aiPbCmdNNInfo+0x198>
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 8003e6c:	4a17      	ldr	r2, [pc, #92]	@ (8003ecc <aiPbCmdNNInfo+0x208>)
 8003e6e:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
  struct _encode_tensor_desc tensor_w = {
 8003e72:	2301      	movs	r3, #1
  resp->payload.minfo.params.funcs.encode = encode_tensor_desc;
 8003e74:	e9c4 3142 	strd	r3, r1, [r4, #264]	@ 0x108
  struct _encode_tensor_desc tensor_w = {
 8003e78:	a80e      	add	r0, sp, #56	@ 0x38
 8003e7a:	9312      	str	r3, [sp, #72]	@ 0x48
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 8003e7c:	ab11      	add	r3, sp, #68	@ 0x44
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 8003e7e:	2200      	movs	r2, #0
  struct _encode_tensor_desc tensor_w = {
 8003e80:	9013      	str	r0, [sp, #76]	@ 0x4c
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 8003e82:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  aiPbMgrSendResp(req, resp, state);
 8003e86:	4621      	mov	r1, r4
 8003e88:	4630      	mov	r0, r6
  struct _encode_tensor_desc tensor_w = {
 8003e8a:	e9cd 2c10 	strd	r2, ip, [sp, #64]	@ 0x40
  aiPbMgrSendResp(req, resp, state);
 8003e8e:	f7fe ff91 	bl	8002db4 <aiPbMgrSendResp>
        ctx->inputs_in_activations, ctx->outputs_in_activations);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 8003e92:	b022      	add	sp, #136	@ 0x88
 8003e94:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    return EnumTools_AI_GHS;
 8003e98:	2306      	movs	r3, #6
 8003e9a:	e75f      	b.n	8003d5c <aiPbCmdNNInfo+0x98>
    return EnumTools_AI_HTC;
 8003e9c:	2305      	movs	r3, #5
 8003e9e:	e75d      	b.n	8003d5c <aiPbCmdNNInfo+0x98>
    return EnumTools_AI_IAR;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e75b      	b.n	8003d5c <aiPbCmdNNInfo+0x98>
    return EnumTools_AI_MDK_6;
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	e759      	b.n	8003d5c <aiPbCmdNNInfo+0x98>
  ai_size size_acts = 0;
 8003ea8:	4663      	mov	r3, ip
 8003eaa:	e7bd      	b.n	8003e28 <aiPbCmdNNInfo+0x164>
  ai_size size_params = 0;
 8003eac:	4603      	mov	r3, r0
 8003eae:	e7dd      	b.n	8003e6c <aiPbCmdNNInfo+0x1a8>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	4630      	mov	r0, r6
 8003eba:	f7fe ffcf 	bl	8002e5c <aiPbMgrSendAck>
}
 8003ebe:	e7e8      	b.n	8003e92 <aiPbCmdNNInfo+0x1ce>
 8003ec0:	080039f7 	.word	0x080039f7
 8003ec4:	08002d4d 	.word	0x08002d4d
 8003ec8:	080110d1 	.word	0x080110d1
 8003ecc:	080110d6 	.word	0x080110d6
 8003ed0:	08003905 	.word	0x08003905

08003ed4 <_print_debug>:
{
 8003ed4:	b40e      	push	{r1, r2, r3}
 8003ed6:	b517      	push	{r0, r1, r2, r4, lr}
  if (!debug)
 8003ed8:	b178      	cbz	r0, 8003efa <_print_debug+0x26>
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8003eda:	4c0f      	ldr	r4, [pc, #60]	@ (8003f18 <_print_debug+0x44>)
 8003edc:	9a05      	ldr	r2, [sp, #20]
  va_start(ap, fmt);
 8003ede:	ab06      	add	r3, sp, #24
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8003ee0:	2150      	movs	r1, #80	@ 0x50
 8003ee2:	4620      	mov	r0, r4
  va_start(ap, fmt);
 8003ee4:	9301      	str	r3, [sp, #4]
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8003ee6:	f7ff fb27 	bl	8003538 <lc_vsnprint>
      _print_buffer[s] = 0;
 8003eea:	2100      	movs	r1, #0
 8003eec:	1903      	adds	r3, r0, r4
  while (s) {
 8003eee:	b948      	cbnz	r0, 8003f04 <_print_debug+0x30>
  aiPbMgrSendLogV2(EnumState_S_WAITING, 1, &_print_buffer[0]);
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4a09      	ldr	r2, [pc, #36]	@ (8003f18 <_print_debug+0x44>)
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	f7fe ffcf 	bl	8002e98 <aiPbMgrSendLogV2>
}
 8003efa:	b003      	add	sp, #12
 8003efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f00:	b003      	add	sp, #12
 8003f02:	4770      	bx	lr
    if ((_print_buffer[s] == '\n') || (_print_buffer[s] == '\r'))
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	2a0a      	cmp	r2, #10
 8003f08:	d001      	beq.n	8003f0e <_print_debug+0x3a>
 8003f0a:	2a0d      	cmp	r2, #13
 8003f0c:	d100      	bne.n	8003f10 <_print_debug+0x3c>
      _print_buffer[s] = 0;
 8003f0e:	7019      	strb	r1, [r3, #0]
    s--;
 8003f10:	3801      	subs	r0, #1
 8003f12:	3b01      	subs	r3, #1
 8003f14:	e7eb      	b.n	8003eee <_print_debug+0x1a>
 8003f16:	bf00      	nop
 8003f18:	20006ea8 	.word	0x20006ea8

08003f1c <aiPbCmdNNRun>:
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
}


void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8003f1c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003f20:	ed2d 8b02 	vpush	{d8}
 8003f24:	4605      	mov	r5, r0
 8003f26:	b0a2      	sub	sp, #136	@ 0x88
 8003f28:	460e      	mov	r6, r1
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003f2a:	f3ef 8014 	mrs	r0, CONTROL
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8003f2e:	f3ef 8108 	mrs	r1, MSP
  ai_buffer *ai_input;
  ai_buffer *ai_output;

  UNUSED(param);

  MON_STACK_INIT();
 8003f32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f36:	f7ff fb5f 	bl	80035f8 <stackMonInit>

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8003f3a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f3e:	f105 000c 	add.w	r0, r5, #12
 8003f42:	f7ff fcb3 	bl	80038ac <aiExecCtx>
  if (!ctx) {
 8003f46:	4604      	mov	r4, r0
 8003f48:	b910      	cbnz	r0, 8003f50 <aiPbCmdNNRun+0x34>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003f4a:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	e19b      	b.n	8004288 <aiPbCmdNNRun+0x36c>
  _set_context(req, ctx);
 8003f50:	68a8      	ldr	r0, [r5, #8]
  ctx->emit_intermediate_data = false;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f884 3093 	strb.w	r3, [r4, #147]	@ 0x93
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA) ==
 8003f58:	0743      	lsls	r3, r0, #29
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER) ==
 8003f5a:	bf53      	iteet	pl
 8003f5c:	f3c0 0340 	ubfxpl	r3, r0, #1, #1
    ctx->observer_is_enabled = true;
 8003f60:	f240 1301 	movwmi	r3, #257	@ 0x101
 8003f64:	f8a4 3092 	strhmi.w	r3, [r4, #146]	@ 0x92
 8003f68:	f884 3092 	strbpl.w	r3, [r4, #146]	@ 0x92
  ctx->direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 8003f6c:	f3c0 2380 	ubfx	r3, r0, #10, #1
 8003f70:	f884 3095 	strb.w	r3, [r4, #149]	@ 0x95
  ctx->simple_value = req->param & EnumRunParam_P_RUN_CONF_CONST_VALUE?true:false;
 8003f74:	f3c0 2340 	ubfx	r3, r0, #9, #1
 8003f78:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
  net_obs_ctx.no_data = true;
 8003f7c:	4bc8      	ldr	r3, [pc, #800]	@ (80042a0 <aiPbCmdNNRun+0x384>)
 8003f7e:	f894 1092 	ldrb.w	r1, [r4, #146]	@ 0x92
 8003f82:	7019      	strb	r1, [r3, #0]
  if (ctx->emit_intermediate_data) {
 8003f84:	f894 1093 	ldrb.w	r1, [r4, #147]	@ 0x93
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8003f88:	f3c0 2000 	ubfx	r0, r0, #8, #1
  net_obs_ctx.no_data = true;
 8003f8c:	2201      	movs	r2, #1
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8003f8e:	f884 0096 	strb.w	r0, [r4, #150]	@ 0x96
  net_obs_ctx.no_data = true;
 8003f92:	751a      	strb	r2, [r3, #20]
  if (ctx->emit_intermediate_data) {
 8003f94:	b111      	cbz	r1, 8003f9c <aiPbCmdNNRun+0x80>
    net_obs_ctx.is_enabled = true;
 8003f96:	701a      	strb	r2, [r3, #0]
    net_obs_ctx.no_data = false;
 8003f98:	2200      	movs	r2, #0
 8003f9a:	751a      	strb	r2, [r3, #20]
  net_obs_ctx.tcom = 0ULL;
 8003f9c:	f04f 0800 	mov.w	r8, #0
 8003fa0:	f04f 0900 	mov.w	r9, #0
 8003fa4:	e9c3 8906 	strd	r8, r9, [r3, #24]
  net_obs_ctx.tnodes = 0ULL;
 8003fa8:	e9c3 8908 	strd	r8, r9, [r3, #32]
  net_obs_ctx.n_cb_out = 0;
 8003fac:	e9c3 8801 	strd	r8, r8, [r3, #4]
  ctx->obs_ctx = &net_obs_ctx;
 8003fb0:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
  ai_input = ctx->report.inputs;
 8003fb4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003fb6:	9304      	str	r3, [sp, #16]
  ai_output = ctx->report.outputs;
 8003fb8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  PB_LC_PRINT(ctx->debug, "RUN: c-model=%s rtid=%d\r\n", ctx->report.model_name, _AI_RUNTIME_ID);
 8003fba:	68a2      	ldr	r2, [r4, #8]
 8003fbc:	49b9      	ldr	r1, [pc, #740]	@ (80042a4 <aiPbCmdNNRun+0x388>)
  ai_output = ctx->report.outputs;
 8003fbe:	9305      	str	r3, [sp, #20]
  PB_LC_PRINT(ctx->debug, "RUN: c-model=%s rtid=%d\r\n", ctx->report.model_name, _AI_RUNTIME_ID);
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f7ff ff87 	bl	8003ed4 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN:  observer=%d/%d, simple_value=%d, direct_write=%d\r\n",
 8003fc6:	f894 1095 	ldrb.w	r1, [r4, #149]	@ 0x95
 8003fca:	f894 3093 	ldrb.w	r3, [r4, #147]	@ 0x93
 8003fce:	f894 2092 	ldrb.w	r2, [r4, #146]	@ 0x92
 8003fd2:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
 8003fd6:	9101      	str	r1, [sp, #4]
 8003fd8:	f894 1094 	ldrb.w	r1, [r4, #148]	@ 0x94
 8003fdc:	9100      	str	r1, [sp, #0]
 8003fde:	49b2      	ldr	r1, [pc, #712]	@ (80042a8 <aiPbCmdNNRun+0x38c>)
 8003fe0:	f7ff ff78 	bl	8003ed4 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data (%d bytes).. opt=0x%lx, param=0x%lx\r\n",
 8003fe4:	9804      	ldr	r0, [sp, #16]
 8003fe6:	f894 9096 	ldrb.w	r9, [r4, #150]	@ 0x96
 8003fea:	f7ff fd49 	bl	8003a80 <_get_buffer_size>
 8003fee:	68ab      	ldr	r3, [r5, #8]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8003ff6:	49ad      	ldr	r1, [pc, #692]	@ (80042ac <aiPbCmdNNRun+0x390>)
 8003ff8:	4648      	mov	r0, r9
 8003ffa:	f7ff ff6b 	bl	8003ed4 <_print_debug>
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 8003ffe:	9804      	ldr	r0, [sp, #16]
 8004000:	f7ff fd3e 	bl	8003a80 <_get_buffer_size>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8004004:	2201      	movs	r2, #1
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 8004006:	4603      	mov	r3, r0
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8004008:	4631      	mov	r1, r6
 800400a:	4628      	mov	r0, r5
 800400c:	f8cd 8000 	str.w	r8, [sp]
 8004010:	f7fe ff24 	bl	8002e5c <aiPbMgrSendAck>
  tick = port_hal_get_tick();
 8004014:	f7fd fdb0 	bl	8001b78 <HAL_GetTick>
 8004018:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800401c:	9008      	str	r0, [sp, #32]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800401e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8004022:	4543      	cmp	r3, r8
 8004024:	f300 80f6 	bgt.w	8004214 <aiPbCmdNNRun+0x2f8>
  tick = port_hal_get_tick() - tick;
 8004028:	f7fd fda6 	bl	8001b78 <HAL_GetTick>
  PB_LC_PRINT(ctx->debug, "RUN: %ld ticks to download %d input(s)\r\n", tick, ctx->report.n_inputs);
 800402c:	9a08      	ldr	r2, [sp, #32]
 800402e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8004032:	499f      	ldr	r1, [pc, #636]	@ (80042b0 <aiPbCmdNNRun+0x394>)
 8004034:	1a82      	subs	r2, r0, r2
 8004036:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
 800403a:	f7ff ff4b 	bl	8003ed4 <_print_debug>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 800403e:	f8d4 8098 	ldr.w	r8, [r4, #152]	@ 0x98
  if (obs_ctx->is_enabled == false)
 8004042:	f898 3000 	ldrb.w	r3, [r8]
 8004046:	b193      	cbz	r3, 800406e <aiPbCmdNNRun+0x152>
  if (ctx->handle == AI_HANDLE_NULL)
 8004048:	6820      	ldr	r0, [r4, #0]
 800404a:	b180      	cbz	r0, 800406e <aiPbCmdNNRun+0x152>
  ai_mnetwork_get_private_handle(ctx->handle,
 800404c:	a90e      	add	r1, sp, #56	@ 0x38
  obs_ctx->cresp = cresp;
 800404e:	e9c8 5603 	strd	r5, r6, [r8, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 8004052:	aa14      	add	r2, sp, #80	@ 0x50
 8004054:	f000 fbcb 	bl	80047ee <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 8004058:	4b96      	ldr	r3, [pc, #600]	@ (80042b4 <aiPbCmdNNRun+0x398>)
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 800405a:	e9c8 340a 	strd	r3, r4, [r8, #40]	@ 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 800405e:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8004060:	980e      	ldr	r0, [sp, #56]	@ 0x38
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8004062:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8004066:	f108 0128 	add.w	r1, r8, #40	@ 0x28
 800406a:	f003 fe07 	bl	8007c7c <ai_platform_observer_register_s>
  MON_ALLOC_ENABLE();
 800406e:	f8df 9264 	ldr.w	r9, [pc, #612]	@ 80042d4 <aiPbCmdNNRun+0x3b8>
  MON_ALLOC_RESET();
 8004072:	f7ff fbe7 	bl	8003844 <_mon_alloc_reset>
  MON_ALLOC_ENABLE();
 8004076:	f8d9 3000 	ldr.w	r3, [r9]
  PB_LC_PRINT(ctx->debug, "RUN: Processing.. current tick=%lu\r\n", (uint32_t)port_hal_get_tick());
 800407a:	f894 8096 	ldrb.w	r8, [r4, #150]	@ 0x96
  MON_ALLOC_ENABLE();
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	f8c9 3000 	str.w	r3, [r9]
  PB_LC_PRINT(ctx->debug, "RUN: Processing.. current tick=%lu\r\n", (uint32_t)port_hal_get_tick());
 8004086:	f7fd fd77 	bl	8001b78 <HAL_GetTick>
 800408a:	498b      	ldr	r1, [pc, #556]	@ (80042b8 <aiPbCmdNNRun+0x39c>)
 800408c:	4602      	mov	r2, r0
 800408e:	4640      	mov	r0, r8
 8004090:	f7ff ff20 	bl	8003ed4 <_print_debug>
 8004094:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 8004098:	f8df 823c 	ldr.w	r8, [pc, #572]	@ 80042d8 <aiPbCmdNNRun+0x3bc>
 800409c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d004      	beq.n	80040ae <aiPbCmdNNRun+0x192>
 80040a4:	f3ef 8108 	mrs	r1, MSP
 80040a8:	4884      	ldr	r0, [pc, #528]	@ (80042bc <aiPbCmdNNRun+0x3a0>)
 80040aa:	f7ff fa33 	bl	8003514 <lc_print>
  MON_STACK_MARK();
 80040ae:	f898 3004 	ldrb.w	r3, [r8, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f040 813f 	bne.w	8004336 <aiPbCmdNNRun+0x41a>
  tick = port_hal_get_tick();
 80040b8:	f7fd fd5e 	bl	8001b78 <HAL_GetTick>
 80040bc:	4682      	mov	sl, r0
  cyclesCounterStart();
 80040be:	f7ff fcab 	bl	8003a18 <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 80040c2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80040c6:	6820      	ldr	r0, [r4, #0]
 80040c8:	f000 fb83 	bl	80047d2 <ai_mnetwork_run>
  if (batch != 1) {
 80040cc:	2801      	cmp	r0, #1
 80040ce:	f040 8141 	bne.w	8004354 <aiPbCmdNNRun+0x438>
        EnumError_E_GENERIC, EnumError_E_GENERIC);
    return;
  }
  tend = cyclesCounterEnd();
 80040d2:	f7ff fcb1 	bl	8003a38 <cyclesCounterEnd>
 80040d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
  tick = port_hal_get_tick() - tick;
 80040da:	f7fd fd4d 	bl	8001b78 <HAL_GetTick>

  MON_ALLOC_DISABLE();
 80040de:	f8d9 3000 	ldr.w	r3, [r9]
  tick = port_hal_get_tick() - tick;
 80040e2:	eba0 0a0a 	sub.w	sl, r0, sl
  MON_STACK_EVALUATE();
 80040e6:	f898 0004 	ldrb.w	r0, [r8, #4]
  MON_ALLOC_DISABLE();
 80040ea:	f023 0301 	bic.w	r3, r3, #1
  MON_STACK_EVALUATE();
 80040ee:	2200      	movs	r2, #0
  MON_ALLOC_DISABLE();
 80040f0:	f8c9 3000 	str.w	r3, [r9]
  MON_STACK_EVALUATE();
 80040f4:	f8c8 2008 	str.w	r2, [r8, #8]
 80040f8:	b338      	cbz	r0, 800414a <aiPbCmdNNRun+0x22e>
 80040fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80040fe:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8004102:	1ac9      	subs	r1, r1, r3
 8004104:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8004108:	3303      	adds	r3, #3
 800410a:	f023 0303 	bic.w	r3, r3, #3
 800410e:	f103 0c20 	add.w	ip, r3, #32
 8004112:	f853 eb04 	ldr.w	lr, [r3], #4
 8004116:	f1be 3fde 	cmp.w	lr, #3739147998	@ 0xdededede
 800411a:	bf18      	it	ne
 800411c:	4602      	movne	r2, r0
 800411e:	4563      	cmp	r3, ip
 8004120:	d1f7      	bne.n	8004112 <aiPbCmdNNRun+0x1f6>
 8004122:	2a00      	cmp	r2, #0
 8004124:	f040 8123 	bne.w	800436e <aiPbCmdNNRun+0x452>
 8004128:	2220      	movs	r2, #32
 800412a:	f8d8 c018 	ldr.w	ip, [r8, #24]
 800412e:	f8c8 2008 	str.w	r2, [r8, #8]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004138:	f1b2 3fde 	cmp.w	r2, #3739147998	@ 0xdededede
 800413c:	d102      	bne.n	8004144 <aiPbCmdNNRun+0x228>
 800413e:	4563      	cmp	r3, ip
 8004140:	f0c0 8110 	bcc.w	8004364 <aiPbCmdNNRun+0x448>
 8004144:	1a08      	subs	r0, r1, r0
 8004146:	f8c8 0008 	str.w	r0, [r8, #8]

  tend = aiObserverAdjustInferenceTime(ctx, tend);
 800414a:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
    }
    if ((i + 1) == ctx->report.n_outputs) {
      state = EnumState_S_DONE;
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
    }
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 800414e:	ed9f 8a5c 	vldr	s16, [pc, #368]	@ 80042c0 <aiPbCmdNNRun+0x3a4>
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 8004152:	e9d1 3206 	ldrd	r3, r2, [r1, #24]
 8004156:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800415a:	181b      	adds	r3, r3, r0
 800415c:	eb42 0201 	adc.w	r2, r2, r1
 8004160:	990c      	ldr	r1, [sp, #48]	@ 0x30
  PB_LC_PRINT(ctx->debug, "RUN: Processing done. delta_tick=%lu\r\n", tick);
 8004162:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 8004166:	18c9      	adds	r1, r1, r3
 8004168:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800416a:	eb42 0303 	adc.w	r3, r2, r3
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 800416e:	e9cd 130c 	strd	r1, r3, [sp, #48]	@ 0x30
  PB_LC_PRINT(ctx->debug, "RUN: Processing done. delta_tick=%lu\r\n", tick);
 8004172:	4652      	mov	r2, sl
 8004174:	4953      	ldr	r1, [pc, #332]	@ (80042c4 <aiPbCmdNNRun+0x3a8>)
 8004176:	f7ff fead 	bl	8003ed4 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN:  used stack/heap=%d/%d\r\n", (int)io_stack.susage, (int)io_malloc.used);
 800417a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800417e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8004182:	4951      	ldr	r1, [pc, #324]	@ (80042c8 <aiPbCmdNNRun+0x3ac>)
 8004184:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
 8004188:	f7ff fea4 	bl	8003ed4 <_print_debug>
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 800418c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004190:	f7ff fa9e 	bl	80036d0 <dwtCyclesToFloatMs>
 8004194:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8004198:	9113      	str	r1, [sp, #76]	@ 0x4c
  if (ctx->observer_is_enabled)
 800419a:	f894 1092 	ldrb.w	r1, [r4, #146]	@ 0x92
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 800419e:	ed8d 0a0e 	vstr	s0, [sp, #56]	@ 0x38
 80041a2:	f04f 0a00 	mov.w	sl, #0
    perf.stack_usage = -1;
 80041a6:	4551      	cmp	r1, sl
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 80041a8:	ab0c      	add	r3, sp, #48	@ 0x30
 80041aa:	9311      	str	r3, [sp, #68]	@ 0x44
 80041ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 80041b0:	f8cd a000 	str.w	sl, [sp]
    perf.stack_usage = -1;
 80041b4:	bf18      	it	ne
 80041b6:	f04f 33ff 	movne.w	r3, #4294967295
 80041ba:	9312      	str	r3, [sp, #72]	@ 0x48
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 80041bc:	ab0e      	add	r3, sp, #56	@ 0x38
 80041be:	e9cd a301 	strd	sl, r3, [sp, #4]
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 80041c2:	2202      	movs	r2, #2
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 80041c4:	68a3      	ldr	r3, [r4, #8]
 80041c6:	4631      	mov	r1, r6
 80041c8:	4628      	mov	r0, r5
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 80041ca:	e9cd a20f 	strd	sl, r2, [sp, #60]	@ 0x3c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 80041ce:	f7fe feb5 	bl	8002f3c <aiPbMgrSendOperator>
  PB_LC_PRINT(ctx->debug, "RUN: send %d output tensors\r\n", ctx->report.n_outputs);
 80041d2:	f8b4 2042 	ldrh.w	r2, [r4, #66]	@ 0x42
 80041d6:	493d      	ldr	r1, [pc, #244]	@ (80042cc <aiPbCmdNNRun+0x3b0>)
 80041d8:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
 80041dc:	f7ff fe7a 	bl	8003ed4 <_print_debug>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80041e0:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80041e4:	46d0      	mov	r8, sl
    uint32_t flags =  EnumTensorFlag_TENSOR_FLAG_OUTPUT;
 80041e6:	f240 2a02 	movw	sl, #514	@ 0x202
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80041ea:	f8b4 2042 	ldrh.w	r2, [r4, #66]	@ 0x42
 80041ee:	4542      	cmp	r2, r8
 80041f0:	f300 80c8 	bgt.w	8004384 <aiPbCmdNNRun+0x468>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 80041f4:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
  if (obs_ctx->is_enabled == false)
 80041f8:	782b      	ldrb	r3, [r5, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d049      	beq.n	8004292 <aiPbCmdNNRun+0x376>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 80041fe:	a90b      	add	r1, sp, #44	@ 0x2c
 8004200:	6820      	ldr	r0, [r4, #0]
 8004202:	aa14      	add	r2, sp, #80	@ 0x50
 8004204:	f000 faf3 	bl	80047ee <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 8004208:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800420a:	f105 0128 	add.w	r1, r5, #40	@ 0x28
 800420e:	f003 fd69 	bl	8007ce4 <ai_platform_observer_unregister_s>
  return 0;
 8004212:	e03e      	b.n	8004292 <aiPbCmdNNRun+0x376>
    if ((i + 1) == ctx->report.n_inputs)
 8004214:	f108 0801 	add.w	r8, r8, #1
    EnumState state = EnumState_S_WAITING;
 8004218:	4598      	cmp	r8, r3
 800421a:	bf0c      	ite	eq
 800421c:	2302      	moveq	r3, #2
 800421e:	2301      	movne	r3, #1
    batch += _get_buffer_size(&ai_input[i]);
 8004220:	4648      	mov	r0, r9
    EnumState state = EnumState_S_WAITING;
 8004222:	9307      	str	r3, [sp, #28]
    batch += _get_buffer_size(&ai_input[i]);
 8004224:	f7ff fc2c 	bl	8003a80 <_get_buffer_size>
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8004228:	2300      	movs	r3, #0
 800422a:	4648      	mov	r0, r9
    res = receive_ai_data(req, resp, state, &ai_input[i], ctx->simple_value, ctx->direct_write);
 800422c:	f894 b094 	ldrb.w	fp, [r4, #148]	@ 0x94
 8004230:	f894 a095 	ldrb.w	sl, [r4, #149]	@ 0x95
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8004234:	9314      	str	r3, [sp, #80]	@ 0x50
 8004236:	f7ff fc23 	bl	8003a80 <_get_buffer_size>
 800423a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800423e:	9316      	str	r3, [sp, #88]	@ 0x58
 8004240:	2300      	movs	r3, #0
 8004242:	9015      	str	r0, [sp, #84]	@ 0x54
 8004244:	9317      	str	r3, [sp, #92]	@ 0x5c
  if ((simple_value) || (direct_write))
 8004246:	f1bb 0f00 	cmp.w	fp, #0
 800424a:	d102      	bne.n	8004252 <aiPbCmdNNRun+0x336>
 800424c:	f1ba 0f00 	cmp.w	sl, #0
 8004250:	d011      	beq.n	8004276 <aiPbCmdNNRun+0x35a>
    data.size = _get_element_size(buffer);
 8004252:	f8d9 1000 	ldr.w	r1, [r9]
  const ai_bool is_binary = (AI_BUFFER_FMT_SAME(AI_BUFFER_FORMAT(buffer), AI_BUFFER_FORMAT_S1) ||
 8004256:	4a1e      	ldr	r2, [pc, #120]	@ (80042d0 <aiPbCmdNNRun+0x3b4>)
 8004258:	f021 437e 	bic.w	r3, r1, #4261412864	@ 0xfe000000
 800425c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004260:	4293      	cmp	r3, r2
 8004262:	d01b      	beq.n	800429c <aiPbCmdNNRun+0x380>
  return (size_t)AI_BUFFER_BYTE_SIZE(1, buffer->format);
 8004264:	2001      	movs	r0, #1
 8004266:	f002 fe75 	bl	8006f54 <ai_buffer_get_byte_size>
    data.size = _get_element_size(buffer);
 800426a:	9015      	str	r0, [sp, #84]	@ 0x54
  if (direct_write)
 800426c:	f1ba 0f00 	cmp.w	sl, #0
 8004270:	d001      	beq.n	8004276 <aiPbCmdNNRun+0x35a>
    data.addr = (uintptr_t)&temp;
 8004272:	ab0e      	add	r3, sp, #56	@ 0x38
 8004274:	9316      	str	r3, [sp, #88]	@ 0x58
  aiPbMgrReceiveData(&data);
 8004276:	a814      	add	r0, sp, #80	@ 0x50
 8004278:	f7fe fe46 	bl	8002f08 <aiPbMgrReceiveData>
  if (data.nb_read != data.size) {
 800427c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800427e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004280:	4293      	cmp	r3, r2
 8004282:	d02b      	beq.n	80042dc <aiPbCmdNNRun+0x3c0>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8004284:	2201      	movs	r2, #1
 8004286:	9200      	str	r2, [sp, #0]
 8004288:	2204      	movs	r2, #4
 800428a:	4631      	mov	r1, r6
 800428c:	4628      	mov	r0, r5
 800428e:	f7fe fde5 	bl	8002e5c <aiPbMgrSendAck>
  }

  aiObserverUnbind(ctx);
}
 8004292:	b022      	add	sp, #136	@ 0x88
 8004294:	ecbd 8b02 	vpop	{d8}
 8004298:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    return 4;
 800429c:	2004      	movs	r0, #4
 800429e:	e7e4      	b.n	800426a <aiPbCmdNNRun+0x34e>
 80042a0:	20006e68 	.word	0x20006e68
 80042a4:	080110dd 	.word	0x080110dd
 80042a8:	080110f7 	.word	0x080110f7
 80042ac:	08011130 	.word	0x08011130
 80042b0:	08011168 	.word	0x08011168
 80042b4:	08003b11 	.word	0x08003b11
 80042b8:	08011191 	.word	0x08011191
 80042bc:	080111b6 	.word	0x080111b6
 80042c0:	00000000 	.word	0x00000000
 80042c4:	08011287 	.word	0x08011287
 80042c8:	080112ae 	.word	0x080112ae
 80042cc:	080112cc 	.word	0x080112cc
 80042d0:	000400c0 	.word	0x000400c0
 80042d4:	20006d94 	.word	0x20006d94
 80042d8:	20006d74 	.word	0x20006d74
  if ((simple_value) && (!direct_write))/* broadcast the value */
 80042dc:	f1bb 0f00 	cmp.w	fp, #0
 80042e0:	d10c      	bne.n	80042fc <aiPbCmdNNRun+0x3e0>
    aiPbMgrSendAck(req, resp, state, data.size, EnumError_E_NONE);
 80042e2:	2300      	movs	r3, #0
 80042e4:	9a07      	ldr	r2, [sp, #28]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	4631      	mov	r1, r6
 80042ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80042ec:	4628      	mov	r0, r5
 80042ee:	f7fe fdb5 	bl	8002e5c <aiPbMgrSendAck>
      aiPbMgrWaitAck();
 80042f2:	f109 091c 	add.w	r9, r9, #28
 80042f6:	f7fe fdbb 	bl	8002e70 <aiPbMgrWaitAck>
    if (res != true)
 80042fa:	e690      	b.n	800401e <aiPbCmdNNRun+0x102>
  if ((simple_value) && (!direct_write))/* broadcast the value */
 80042fc:	f1ba 0f00 	cmp.w	sl, #0
 8004300:	d1ef      	bne.n	80042e2 <aiPbCmdNNRun+0x3c6>
      const uintptr_t r_ptr = (uintptr_t)buffer->data;
 8004302:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004306:	9306      	str	r3, [sp, #24]
      uintptr_t w_ptr = r_ptr + el_s;
 8004308:	eb03 0a02 	add.w	sl, r3, r2
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 800430c:	f04f 0b01 	mov.w	fp, #1
 8004310:	4648      	mov	r0, r9
 8004312:	9209      	str	r2, [sp, #36]	@ 0x24
 8004314:	f7ff fbb4 	bl	8003a80 <_get_buffer_size>
 8004318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800431a:	fbb0 f0f2 	udiv	r0, r0, r2
 800431e:	4583      	cmp	fp, r0
 8004320:	d2df      	bcs.n	80042e2 <aiPbCmdNNRun+0x3c6>
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 8004322:	4650      	mov	r0, sl
 8004324:	9906      	ldr	r1, [sp, #24]
 8004326:	9209      	str	r2, [sp, #36]	@ 0x24
 8004328:	f00a fa65 	bl	800e7f6 <memcpy>
        w_ptr += el_s;
 800432c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 800432e:	f10b 0b01 	add.w	fp, fp, #1
        w_ptr += el_s;
 8004332:	4492      	add	sl, r2
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8004334:	e7ec      	b.n	8004310 <aiPbCmdNNRun+0x3f4>
  MON_STACK_MARK();
 8004336:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800433a:	3303      	adds	r3, #3
 800433c:	f023 0303 	bic.w	r3, r3, #3
 8004340:	f04f 31de 	mov.w	r1, #3739147998	@ 0xdededede
 8004344:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8004348:	4293      	cmp	r3, r2
 800434a:	f4bf aeb5 	bcs.w	80040b8 <aiPbCmdNNRun+0x19c>
 800434e:	f843 1b04 	str.w	r1, [r3], #4
 8004352:	e7f7      	b.n	8004344 <aiPbCmdNNRun+0x428>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 8004354:	6820      	ldr	r0, [r4, #0]
 8004356:	f000 fa10 	bl	800477a <ai_mnetwork_get_error>
 800435a:	4919      	ldr	r1, [pc, #100]	@ (80043c0 <aiPbCmdNNRun+0x4a4>)
 800435c:	f7fe fe86 	bl	800306c <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8004360:	230a      	movs	r3, #10
 8004362:	e5f3      	b.n	8003f4c <aiPbCmdNNRun+0x30>
  MON_STACK_EVALUATE();
 8004364:	3004      	adds	r0, #4
 8004366:	3304      	adds	r3, #4
 8004368:	f8c8 0008 	str.w	r0, [r8, #8]
 800436c:	e6e1      	b.n	8004132 <aiPbCmdNNRun+0x216>
 800436e:	f04f 33ff 	mov.w	r3, #4294967295
 8004372:	4814      	ldr	r0, [pc, #80]	@ (80043c4 <aiPbCmdNNRun+0x4a8>)
 8004374:	f8c8 3008 	str.w	r3, [r8, #8]
 8004378:	f7ff f8cc 	bl	8003514 <lc_print>
 800437c:	4812      	ldr	r0, [pc, #72]	@ (80043c8 <aiPbCmdNNRun+0x4ac>)
 800437e:	f7ff f8c9 	bl	8003514 <lc_print>
 8004382:	e6e2      	b.n	800414a <aiPbCmdNNRun+0x22e>
    if (req->param & EnumRunParam_P_RUN_MODE_PERF) {
 8004384:	68ab      	ldr	r3, [r5, #8]
    if ((i + 1) == ctx->report.n_outputs) {
 8004386:	f108 0801 	add.w	r8, r8, #1
    uint32_t flags =  EnumTensorFlag_TENSOR_FLAG_OUTPUT;
 800438a:	f013 0f08 	tst.w	r3, #8
 800438e:	bf14      	ite	ne
 8004390:	4653      	movne	r3, sl
 8004392:	2302      	moveq	r3, #2
    if ((i + 1) == ctx->report.n_outputs) {
 8004394:	4590      	cmp	r8, r2
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8004396:	bf08      	it	eq
 8004398:	f443 7380 	orreq.w	r3, r3, #256	@ 0x100
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 800439c:	f04f 0100 	mov.w	r1, #0
 80043a0:	e9cd 3100 	strd	r3, r1, [sp]
      state = EnumState_S_DONE;
 80043a4:	bf08      	it	eq
 80043a6:	2203      	moveq	r2, #3
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 80043a8:	464b      	mov	r3, r9
    EnumState state = EnumState_S_PROCESSING;
 80043aa:	bf18      	it	ne
 80043ac:	2202      	movne	r2, #2
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 80043ae:	eeb0 0a48 	vmov.f32	s0, s16
 80043b2:	4631      	mov	r1, r6
 80043b4:	4628      	mov	r0, r5
 80043b6:	f7ff fb71 	bl	8003a9c <send_ai_io_tensor.isra.0>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80043ba:	f109 091c 	add.w	r9, r9, #28
 80043be:	e714      	b.n	80041ea <aiPbCmdNNRun+0x2ce>
 80043c0:	080111fa 	.word	0x080111fa
 80043c4:	0801120a 	.word	0x0801120a
 80043c8:	0801122e 	.word	0x0801122e

080043cc <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 80043cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 80043ce:	4c1f      	ldr	r4, [pc, #124]	@ (800444c <aiValidationInit+0x80>)
  port_dwt_reset();
 80043d0:	4e1f      	ldr	r6, [pc, #124]	@ (8004450 <aiValidationInit+0x84>)
 80043d2:	f204 2019 	addw	r0, r4, #537	@ 0x219
 80043d6:	f7ff f89d 	bl	8003514 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 80043da:	2301      	movs	r3, #1
 80043dc:	f204 211f 	addw	r1, r4, #543	@ 0x21f
 80043e0:	2207      	movs	r2, #7
 80043e2:	f204 202d 	addw	r0, r4, #557	@ 0x22d
 80043e6:	f7ff f895 	bl	8003514 <lc_print>
 80043ea:	2500      	movs	r5, #0
  LC_PRINT("#\r\n");
 80043ec:	f204 203a 	addw	r0, r4, #570	@ 0x23a
 80043f0:	f7ff f890 	bl	8003514 <lc_print>

  systemSettingLog();
 80043f4:	f7ff f9bc 	bl	8003770 <systemSettingLog>
  port_dwt_init();
 80043f8:	f000 f926 	bl	8004648 <port_dwt_init_imp>
  port_dwt_reset();
 80043fc:	6075      	str	r5, [r6, #4]
  port_hal_delay(100);
 80043fe:	2064      	movs	r0, #100	@ 0x64
 8004400:	f7fd fbc0 	bl	8001b84 <HAL_Delay>
  st = port_dwt_get_cycles();
 8004404:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 8004406:	466a      	mov	r2, sp
 8004408:	2664      	movs	r6, #100	@ 0x64
 800440a:	4629      	mov	r1, r5
 800440c:	fbb0 f0f6 	udiv	r0, r0, r6
 8004410:	f7ff f920 	bl	8003654 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 8004414:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8004418:	9a03      	ldr	r2, [sp, #12]
 800441a:	fb06 3101 	mla	r1, r6, r1, r3
 800441e:	f204 203e 	addw	r0, r4, #574	@ 0x23e
 8004422:	f7ff f877 	bl	8003514 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8004426:	466a      	mov	r2, sp
 8004428:	2100      	movs	r1, #0
 800442a:	f04f 30ff 	mov.w	r0, #4294967295
 800442e:	f7ff f911 	bl	8003654 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8004432:	9a01      	ldr	r2, [sp, #4]
 8004434:	9b02      	ldr	r3, [sp, #8]
 8004436:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800443a:	fb01 3302 	mla	r3, r1, r2, r3
 800443e:	4a05      	ldr	r2, [pc, #20]	@ (8004454 <aiValidationInit+0x88>)
 8004440:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 8004442:	f000 f901 	bl	8004648 <port_dwt_init_imp>

  cyclesCounterInit();

  return 0;
}
 8004446:	4628      	mov	r0, r5
 8004448:	b004      	add	sp, #16
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	080110d1 	.word	0x080110d1
 8004450:	e0001000 	.word	0xe0001000
 8004454:	20006d68 	.word	0x20006d68

08004458 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8004458:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800445c:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 8004638 <aiValidationProcess+0x1e0>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8004460:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 800463c <aiValidationProcess+0x1e4>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8004464:	f8df a1d8 	ldr.w	sl, [pc, #472]	@ 8004640 <aiValidationProcess+0x1e8>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8004468:	4644      	mov	r4, r8
  aiPlatformVersion();
 800446a:	f7fe fdc9 	bl	8003000 <aiPlatformVersion>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800446e:	2600      	movs	r6, #0
  LC_PRINT("Discovering the network(s)...\r\n");
 8004470:	4863      	ldr	r0, [pc, #396]	@ (8004600 <aiValidationProcess+0x1a8>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8004472:	f844 6b08 	str.w	r6, [r4], #8
  LC_PRINT("Discovering the network(s)...\r\n");
 8004476:	f7ff f84d 	bl	8003514 <lc_print>
  int res = -1;
 800447a:	f04f 3bff 	mov.w	fp, #4294967295
    nn_name = ai_mnetwork_find(NULL, idx);
 800447e:	4631      	mov	r1, r6
 8004480:	2000      	movs	r0, #0
 8004482:	f000 f923 	bl	80046cc <ai_mnetwork_find>
    if (nn_name) {
 8004486:	4605      	mov	r5, r0
 8004488:	2800      	cmp	r0, #0
 800448a:	f000 8092 	beq.w	80045b2 <aiValidationProcess+0x15a>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 800448e:	4601      	mov	r1, r0
 8004490:	4648      	mov	r0, r9
 8004492:	f7ff f83f 	bl	8003514 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8004496:	4629      	mov	r1, r5
 8004498:	485a      	ldr	r0, [pc, #360]	@ (8004604 <aiValidationProcess+0x1ac>)
 800449a:	f7ff f83b 	bl	8003514 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 800449e:	4628      	mov	r0, r5
 80044a0:	2200      	movs	r2, #0
 80044a2:	f1a4 0108 	sub.w	r1, r4, #8
 80044a6:	f000 f91f 	bl	80046e8 <ai_mnetwork_create>
  if (err.type) {
 80044aa:	f010 05ff 	ands.w	r5, r0, #255	@ 0xff
 80044ae:	d005      	beq.n	80044bc <aiValidationProcess+0x64>
    aiLogErr(err, "ai_mnetwork_create");
 80044b0:	4955      	ldr	r1, [pc, #340]	@ (8004608 <aiValidationProcess+0x1b0>)
 80044b2:	f7fe fddb 	bl	800306c <aiLogErr>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80044b6:	f04f 34ff 	mov.w	r4, #4294967295
 80044ba:	e01c      	b.n	80044f6 <aiValidationProcess+0x9e>
  LC_PRINT("Initializing the network\r\n");
 80044bc:	4853      	ldr	r0, [pc, #332]	@ (800460c <aiValidationProcess+0x1b4>)
 80044be:	f7ff f829 	bl	8003514 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 80044c2:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80044c6:	4621      	mov	r1, r4
 80044c8:	f000 f94c 	bl	8004764 <ai_mnetwork_get_report>
 80044cc:	b9f0      	cbnz	r0, 800450c <aiValidationProcess+0xb4>
    err = ai_mnetwork_get_error(ctx->handle);
 80044ce:	24a0      	movs	r4, #160	@ 0xa0
 80044d0:	4374      	muls	r4, r6
 80044d2:	f858 0004 	ldr.w	r0, [r8, r4]
 80044d6:	f000 f950 	bl	800477a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 80044da:	494d      	ldr	r1, [pc, #308]	@ (8004610 <aiValidationProcess+0x1b8>)
 80044dc:	f7fe fdc6 	bl	800306c <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 80044e0:	f858 0004 	ldr.w	r0, [r8, r4]
 80044e4:	f000 f926 	bl	8004734 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 80044e8:	23a0      	movs	r3, #160	@ 0xa0
 80044ea:	4373      	muls	r3, r6
 80044ec:	2200      	movs	r2, #0
 80044ee:	f848 2003 	str.w	r2, [r8, r3]
    return -2;
 80044f2:	f06f 0401 	mvn.w	r4, #1
  int r;

  r = aiInit();
  if (r) {
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 80044f6:	4847      	ldr	r0, [pc, #284]	@ (8004614 <aiValidationProcess+0x1bc>)
 80044f8:	4621      	mov	r1, r4
 80044fa:	f7ff f80b 	bl	8003514 <lc_print>
    port_hal_delay(2000);
 80044fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004502:	f7fd fb3f 	bl	8001b84 <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 8004506:	4620      	mov	r0, r4
 8004508:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  if (!ai_mnetwork_init(ctx->handle)) {
 800450c:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8004510:	f000 f940 	bl	8004794 <ai_mnetwork_init>
 8004514:	4683      	mov	fp, r0
 8004516:	b988      	cbnz	r0, 800453c <aiValidationProcess+0xe4>
    err = ai_mnetwork_get_error(ctx->handle);
 8004518:	24a0      	movs	r4, #160	@ 0xa0
 800451a:	4374      	muls	r4, r6
 800451c:	f858 0004 	ldr.w	r0, [r8, r4]
 8004520:	f000 f92b 	bl	800477a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8004524:	493c      	ldr	r1, [pc, #240]	@ (8004618 <aiValidationProcess+0x1c0>)
 8004526:	f7fe fda1 	bl	800306c <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 800452a:	f858 0004 	ldr.w	r0, [r8, r4]
 800452e:	f000 f901 	bl	8004734 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8004532:	f848 b004 	str.w	fp, [r8, r4]
    return -4;
 8004536:	f06f 0403 	mvn.w	r4, #3
 800453a:	e7dc      	b.n	80044f6 <aiValidationProcess+0x9e>
  if (ai_mnetwork_get_report(ctx->handle,
 800453c:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8004540:	4621      	mov	r1, r4
 8004542:	f000 f90f 	bl	8004764 <ai_mnetwork_get_report>
 8004546:	2800      	cmp	r0, #0
 8004548:	d0c1      	beq.n	80044ce <aiValidationProcess+0x76>
    aiPrintNetworkInfo(&ctx->report);
 800454a:	4620      	mov	r0, r4
 800454c:	f7fe fe98 	bl	8003280 <aiPrintNetworkInfo>
  ctx->inputs_in_activations = false;
 8004550:	f884 5088 	strb.w	r5, [r4, #136]	@ 0x88
  ctx->outputs_in_activations = false;
 8004554:	f884 5089 	strb.w	r5, [r4, #137]	@ 0x89
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8004558:	4628      	mov	r0, r5
    if (!ctx->report.inputs[i].data)
 800455a:	211c      	movs	r1, #28
      ctx->inputs_in_activations = true;
 800455c:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800455e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8004560:	4298      	cmp	r0, r3
 8004562:	db0c      	blt.n	800457e <aiValidationProcess+0x126>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8004564:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8004644 <aiValidationProcess+0x1ec>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8004568:	2300      	movs	r3, #0
    if (!ctx->report.outputs[i].data)
 800456a:	201c      	movs	r0, #28
      ctx->outputs_in_activations = true;
 800456c:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800456e:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 8004570:	4293      	cmp	r3, r2
 8004572:	db11      	blt.n	8004598 <aiValidationProcess+0x140>
    idx++;
 8004574:	3601      	adds	r6, #1
  } while (nn_name);
 8004576:	34a0      	adds	r4, #160	@ 0xa0
 8004578:	f04f 0b00 	mov.w	fp, #0
 800457c:	e77f      	b.n	800447e <aiValidationProcess+0x26>
    if (!ctx->report.inputs[i].data)
 800457e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004580:	fb01 3300 	mla	r3, r1, r0, r3
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	b922      	cbnz	r2, 8004592 <aiValidationProcess+0x13a>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8004588:	f85a 2020 	ldr.w	r2, [sl, r0, lsl #2]
 800458c:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800458e:	3001      	adds	r0, #1
 8004590:	e7e5      	b.n	800455e <aiValidationProcess+0x106>
      ctx->inputs_in_activations = true;
 8004592:	f884 5088 	strb.w	r5, [r4, #136]	@ 0x88
 8004596:	e7fa      	b.n	800458e <aiValidationProcess+0x136>
    if (!ctx->report.outputs[i].data)
 8004598:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800459a:	fb00 2203 	mla	r2, r0, r3, r2
 800459e:	6851      	ldr	r1, [r2, #4]
 80045a0:	b921      	cbnz	r1, 80045ac <aiValidationProcess+0x154>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 80045a2:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
 80045a6:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80045a8:	3301      	adds	r3, #1
 80045aa:	e7e0      	b.n	800456e <aiValidationProcess+0x116>
      ctx->outputs_in_activations = true;
 80045ac:	f884 5089 	strb.w	r5, [r4, #137]	@ 0x89
 80045b0:	e7fa      	b.n	80045a8 <aiValidationProcess+0x150>
  if (r) {
 80045b2:	f1bb 0f00 	cmp.w	fp, #0
 80045b6:	f47f af7e 	bne.w	80044b6 <aiValidationProcess+0x5e>
    LC_PRINT("\r\n");
 80045ba:	4818      	ldr	r0, [pc, #96]	@ (800461c <aiValidationProcess+0x1c4>)
 80045bc:	f7fe ffaa 	bl	8003514 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 80045c0:	4817      	ldr	r0, [pc, #92]	@ (8004620 <aiValidationProcess+0x1c8>)
 80045c2:	f7fe ffa7 	bl	8003514 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 80045c6:	4817      	ldr	r0, [pc, #92]	@ (8004624 <aiValidationProcess+0x1cc>)
 80045c8:	f7fe ffa4 	bl	8003514 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 80045cc:	4814      	ldr	r0, [pc, #80]	@ (8004620 <aiValidationProcess+0x1c8>)
 80045ce:	f7fe ffa1 	bl	8003514 <lc_print>
    LC_PRINT("\r\n");
 80045d2:	4812      	ldr	r0, [pc, #72]	@ (800461c <aiValidationProcess+0x1c4>)
 80045d4:	f7fe ff9e 	bl	8003514 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 80045d8:	4813      	ldr	r0, [pc, #76]	@ (8004628 <aiValidationProcess+0x1d0>)
 80045da:	f7fe ff9b 	bl	8003514 <lc_print>
    LC_PRINT("# and a serial COM interface should be used\r\n");
 80045de:	4813      	ldr	r0, [pc, #76]	@ (800462c <aiValidationProcess+0x1d4>)
 80045e0:	f7fe ff98 	bl	8003514 <lc_print>
    LC_PRINT("# (i.e. Python ai_runner module). Protocol version = %d.%d\r\n",
 80045e4:	4812      	ldr	r0, [pc, #72]	@ (8004630 <aiValidationProcess+0x1d8>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	2103      	movs	r1, #3
 80045ea:	f7fe ff93 	bl	8003514 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 80045ee:	4811      	ldr	r0, [pc, #68]	@ (8004634 <aiValidationProcess+0x1dc>)
 80045f0:	f7fe fb4c 	bl	8002c8c <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 80045f4:	f7fe fbf0 	bl	8002dd8 <aiPbMgrWaitAndProcess>
  } while (r==0);
 80045f8:	4604      	mov	r4, r0
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d0fa      	beq.n	80045f4 <aiValidationProcess+0x19c>
 80045fe:	e782      	b.n	8004506 <aiValidationProcess+0xae>
 8004600:	08011345 	.word	0x08011345
 8004604:	0801137c 	.word	0x0801137c
 8004608:	0801139a 	.word	0x0801139a
 800460c:	080113ad 	.word	0x080113ad
 8004610:	080113c8 	.word	0x080113c8
 8004614:	080113ee 	.word	0x080113ee
 8004618:	080113dd 	.word	0x080113dd
 800461c:	08011404 	.word	0x08011404
 8004620:	08011407 	.word	0x08011407
 8004624:	08011435 	.word	0x08011435
 8004628:	08011463 	.word	0x08011463
 800462c:	080114a9 	.word	0x080114a9
 8004630:	080114d7 	.word	0x080114d7
 8004634:	20000010 	.word	0x20000010
 8004638:	20006dc8 	.word	0x20006dc8
 800463c:	08011365 	.word	0x08011365
 8004640:	20000054 	.word	0x20000054
 8004644:	20000050 	.word	0x20000050

08004648 <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004648:	4a07      	ldr	r2, [pc, #28]	@ (8004668 <port_dwt_init_imp+0x20>)
 800464a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 800464e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004652:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CYCCNT = 0;
 8004656:	4b05      	ldr	r3, [pc, #20]	@ (800466c <port_dwt_init_imp+0x24>)
 8004658:	2200      	movs	r2, #0
 800465a:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]
}
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	e000ed00 	.word	0xe000ed00
 800466c:	e0001000 	.word	0xe0001000

08004670 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8004670:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <ai_mnetwork_handle+0x18>)
 8004672:	b120      	cbz	r0, 800467e <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8004674:	4298      	cmp	r0, r3
 8004676:	bf0c      	ite	eq
 8004678:	4618      	moveq	r0, r3
 800467a:	2000      	movne	r0, #0
 800467c:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 800467e:	681a      	ldr	r2, [r3, #0]
            return inst;
 8004680:	2a00      	cmp	r2, #0
 8004682:	bf08      	it	eq
 8004684:	4618      	moveq	r0, r3
}
 8004686:	4770      	bx	lr
 8004688:	20006ef8 	.word	0x20006ef8

0800468c <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 800468c:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 800468e:	4604      	mov	r4, r0
 8004690:	b160      	cbz	r0, 80046ac <ai_mnetwork_is_valid.constprop.0+0x20>
 8004692:	f7fb fdfd 	bl	8000290 <strlen>
 8004696:	2807      	cmp	r0, #7
 8004698:	4602      	mov	r2, r0
 800469a:	d107      	bne.n	80046ac <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 800469c:	4804      	ldr	r0, [pc, #16]	@ (80046b0 <ai_mnetwork_is_valid.constprop.0+0x24>)
 800469e:	4621      	mov	r1, r4
 80046a0:	f00a f80f 	bl	800e6c2 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 80046a4:	fab0 f080 	clz	r0, r0
 80046a8:	0940      	lsrs	r0, r0, #5
}
 80046aa:	bd10      	pop	{r4, pc}
    return false;
 80046ac:	2000      	movs	r0, #0
 80046ae:	e7fc      	b.n	80046aa <ai_mnetwork_is_valid.constprop.0+0x1e>
 80046b0:	080115a2 	.word	0x080115a2

080046b4 <MX_X_CUBE_AI_Init>:
{
 80046b4:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 80046b6:	f7fc ff83 	bl	80015c0 <MX_USART1_UART_Init>
    BSP_SDRAM_Init();
 80046ba:	f7fd f9d5 	bl	8001a68 <BSP_SDRAM_Init>
}
 80046be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 80046c2:	f7ff be83 	b.w	80043cc <aiValidationInit>

080046c6 <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 80046c6:	f7ff bec7 	b.w	8004458 <aiValidationProcess>
	...

080046cc <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 80046cc:	b510      	push	{r4, lr}
 80046ce:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 80046d0:	f7ff ffdc 	bl	800468c <ai_mnetwork_is_valid.constprop.0>
 80046d4:	b920      	cbnz	r0, 80046e0 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 80046d6:	2c00      	cmp	r4, #0
 80046d8:	4802      	ldr	r0, [pc, #8]	@ (80046e4 <ai_mnetwork_find+0x18>)
 80046da:	bf18      	it	ne
 80046dc:	2000      	movne	r0, #0
}
 80046de:	bd10      	pop	{r4, pc}
            return entry->name;
 80046e0:	4800      	ldr	r0, [pc, #0]	@ (80046e4 <ai_mnetwork_find+0x18>)
 80046e2:	e7fc      	b.n	80046de <ai_mnetwork_find+0x12>
 80046e4:	080115a2 	.word	0x080115a2

080046e8 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	4607      	mov	r7, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80046ec:	2000      	movs	r0, #0
{
 80046ee:	4616      	mov	r6, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80046f0:	f7ff ffbe 	bl	8004670 <ai_mnetwork_handle>
{
 80046f4:	460c      	mov	r4, r1

    if (!inst) {
 80046f6:	4605      	mov	r5, r0
 80046f8:	b1a8      	cbz	r0, 8004726 <ai_mnetwork_create+0x3e>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 80046fa:	4638      	mov	r0, r7
 80046fc:	f7ff ffc6 	bl	800468c <ai_mnetwork_is_valid.constprop.0>
 8004700:	b1a0      	cbz	r0, 800472c <ai_mnetwork_create+0x44>
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
 8004702:	4631      	mov	r1, r6
 8004704:	4620      	mov	r0, r4
    else
        err = found->ai_create(network, network_config);
 8004706:	f000 fb8b 	bl	8004e20 <ai_network_create>
 800470a:	b2c2      	uxtb	r2, r0
 800470c:	f3c0 2017 	ubfx	r0, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8004710:	ea52 2100 	orrs.w	r1, r2, r0, lsl #8
 8004714:	d104      	bne.n	8004720 <ai_mnetwork_create+0x38>
        inst->entry = found;
 8004716:	4906      	ldr	r1, [pc, #24]	@ (8004730 <ai_mnetwork_create+0x48>)
 8004718:	6029      	str	r1, [r5, #0]
        inst->handle = *network;
 800471a:	6821      	ldr	r1, [r4, #0]
 800471c:	6069      	str	r1, [r5, #4]
        *network = (ai_handle*)inst;
 800471e:	6025      	str	r5, [r4, #0]
    }

    return err;
}
 8004720:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8004724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004726:	2231      	movs	r2, #49	@ 0x31
        if (ai_mnetwork_is_valid(name, entry)) {
 8004728:	2010      	movs	r0, #16
 800472a:	e7f9      	b.n	8004720 <ai_mnetwork_create+0x38>
 800472c:	2214      	movs	r2, #20
 800472e:	e7fb      	b.n	8004728 <ai_mnetwork_create+0x40>
 8004730:	080118b8 	.word	0x080118b8

08004734 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4605      	mov	r5, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004738:	f7ff ff9a 	bl	8004670 <ai_mnetwork_handle>
    if (inn) {
 800473c:	4604      	mov	r4, r0
 800473e:	b160      	cbz	r0, 800475a <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8004740:	6803      	ldr	r3, [r0, #0]
 8004742:	6840      	ldr	r0, [r0, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	4798      	blx	r3
        if (hdl != inn->handle) {
 8004748:	6863      	ldr	r3, [r4, #4]
 800474a:	4283      	cmp	r3, r0
 800474c:	d005      	beq.n	800475a <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 800474e:	4b04      	ldr	r3, [pc, #16]	@ (8004760 <ai_mnetwork_destroy+0x2c>)
 8004750:	429c      	cmp	r4, r3
 8004752:	d101      	bne.n	8004758 <ai_mnetwork_destroy+0x24>
            gnetworks[i].entry = NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	6023      	str	r3, [r4, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
 8004758:	2500      	movs	r5, #0
        }
    }
    return network;
}
 800475a:	4628      	mov	r0, r5
 800475c:	bd38      	pop	{r3, r4, r5, pc}
 800475e:	bf00      	nop
 8004760:	20006ef8 	.word	0x20006ef8

08004764 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8004764:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004766:	f7ff ff83 	bl	8004670 <ai_mnetwork_handle>
    if (inn)
 800476a:	b128      	cbz	r0, 8004778 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 800476c:	6802      	ldr	r2, [r0, #0]
 800476e:	6840      	ldr	r0, [r0, #4]
 8004770:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8004772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8004776:	4710      	bx	r2
}
 8004778:	bd10      	pop	{r4, pc}

0800477a <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 800477a:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800477c:	f7ff ff78 	bl	8004670 <ai_mnetwork_handle>
    if (inn)
 8004780:	b128      	cbz	r0, 800478e <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8004782:	6803      	ldr	r3, [r0, #0]
 8004784:	6840      	ldr	r0, [r0, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8004788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 800478c:	4718      	bx	r3
}
 800478e:	f241 0014 	movw	r0, #4116	@ 0x1014
 8004792:	bd10      	pop	{r4, pc}

08004794 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8004794:	b530      	push	{r4, r5, lr}
 8004796:	b08f      	sub	sp, #60	@ 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004798:	f7ff ff6a 	bl	8004670 <ai_mnetwork_handle>
    if (inn) {
 800479c:	4604      	mov	r4, r0
 800479e:	b168      	cbz	r0, 80047bc <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 80047a0:	6803      	ldr	r3, [r0, #0]
 80047a2:	4668      	mov	r0, sp
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 80047a8:	2500      	movs	r5, #0
 80047aa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80047ae:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 80047b0:	42aa      	cmp	r2, r5
 80047b2:	dc05      	bgt.n	80047c0 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	6860      	ldr	r0, [r4, #4]
 80047b8:	4669      	mov	r1, sp
 80047ba:	4798      	blx	r3
    }
    else
        return false;
}
 80047bc:	b00f      	add	sp, #60	@ 0x3c
 80047be:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80047c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c2:	4629      	mov	r1, r5
 80047c4:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80047c8:	a803      	add	r0, sp, #12
 80047ca:	f002 fbd5 	bl	8006f78 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 80047ce:	3501      	adds	r5, #1
 80047d0:	e7eb      	b.n	80047aa <ai_mnetwork_init+0x16>

080047d2 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 80047d2:	b570      	push	{r4, r5, r6, lr}
 80047d4:	4614      	mov	r4, r2
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80047d6:	f7ff ff4b 	bl	8004670 <ai_mnetwork_handle>
    if (inn)
 80047da:	b138      	cbz	r0, 80047ec <ai_mnetwork_run+0x1a>
        return inn->entry->ai_run(inn->handle, input, output);
 80047dc:	6802      	ldr	r2, [r0, #0]
 80047de:	6840      	ldr	r0, [r0, #4]
 80047e0:	6a15      	ldr	r5, [r2, #32]
 80047e2:	4622      	mov	r2, r4
 80047e4:	462b      	mov	r3, r5
    else
        return 0;
}
 80047e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 80047ea:	4718      	bx	r3
}
 80047ec:	bd70      	pop	{r4, r5, r6, pc}

080047ee <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 80047ee:	b538      	push	{r3, r4, r5, lr}
 80047f0:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 80047f2:	f7ff ff3d 	bl	8004670 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 80047f6:	b188      	cbz	r0, 800481c <ai_mnetwork_get_private_handle+0x2e>
 80047f8:	b181      	cbz	r1, 800481c <ai_mnetwork_get_private_handle+0x2e>
 80047fa:	b17d      	cbz	r5, 800481c <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 80047fc:	6843      	ldr	r3, [r0, #4]
 80047fe:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8004800:	f100 0408 	add.w	r4, r0, #8
 8004804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800480a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800480c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800480e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004810:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004814:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 8004818:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 800481a:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 800481c:	f04f 30ff 	mov.w	r0, #4294967295
 8004820:	e7fb      	b.n	800481a <ai_mnetwork_get_private_handle+0x2c>

08004822 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8004822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8004826:	6896      	ldr	r6, [r2, #8]
{
 8004828:	b091      	sub	sp, #68	@ 0x44
  buf[idx--] = 0;
 800482a:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 800482c:	f016 0304 	ands.w	r3, r6, #4
{
 8004830:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8004832:	f88d 503f 	strb.w	r5, [sp, #63]	@ 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004836:	d02a      	beq.n	800488e <_write_number+0x6c>
    if ((int64_t)number < 0) {
 8004838:	42a9      	cmp	r1, r5
 800483a:	da07      	bge.n	800484c <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 800483c:	6813      	ldr	r3, [r2, #0]
      number = -number;
 800483e:	4240      	negs	r0, r0
      specifier->width -= 1;
 8004840:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8004844:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8004848:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 800484a:	252d      	movs	r5, #45	@ 0x2d
 800484c:	f016 0f08 	tst.w	r6, #8
 8004850:	bf14      	ite	ne
 8004852:	f04f 0841 	movne.w	r8, #65	@ 0x41
 8004856:	f04f 0861 	moveq.w	r8, #97	@ 0x61
 800485a:	f10d 093f 	add.w	r9, sp, #63	@ 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800485e:	273e      	movs	r7, #62	@ 0x3e
    if (specifier->flags & FLAG_HEX) {
 8004860:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004864:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8004868:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 800486c:	f1ba 0f00 	cmp.w	sl, #0
 8004870:	d04d      	beq.n	800490e <_write_number+0xec>
      chr = number & 0x0F;
 8004872:	f00b 0b0f 	and.w	fp, fp, #15
      t = number >> 4;
 8004876:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004878:	f1bb 0f09 	cmp.w	fp, #9
      t = number >> 4;
 800487c:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8004880:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004884:	d907      	bls.n	8004896 <_write_number+0x74>
 8004886:	44c3      	add	fp, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8004888:	fa5f fb8b 	uxtb.w	fp, fp
 800488c:	e005      	b.n	800489a <_write_number+0x78>
  char sign_neg = 0;
 800488e:	461d      	mov	r5, r3
 8004890:	e7dc      	b.n	800484c <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 8004892:	461f      	mov	r7, r3
 8004894:	e7e8      	b.n	8004868 <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004896:	f10b 0b30 	add.w	fp, fp, #48	@ 0x30
    count++;
  } while (number);
 800489a:	ea50 0201 	orrs.w	r2, r0, r1
    buf[idx--] = chr;
 800489e:	f809 bd01 	strb.w	fp, [r9, #-1]!
 80048a2:	f107 33ff 	add.w	r3, r7, #4294967295
    count++;
 80048a6:	f1c7 0b3f 	rsb	fp, r7, #63	@ 0x3f
  } while (number);
 80048aa:	d1f2      	bne.n	8004892 <_write_number+0x70>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 80048ac:	f006 0101 	and.w	r1, r6, #1
 80048b0:	b145      	cbz	r5, 80048c4 <_write_number+0xa2>
 80048b2:	b939      	cbnz	r1, 80048c4 <_write_number+0xa2>
    buf[idx--] = sign_neg;
 80048b4:	3340      	adds	r3, #64	@ 0x40
 80048b6:	446b      	add	r3, sp
 80048b8:	222d      	movs	r2, #45	@ 0x2d
 80048ba:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 80048be:	f1c7 0b40 	rsb	fp, r7, #64	@ 0x40
    buf[idx--] = sign_neg;
 80048c2:	1ebb      	subs	r3, r7, #2
 80048c4:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 80048c6:	6822      	ldr	r2, [r4, #0]
 80048c8:	bf14      	ite	ne
 80048ca:	2130      	movne	r1, #48	@ 0x30
 80048cc:	2120      	moveq	r1, #32
 80048ce:	f006 0602 	and.w	r6, r6, #2
 80048d2:	455a      	cmp	r2, fp
 80048d4:	dd2c      	ble.n	8004930 <_write_number+0x10e>
 80048d6:	b32e      	cbz	r6, 8004924 <_write_number+0x102>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 80048d8:	b36d      	cbz	r5, 8004936 <_write_number+0x114>
    buf[idx--] = sign_neg;
 80048da:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80048de:	446a      	add	r2, sp
 80048e0:	212d      	movs	r1, #45	@ 0x2d
 80048e2:	f802 1c40 	strb.w	r1, [r2, #-64]
    count++;
 80048e6:	f10b 0b01 	add.w	fp, fp, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 80048ea:	eb0d 0603 	add.w	r6, sp, r3
 80048ee:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80048f0:	68e3      	ldr	r3, [r4, #12]
 80048f2:	f816 1b01 	ldrb.w	r1, [r6], #1
 80048f6:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 80048f8:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80048fa:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 80048fc:	455d      	cmp	r5, fp
 80048fe:	d1f7      	bne.n	80048f0 <_write_number+0xce>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8004900:	68a3      	ldr	r3, [r4, #8]
 8004902:	079b      	lsls	r3, r3, #30
 8004904:	d41f      	bmi.n	8004946 <_write_number+0x124>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8004906:	4658      	mov	r0, fp
 8004908:	b011      	add	sp, #68	@ 0x44
 800490a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      t = number / 10;
 800490e:	2300      	movs	r3, #0
 8004910:	220a      	movs	r2, #10
 8004912:	f7fc fa67 	bl	8000de4 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8004916:	f10b 0b30 	add.w	fp, fp, #48	@ 0x30
 800491a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800491e:	ebab 0b43 	sub.w	fp, fp, r3, lsl #1
 8004922:	e7b1      	b.n	8004888 <_write_number+0x66>
      buf[idx--] = ' ';
 8004924:	f80d 1003 	strb.w	r1, [sp, r3]
    count++;
 8004928:	f10b 0b01 	add.w	fp, fp, #1
 800492c:	3b01      	subs	r3, #1
 800492e:	e7d0      	b.n	80048d2 <_write_number+0xb0>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004930:	b10d      	cbz	r5, 8004936 <_write_number+0x114>
 8004932:	455a      	cmp	r2, fp
 8004934:	dad1      	bge.n	80048da <_write_number+0xb8>
  idx++;
 8004936:	3301      	adds	r3, #1
  for(int i = 0; i < count; i++) {
 8004938:	e7d7      	b.n	80048ea <_write_number+0xc8>
      _WRITE_C(' ');
 800493a:	68e3      	ldr	r3, [r4, #12]
 800493c:	6920      	ldr	r0, [r4, #16]
 800493e:	2120      	movs	r1, #32
 8004940:	4798      	blx	r3
 8004942:	f10b 0b01 	add.w	fp, fp, #1
    while (count < specifier->width) {
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	455b      	cmp	r3, fp
 800494a:	dcf6      	bgt.n	800493a <_write_number+0x118>
 800494c:	e7db      	b.n	8004906 <_write_number+0xe4>
	...

08004950 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8004950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004954:	4606      	mov	r6, r0
 8004956:	b09d      	sub	sp, #116	@ 0x74
 8004958:	460f      	mov	r7, r1
 800495a:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 800495c:	2500      	movs	r5, #0
  return *(*fmtP)++;
 800495e:	4613      	mov	r3, r2
 8004960:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004964:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8004966:	b919      	cbnz	r1, 8004970 <vlc_print+0x20>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8004968:	4628      	mov	r0, r5
 800496a:	b01d      	add	sp, #116	@ 0x74
 800496c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8004970:	290a      	cmp	r1, #10
 8004972:	d103      	bne.n	800497c <vlc_print+0x2c>
      putc_fct(user, c);
 8004974:	4638      	mov	r0, r7
 8004976:	47b0      	blx	r6
      count++;
 8004978:	3501      	adds	r5, #1
 800497a:	e08c      	b.n	8004a96 <vlc_print+0x146>
    else if (c == '%')
 800497c:	2925      	cmp	r1, #37	@ 0x25
 800497e:	d1f9      	bne.n	8004974 <vlc_print+0x24>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004980:	2300      	movs	r3, #0
 8004982:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004986:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
 800498a:	970b      	str	r7, [sp, #44]	@ 0x2c
            specifier.width = specifier.width * 10 + (c - '0');
 800498c:	2000      	movs	r0, #0
 800498e:	e008      	b.n	80049a2 <vlc_print+0x52>
          if (!specifier.width && !specifier.precision) {
 8004990:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8004994:	ea51 0c02 	orrs.w	ip, r1, r2
 8004998:	d113      	bne.n	80049c2 <vlc_print+0x72>
            specifier.flags |= FLAG_ZERO_EXTEND;
 800499a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800499c:	f042 0201 	orr.w	r2, r2, #1
 80049a0:	9209      	str	r2, [sp, #36]	@ 0x24
  return *(*fmtP)++;
 80049a2:	9a04      	ldr	r2, [sp, #16]
 80049a4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80049a8:	9204      	str	r2, [sp, #16]
        if (!c)
 80049aa:	2939      	cmp	r1, #57	@ 0x39
 80049ac:	f200 81c4 	bhi.w	8004d38 <vlc_print+0x3e8>
 80049b0:	292c      	cmp	r1, #44	@ 0x2c
 80049b2:	f200 8196 	bhi.w	8004ce2 <vlc_print+0x392>
 80049b6:	2900      	cmp	r1, #0
 80049b8:	f000 81cc 	beq.w	8004d54 <vlc_print+0x404>
          switch(c)
 80049bc:	2925      	cmp	r1, #37	@ 0x25
 80049be:	d0d9      	beq.n	8004974 <vlc_print+0x24>
 80049c0:	e1c8      	b.n	8004d54 <vlc_print+0x404>
          } else if (has_precision) {
 80049c2:	f04f 0c0a 	mov.w	ip, #10
 80049c6:	b120      	cbz	r0, 80049d2 <vlc_print+0x82>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80049c8:	fb0c f202 	mul.w	r2, ip, r2
 80049cc:	9208      	str	r2, [sp, #32]
  for(int i = 0; i < count; i++) {
 80049ce:	2001      	movs	r0, #1
 80049d0:	e7e7      	b.n	80049a2 <vlc_print+0x52>
            specifier.width = specifier.width * 10 + (c - '0');
 80049d2:	fb0c f101 	mul.w	r1, ip, r1
            specifier.width = specifier.width * 10 + (c - '0');
 80049d6:	9107      	str	r1, [sp, #28]
 80049d8:	e7d8      	b.n	800498c <vlc_print+0x3c>
          specifier.flags |= FLAG_NEG_PAD;
 80049da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049dc:	f042 0202 	orr.w	r2, r2, #2
 80049e0:	e7de      	b.n	80049a0 <vlc_print+0x50>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80049e2:	3930      	subs	r1, #48	@ 0x30
 80049e4:	220a      	movs	r2, #10
          if (has_precision) {
 80049e6:	b120      	cbz	r0, 80049f2 <vlc_print+0xa2>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80049e8:	9808      	ldr	r0, [sp, #32]
 80049ea:	fb02 1100 	mla	r1, r2, r0, r1
 80049ee:	9108      	str	r1, [sp, #32]
 80049f0:	e7ed      	b.n	80049ce <vlc_print+0x7e>
            specifier.width = specifier.width * 10 + (c - '0');
 80049f2:	9807      	ldr	r0, [sp, #28]
 80049f4:	fb02 1100 	mla	r1, r2, r0, r1
 80049f8:	e7ed      	b.n	80049d6 <vlc_print+0x86>
          long_type += 1;
 80049fa:	3301      	adds	r3, #1
 80049fc:	e7d1      	b.n	80049a2 <vlc_print+0x52>
          switch(c)
 80049fe:	3963      	subs	r1, #99	@ 0x63
 8004a00:	2915      	cmp	r1, #21
 8004a02:	f200 81a7 	bhi.w	8004d54 <vlc_print+0x404>
 8004a06:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004a0a:	0020      	.short	0x0020
 8004a0c:	01a50080 	.word	0x01a50080
 8004a10:	01a50089 	.word	0x01a50089
 8004a14:	008001a5 	.word	0x008001a5
 8004a18:	01a501a5 	.word	0x01a501a5
 8004a1c:	01a501a5 	.word	0x01a501a5
 8004a20:	01a501a5 	.word	0x01a501a5
 8004a24:	01a5006a 	.word	0x01a5006a
 8004a28:	002301a5 	.word	0x002301a5
 8004a2c:	001601a5 	.word	0x001601a5
 8004a30:	01a501a5 	.word	0x01a501a5
 8004a34:	0074      	.short	0x0074
                val = va_arg(vl, unsigned int);
 8004a36:	46a0      	mov	r8, r4
 8004a38:	2100      	movs	r1, #0
 8004a3a:	f858 0b04 	ldr.w	r0, [r8], #4
            count += _write_number(val, &specifier);
 8004a3e:	aa07      	add	r2, sp, #28
 8004a40:	f7ff feef 	bl	8004822 <_write_number>
 8004a44:	4644      	mov	r4, r8
 8004a46:	4405      	add	r5, r0
      if (error) {
 8004a48:	e025      	b.n	8004a96 <vlc_print+0x146>
            putc_fct(user, t);
 8004a4a:	f814 1b04 	ldrb.w	r1, [r4], #4
 8004a4e:	e791      	b.n	8004974 <vlc_print+0x24>
            if (!str) str = "(null)";
 8004a50:	4bb5      	ldr	r3, [pc, #724]	@ (8004d28 <vlc_print+0x3d8>)
            str = va_arg(vl, char*);
 8004a52:	f854 bb04 	ldr.w	fp, [r4], #4
            if (!str) str = "(null)";
 8004a56:	f1bb 0f00 	cmp.w	fp, #0
 8004a5a:	bf08      	it	eq
 8004a5c:	469b      	moveq	fp, r3
  int len = strlen(str);
 8004a5e:	4658      	mov	r0, fp
 8004a60:	f7fb fc16 	bl	8000290 <strlen>
  if (specifier->precision) {
 8004a64:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8004a66:	4681      	mov	r9, r0
  if (specifier->precision) {
 8004a68:	b113      	cbz	r3, 8004a70 <vlc_print+0x120>
    len = (len > specifier->precision)?specifier->precision:len;
 8004a6a:	4298      	cmp	r0, r3
 8004a6c:	bfa8      	it	ge
 8004a6e:	4699      	movge	r9, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8004a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a72:	f013 0a02 	ands.w	sl, r3, #2
 8004a76:	d01b      	beq.n	8004ab0 <vlc_print+0x160>
  int count = 0;
 8004a78:	f04f 0800 	mov.w	r8, #0
 8004a7c:	465b      	mov	r3, fp
  for (int i = 0; i < len; i++) {
 8004a7e:	eba3 020b 	sub.w	r2, r3, fp
 8004a82:	4591      	cmp	r9, r2
 8004a84:	dc16      	bgt.n	8004ab4 <vlc_print+0x164>
 8004a86:	f1b9 0f00 	cmp.w	r9, #0
 8004a8a:	bfa8      	it	ge
 8004a8c:	44c8      	addge	r8, r9
  if (specifier->flags & FLAG_NEG_PAD) {
 8004a8e:	f1ba 0f00 	cmp.w	sl, #0
 8004a92:	d121      	bne.n	8004ad8 <vlc_print+0x188>
            count += _write_string(str, &specifier);
 8004a94:	4445      	add	r5, r8
            count += _write_number(val, &specifier);
 8004a96:	9a04      	ldr	r2, [sp, #16]
 8004a98:	e761      	b.n	800495e <vlc_print+0xe>
      _WRITE_C(' ');
 8004a9a:	2120      	movs	r1, #32
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	47b0      	blx	r6
 8004aa0:	f108 0801 	add.w	r8, r8, #1
    for(int i = len; i < specifier->width; i++) {
 8004aa4:	9a07      	ldr	r2, [sp, #28]
 8004aa6:	eb08 0309 	add.w	r3, r8, r9
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	dcf5      	bgt.n	8004a9a <vlc_print+0x14a>
 8004aae:	e7e5      	b.n	8004a7c <vlc_print+0x12c>
  int count = 0;
 8004ab0:	46d0      	mov	r8, sl
 8004ab2:	e7f7      	b.n	8004aa4 <vlc_print+0x154>
    _WRITE_C(*str++);
 8004ab4:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4638      	mov	r0, r7
 8004abc:	47b0      	blx	r6
 8004abe:	9b00      	ldr	r3, [sp, #0]
  for (int i = 0; i < len; i++) {
 8004ac0:	e7dd      	b.n	8004a7e <vlc_print+0x12e>
      _WRITE_C(' ');
 8004ac2:	2120      	movs	r1, #32
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	47b0      	blx	r6
 8004ac8:	f108 0801 	add.w	r8, r8, #1
    for(int i = len; i < specifier->width; i++) {
 8004acc:	9a07      	ldr	r2, [sp, #28]
 8004ace:	eb09 0308 	add.w	r3, r9, r8
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	dcf5      	bgt.n	8004ac2 <vlc_print+0x172>
 8004ad6:	e7dd      	b.n	8004a94 <vlc_print+0x144>
 8004ad8:	eba9 0908 	sub.w	r9, r9, r8
 8004adc:	e7f6      	b.n	8004acc <vlc_print+0x17c>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	9309      	str	r3, [sp, #36]	@ 0x24
            specifier.width = 8;
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 8004aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aec:	f043 0308 	orr.w	r3, r3, #8
 8004af0:	9309      	str	r3, [sp, #36]	@ 0x24
            specifier.flags |= FLAG_HEX;
 8004af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
            count += _write_number(val, &specifier);
 8004af4:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 8004af8:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 8004afc:	aa07      	add	r2, sp, #28
 8004afe:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8004b00:	9309      	str	r3, [sp, #36]	@ 0x24
            count += _write_number(val, &specifier);
 8004b02:	f7ff fe8e 	bl	8004822 <_write_number>
 8004b06:	4405      	add	r5, r0
      if (error) {
 8004b08:	e7c5      	b.n	8004a96 <vlc_print+0x146>
            specifier.flags |= FLAG_IS_SIGNED;
 8004b0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b0c:	f042 0204 	orr.w	r2, r2, #4
 8004b10:	9209      	str	r2, [sp, #36]	@ 0x24
                val = va_arg(vl, signed int);
 8004b12:	6820      	ldr	r0, [r4, #0]
                val = va_arg(vl, unsigned int);
 8004b14:	f104 0804 	add.w	r8, r4, #4
                val = va_arg(vl, signed int);
 8004b18:	17c1      	asrs	r1, r0, #31
 8004b1a:	e790      	b.n	8004a3e <vlc_print+0xee>
            dbl = va_arg(vl, double);
 8004b1c:	3407      	adds	r4, #7
 8004b1e:	f024 0407 	bic.w	r4, r4, #7
 8004b22:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 8004b26:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 8004b28:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 8004b2c:	b90b      	cbnz	r3, 8004b32 <vlc_print+0x1e2>
              specifier.precision = 6;
 8004b2e:	2306      	movs	r3, #6
 8004b30:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 8004b32:	f8dd a020 	ldr.w	sl, [sp, #32]
  double mul = 1.0;
 8004b36:	f8df 91fc 	ldr.w	r9, [pc, #508]	@ 8004d34 <vlc_print+0x3e4>
  for (int i=0;i <specifier->precision; i++)
 8004b3a:	f04f 0b00 	mov.w	fp, #0
  double mul = 1.0;
 8004b3e:	f04f 0800 	mov.w	r8, #0
  for (int i=0;i <specifier->precision; i++)
 8004b42:	45d3      	cmp	fp, sl
    mul *= 10;
 8004b44:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 8004b48:	db79      	blt.n	8004c3e <vlc_print+0x2ee>
  if (is_signed)
 8004b4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f7fb ffd4 	bl	8000afc <__aeabi_dcmplt>
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d07c      	beq.n	8004c52 <vlc_print+0x302>
    number = -number;
 8004b58:	9b00      	ldr	r3, [sp, #0]
 8004b5a:	9302      	str	r3, [sp, #8]
 8004b5c:	9b01      	ldr	r3, [sp, #4]
 8004b5e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004b62:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	4970      	ldr	r1, [pc, #448]	@ (8004d2c <vlc_print+0x3dc>)
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f7fb fe7e 	bl	800086c <__aeabi_ddiv>
 8004b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b74:	f7fb fb9a 	bl	80002ac <__adddf3>
  val = (uint64_t)(number * mul);
 8004b78:	464b      	mov	r3, r9
 8004b7a:	4642      	mov	r2, r8
 8004b7c:	f7fb fd4c 	bl	8000618 <__aeabi_dmul>
 8004b80:	f7fc f97c 	bl	8000e7c <__aeabi_d2ulz>
  int count = 0;
 8004b84:	f04f 0800 	mov.w	r8, #0
  val = (uint64_t)(number * mul);
 8004b88:	4603      	mov	r3, r0
  uint32_t idx = sizeof(buf) - 1;
 8004b8a:	f04f 093f 	mov.w	r9, #63	@ 0x3f
    uint64_t t = val / 10;
 8004b8e:	469b      	mov	fp, r3
 8004b90:	220a      	movs	r2, #10
 8004b92:	2300      	movs	r3, #0
 8004b94:	4658      	mov	r0, fp
 8004b96:	9105      	str	r1, [sp, #20]
 8004b98:	f7fc f924 	bl	8000de4 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8004b9c:	f10b 0c30 	add.w	ip, fp, #48	@ 0x30
    uint64_t t = val / 10;
 8004ba0:	4603      	mov	r3, r0
    chr = (val - t * 10) + '0';
 8004ba2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004ba6:	ebac 0c40 	sub.w	ip, ip, r0, lsl #1
    buf[idx--] = chr;
 8004baa:	f109 0070 	add.w	r0, r9, #112	@ 0x70
 8004bae:	4468      	add	r0, sp
 8004bb0:	f109 32ff 	add.w	r2, r9, #4294967295
 8004bb4:	f800 cc40 	strb.w	ip, [r0, #-64]
    count++;
 8004bb8:	f108 0001 	add.w	r0, r8, #1
    if (count == specifier->precision) {
 8004bbc:	4582      	cmp	sl, r0
      buf[idx--] = '.';
 8004bbe:	bf01      	itttt	eq
 8004bc0:	3270      	addeq	r2, #112	@ 0x70
 8004bc2:	446a      	addeq	r2, sp
 8004bc4:	202e      	moveq	r0, #46	@ 0x2e
 8004bc6:	f802 0c40 	strbeq.w	r0, [r2, #-64]
    buf[idx--] = chr;
 8004bca:	bf18      	it	ne
 8004bcc:	4691      	movne	r9, r2
  } while (val);
 8004bce:	9a05      	ldr	r2, [sp, #20]
      buf[idx--] = '.';
 8004bd0:	bf06      	itte	eq
 8004bd2:	f1a9 0902 	subeq.w	r9, r9, #2
      count++;
 8004bd6:	f108 0802 	addeq.w	r8, r8, #2
    count++;
 8004bda:	4680      	movne	r8, r0
  } while (val);
 8004bdc:	f1bb 0f0a 	cmp.w	fp, #10
 8004be0:	f172 0200 	sbcs.w	r2, r2, #0
 8004be4:	d2d3      	bcs.n	8004b8e <vlc_print+0x23e>
 8004be6:	ab0c      	add	r3, sp, #48	@ 0x30
 8004be8:	444b      	add	r3, r9
 8004bea:	4642      	mov	r2, r8
    buf[idx--] = '0';
 8004bec:	2130      	movs	r1, #48	@ 0x30
  while (count < specifier->precision) {
 8004bee:	4592      	cmp	sl, r2
 8004bf0:	dc34      	bgt.n	8004c5c <vlc_print+0x30c>
 8004bf2:	45c2      	cmp	sl, r8
 8004bf4:	bfb4      	ite	lt
 8004bf6:	2200      	movlt	r2, #0
 8004bf8:	2201      	movge	r2, #1
 8004bfa:	2a00      	cmp	r2, #0
 8004bfc:	eba8 030a 	sub.w	r3, r8, sl
 8004c00:	bf08      	it	eq
 8004c02:	2300      	moveq	r3, #0
 8004c04:	4499      	add	r9, r3
 8004c06:	ebaa 0308 	sub.w	r3, sl, r8
 8004c0a:	bf08      	it	eq
 8004c0c:	2300      	moveq	r3, #0
 8004c0e:	4498      	add	r8, r3
  if (count == specifier->precision) {
 8004c10:	45d0      	cmp	r8, sl
 8004c12:	f10a 0a01 	add.w	sl, sl, #1
 8004c16:	d125      	bne.n	8004c64 <vlc_print+0x314>
    buf[idx--] = '.';
 8004c18:	f109 0370 	add.w	r3, r9, #112	@ 0x70
 8004c1c:	446b      	add	r3, sp
 8004c1e:	222e      	movs	r2, #46	@ 0x2e
 8004c20:	f803 2c40 	strb.w	r2, [r3, #-64]
 8004c24:	f109 39ff 	add.w	r9, r9, #4294967295
    buf[idx--] = '0';
 8004c28:	f109 0370 	add.w	r3, r9, #112	@ 0x70
 8004c2c:	446b      	add	r3, sp
 8004c2e:	2230      	movs	r2, #48	@ 0x30
 8004c30:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004c34:	f10a 0801 	add.w	r8, sl, #1
    buf[idx--] = '0';
 8004c38:	f109 39ff 	add.w	r9, r9, #4294967295
 8004c3c:	e014      	b.n	8004c68 <vlc_print+0x318>
    mul *= 10;
 8004c3e:	4640      	mov	r0, r8
 8004c40:	4649      	mov	r1, r9
 8004c42:	4b3b      	ldr	r3, [pc, #236]	@ (8004d30 <vlc_print+0x3e0>)
 8004c44:	f7fb fce8 	bl	8000618 <__aeabi_dmul>
  for (int i=0;i <specifier->precision; i++)
 8004c48:	f10b 0b01 	add.w	fp, fp, #1
    mul *= 10;
 8004c4c:	4680      	mov	r8, r0
 8004c4e:	4689      	mov	r9, r1
  for (int i=0;i <specifier->precision; i++)
 8004c50:	e777      	b.n	8004b42 <vlc_print+0x1f2>
 8004c52:	ed9d 7b00 	vldr	d7, [sp]
 8004c56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004c5a:	e783      	b.n	8004b64 <vlc_print+0x214>
    buf[idx--] = '0';
 8004c5c:	f803 1901 	strb.w	r1, [r3], #-1
    count++;
 8004c60:	3201      	adds	r2, #1
 8004c62:	e7c4      	b.n	8004bee <vlc_print+0x29e>
  if (count == specifier->precision + 1)
 8004c64:	45d0      	cmp	r8, sl
 8004c66:	d0df      	beq.n	8004c28 <vlc_print+0x2d8>
  if (is_signed) {
 8004c68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f7fb ff44 	bl	8000afc <__aeabi_dcmplt>
 8004c74:	b148      	cbz	r0, 8004c8a <vlc_print+0x33a>
    buf[idx--] = '-';
 8004c76:	f109 0370 	add.w	r3, r9, #112	@ 0x70
 8004c7a:	446b      	add	r3, sp
 8004c7c:	222d      	movs	r2, #45	@ 0x2d
 8004c7e:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004c82:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '-';
 8004c86:	f109 39ff 	add.w	r9, r9, #4294967295
 8004c8a:	aa0c      	add	r2, sp, #48	@ 0x30
  while (count < specifier->width) {
 8004c8c:	9b07      	ldr	r3, [sp, #28]
 8004c8e:	eb02 0109 	add.w	r1, r2, r9
    buf[idx--] = ' ';
 8004c92:	2020      	movs	r0, #32
  while (count < specifier->width) {
 8004c94:	4642      	mov	r2, r8
 8004c96:	429a      	cmp	r2, r3
 8004c98:	db18      	blt.n	8004ccc <vlc_print+0x37c>
 8004c9a:	4598      	cmp	r8, r3
 8004c9c:	bfcc      	ite	gt
 8004c9e:	2200      	movgt	r2, #0
 8004ca0:	2201      	movle	r2, #1
 8004ca2:	2a00      	cmp	r2, #0
 8004ca4:	eba3 0a08 	sub.w	sl, r3, r8
 8004ca8:	bf08      	it	eq
 8004caa:	f04f 0a00 	moveq.w	sl, #0
 8004cae:	44c2      	add	sl, r8
  for(int i = 0; i < count; i++) {
 8004cb0:	eba8 0803 	sub.w	r8, r8, r3
 8004cb4:	bf08      	it	eq
 8004cb6:	f04f 0800 	moveq.w	r8, #0
 8004cba:	44c8      	add	r8, r9
 8004cbc:	ab0c      	add	r3, sp, #48	@ 0x30
 8004cbe:	4498      	add	r8, r3
 8004cc0:	f04f 0900 	mov.w	r9, #0
 8004cc4:	45ca      	cmp	sl, r9
 8004cc6:	dc05      	bgt.n	8004cd4 <vlc_print+0x384>
            count += _write_double(dbl, &specifier);
 8004cc8:	4455      	add	r5, sl
      if (error) {
 8004cca:	e6e4      	b.n	8004a96 <vlc_print+0x146>
    buf[idx--] = ' ';
 8004ccc:	f801 0901 	strb.w	r0, [r1], #-1
    count++;
 8004cd0:	3201      	adds	r2, #1
 8004cd2:	e7e0      	b.n	8004c96 <vlc_print+0x346>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004cd4:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8004cd8:	4638      	mov	r0, r7
 8004cda:	47b0      	blx	r6
  for(int i = 0; i < count; i++) {
 8004cdc:	f109 0901 	add.w	r9, r9, #1
 8004ce0:	e7f0      	b.n	8004cc4 <vlc_print+0x374>
 8004ce2:	f1a1 022d 	sub.w	r2, r1, #45	@ 0x2d
 8004ce6:	2a0c      	cmp	r2, #12
 8004ce8:	d834      	bhi.n	8004d54 <vlc_print+0x404>
 8004cea:	f20f 0c08 	addw	ip, pc, #8
 8004cee:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	080049db 	.word	0x080049db
 8004cf8:	080049cf 	.word	0x080049cf
 8004cfc:	08004d55 	.word	0x08004d55
 8004d00:	08004991 	.word	0x08004991
 8004d04:	080049e3 	.word	0x080049e3
 8004d08:	080049e3 	.word	0x080049e3
 8004d0c:	080049e3 	.word	0x080049e3
 8004d10:	080049e3 	.word	0x080049e3
 8004d14:	080049e3 	.word	0x080049e3
 8004d18:	080049e3 	.word	0x080049e3
 8004d1c:	080049e3 	.word	0x080049e3
 8004d20:	080049e3 	.word	0x080049e3
 8004d24:	080049e3 	.word	0x080049e3
 8004d28:	080115aa 	.word	0x080115aa
 8004d2c:	3fe00000 	.word	0x3fe00000
 8004d30:	40240000 	.word	0x40240000
 8004d34:	3ff00000 	.word	0x3ff00000
 8004d38:	296c      	cmp	r1, #108	@ 0x6c
 8004d3a:	f43f ae5e 	beq.w	80049fa <vlc_print+0xaa>
          switch(c)
 8004d3e:	2978      	cmp	r1, #120	@ 0x78
 8004d40:	d808      	bhi.n	8004d54 <vlc_print+0x404>
 8004d42:	2962      	cmp	r1, #98	@ 0x62
 8004d44:	f63f ae5b 	bhi.w	80049fe <vlc_print+0xae>
 8004d48:	2946      	cmp	r1, #70	@ 0x46
 8004d4a:	f43f aee7 	beq.w	8004b1c <vlc_print+0x1cc>
 8004d4e:	2958      	cmp	r1, #88	@ 0x58
 8004d50:	f43f aecb 	beq.w	8004aea <vlc_print+0x19a>
        putc_fct(user, '<');
 8004d54:	213c      	movs	r1, #60	@ 0x3c
 8004d56:	4638      	mov	r0, r7
 8004d58:	47b0      	blx	r6
        putc_fct(user, '!');
 8004d5a:	2121      	movs	r1, #33	@ 0x21
 8004d5c:	4638      	mov	r0, r7
 8004d5e:	47b0      	blx	r6
        putc_fct(user, '>');
 8004d60:	213e      	movs	r1, #62	@ 0x3e
 8004d62:	4638      	mov	r0, r7
 8004d64:	47b0      	blx	r6
        va_arg(vl, signed long);
 8004d66:	3404      	adds	r4, #4
        count += 3;
 8004d68:	3503      	adds	r5, #3
        error = false;
 8004d6a:	e694      	b.n	8004a96 <vlc_print+0x146>
 8004d6c:	0000      	movs	r0, r0
	...

08004d70 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8004d70:	b570      	push	{r4, r5, r6, lr}
 8004d72:	b0a2      	sub	sp, #136	@ 0x88
 8004d74:	4606      	mov	r6, r0
 8004d76:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004d78:	f002 fa86 	bl	8007288 <ai_platform_context_acquire>
 8004d7c:	4604      	mov	r4, r0

  if (report && net_ctx)
 8004d7e:	2d00      	cmp	r5, #0
 8004d80:	d037      	beq.n	8004df2 <ai_network_get_report+0x82>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d032      	beq.n	8004dec <ai_network_get_report+0x7c>
  {
    ai_network_report r = {
 8004d86:	2278      	movs	r2, #120	@ 0x78
 8004d88:	2100      	movs	r1, #0
 8004d8a:	a804      	add	r0, sp, #16
 8004d8c:	f009 fc91 	bl	800e6b2 <memset>
 8004d90:	4b1b      	ldr	r3, [pc, #108]	@ (8004e00 <ai_network_get_report+0x90>)
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	4b1b      	ldr	r3, [pc, #108]	@ (8004e04 <ai_network_get_report+0x94>)
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	4b1b      	ldr	r3, [pc, #108]	@ (8004e08 <ai_network_get_report+0x98>)
 8004d9a:	9302      	str	r3, [sp, #8]
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e0c <ai_network_get_report+0x9c>)
 8004d9e:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004da0:	f002 fa2c 	bl	80071fc <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8004da4:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004da6:	f002 fa2d 	bl	8007204 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8004daa:	4b19      	ldr	r3, [pc, #100]	@ (8004e10 <ai_network_get_report+0xa0>)
 8004dac:	9306      	str	r3, [sp, #24]
 8004dae:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004db2:	f8ad 301c 	strh.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004db6:	9005      	str	r0, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8004db8:	f002 fa3a 	bl	8007230 <ai_platform_api_get_version>
 8004dbc:	9009      	str	r0, [sp, #36]	@ 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004dbe:	f002 fa4d 	bl	800725c <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8004dc2:	a30d      	add	r3, pc, #52	@ (adr r3, 8004df8 <ai_network_get_report+0x88>)
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004dcc:	4b11      	ldr	r3, [pc, #68]	@ (8004e14 <ai_network_get_report+0xa4>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004dce:	900a      	str	r0, [sp, #40]	@ 0x28
    ai_network_report r = {
 8004dd0:	9311      	str	r3, [sp, #68]	@ 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0xa7bf7af1,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004dd2:	4669      	mov	r1, sp
    ai_network_report r = {
 8004dd4:	4b10      	ldr	r3, [pc, #64]	@ (8004e18 <ai_network_get_report+0xa8>)
 8004dd6:	9320      	str	r3, [sp, #128]	@ 0x80
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f002 fa6f 	bl	80072bc <ai_platform_api_get_network_report>
 8004dde:	4604      	mov	r4, r0
 8004de0:	b120      	cbz	r0, 8004dec <ai_network_get_report+0x7c>

    *report = r;
 8004de2:	2288      	movs	r2, #136	@ 0x88
 8004de4:	4669      	mov	r1, sp
 8004de6:	4628      	mov	r0, r5
 8004de8:	f009 fd05 	bl	800e7f6 <memcpy>
    return true;
  }
  return false;
}
 8004dec:	4620      	mov	r0, r4
 8004dee:	b022      	add	sp, #136	@ 0x88
 8004df0:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8004df2:	462c      	mov	r4, r5
 8004df4:	e7fa      	b.n	8004dec <ai_network_get_report+0x7c>
 8004df6:	bf00      	nop
 8004df8:	01235c84 	.word	0x01235c84
 8004dfc:	00000000 	.word	0x00000000
 8004e00:	080115a2 	.word	0x080115a2
 8004e04:	080115b1 	.word	0x080115b1
 8004e08:	080115d4 	.word	0x080115d4
 8004e0c:	080115ed 	.word	0x080115ed
 8004e10:	0801175f 	.word	0x0801175f
 8004e14:	a1facade 	.word	0xa1facade
 8004e18:	a7bf7af1 	.word	0xa7bf7af1

08004e1c <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8004e1c:	f002 ba3c 	b.w	8007298 <ai_platform_network_get_error>

08004e20 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004e20:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8004e22:	2305      	movs	r3, #5
 8004e24:	2200      	movs	r2, #0
 8004e26:	e9cd 3200 	strd	r3, r2, [sp]
 8004e2a:	4a03      	ldr	r2, [pc, #12]	@ (8004e38 <ai_network_create+0x18>)
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f002 fbef 	bl	8007610 <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004e32:	b003      	add	sp, #12
 8004e34:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e38:	20000058 	.word	0x20000058

08004e3c <ai_network_destroy>:


AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8004e3c:	f002 bc2a 	b.w	8007694 <ai_platform_network_destroy>

08004e40 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e44:	460d      	mov	r5, r1
 8004e46:	9001      	str	r0, [sp, #4]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8004e48:	f002 fc36 	bl	80076b8 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	f000 8735 	beq.w	8005cbe <ai_network_init+0xe7e>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8004e54:	4ebf      	ldr	r6, [pc, #764]	@ (8005154 <ai_network_init+0x314>)
 8004e56:	462a      	mov	r2, r5
 8004e58:	2101      	movs	r1, #1
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f002 f906 	bl	800706c <ai_platform_get_weights_map>
 8004e60:	9000      	str	r0, [sp, #0]
 8004e62:	2800      	cmp	r0, #0
 8004e64:	f000 872e 	beq.w	8005cc4 <ai_network_init+0xe84>
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e68:	4abb      	ldr	r2, [pc, #748]	@ (8005158 <ai_network_init+0x318>)
 8004e6a:	6813      	ldr	r3, [r2, #0]
 8004e6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e70:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8004e72:	6833      	ldr	r3, [r6, #0]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8004e74:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e78:	4ab8      	ldr	r2, [pc, #736]	@ (800515c <ai_network_init+0x31c>)
 8004e7a:	6811      	ldr	r1, [r2, #0]
 8004e7c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004e80:	6011      	str	r1, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 432);
 8004e82:	f503 71d8 	add.w	r1, r3, #432	@ 0x1b0
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 432);
 8004e86:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e8a:	4ab5      	ldr	r2, [pc, #724]	@ (8005160 <ai_network_init+0x320>)
 8004e8c:	6811      	ldr	r1, [r2, #0]
 8004e8e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004e92:	6011      	str	r1, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 496);
 8004e94:	f503 71f8 	add.w	r1, r3, #496	@ 0x1f0
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 496);
 8004e98:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e9c:	4ab1      	ldr	r2, [pc, #708]	@ (8005164 <ai_network_init+0x324>)
 8004e9e:	6811      	ldr	r1, [r2, #0]
 8004ea0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004ea4:	6011      	str	r1, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 640);
 8004ea6:	f503 7120 	add.w	r1, r3, #640	@ 0x280
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 8004eaa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004eae:	4aae      	ldr	r2, [pc, #696]	@ (8005168 <ai_network_init+0x328>)
 8004eb0:	6811      	ldr	r1, [r2, #0]
 8004eb2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004eb6:	6011      	str	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 704);
 8004eb8:	f503 7130 	add.w	r1, r3, #704	@ 0x2c0
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 704);
 8004ebc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ec0:	4aaa      	ldr	r2, [pc, #680]	@ (800516c <ai_network_init+0x32c>)
 8004ec2:	6811      	ldr	r1, [r2, #0]
 8004ec4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004ec8:	6011      	str	r1, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 832);
 8004eca:	f503 7150 	add.w	r1, r3, #832	@ 0x340
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 832);
 8004ece:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ed2:	4aa7      	ldr	r2, [pc, #668]	@ (8005170 <ai_network_init+0x330>)
 8004ed4:	6811      	ldr	r1, [r2, #0]
 8004ed6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004eda:	6011      	str	r1, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 864);
 8004edc:	f503 7158 	add.w	r1, r3, #864	@ 0x360
    conv2d_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 864);
 8004ee0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ee4:	4aa3      	ldr	r2, [pc, #652]	@ (8005174 <ai_network_init+0x334>)
 8004ee6:	6811      	ldr	r1, [r2, #0]
 8004ee8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004eec:	6011      	str	r1, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 1248);
 8004eee:	f503 619c 	add.w	r1, r3, #1248	@ 0x4e0
    conv2d_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1248);
 8004ef2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ef6:	4aa0      	ldr	r2, [pc, #640]	@ (8005178 <ai_network_init+0x338>)
 8004ef8:	6811      	ldr	r1, [r2, #0]
 8004efa:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004efe:	6011      	str	r1, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 1440);
 8004f00:	f503 61b4 	add.w	r1, r3, #1440	@ 0x5a0
    conv2d_6_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1440);
 8004f04:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f08:	4a9c      	ldr	r2, [pc, #624]	@ (800517c <ai_network_init+0x33c>)
 8004f0a:	6811      	ldr	r1, [r2, #0]
 8004f0c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004f10:	6011      	str	r1, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 1872);
 8004f12:	f503 61ea 	add.w	r1, r3, #1872	@ 0x750
    conv2d_6_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1872);
 8004f16:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f1a:	4a99      	ldr	r2, [pc, #612]	@ (8005180 <ai_network_init+0x340>)
 8004f1c:	6811      	ldr	r1, [r2, #0]
 8004f1e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004f22:	6011      	str	r1, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 2064);
 8004f24:	f503 6101 	add.w	r1, r3, #2064	@ 0x810
    conv2d_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2064);
 8004f28:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f2c:	4a95      	ldr	r2, [pc, #596]	@ (8005184 <ai_network_init+0x344>)
 8004f2e:	6811      	ldr	r1, [r2, #0]
 8004f30:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004f34:	6011      	str	r1, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 2448);
 8004f36:	f503 6119 	add.w	r1, r3, #2448	@ 0x990
    conv2d_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2448);
 8004f3a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f3e:	4a92      	ldr	r2, [pc, #584]	@ (8005188 <ai_network_init+0x348>)
 8004f40:	6811      	ldr	r1, [r2, #0]
 8004f42:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004f46:	6011      	str	r1, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_network_weights_map[0] + 2480);
 8004f48:	f503 611b 	add.w	r1, r3, #2480	@ 0x9b0
    conv2d_8_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2480);
 8004f4c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f50:	4a8e      	ldr	r2, [pc, #568]	@ (800518c <ai_network_init+0x34c>)
 8004f52:	6811      	ldr	r1, [r2, #0]
 8004f54:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004f58:	6011      	str	r1, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 2864);
 8004f5a:	f503 6133 	add.w	r1, r3, #2864	@ 0xb30
    conv2d_8_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2864);
 8004f5e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f62:	4a8b      	ldr	r2, [pc, #556]	@ (8005190 <ai_network_init+0x350>)
 8004f64:	6811      	ldr	r1, [r2, #0]
 8004f66:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004f6a:	6011      	str	r1, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(g_network_weights_map[0] + 3056);
 8004f6c:	f503 613f 	add.w	r1, r3, #3056	@ 0xbf0
    conv2d_9_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3056);
 8004f70:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f74:	4a87      	ldr	r2, [pc, #540]	@ (8005194 <ai_network_init+0x354>)
 8004f76:	6811      	ldr	r1, [r2, #0]
 8004f78:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004f7c:	6011      	str	r1, [r2, #0]
    conv2d_9_bias_array.data = AI_PTR(g_network_weights_map[0] + 3488);
 8004f7e:	f503 615a 	add.w	r1, r3, #3488	@ 0xda0
    conv2d_9_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3488);
 8004f82:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f86:	4a84      	ldr	r2, [pc, #528]	@ (8005198 <ai_network_init+0x358>)
 8004f88:	6811      	ldr	r1, [r2, #0]
 8004f8a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004f8e:	6011      	str	r1, [r2, #0]
    conv2d_10_weights_array.data = AI_PTR(g_network_weights_map[0] + 3680);
 8004f90:	f503 6166 	add.w	r1, r3, #3680	@ 0xe60
    conv2d_10_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3680);
 8004f94:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f98:	4a80      	ldr	r2, [pc, #512]	@ (800519c <ai_network_init+0x35c>)
 8004f9a:	6811      	ldr	r1, [r2, #0]
 8004f9c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004fa0:	6011      	str	r1, [r2, #0]
    conv2d_10_bias_array.data = AI_PTR(g_network_weights_map[0] + 4064);
 8004fa2:	f503 617e 	add.w	r1, r3, #4064	@ 0xfe0
    conv2d_10_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 4064);
 8004fa6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8004faa:	4a7d      	ldr	r2, [pc, #500]	@ (80051a0 <ai_network_init+0x360>)
 8004fac:	6811      	ldr	r1, [r2, #0]
 8004fae:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004fb2:	6011      	str	r1, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_network_weights_map[0] + 4096);
 8004fb4:	f503 5180 	add.w	r1, r3, #4096	@ 0x1000
    conv2d_12_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 4096);
 8004fb8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fbc:	4a79      	ldr	r2, [pc, #484]	@ (80051a4 <ai_network_init+0x364>)
 8004fbe:	6811      	ldr	r1, [r2, #0]
 8004fc0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004fc4:	6011      	str	r1, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_network_weights_map[0] + 4480);
 8004fc6:	f503 518c 	add.w	r1, r3, #4480	@ 0x1180
    conv2d_12_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 4480);
 8004fca:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fce:	4a76      	ldr	r2, [pc, #472]	@ (80051a8 <ai_network_init+0x368>)
 8004fd0:	6811      	ldr	r1, [r2, #0]
 8004fd2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004fd6:	6011      	str	r1, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_network_weights_map[0] + 4672);
 8004fd8:	f503 5192 	add.w	r1, r3, #4672	@ 0x1240
    conv2d_14_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 4672);
 8004fdc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fe0:	4a72      	ldr	r2, [pc, #456]	@ (80051ac <ai_network_init+0x36c>)
 8004fe2:	6811      	ldr	r1, [r2, #0]
 8004fe4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004fe8:	6011      	str	r1, [r2, #0]
    conv2d_14_bias_array.data = AI_PTR(g_network_weights_map[0] + 5104);
 8004fea:	f503 519f 	add.w	r1, r3, #5088	@ 0x13e0
 8004fee:	3110      	adds	r1, #16
    conv2d_14_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 5104);
 8004ff0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ff4:	4a6e      	ldr	r2, [pc, #440]	@ (80051b0 <ai_network_init+0x370>)
 8004ff6:	6811      	ldr	r1, [r2, #0]
 8004ff8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004ffc:	6011      	str	r1, [r2, #0]
    conv2d_15_weights_array.data = AI_PTR(g_network_weights_map[0] + 5296);
 8004ffe:	f503 51a5 	add.w	r1, r3, #5280	@ 0x14a0
 8005002:	3110      	adds	r1, #16
    conv2d_15_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 5296);
 8005004:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8005008:	4a6a      	ldr	r2, [pc, #424]	@ (80051b4 <ai_network_init+0x374>)
 800500a:	6811      	ldr	r1, [r2, #0]
 800500c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005010:	6011      	str	r1, [r2, #0]
    conv2d_15_bias_array.data = AI_PTR(g_network_weights_map[0] + 6064);
 8005012:	f503 51bd 	add.w	r1, r3, #6048	@ 0x17a0
 8005016:	3110      	adds	r1, #16
    conv2d_15_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 6064);
 8005018:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800501c:	4a66      	ldr	r2, [pc, #408]	@ (80051b8 <ai_network_init+0x378>)
 800501e:	6811      	ldr	r1, [r2, #0]
 8005020:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005024:	6011      	str	r1, [r2, #0]
    conv2d_16_weights_array.data = AI_PTR(g_network_weights_map[0] + 6128);
 8005026:	f503 51bf 	add.w	r1, r3, #6112	@ 0x17e0
 800502a:	3110      	adds	r1, #16
    conv2d_16_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 6128);
 800502c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8005030:	4a62      	ldr	r2, [pc, #392]	@ (80051bc <ai_network_init+0x37c>)
 8005032:	6811      	ldr	r1, [r2, #0]
 8005034:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005038:	6011      	str	r1, [r2, #0]
    conv2d_16_bias_array.data = AI_PTR(g_network_weights_map[0] + 7664);
 800503a:	f503 51ef 	add.w	r1, r3, #7648	@ 0x1de0
 800503e:	3110      	adds	r1, #16
    conv2d_16_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 7664);
 8005040:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005044:	4a5e      	ldr	r2, [pc, #376]	@ (80051c0 <ai_network_init+0x380>)
 8005046:	6811      	ldr	r1, [r2, #0]
 8005048:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800504c:	6011      	str	r1, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 8048);
 800504e:	f503 51fb 	add.w	r1, r3, #8032	@ 0x1f60
 8005052:	3110      	adds	r1, #16
    conv2d_17_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 8048);
 8005054:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8005058:	4a5a      	ldr	r2, [pc, #360]	@ (80051c4 <ai_network_init+0x384>)
 800505a:	6811      	ldr	r1, [r2, #0]
 800505c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005060:	6011      	str	r1, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 8912);
 8005062:	f503 510b 	add.w	r1, r3, #8896	@ 0x22c0
 8005066:	3110      	adds	r1, #16
    conv2d_17_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 8912);
 8005068:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 800506c:	4a56      	ldr	r2, [pc, #344]	@ (80051c8 <ai_network_init+0x388>)
 800506e:	6811      	ldr	r1, [r2, #0]
 8005070:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005074:	6011      	str	r1, [r2, #0]
    conv2d_18_weights_array.data = AI_PTR(g_network_weights_map[0] + 9296);
 8005076:	f503 5111 	add.w	r1, r3, #9280	@ 0x2440
 800507a:	3110      	adds	r1, #16
    conv2d_18_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 9296);
 800507c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005080:	4a52      	ldr	r2, [pc, #328]	@ (80051cc <ai_network_init+0x38c>)
 8005082:	6811      	ldr	r1, [r2, #0]
 8005084:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005088:	6011      	str	r1, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(g_network_weights_map[0] + 10832);
 800508a:	f503 5129 	add.w	r1, r3, #10816	@ 0x2a40
 800508e:	3110      	adds	r1, #16
    conv2d_18_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 10832);
 8005090:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 8005094:	4a4e      	ldr	r2, [pc, #312]	@ (80051d0 <ai_network_init+0x390>)
 8005096:	6811      	ldr	r1, [r2, #0]
 8005098:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800509c:	6011      	str	r1, [r2, #0]
    conv2d_20_weights_array.data = AI_PTR(g_network_weights_map[0] + 10896);
 800509e:	f503 512a 	add.w	r1, r3, #10880	@ 0x2a80
 80050a2:	3110      	adds	r1, #16
    conv2d_20_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 10896);
 80050a4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 80050a8:	4a4a      	ldr	r2, [pc, #296]	@ (80051d4 <ai_network_init+0x394>)
 80050aa:	6811      	ldr	r1, [r2, #0]
 80050ac:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80050b0:	6011      	str	r1, [r2, #0]
    conv2d_20_bias_array.data = AI_PTR(g_network_weights_map[0] + 12432);
 80050b2:	f503 5142 	add.w	r1, r3, #12416	@ 0x3080
 80050b6:	3110      	adds	r1, #16
    conv2d_20_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 12432);
 80050b8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80050bc:	4a46      	ldr	r2, [pc, #280]	@ (80051d8 <ai_network_init+0x398>)
 80050be:	6811      	ldr	r1, [r2, #0]
 80050c0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80050c4:	6011      	str	r1, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(g_network_weights_map[0] + 12816);
 80050c6:	f503 5148 	add.w	r1, r3, #12800	@ 0x3200
 80050ca:	3110      	adds	r1, #16
    conv2d_21_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 12816);
 80050cc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80050d0:	4a42      	ldr	r2, [pc, #264]	@ (80051dc <ai_network_init+0x39c>)
 80050d2:	6811      	ldr	r1, [r2, #0]
 80050d4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80050d8:	6011      	str	r1, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_network_weights_map[0] + 13680);
 80050da:	f503 5155 	add.w	r1, r3, #13632	@ 0x3540
 80050de:	3130      	adds	r1, #48	@ 0x30
    conv2d_21_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 13680);
 80050e0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 80050e4:	4a3e      	ldr	r2, [pc, #248]	@ (80051e0 <ai_network_init+0x3a0>)
 80050e6:	6811      	ldr	r1, [r2, #0]
 80050e8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80050ec:	6011      	str	r1, [r2, #0]
    conv2d_22_weights_array.data = AI_PTR(g_network_weights_map[0] + 14064);
 80050ee:	f503 515b 	add.w	r1, r3, #14016	@ 0x36c0
 80050f2:	3130      	adds	r1, #48	@ 0x30
    conv2d_22_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 14064);
 80050f4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 80050f8:	4a3a      	ldr	r2, [pc, #232]	@ (80051e4 <ai_network_init+0x3a4>)
 80050fa:	6811      	ldr	r1, [r2, #0]
 80050fc:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005100:	6011      	str	r1, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(g_network_weights_map[0] + 15600);
 8005102:	f503 5173 	add.w	r1, r3, #15552	@ 0x3cc0
 8005106:	3130      	adds	r1, #48	@ 0x30
    conv2d_22_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 15600);
 8005108:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 800510c:	4a36      	ldr	r2, [pc, #216]	@ (80051e8 <ai_network_init+0x3a8>)
 800510e:	6811      	ldr	r1, [r2, #0]
 8005110:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005114:	6011      	str	r1, [r2, #0]
    conv2d_24_weights_array.data = AI_PTR(g_network_weights_map[0] + 15664);
 8005116:	f503 5174 	add.w	r1, r3, #15616	@ 0x3d00
 800511a:	3130      	adds	r1, #48	@ 0x30
    conv2d_24_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 15664);
 800511c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8005120:	4a32      	ldr	r2, [pc, #200]	@ (80051ec <ai_network_init+0x3ac>)
 8005122:	6811      	ldr	r1, [r2, #0]
 8005124:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005128:	6011      	str	r1, [r2, #0]
    conv2d_24_bias_array.data = AI_PTR(g_network_weights_map[0] + 17200);
 800512a:	f503 4186 	add.w	r1, r3, #17152	@ 0x4300
 800512e:	3130      	adds	r1, #48	@ 0x30
    conv2d_24_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 17200);
 8005130:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 8005134:	4a2e      	ldr	r2, [pc, #184]	@ (80051f0 <ai_network_init+0x3b0>)
 8005136:	6811      	ldr	r1, [r2, #0]
 8005138:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800513c:	6011      	str	r1, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(g_network_weights_map[0] + 17584);
 800513e:	f503 4189 	add.w	r1, r3, #17536	@ 0x4480
 8005142:	3130      	adds	r1, #48	@ 0x30
    conv2d_26_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 17584);
 8005144:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 8005148:	4a2a      	ldr	r2, [pc, #168]	@ (80051f4 <ai_network_init+0x3b4>)
 800514a:	6811      	ldr	r1, [r2, #0]
 800514c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005150:	6011      	str	r1, [r2, #0]
 8005152:	e051      	b.n	80051f8 <ai_network_init+0x3b8>
 8005154:	20013244 	.word	0x20013244
 8005158:	20006370 	.word	0x20006370
 800515c:	20006360 	.word	0x20006360
 8005160:	20006350 	.word	0x20006350
 8005164:	20006340 	.word	0x20006340
 8005168:	20006330 	.word	0x20006330
 800516c:	20006320 	.word	0x20006320
 8005170:	20006310 	.word	0x20006310
 8005174:	20006300 	.word	0x20006300
 8005178:	200062f0 	.word	0x200062f0
 800517c:	200062e0 	.word	0x200062e0
 8005180:	200062d0 	.word	0x200062d0
 8005184:	200062c0 	.word	0x200062c0
 8005188:	200062b0 	.word	0x200062b0
 800518c:	200062a0 	.word	0x200062a0
 8005190:	20006290 	.word	0x20006290
 8005194:	20006280 	.word	0x20006280
 8005198:	20006270 	.word	0x20006270
 800519c:	20006260 	.word	0x20006260
 80051a0:	20006250 	.word	0x20006250
 80051a4:	20006240 	.word	0x20006240
 80051a8:	20006230 	.word	0x20006230
 80051ac:	20006220 	.word	0x20006220
 80051b0:	20006210 	.word	0x20006210
 80051b4:	20006200 	.word	0x20006200
 80051b8:	200061f0 	.word	0x200061f0
 80051bc:	200061e0 	.word	0x200061e0
 80051c0:	200061d0 	.word	0x200061d0
 80051c4:	200061c0 	.word	0x200061c0
 80051c8:	200061b0 	.word	0x200061b0
 80051cc:	200061a0 	.word	0x200061a0
 80051d0:	20006190 	.word	0x20006190
 80051d4:	20006180 	.word	0x20006180
 80051d8:	20006170 	.word	0x20006170
 80051dc:	20006160 	.word	0x20006160
 80051e0:	20006150 	.word	0x20006150
 80051e4:	20006140 	.word	0x20006140
 80051e8:	20006130 	.word	0x20006130
 80051ec:	20006120 	.word	0x20006120
 80051f0:	20006110 	.word	0x20006110
 80051f4:	20006100 	.word	0x20006100
    conv2d_26_bias_array.data = AI_PTR(g_network_weights_map[0] + 18448);
 80051f8:	f503 4190 	add.w	r1, r3, #18432	@ 0x4800
 80051fc:	3110      	adds	r1, #16
    conv2d_26_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 18448);
 80051fe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 8005202:	4ac4      	ldr	r2, [pc, #784]	@ (8005514 <ai_network_init+0x6d4>)
 8005204:	6811      	ldr	r1, [r2, #0]
 8005206:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800520a:	6011      	str	r1, [r2, #0]
    conv2d_27_weights_array.data = AI_PTR(g_network_weights_map[0] + 18832);
 800520c:	f503 4193 	add.w	r1, r3, #18816	@ 0x4980
 8005210:	3110      	adds	r1, #16
    conv2d_27_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 18832);
 8005212:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8005216:	4ac0      	ldr	r2, [pc, #768]	@ (8005518 <ai_network_init+0x6d8>)
 8005218:	6811      	ldr	r1, [r2, #0]
 800521a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800521e:	6011      	str	r1, [r2, #0]
    conv2d_27_bias_array.data = AI_PTR(g_network_weights_map[0] + 21136);
 8005220:	f503 41a5 	add.w	r1, r3, #21120	@ 0x5280
 8005224:	3110      	adds	r1, #16
    conv2d_27_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 21136);
 8005226:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 800522a:	4abc      	ldr	r2, [pc, #752]	@ (800551c <ai_network_init+0x6dc>)
 800522c:	6811      	ldr	r1, [r2, #0]
 800522e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005232:	6011      	str	r1, [r2, #0]
    conv2d_28_weights_array.data = AI_PTR(g_network_weights_map[0] + 21232);
 8005234:	f503 41a5 	add.w	r1, r3, #21120	@ 0x5280
 8005238:	3170      	adds	r1, #112	@ 0x70
    conv2d_28_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 21232);
 800523a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 800523e:	4ab8      	ldr	r2, [pc, #736]	@ (8005520 <ai_network_init+0x6e0>)
 8005240:	6811      	ldr	r1, [r2, #0]
 8005242:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005246:	6011      	str	r1, [r2, #0]
    conv2d_28_bias_array.data = AI_PTR(g_network_weights_map[0] + 24688);
 8005248:	f503 41c0 	add.w	r1, r3, #24576	@ 0x6000
 800524c:	3170      	adds	r1, #112	@ 0x70
    conv2d_28_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 24688);
 800524e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8005252:	4ab4      	ldr	r2, [pc, #720]	@ (8005524 <ai_network_init+0x6e4>)
 8005254:	6811      	ldr	r1, [r2, #0]
 8005256:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800525a:	6011      	str	r1, [r2, #0]
    conv2d_29_weights_array.data = AI_PTR(g_network_weights_map[0] + 25264);
 800525c:	f503 41c5 	add.w	r1, r3, #25216	@ 0x6280
 8005260:	3130      	adds	r1, #48	@ 0x30
    conv2d_29_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 25264);
 8005262:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005266:	4ab0      	ldr	r2, [pc, #704]	@ (8005528 <ai_network_init+0x6e8>)
 8005268:	6811      	ldr	r1, [r2, #0]
 800526a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800526e:	6011      	str	r1, [r2, #0]
    conv2d_29_bias_array.data = AI_PTR(g_network_weights_map[0] + 26560);
 8005270:	f503 41cf 	add.w	r1, r3, #26496	@ 0x6780
 8005274:	3140      	adds	r1, #64	@ 0x40
    conv2d_29_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 26560);
 8005276:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 800527a:	4aac      	ldr	r2, [pc, #688]	@ (800552c <ai_network_init+0x6ec>)
 800527c:	6811      	ldr	r1, [r2, #0]
 800527e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005282:	6011      	str	r1, [r2, #0]
    conv2d_30_weights_array.data = AI_PTR(g_network_weights_map[0] + 27136);
 8005284:	f503 41d4 	add.w	r1, r3, #27136	@ 0x6a00
    conv2d_30_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 27136);
 8005288:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 800528c:	4aa8      	ldr	r2, [pc, #672]	@ (8005530 <ai_network_init+0x6f0>)
 800528e:	6811      	ldr	r1, [r2, #0]
 8005290:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005294:	6011      	str	r1, [r2, #0]
    conv2d_30_bias_array.data = AI_PTR(g_network_weights_map[0] + 30592);
 8005296:	f503 41ef 	add.w	r1, r3, #30592	@ 0x7780
    conv2d_30_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 30592);
 800529a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 800529e:	4aa5      	ldr	r2, [pc, #660]	@ (8005534 <ai_network_init+0x6f4>)
 80052a0:	6811      	ldr	r1, [r2, #0]
 80052a2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80052a6:	6011      	str	r1, [r2, #0]
    conv2d_32_weights_array.data = AI_PTR(g_network_weights_map[0] + 30688);
 80052a8:	f503 41ef 	add.w	r1, r3, #30592	@ 0x7780
 80052ac:	3160      	adds	r1, #96	@ 0x60
    conv2d_32_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 30688);
 80052ae:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 80052b2:	4aa1      	ldr	r2, [pc, #644]	@ (8005538 <ai_network_init+0x6f8>)
 80052b4:	6811      	ldr	r1, [r2, #0]
 80052b6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80052ba:	6011      	str	r1, [r2, #0]
    conv2d_32_bias_array.data = AI_PTR(g_network_weights_map[0] + 34144);
 80052bc:	f503 4105 	add.w	r1, r3, #34048	@ 0x8500
 80052c0:	3160      	adds	r1, #96	@ 0x60
    conv2d_32_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 34144);
 80052c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 80052c6:	4a9d      	ldr	r2, [pc, #628]	@ (800553c <ai_network_init+0x6fc>)
 80052c8:	6811      	ldr	r1, [r2, #0]
 80052ca:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80052ce:	6011      	str	r1, [r2, #0]
    conv2d_33_weights_array.data = AI_PTR(g_network_weights_map[0] + 34720);
 80052d0:	f503 4107 	add.w	r1, r3, #34560	@ 0x8700
 80052d4:	31a0      	adds	r1, #160	@ 0xa0
    conv2d_33_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 34720);
 80052d6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 80052da:	4a99      	ldr	r2, [pc, #612]	@ (8005540 <ai_network_init+0x700>)
 80052dc:	6811      	ldr	r1, [r2, #0]
 80052de:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80052e2:	6011      	str	r1, [r2, #0]
    conv2d_33_bias_array.data = AI_PTR(g_network_weights_map[0] + 36016);
 80052e4:	f503 410c 	add.w	r1, r3, #35840	@ 0x8c00
 80052e8:	31b0      	adds	r1, #176	@ 0xb0
    conv2d_33_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 36016);
 80052ea:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 80052ee:	4a95      	ldr	r2, [pc, #596]	@ (8005544 <ai_network_init+0x704>)
 80052f0:	6811      	ldr	r1, [r2, #0]
 80052f2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80052f6:	6011      	str	r1, [r2, #0]
    conv2d_34_weights_array.data = AI_PTR(g_network_weights_map[0] + 36592);
 80052f8:	f503 410e 	add.w	r1, r3, #36352	@ 0x8e00
 80052fc:	31f0      	adds	r1, #240	@ 0xf0
    conv2d_34_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 36592);
 80052fe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 8005302:	4a91      	ldr	r2, [pc, #580]	@ (8005548 <ai_network_init+0x708>)
 8005304:	6811      	ldr	r1, [r2, #0]
 8005306:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800530a:	6011      	str	r1, [r2, #0]
    conv2d_34_bias_array.data = AI_PTR(g_network_weights_map[0] + 40048);
 800530c:	f503 411c 	add.w	r1, r3, #39936	@ 0x9c00
 8005310:	3170      	adds	r1, #112	@ 0x70
    conv2d_34_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 40048);
 8005312:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 8005316:	4a8d      	ldr	r2, [pc, #564]	@ (800554c <ai_network_init+0x70c>)
 8005318:	6811      	ldr	r1, [r2, #0]
 800531a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800531e:	6011      	str	r1, [r2, #0]
    conv2d_36_weights_array.data = AI_PTR(g_network_weights_map[0] + 40144);
 8005320:	f503 411c 	add.w	r1, r3, #39936	@ 0x9c00
 8005324:	31d0      	adds	r1, #208	@ 0xd0
    conv2d_36_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 40144);
 8005326:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 800532a:	4a89      	ldr	r2, [pc, #548]	@ (8005550 <ai_network_init+0x710>)
 800532c:	6811      	ldr	r1, [r2, #0]
 800532e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005332:	6011      	str	r1, [r2, #0]
    conv2d_36_bias_array.data = AI_PTR(g_network_weights_map[0] + 43600);
 8005334:	f503 412a 	add.w	r1, r3, #43520	@ 0xaa00
 8005338:	3150      	adds	r1, #80	@ 0x50
    conv2d_36_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 43600);
 800533a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 800533e:	4a85      	ldr	r2, [pc, #532]	@ (8005554 <ai_network_init+0x714>)
 8005340:	6811      	ldr	r1, [r2, #0]
 8005342:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005346:	6011      	str	r1, [r2, #0]
    conv2d_37_weights_array.data = AI_PTR(g_network_weights_map[0] + 44176);
 8005348:	f503 412c 	add.w	r1, r3, #44032	@ 0xac00
 800534c:	3190      	adds	r1, #144	@ 0x90
    conv2d_37_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 44176);
 800534e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8005352:	4a81      	ldr	r2, [pc, #516]	@ (8005558 <ai_network_init+0x718>)
 8005354:	6811      	ldr	r1, [r2, #0]
 8005356:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800535a:	6011      	str	r1, [r2, #0]
    conv2d_37_bias_array.data = AI_PTR(g_network_weights_map[0] + 45472);
 800535c:	f503 4131 	add.w	r1, r3, #45312	@ 0xb100
 8005360:	31a0      	adds	r1, #160	@ 0xa0
    conv2d_37_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 45472);
 8005362:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8005366:	4a7d      	ldr	r2, [pc, #500]	@ (800555c <ai_network_init+0x71c>)
 8005368:	6811      	ldr	r1, [r2, #0]
 800536a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800536e:	6011      	str	r1, [r2, #0]
    conv2d_38_weights_array.data = AI_PTR(g_network_weights_map[0] + 46048);
 8005370:	f503 4133 	add.w	r1, r3, #45824	@ 0xb300
 8005374:	31e0      	adds	r1, #224	@ 0xe0
    conv2d_38_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 46048);
 8005376:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 800537a:	4a79      	ldr	r2, [pc, #484]	@ (8005560 <ai_network_init+0x720>)
 800537c:	6811      	ldr	r1, [r2, #0]
 800537e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005382:	6011      	str	r1, [r2, #0]
    conv2d_38_bias_array.data = AI_PTR(g_network_weights_map[0] + 49504);
 8005384:	f503 4141 	add.w	r1, r3, #49408	@ 0xc100
 8005388:	3160      	adds	r1, #96	@ 0x60
    conv2d_38_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 49504);
 800538a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 800538e:	4a75      	ldr	r2, [pc, #468]	@ (8005564 <ai_network_init+0x724>)
 8005390:	6811      	ldr	r1, [r2, #0]
 8005392:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005396:	6011      	str	r1, [r2, #0]
    conv2d_40_weights_array.data = AI_PTR(g_network_weights_map[0] + 49600);
 8005398:	f503 4141 	add.w	r1, r3, #49408	@ 0xc100
 800539c:	31c0      	adds	r1, #192	@ 0xc0
    conv2d_40_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 49600);
 800539e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 80053a2:	4a71      	ldr	r2, [pc, #452]	@ (8005568 <ai_network_init+0x728>)
 80053a4:	6811      	ldr	r1, [r2, #0]
 80053a6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80053aa:	6011      	str	r1, [r2, #0]
    conv2d_40_bias_array.data = AI_PTR(g_network_weights_map[0] + 53056);
 80053ac:	f503 414f 	add.w	r1, r3, #52992	@ 0xcf00
 80053b0:	3140      	adds	r1, #64	@ 0x40
    conv2d_40_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 53056);
 80053b2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 80053b6:	4a6d      	ldr	r2, [pc, #436]	@ (800556c <ai_network_init+0x72c>)
 80053b8:	6811      	ldr	r1, [r2, #0]
 80053ba:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80053be:	6011      	str	r1, [r2, #0]
    conv2d_41_weights_array.data = AI_PTR(g_network_weights_map[0] + 53632);
 80053c0:	f503 4151 	add.w	r1, r3, #53504	@ 0xd100
 80053c4:	3180      	adds	r1, #128	@ 0x80
    conv2d_41_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 53632);
 80053c6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80053ca:	4a69      	ldr	r2, [pc, #420]	@ (8005570 <ai_network_init+0x730>)
 80053cc:	6811      	ldr	r1, [r2, #0]
 80053ce:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80053d2:	6011      	str	r1, [r2, #0]
    conv2d_41_bias_array.data = AI_PTR(g_network_weights_map[0] + 54928);
 80053d4:	f503 4156 	add.w	r1, r3, #54784	@ 0xd600
 80053d8:	3190      	adds	r1, #144	@ 0x90
    conv2d_41_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 54928);
 80053da:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 80053de:	4a65      	ldr	r2, [pc, #404]	@ (8005574 <ai_network_init+0x734>)
 80053e0:	6811      	ldr	r1, [r2, #0]
 80053e2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80053e6:	6011      	str	r1, [r2, #0]
    conv2d_42_weights_array.data = AI_PTR(g_network_weights_map[0] + 55504);
 80053e8:	f503 4158 	add.w	r1, r3, #55296	@ 0xd800
 80053ec:	31d0      	adds	r1, #208	@ 0xd0
    conv2d_42_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 55504);
 80053ee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 80053f2:	4a61      	ldr	r2, [pc, #388]	@ (8005578 <ai_network_init+0x738>)
 80053f4:	6811      	ldr	r1, [r2, #0]
 80053f6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80053fa:	6011      	str	r1, [r2, #0]
    conv2d_42_bias_array.data = AI_PTR(g_network_weights_map[0] + 60112);
 80053fc:	f503 416a 	add.w	r1, r3, #59904	@ 0xea00
 8005400:	31d0      	adds	r1, #208	@ 0xd0
    conv2d_42_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 60112);
 8005402:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 8005406:	4a5d      	ldr	r2, [pc, #372]	@ (800557c <ai_network_init+0x73c>)
 8005408:	6811      	ldr	r1, [r2, #0]
 800540a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800540e:	6011      	str	r1, [r2, #0]
    conv2d_43_weights_array.data = AI_PTR(g_network_weights_map[0] + 60240);
 8005410:	f503 416b 	add.w	r1, r3, #60160	@ 0xeb00
 8005414:	3150      	adds	r1, #80	@ 0x50
    conv2d_43_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 60240);
 8005416:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 800541a:	4a59      	ldr	r2, [pc, #356]	@ (8005580 <ai_network_init+0x740>)
 800541c:	6811      	ldr	r1, [r2, #0]
 800541e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005422:	6011      	str	r1, [r2, #0]
    conv2d_43_bias_array.data = AI_PTR(g_network_weights_map[0] + 66384);
 8005424:	f503 3181 	add.w	r1, r3, #66048	@ 0x10200
 8005428:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
    conv2d_43_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 66384);
 800542c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 8005430:	4a54      	ldr	r2, [pc, #336]	@ (8005584 <ai_network_init+0x744>)
 8005432:	6811      	ldr	r1, [r2, #0]
 8005434:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005438:	6011      	str	r1, [r2, #0]
    conv2d_44_weights_array.data = AI_PTR(g_network_weights_map[0] + 67152);
 800543a:	f503 3183 	add.w	r1, r3, #67072	@ 0x10600
 800543e:	3150      	adds	r1, #80	@ 0x50
    conv2d_44_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 67152);
 8005440:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 8005444:	4a50      	ldr	r2, [pc, #320]	@ (8005588 <ai_network_init+0x748>)
 8005446:	6811      	ldr	r1, [r2, #0]
 8005448:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800544c:	6011      	str	r1, [r2, #0]
    conv2d_44_bias_array.data = AI_PTR(g_network_weights_map[0] + 68880);
 800544e:	f503 3186 	add.w	r1, r3, #68608	@ 0x10c00
 8005452:	f501 7188 	add.w	r1, r1, #272	@ 0x110
    conv2d_44_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 68880);
 8005456:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 800545a:	4a4c      	ldr	r2, [pc, #304]	@ (800558c <ai_network_init+0x74c>)
 800545c:	6811      	ldr	r1, [r2, #0]
 800545e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005462:	6011      	str	r1, [r2, #0]
    conv2d_45_weights_array.data = AI_PTR(g_network_weights_map[0] + 69648);
 8005464:	f503 3188 	add.w	r1, r3, #69632	@ 0x11000
 8005468:	3110      	adds	r1, #16
    conv2d_45_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 69648);
 800546a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 800546e:	4948      	ldr	r1, [pc, #288]	@ (8005590 <ai_network_init+0x750>)
 8005470:	680a      	ldr	r2, [r1, #0]
 8005472:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005476:	600a      	str	r2, [r1, #0]
    conv2d_45_bias_array.data = AI_PTR(g_network_weights_map[0] + 75792);
 8005478:	f503 3294 	add.w	r2, r3, #75776	@ 0x12800
 800547c:	f102 0010 	add.w	r0, r2, #16
    conv2d_45_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 75792);
 8005480:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8005484:	4943      	ldr	r1, [pc, #268]	@ (8005594 <ai_network_init+0x754>)
    conv2d_47_weights_array.data = AI_PTR(g_network_weights_map[0] + 75920);
 8005486:	3290      	adds	r2, #144	@ 0x90
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8005488:	6808      	ldr	r0, [r1, #0]
    conv2d_47_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 75920);
 800548a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 800548e:	4a42      	ldr	r2, [pc, #264]	@ (8005598 <ai_network_init+0x758>)
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8005490:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8005494:	6008      	str	r0, [r1, #0]
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 8005496:	6811      	ldr	r1, [r2, #0]
 8005498:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800549c:	6011      	str	r1, [r2, #0]
    conv2d_47_bias_array.data = AI_PTR(g_network_weights_map[0] + 82064);
 800549e:	f503 31a0 	add.w	r1, r3, #81920	@ 0x14000
 80054a2:	3190      	adds	r1, #144	@ 0x90
    conv2d_47_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 82064);
 80054a4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 80054a8:	4a3c      	ldr	r2, [pc, #240]	@ (800559c <ai_network_init+0x75c>)
 80054aa:	6811      	ldr	r1, [r2, #0]
 80054ac:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80054b0:	6011      	str	r1, [r2, #0]
    conv2d_48_weights_array.data = AI_PTR(g_network_weights_map[0] + 82832);
 80054b2:	f503 31a1 	add.w	r1, r3, #82432	@ 0x14200
 80054b6:	f501 71c8 	add.w	r1, r1, #400	@ 0x190
    conv2d_48_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 82832);
 80054ba:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 80054be:	4a38      	ldr	r2, [pc, #224]	@ (80055a0 <ai_network_init+0x760>)
 80054c0:	6811      	ldr	r1, [r2, #0]
 80054c2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80054c6:	6011      	str	r1, [r2, #0]
    conv2d_48_bias_array.data = AI_PTR(g_network_weights_map[0] + 84560);
 80054c8:	f503 31a5 	add.w	r1, r3, #84480	@ 0x14a00
 80054cc:	3150      	adds	r1, #80	@ 0x50
    conv2d_48_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 84560);
 80054ce:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 80054d2:	4a34      	ldr	r2, [pc, #208]	@ (80055a4 <ai_network_init+0x764>)
 80054d4:	6811      	ldr	r1, [r2, #0]
 80054d6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80054da:	6011      	str	r1, [r2, #0]
    conv2d_49_weights_array.data = AI_PTR(g_network_weights_map[0] + 85328);
 80054dc:	f503 31a6 	add.w	r1, r3, #84992	@ 0x14c00
 80054e0:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
    conv2d_49_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 85328);
 80054e4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 80054e8:	492f      	ldr	r1, [pc, #188]	@ (80055a8 <ai_network_init+0x768>)
 80054ea:	680a      	ldr	r2, [r1, #0]
 80054ec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80054f0:	600a      	str	r2, [r1, #0]
    conv2d_49_bias_array.data = AI_PTR(g_network_weights_map[0] + 91472);
 80054f2:	f503 32b2 	add.w	r2, r3, #91136	@ 0x16400
 80054f6:	f502 70a8 	add.w	r0, r2, #336	@ 0x150
    conv2d_49_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 91472);
 80054fa:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 80054fe:	492b      	ldr	r1, [pc, #172]	@ (80055ac <ai_network_init+0x76c>)
    conv2d_51_weights_array.data = AI_PTR(g_network_weights_map[0] + 91600);
 8005500:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 8005504:	6808      	ldr	r0, [r1, #0]
    conv2d_51_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 91600);
 8005506:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 800550a:	4a29      	ldr	r2, [pc, #164]	@ (80055b0 <ai_network_init+0x770>)
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 800550c:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8005510:	e050      	b.n	80055b4 <ai_network_init+0x774>
 8005512:	bf00      	nop
 8005514:	200060f0 	.word	0x200060f0
 8005518:	200060e0 	.word	0x200060e0
 800551c:	200060d0 	.word	0x200060d0
 8005520:	200060c0 	.word	0x200060c0
 8005524:	200060b0 	.word	0x200060b0
 8005528:	200060a0 	.word	0x200060a0
 800552c:	20006090 	.word	0x20006090
 8005530:	20006080 	.word	0x20006080
 8005534:	20006070 	.word	0x20006070
 8005538:	20006060 	.word	0x20006060
 800553c:	20006050 	.word	0x20006050
 8005540:	20006040 	.word	0x20006040
 8005544:	20006030 	.word	0x20006030
 8005548:	20006020 	.word	0x20006020
 800554c:	20006010 	.word	0x20006010
 8005550:	20006000 	.word	0x20006000
 8005554:	20005ff0 	.word	0x20005ff0
 8005558:	20005fe0 	.word	0x20005fe0
 800555c:	20005fd0 	.word	0x20005fd0
 8005560:	20005fc0 	.word	0x20005fc0
 8005564:	20005fb0 	.word	0x20005fb0
 8005568:	20005fa0 	.word	0x20005fa0
 800556c:	20005f90 	.word	0x20005f90
 8005570:	20005f80 	.word	0x20005f80
 8005574:	20005f70 	.word	0x20005f70
 8005578:	20005f60 	.word	0x20005f60
 800557c:	20005f50 	.word	0x20005f50
 8005580:	20005f40 	.word	0x20005f40
 8005584:	20005f30 	.word	0x20005f30
 8005588:	20005f20 	.word	0x20005f20
 800558c:	20005f10 	.word	0x20005f10
 8005590:	20005f00 	.word	0x20005f00
 8005594:	20005ef0 	.word	0x20005ef0
 8005598:	20005ee0 	.word	0x20005ee0
 800559c:	20005ed0 	.word	0x20005ed0
 80055a0:	20005ec0 	.word	0x20005ec0
 80055a4:	20005eb0 	.word	0x20005eb0
 80055a8:	20005ea0 	.word	0x20005ea0
 80055ac:	20005e90 	.word	0x20005e90
 80055b0:	20005e80 	.word	0x20005e80
 80055b4:	6008      	str	r0, [r1, #0]
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 80055b6:	6811      	ldr	r1, [r2, #0]
 80055b8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80055bc:	6011      	str	r1, [r2, #0]
    conv2d_51_bias_array.data = AI_PTR(g_network_weights_map[0] + 97744);
 80055be:	f503 31be 	add.w	r1, r3, #97280	@ 0x17c00
 80055c2:	f501 71e8 	add.w	r1, r1, #464	@ 0x1d0
    conv2d_51_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 97744);
 80055c6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
 80055ca:	4ac4      	ldr	r2, [pc, #784]	@ (80058dc <ai_network_init+0xa9c>)
 80055cc:	6811      	ldr	r1, [r2, #0]
 80055ce:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80055d2:	6011      	str	r1, [r2, #0]
    conv2d_53_weights_array.data = AI_PTR(g_network_weights_map[0] + 98512);
 80055d4:	f503 31c0 	add.w	r1, r3, #98304	@ 0x18000
 80055d8:	31d0      	adds	r1, #208	@ 0xd0
    conv2d_53_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 98512);
 80055da:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_53_bias_array.format |= AI_FMT_FLAG_CONST;
 80055de:	4ac0      	ldr	r2, [pc, #768]	@ (80058e0 <ai_network_init+0xaa0>)
 80055e0:	6811      	ldr	r1, [r2, #0]
 80055e2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80055e6:	6011      	str	r1, [r2, #0]
    conv2d_53_bias_array.data = AI_PTR(g_network_weights_map[0] + 100240);
 80055e8:	f503 31c3 	add.w	r1, r3, #99840	@ 0x18600
 80055ec:	f501 71c8 	add.w	r1, r1, #400	@ 0x190
    conv2d_53_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 100240);
 80055f0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 80055f4:	4abb      	ldr	r2, [pc, #748]	@ (80058e4 <ai_network_init+0xaa4>)
 80055f6:	6811      	ldr	r1, [r2, #0]
 80055f8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80055fc:	6011      	str	r1, [r2, #0]
    conv2d_54_weights_array.data = AI_PTR(g_network_weights_map[0] + 101008);
 80055fe:	f503 31c5 	add.w	r1, r3, #100864	@ 0x18a00
 8005602:	3190      	adds	r1, #144	@ 0x90
    conv2d_54_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 101008);
 8005604:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8005608:	49b7      	ldr	r1, [pc, #732]	@ (80058e8 <ai_network_init+0xaa8>)
 800560a:	680a      	ldr	r2, [r1, #0]
 800560c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005610:	600a      	str	r2, [r1, #0]
    conv2d_54_bias_array.data = AI_PTR(g_network_weights_map[0] + 111760);
 8005612:	f503 32da 	add.w	r2, r3, #111616	@ 0x1b400
 8005616:	f102 0090 	add.w	r0, r2, #144	@ 0x90
    conv2d_54_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 111760);
 800561a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 800561e:	49b3      	ldr	r1, [pc, #716]	@ (80058ec <ai_network_init+0xaac>)
    conv2d_55_weights_array.data = AI_PTR(g_network_weights_map[0] + 111984);
 8005620:	f502 72b8 	add.w	r2, r2, #368	@ 0x170
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8005624:	6808      	ldr	r0, [r1, #0]
    conv2d_55_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 111984);
 8005626:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 800562a:	4ab1      	ldr	r2, [pc, #708]	@ (80058f0 <ai_network_init+0xab0>)
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 800562c:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8005630:	6008      	str	r0, [r1, #0]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8005632:	6811      	ldr	r1, [r2, #0]
 8005634:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005638:	6011      	str	r1, [r2, #0]
    conv2d_55_bias_array.data = AI_PTR(g_network_weights_map[0] + 130800);
 800563a:	f503 31ff 	add.w	r1, r3, #130560	@ 0x1fe00
 800563e:	31f0      	adds	r1, #240	@ 0xf0
    conv2d_55_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 130800);
 8005640:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8005644:	4aab      	ldr	r2, [pc, #684]	@ (80058f4 <ai_network_init+0xab4>)
 8005646:	6811      	ldr	r1, [r2, #0]
 8005648:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800564c:	6011      	str	r1, [r2, #0]
    conv2d_56_weights_array.data = AI_PTR(g_network_weights_map[0] + 132144);
 800564e:	f503 3101 	add.w	r1, r3, #132096	@ 0x20400
 8005652:	3130      	adds	r1, #48	@ 0x30
    conv2d_56_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 132144);
 8005654:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8005658:	4aa7      	ldr	r2, [pc, #668]	@ (80058f8 <ai_network_init+0xab8>)
 800565a:	6811      	ldr	r1, [r2, #0]
 800565c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005660:	6011      	str	r1, [r2, #0]
    conv2d_56_bias_array.data = AI_PTR(g_network_weights_map[0] + 135168);
 8005662:	f503 3104 	add.w	r1, r3, #135168	@ 0x21000
    conv2d_56_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 135168);
 8005666:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 800566a:	4aa4      	ldr	r2, [pc, #656]	@ (80058fc <ai_network_init+0xabc>)
 800566c:	6811      	ldr	r1, [r2, #0]
 800566e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005672:	6011      	str	r1, [r2, #0]
    conv2d_57_weights_array.data = AI_PTR(g_network_weights_map[0] + 136512);
 8005674:	f503 3105 	add.w	r1, r3, #136192	@ 0x21400
 8005678:	f501 71a0 	add.w	r1, r1, #320	@ 0x140
    conv2d_57_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 136512);
 800567c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8005680:	499f      	ldr	r1, [pc, #636]	@ (8005900 <ai_network_init+0xac0>)
 8005682:	680a      	ldr	r2, [r1, #0]
 8005684:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005688:	600a      	str	r2, [r1, #0]
    conv2d_57_bias_array.data = AI_PTR(g_network_weights_map[0] + 155328);
 800568a:	f503 3217 	add.w	r2, r3, #154624	@ 0x25c00
 800568e:	f502 7030 	add.w	r0, r2, #704	@ 0x2c0
    conv2d_57_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 155328);
 8005692:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 8005696:	499b      	ldr	r1, [pc, #620]	@ (8005904 <ai_network_init+0xac4>)
    conv2d_59_weights_array.data = AI_PTR(g_network_weights_map[0] + 155552);
 8005698:	f502 7268 	add.w	r2, r2, #928	@ 0x3a0
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 800569c:	6808      	ldr	r0, [r1, #0]
    conv2d_59_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 155552);
 800569e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 80056a2:	4a99      	ldr	r2, [pc, #612]	@ (8005908 <ai_network_init+0xac8>)
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 80056a4:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80056a8:	6008      	str	r0, [r1, #0]
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 80056aa:	6811      	ldr	r1, [r2, #0]
 80056ac:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80056b0:	6011      	str	r1, [r2, #0]
    conv2d_59_bias_array.data = AI_PTR(g_network_weights_map[0] + 174368);
 80056b2:	f503 312a 	add.w	r1, r3, #174080	@ 0x2a800
 80056b6:	f501 7190 	add.w	r1, r1, #288	@ 0x120
    conv2d_59_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 174368);
 80056ba:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 80056be:	4a93      	ldr	r2, [pc, #588]	@ (800590c <ai_network_init+0xacc>)
 80056c0:	6811      	ldr	r1, [r2, #0]
 80056c2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80056c6:	6011      	str	r1, [r2, #0]
    conv2d_60_weights_array.data = AI_PTR(g_network_weights_map[0] + 175712);
 80056c8:	f503 312b 	add.w	r1, r3, #175104	@ 0x2ac00
 80056cc:	f501 7118 	add.w	r1, r1, #608	@ 0x260
    conv2d_60_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 175712);
 80056d0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 80056d4:	4a8e      	ldr	r2, [pc, #568]	@ (8005910 <ai_network_init+0xad0>)
 80056d6:	6811      	ldr	r1, [r2, #0]
 80056d8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80056dc:	6011      	str	r1, [r2, #0]
    conv2d_60_bias_array.data = AI_PTR(g_network_weights_map[0] + 178736);
 80056de:	f503 312e 	add.w	r1, r3, #178176	@ 0x2b800
 80056e2:	f501 710c 	add.w	r1, r1, #560	@ 0x230
    conv2d_60_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 178736);
 80056e6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 80056ea:	4a8a      	ldr	r2, [pc, #552]	@ (8005914 <ai_network_init+0xad4>)
 80056ec:	6811      	ldr	r1, [r2, #0]
 80056ee:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80056f2:	6011      	str	r1, [r2, #0]
    conv2d_61_weights_array.data = AI_PTR(g_network_weights_map[0] + 180080);
 80056f4:	f503 312f 	add.w	r1, r3, #179200	@ 0x2bc00
 80056f8:	f501 715c 	add.w	r1, r1, #880	@ 0x370
    conv2d_61_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 180080);
 80056fc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8005700:	4985      	ldr	r1, [pc, #532]	@ (8005918 <ai_network_init+0xad8>)
 8005702:	680a      	ldr	r2, [r1, #0]
 8005704:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005708:	600a      	str	r2, [r1, #0]
    conv2d_61_bias_array.data = AI_PTR(g_network_weights_map[0] + 198896);
 800570a:	f503 3242 	add.w	r2, r3, #198656	@ 0x30800
 800570e:	f102 00f0 	add.w	r0, r2, #240	@ 0xf0
    conv2d_61_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 198896);
 8005712:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 8005716:	4981      	ldr	r1, [pc, #516]	@ (800591c <ai_network_init+0xadc>)
    conv2d_63_weights_array.data = AI_PTR(g_network_weights_map[0] + 199120);
 8005718:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 800571c:	6808      	ldr	r0, [r1, #0]
    conv2d_63_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 199120);
 800571e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 8005722:	4a7f      	ldr	r2, [pc, #508]	@ (8005920 <ai_network_init+0xae0>)
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 8005724:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8005728:	6008      	str	r0, [r1, #0]
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 800572a:	6811      	ldr	r1, [r2, #0]
 800572c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005730:	6011      	str	r1, [r2, #0]
    conv2d_63_bias_array.data = AI_PTR(g_network_weights_map[0] + 217936);
 8005732:	f503 3154 	add.w	r1, r3, #217088	@ 0x35000
 8005736:	f501 7154 	add.w	r1, r1, #848	@ 0x350
    conv2d_63_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 217936);
 800573a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 800573e:	4a79      	ldr	r2, [pc, #484]	@ (8005924 <ai_network_init+0xae4>)
 8005740:	6811      	ldr	r1, [r2, #0]
 8005742:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005746:	6011      	str	r1, [r2, #0]
    conv2d_64_weights_array.data = AI_PTR(g_network_weights_map[0] + 219280);
 8005748:	f503 3156 	add.w	r1, r3, #219136	@ 0x35800
 800574c:	3190      	adds	r1, #144	@ 0x90
    conv2d_64_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 219280);
 800574e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8005752:	4a75      	ldr	r2, [pc, #468]	@ (8005928 <ai_network_init+0xae8>)
 8005754:	6811      	ldr	r1, [r2, #0]
 8005756:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800575a:	6011      	str	r1, [r2, #0]
    conv2d_64_bias_array.data = AI_PTR(g_network_weights_map[0] + 222304);
 800575c:	f503 3159 	add.w	r1, r3, #222208	@ 0x36400
 8005760:	3160      	adds	r1, #96	@ 0x60
    conv2d_64_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 222304);
 8005762:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8005766:	4a71      	ldr	r2, [pc, #452]	@ (800592c <ai_network_init+0xaec>)
 8005768:	6811      	ldr	r1, [r2, #0]
 800576a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800576e:	6011      	str	r1, [r2, #0]
    conv2d_65_weights_array.data = AI_PTR(g_network_weights_map[0] + 223648);
 8005770:	f503 315a 	add.w	r1, r3, #223232	@ 0x36800
 8005774:	f501 71d0 	add.w	r1, r1, #416	@ 0x1a0
    conv2d_65_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 223648);
 8005778:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 800577c:	4a6c      	ldr	r2, [pc, #432]	@ (8005930 <ai_network_init+0xaf0>)
 800577e:	6811      	ldr	r1, [r2, #0]
    conv2d_65_bias_array.data = AI_PTR(g_network_weights_map[0] + 261280);
 8005780:	f503 307f 	add.w	r0, r3, #261120	@ 0x3fc00
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8005784:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005788:	6011      	str	r1, [r2, #0]
    conv2d_65_bias_array.data = AI_PTR(g_network_weights_map[0] + 261280);
 800578a:	f100 01a0 	add.w	r1, r0, #160	@ 0xa0
    conv2d_65_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 261280);
 800578e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8005792:	4a68      	ldr	r2, [pc, #416]	@ (8005934 <ai_network_init+0xaf4>)
 8005794:	6811      	ldr	r1, [r2, #0]
    conv2d_66_weights_array.data = AI_PTR(g_network_weights_map[0] + 261728);
 8005796:	f500 7018 	add.w	r0, r0, #608	@ 0x260
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 800579a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800579e:	6011      	str	r1, [r2, #0]
    conv2d_66_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 261728);
 80057a0:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 80057a4:	4a64      	ldr	r2, [pc, #400]	@ (8005938 <ai_network_init+0xaf8>)
 80057a6:	6811      	ldr	r1, [r2, #0]
 80057a8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80057ac:	6011      	str	r1, [r2, #0]
    conv2d_66_bias_array.data = AI_PTR(g_network_weights_map[0] + 405088);
 80057ae:	f503 21c5 	add.w	r1, r3, #403456	@ 0x62800
 80057b2:	f501 61cc 	add.w	r1, r1, #1632	@ 0x660
    conv2d_66_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 405088);
 80057b6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_68_weights_array.format |= AI_FMT_FLAG_CONST;
 80057ba:	4a60      	ldr	r2, [pc, #384]	@ (800593c <ai_network_init+0xafc>)
 80057bc:	6811      	ldr	r1, [r2, #0]
    gemm_68_weights_array.data = AI_PTR(g_network_weights_map[0] + 410208);
 80057be:	f503 23c8 	add.w	r3, r3, #409600	@ 0x64000
    gemm_68_weights_array.format |= AI_FMT_FLAG_CONST;
 80057c2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80057c6:	6011      	str	r1, [r2, #0]
    gemm_68_weights_array.data = AI_PTR(g_network_weights_map[0] + 410208);
 80057c8:	f503 7118 	add.w	r1, r3, #608	@ 0x260
    gemm_68_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 410208);
 80057cc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_68_bias_array.format |= AI_FMT_FLAG_CONST;
 80057d0:	4a5b      	ldr	r2, [pc, #364]	@ (8005940 <ai_network_init+0xb00>)
    gemm_68_bias_array.data = AI_PTR(g_network_weights_map[0] + 411488);
 80057d2:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
    gemm_68_bias_array.format |= AI_FMT_FLAG_CONST;
 80057d6:	6811      	ldr	r1, [r2, #0]
    gemm_68_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 411488);
 80057d8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_68_bias_array.format |= AI_FMT_FLAG_CONST;
 80057dc:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80057e0:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80057e2:	4e58      	ldr	r6, [pc, #352]	@ (8005944 <ai_network_init+0xb04>)
 80057e4:	462a      	mov	r2, r5
 80057e6:	2101      	movs	r1, #1
 80057e8:	4630      	mov	r0, r6
 80057ea:	f001 fc91 	bl	8007110 <ai_platform_get_activations_map>
 80057ee:	4680      	mov	r8, r0
 80057f0:	2800      	cmp	r0, #0
 80057f2:	f000 826d 	beq.w	8005cd0 <ai_network_init+0xe90>
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80057f6:	6833      	ldr	r3, [r6, #0]
 80057f8:	4a53      	ldr	r2, [pc, #332]	@ (8005948 <ai_network_init+0xb08>)
    conv2d_6_output_array.data = AI_PTR(g_network_activations_map[0] + 198900);
 80057fa:	4c54      	ldr	r4, [pc, #336]	@ (800594c <ai_network_init+0xb0c>)
    conv2d_15_output_array.data = AI_PTR(g_network_activations_map[0] + 209408);
 80057fc:	f8df e1d8 	ldr.w	lr, [pc, #472]	@ 80059d8 <ai_network_init+0xb98>
    conv2d_21_output_array.data = AI_PTR(g_network_activations_map[0] + 229888);
 8005800:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 80059dc <ai_network_init+0xb9c>
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005804:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005808:	4a51      	ldr	r2, [pc, #324]	@ (8005950 <ai_network_init+0xb10>)
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800580a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800580e:	4a51      	ldr	r2, [pc, #324]	@ (8005954 <ai_network_init+0xb14>)
    conv2d_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005810:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_4_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005814:	4a50      	ldr	r2, [pc, #320]	@ (8005958 <ai_network_init+0xb18>)
    conv2d_4_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005816:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 800581a:	4a50      	ldr	r2, [pc, #320]	@ (800595c <ai_network_init+0xb1c>)
 800581c:	f503 7100 	add.w	r1, r3, #512	@ 0x200
    conv2d_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 8005820:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005824:	4a4e      	ldr	r2, [pc, #312]	@ (8005960 <ai_network_init+0xb20>)
    conv2d_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005826:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800582a:	4a4e      	ldr	r2, [pc, #312]	@ (8005964 <ai_network_init+0xb24>)
    conv2d_8_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800582c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_9_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005830:	4a4d      	ldr	r2, [pc, #308]	@ (8005968 <ai_network_init+0xb28>)
    conv2d_9_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005832:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_9_output_array.data = AI_PTR(g_network_activations_map[0] + 1780);
 8005836:	4a4d      	ldr	r2, [pc, #308]	@ (800596c <ai_network_init+0xb2c>)
 8005838:	f203 61f4 	addw	r1, r3, #1780	@ 0x6f4
    conv2d_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1780);
 800583c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_10_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005840:	4a4b      	ldr	r2, [pc, #300]	@ (8005970 <ai_network_init+0xb30>)
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 217136);
 8005842:	494c      	ldr	r1, [pc, #304]	@ (8005974 <ai_network_init+0xb34>)
    conv2d_10_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005844:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_12_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005848:	4a4b      	ldr	r2, [pc, #300]	@ (8005978 <ai_network_init+0xb38>)
    conv2d_12_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800584a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_14_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800584e:	4a4b      	ldr	r2, [pc, #300]	@ (800597c <ai_network_init+0xb3c>)
    conv2d_14_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005850:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_15_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005854:	4a4a      	ldr	r2, [pc, #296]	@ (8005980 <ai_network_init+0xb40>)
    conv2d_15_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005856:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_16_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800585a:	4a4a      	ldr	r2, [pc, #296]	@ (8005984 <ai_network_init+0xb44>)
    conv2d_16_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800585c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_17_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005860:	4a49      	ldr	r2, [pc, #292]	@ (8005988 <ai_network_init+0xb48>)
    conv2d_17_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005862:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_18_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005866:	4a49      	ldr	r2, [pc, #292]	@ (800598c <ai_network_init+0xb4c>)
    conv2d_18_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005868:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_20_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800586c:	4a48      	ldr	r2, [pc, #288]	@ (8005990 <ai_network_init+0xb50>)
    conv2d_20_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800586e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_21_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005872:	4a48      	ldr	r2, [pc, #288]	@ (8005994 <ai_network_init+0xb54>)
    conv2d_21_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005874:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_22_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005878:	4a47      	ldr	r2, [pc, #284]	@ (8005998 <ai_network_init+0xb58>)
    conv2d_22_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800587a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_24_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800587e:	4a47      	ldr	r2, [pc, #284]	@ (800599c <ai_network_init+0xb5c>)
    conv2d_24_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005880:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_26_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005884:	4a46      	ldr	r2, [pc, #280]	@ (80059a0 <ai_network_init+0xb60>)
    conv2d_26_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005886:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_27_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800588a:	4a46      	ldr	r2, [pc, #280]	@ (80059a4 <ai_network_init+0xb64>)
    conv2d_27_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800588c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_28_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005890:	4a45      	ldr	r2, [pc, #276]	@ (80059a8 <ai_network_init+0xb68>)
    conv2d_28_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005892:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_29_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005896:	4a45      	ldr	r2, [pc, #276]	@ (80059ac <ai_network_init+0xb6c>)
    conv2d_29_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005898:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_30_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800589c:	4a44      	ldr	r2, [pc, #272]	@ (80059b0 <ai_network_init+0xb70>)
    conv2d_30_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800589e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_32_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80058a2:	4a44      	ldr	r2, [pc, #272]	@ (80059b4 <ai_network_init+0xb74>)
    conv2d_32_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80058a4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_33_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80058a8:	4a43      	ldr	r2, [pc, #268]	@ (80059b8 <ai_network_init+0xb78>)
    conv2d_33_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80058aa:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_34_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80058ae:	4a43      	ldr	r2, [pc, #268]	@ (80059bc <ai_network_init+0xb7c>)
    conv2d_34_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80058b0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_36_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80058b4:	4a42      	ldr	r2, [pc, #264]	@ (80059c0 <ai_network_init+0xb80>)
    conv2d_36_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80058b6:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_37_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80058ba:	4a42      	ldr	r2, [pc, #264]	@ (80059c4 <ai_network_init+0xb84>)
    conv2d_37_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80058bc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_38_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80058c0:	4a41      	ldr	r2, [pc, #260]	@ (80059c8 <ai_network_init+0xb88>)
    conv2d_38_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80058c2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_40_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80058c6:	4a41      	ldr	r2, [pc, #260]	@ (80059cc <ai_network_init+0xb8c>)
    conv2d_40_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80058c8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_41_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80058cc:	4a40      	ldr	r2, [pc, #256]	@ (80059d0 <ai_network_init+0xb90>)
    conv2d_41_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80058ce:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_42_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80058d2:	4a40      	ldr	r2, [pc, #256]	@ (80059d4 <ai_network_init+0xb94>)
    conv2d_42_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80058d4:	e9c2 3302 	strd	r3, r3, [r2, #8]
 80058d8:	e082      	b.n	80059e0 <ai_network_init+0xba0>
 80058da:	bf00      	nop
 80058dc:	20005e70 	.word	0x20005e70
 80058e0:	20005e60 	.word	0x20005e60
 80058e4:	20005e50 	.word	0x20005e50
 80058e8:	20005e40 	.word	0x20005e40
 80058ec:	20005e30 	.word	0x20005e30
 80058f0:	20005e20 	.word	0x20005e20
 80058f4:	20005e10 	.word	0x20005e10
 80058f8:	20005e00 	.word	0x20005e00
 80058fc:	20005df0 	.word	0x20005df0
 8005900:	20005de0 	.word	0x20005de0
 8005904:	20005dd0 	.word	0x20005dd0
 8005908:	20005dc0 	.word	0x20005dc0
 800590c:	20005db0 	.word	0x20005db0
 8005910:	20005da0 	.word	0x20005da0
 8005914:	20005d90 	.word	0x20005d90
 8005918:	20005d80 	.word	0x20005d80
 800591c:	20005d70 	.word	0x20005d70
 8005920:	20005d60 	.word	0x20005d60
 8005924:	20005d50 	.word	0x20005d50
 8005928:	20005d40 	.word	0x20005d40
 800592c:	20005d30 	.word	0x20005d30
 8005930:	20005d20 	.word	0x20005d20
 8005934:	20005d10 	.word	0x20005d10
 8005938:	20005d00 	.word	0x20005d00
 800593c:	20005cf0 	.word	0x20005cf0
 8005940:	20005ce0 	.word	0x20005ce0
 8005944:	20013248 	.word	0x20013248
 8005948:	20005cd0 	.word	0x20005cd0
 800594c:	20006750 	.word	0x20006750
 8005950:	20005cc0 	.word	0x20005cc0
 8005954:	20005cb0 	.word	0x20005cb0
 8005958:	20005ca0 	.word	0x20005ca0
 800595c:	20006760 	.word	0x20006760
 8005960:	20005c80 	.word	0x20005c80
 8005964:	20005c70 	.word	0x20005c70
 8005968:	20005c60 	.word	0x20005c60
 800596c:	20006720 	.word	0x20006720
 8005970:	20005c50 	.word	0x20005c50
 8005974:	200067a0 	.word	0x200067a0
 8005978:	20005c40 	.word	0x20005c40
 800597c:	20005c30 	.word	0x20005c30
 8005980:	20005c20 	.word	0x20005c20
 8005984:	20005c10 	.word	0x20005c10
 8005988:	20005c00 	.word	0x20005c00
 800598c:	20005bf0 	.word	0x20005bf0
 8005990:	20005be0 	.word	0x20005be0
 8005994:	20005bd0 	.word	0x20005bd0
 8005998:	20005bc0 	.word	0x20005bc0
 800599c:	20005bb0 	.word	0x20005bb0
 80059a0:	20005ba0 	.word	0x20005ba0
 80059a4:	20005b90 	.word	0x20005b90
 80059a8:	20005b80 	.word	0x20005b80
 80059ac:	20005b70 	.word	0x20005b70
 80059b0:	20005b60 	.word	0x20005b60
 80059b4:	20005b50 	.word	0x20005b50
 80059b8:	20005b40 	.word	0x20005b40
 80059bc:	20005b30 	.word	0x20005b30
 80059c0:	20005b20 	.word	0x20005b20
 80059c4:	20005b10 	.word	0x20005b10
 80059c8:	20005b00 	.word	0x20005b00
 80059cc:	20005af0 	.word	0x20005af0
 80059d0:	20005ae0 	.word	0x20005ae0
 80059d4:	20005ad0 	.word	0x20005ad0
 80059d8:	200066d0 	.word	0x200066d0
 80059dc:	20006670 	.word	0x20006670
    conv2d_43_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80059e0:	4abe      	ldr	r2, [pc, #760]	@ (8005cdc <ai_network_init+0xe9c>)
    conv2d_43_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80059e2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_44_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80059e6:	4abe      	ldr	r2, [pc, #760]	@ (8005ce0 <ai_network_init+0xea0>)
    conv2d_44_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80059e8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_45_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80059ec:	4abd      	ldr	r2, [pc, #756]	@ (8005ce4 <ai_network_init+0xea4>)
    conv2d_45_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80059ee:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_47_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80059f2:	4abd      	ldr	r2, [pc, #756]	@ (8005ce8 <ai_network_init+0xea8>)
    conv2d_47_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80059f4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_48_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80059f8:	4abc      	ldr	r2, [pc, #752]	@ (8005cec <ai_network_init+0xeac>)
    conv2d_48_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80059fa:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_49_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80059fe:	4abc      	ldr	r2, [pc, #752]	@ (8005cf0 <ai_network_init+0xeb0>)
    conv2d_49_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a00:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_51_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a04:	4abb      	ldr	r2, [pc, #748]	@ (8005cf4 <ai_network_init+0xeb4>)
    conv2d_51_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a06:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_53_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a0a:	4abb      	ldr	r2, [pc, #748]	@ (8005cf8 <ai_network_init+0xeb8>)
    conv2d_53_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a0c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_54_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a10:	4aba      	ldr	r2, [pc, #744]	@ (8005cfc <ai_network_init+0xebc>)
    conv2d_54_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a12:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_55_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a16:	4aba      	ldr	r2, [pc, #744]	@ (8005d00 <ai_network_init+0xec0>)
    conv2d_55_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a18:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_56_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a1c:	4ab9      	ldr	r2, [pc, #740]	@ (8005d04 <ai_network_init+0xec4>)
    conv2d_56_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a1e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_57_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a22:	4ab9      	ldr	r2, [pc, #740]	@ (8005d08 <ai_network_init+0xec8>)
    conv2d_57_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a24:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_59_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a28:	4ab8      	ldr	r2, [pc, #736]	@ (8005d0c <ai_network_init+0xecc>)
    conv2d_59_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a2a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_60_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a2e:	4ab8      	ldr	r2, [pc, #736]	@ (8005d10 <ai_network_init+0xed0>)
    conv2d_60_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a30:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_61_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a34:	4ab7      	ldr	r2, [pc, #732]	@ (8005d14 <ai_network_init+0xed4>)
    conv2d_61_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a36:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_63_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a3a:	4ab7      	ldr	r2, [pc, #732]	@ (8005d18 <ai_network_init+0xed8>)
    conv2d_63_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a3c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_64_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a40:	4ab6      	ldr	r2, [pc, #728]	@ (8005d1c <ai_network_init+0xedc>)
    conv2d_64_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a42:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_65_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a46:	4ab6      	ldr	r2, [pc, #728]	@ (8005d20 <ai_network_init+0xee0>)
    conv2d_65_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a48:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_66_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a4c:	4ab5      	ldr	r2, [pc, #724]	@ (8005d24 <ai_network_init+0xee4>)
    conv2d_66_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a4e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_68_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a52:	4ab5      	ldr	r2, [pc, #724]	@ (8005d28 <ai_network_init+0xee8>)
    gemm_68_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a54:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 217136);
 8005a58:	f503 3254 	add.w	r2, r3, #217088	@ 0x35000
 8005a5c:	3230      	adds	r2, #48	@ 0x30
    conversion_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 217136);
 8005a5e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 199712);
 8005a62:	f503 3043 	add.w	r0, r3, #199680	@ 0x30c00
 8005a66:	4ab1      	ldr	r2, [pc, #708]	@ (8005d2c <ai_network_init+0xeec>)
 8005a68:	f100 0120 	add.w	r1, r0, #32
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 199712);
 8005a6c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 197632);
 8005a70:	4aaf      	ldr	r2, [pc, #700]	@ (8005d30 <ai_network_init+0xef0>)
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005a72:	49b0      	ldr	r1, [pc, #704]	@ (8005d34 <ai_network_init+0xef4>)
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 197632);
 8005a74:	f503 3641 	add.w	r6, r3, #197632	@ 0x30400
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197632);
 8005a78:	e9c2 6602 	strd	r6, r6, [r2, #8]
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005a7c:	f503 3240 	add.w	r2, r3, #196608	@ 0x30000
 8005a80:	f502 7200 	add.w	r2, r2, #512	@ 0x200
    conv2d_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005a84:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005a88:	49ab      	ldr	r1, [pc, #684]	@ (8005d38 <ai_network_init+0xef8>)
    conv2d_6_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005a8a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_6_output_array.data = AI_PTR(g_network_activations_map[0] + 198900);
 8005a8e:	f503 3142 	add.w	r1, r3, #198656	@ 0x30800
 8005a92:	f101 05f4 	add.w	r5, r1, #244	@ 0xf4
    conv2d_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 198900);
 8005a96:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 248052);
 8005a9a:	4da8      	ldr	r5, [pc, #672]	@ (8005d3c <ai_network_init+0xefc>)
 8005a9c:	f503 3472 	add.w	r4, r3, #247808	@ 0x3c800
 8005aa0:	34f4      	adds	r4, #244	@ 0xf4
    conv2d_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 248052);
 8005aa2:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_8_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005aa6:	4ca6      	ldr	r4, [pc, #664]	@ (8005d40 <ai_network_init+0xf00>)
    conv2d_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005aa8:	e9c4 2202 	strd	r2, r2, [r4, #8]
    conv2d_10_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005aac:	4ca5      	ldr	r4, [pc, #660]	@ (8005d44 <ai_network_init+0xf04>)
    eltwise_11_output_array.data = AI_PTR(g_network_activations_map[0] + 205312);
 8005aae:	f503 3748 	add.w	r7, r3, #204800	@ 0x32000
    conv2d_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005ab2:	e9c4 2202 	strd	r2, r2, [r4, #8]
    eltwise_11_output_array.data = AI_PTR(g_network_activations_map[0] + 205312);
 8005ab6:	4ca4      	ldr	r4, [pc, #656]	@ (8005d48 <ai_network_init+0xf08>)
 8005ab8:	f507 7500 	add.w	r5, r7, #512	@ 0x200
    eltwise_11_output_array.data_start = AI_PTR(g_network_activations_map[0] + 205312);
 8005abc:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_12_output_array.data = AI_PTR(g_network_activations_map[0] + 213504);
 8005ac0:	f503 3c50 	add.w	ip, r3, #212992	@ 0x34000
 8005ac4:	4ca1      	ldr	r4, [pc, #644]	@ (8005d4c <ai_network_init+0xf0c>)
 8005ac6:	f50c 7c00 	add.w	ip, ip, #512	@ 0x200
    conv2d_12_output_array.data_start = AI_PTR(g_network_activations_map[0] + 213504);
 8005aca:	e9c4 cc02 	strd	ip, ip, [r4, #8]
    conv2d_14_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005ace:	4ca0      	ldr	r4, [pc, #640]	@ (8005d50 <ai_network_init+0xf10>)
    conv2d_14_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005ad0:	e9c4 2202 	strd	r2, r2, [r4, #8]
    conv2d_15_output_array.data = AI_PTR(g_network_activations_map[0] + 209408);
 8005ad4:	f503 344c 	add.w	r4, r3, #208896	@ 0x33000
 8005ad8:	f504 7400 	add.w	r4, r4, #512	@ 0x200
    conv2d_15_output_array.data_start = AI_PTR(g_network_activations_map[0] + 209408);
 8005adc:	e9ce 4402 	strd	r4, r4, [lr, #8]
    conv2d_16_output_array.data = AI_PTR(g_network_activations_map[0] + 213504);
 8005ae0:	f8df e2d8 	ldr.w	lr, [pc, #728]	@ 8005dbc <ai_network_init+0xf7c>
    conv2d_16_output_array.data_start = AI_PTR(g_network_activations_map[0] + 213504);
 8005ae4:	e9ce cc02 	strd	ip, ip, [lr, #8]
    conv2d_17_output_array.data = AI_PTR(g_network_activations_map[0] + 238080);
 8005ae8:	f8df e2d4 	ldr.w	lr, [pc, #724]	@ 8005dc0 <ai_network_init+0xf80>
 8005aec:	f503 3c68 	add.w	ip, r3, #237568	@ 0x3a000
 8005af0:	f50c 7c00 	add.w	ip, ip, #512	@ 0x200
    conv2d_17_output_array.data_start = AI_PTR(g_network_activations_map[0] + 238080);
 8005af4:	e9ce cc02 	strd	ip, ip, [lr, #8]
    conv2d_18_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005af8:	f8df c2c8 	ldr.w	ip, [pc, #712]	@ 8005dc4 <ai_network_init+0xf84>
    eltwise_19_output_array.data = AI_PTR(g_network_activations_map[0] + 201216);
 8005afc:	f8df e2c8 	ldr.w	lr, [pc, #712]	@ 8005dc8 <ai_network_init+0xf88>
 8005b00:	f503 3a44 	add.w	sl, r3, #200704	@ 0x31000
    conv2d_18_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005b04:	e9cc 2202 	strd	r2, r2, [ip, #8]
    eltwise_19_output_array.data = AI_PTR(g_network_activations_map[0] + 201216);
 8005b08:	f50a 7c00 	add.w	ip, sl, #512	@ 0x200
    eltwise_19_output_array.data_start = AI_PTR(g_network_activations_map[0] + 201216);
 8005b0c:	e9ce cc02 	strd	ip, ip, [lr, #8]
    conv2d_20_output_array.data = AI_PTR(g_network_activations_map[0] + 205312);
 8005b10:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 8005dcc <ai_network_init+0xf8c>
    conv2d_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 205312);
 8005b14:	e9ce 5502 	strd	r5, r5, [lr, #8]
    conv2d_21_output_array.data = AI_PTR(g_network_activations_map[0] + 229888);
 8005b18:	f503 3e60 	add.w	lr, r3, #229376	@ 0x38000
 8005b1c:	f50e 7e00 	add.w	lr, lr, #512	@ 0x200
    conv2d_21_output_array.data_start = AI_PTR(g_network_activations_map[0] + 229888);
 8005b20:	e9c9 ee02 	strd	lr, lr, [r9, #8]
    conv2d_22_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005b24:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 8005dd0 <ai_network_init+0xf90>
    conv2d_22_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005b28:	e9ce 2202 	strd	r2, r2, [lr, #8]
    eltwise_23_output_array.data = AI_PTR(g_network_activations_map[0] + 205312);
 8005b2c:	f8df e2a4 	ldr.w	lr, [pc, #676]	@ 8005dd4 <ai_network_init+0xf94>
    eltwise_23_output_array.data_start = AI_PTR(g_network_activations_map[0] + 205312);
 8005b30:	e9ce 5502 	strd	r5, r5, [lr, #8]
    conv2d_24_output_array.data = AI_PTR(g_network_activations_map[0] + 209408);
 8005b34:	4d87      	ldr	r5, [pc, #540]	@ (8005d54 <ai_network_init+0xf14>)
    conv2d_24_output_array.data_start = AI_PTR(g_network_activations_map[0] + 209408);
 8005b36:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_26_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005b3a:	4d87      	ldr	r5, [pc, #540]	@ (8005d58 <ai_network_init+0xf18>)
    conv2d_27_output_array.data = AI_PTR(g_network_activations_map[0] + 203264);
 8005b3c:	f503 3e46 	add.w	lr, r3, #202752	@ 0x31800
    conv2d_26_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005b40:	e9c5 2202 	strd	r2, r2, [r5, #8]
    conv2d_27_output_array.data = AI_PTR(g_network_activations_map[0] + 203264);
 8005b44:	4d85      	ldr	r5, [pc, #532]	@ (8005d5c <ai_network_init+0xf1c>)
 8005b46:	f50e 7e00 	add.w	lr, lr, #512	@ 0x200
    conv2d_27_output_array.data_start = AI_PTR(g_network_activations_map[0] + 203264);
 8005b4a:	e9c5 ee02 	strd	lr, lr, [r5, #8]
    conv2d_28_output_array.data = AI_PTR(g_network_activations_map[0] + 204800);
 8005b4e:	4d84      	ldr	r5, [pc, #528]	@ (8005d60 <ai_network_init+0xf20>)
    conv2d_28_output_array.data_start = AI_PTR(g_network_activations_map[0] + 204800);
 8005b50:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_29_output_array.data = AI_PTR(g_network_activations_map[0] + 214016);
 8005b54:	4d83      	ldr	r5, [pc, #524]	@ (8005d64 <ai_network_init+0xf24>)
 8005b56:	f503 3951 	add.w	r9, r3, #214016	@ 0x34400
    conv2d_29_output_array.data_start = AI_PTR(g_network_activations_map[0] + 214016);
 8005b5a:	e9c5 9902 	strd	r9, r9, [r5, #8]
    conv2d_30_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005b5e:	4d82      	ldr	r5, [pc, #520]	@ (8005d68 <ai_network_init+0xf28>)
    conv2d_32_output_array.data = AI_PTR(g_network_activations_map[0] + 200192);
 8005b60:	f8df 9274 	ldr.w	r9, [pc, #628]	@ 8005dd8 <ai_network_init+0xf98>
    conv2d_30_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005b64:	e9c5 2202 	strd	r2, r2, [r5, #8]
    eltwise_31_output_array.data = AI_PTR(g_network_activations_map[0] + 198656);
 8005b68:	4d80      	ldr	r5, [pc, #512]	@ (8005d6c <ai_network_init+0xf2c>)
    eltwise_31_output_array.data_start = AI_PTR(g_network_activations_map[0] + 198656);
 8005b6a:	e9c5 1102 	strd	r1, r1, [r5, #8]
    conv2d_32_output_array.data = AI_PTR(g_network_activations_map[0] + 200192);
 8005b6e:	f500 7500 	add.w	r5, r0, #512	@ 0x200
    conv2d_32_output_array.data_start = AI_PTR(g_network_activations_map[0] + 200192);
 8005b72:	e9c9 5502 	strd	r5, r5, [r9, #8]
    conv2d_33_output_array.data = AI_PTR(g_network_activations_map[0] + 209408);
 8005b76:	f8df 9264 	ldr.w	r9, [pc, #612]	@ 8005ddc <ai_network_init+0xf9c>
    conv2d_33_output_array.data_start = AI_PTR(g_network_activations_map[0] + 209408);
 8005b7a:	e9c9 4402 	strd	r4, r4, [r9, #8]
    conv2d_34_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005b7e:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 8005de0 <ai_network_init+0xfa0>
    conv2d_34_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005b82:	e9c9 2202 	strd	r2, r2, [r9, #8]
    eltwise_35_output_array.data = AI_PTR(g_network_activations_map[0] + 200192);
 8005b86:	f8df 925c 	ldr.w	r9, [pc, #604]	@ 8005de4 <ai_network_init+0xfa4>
    eltwise_35_output_array.data_start = AI_PTR(g_network_activations_map[0] + 200192);
 8005b8a:	e9c9 5502 	strd	r5, r5, [r9, #8]
    conv2d_36_output_array.data = AI_PTR(g_network_activations_map[0] + 201728);
 8005b8e:	f8df 9258 	ldr.w	r9, [pc, #600]	@ 8005de8 <ai_network_init+0xfa8>
 8005b92:	f503 3b45 	add.w	fp, r3, #201728	@ 0x31400
    conv2d_36_output_array.data_start = AI_PTR(g_network_activations_map[0] + 201728);
 8005b96:	e9c9 bb02 	strd	fp, fp, [r9, #8]
    conv2d_37_output_array.data = AI_PTR(g_network_activations_map[0] + 210944);
 8005b9a:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8005dec <ai_network_init+0xfac>
 8005b9e:	f503 394e 	add.w	r9, r3, #210944	@ 0x33800
    conv2d_37_output_array.data_start = AI_PTR(g_network_activations_map[0] + 210944);
 8005ba2:	e9cb 9902 	strd	r9, r9, [fp, #8]
    conv2d_38_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005ba6:	f8df b248 	ldr.w	fp, [pc, #584]	@ 8005df0 <ai_network_init+0xfb0>
    conv2d_38_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005baa:	e9cb 2202 	strd	r2, r2, [fp, #8]
    eltwise_39_output_array.data = AI_PTR(g_network_activations_map[0] + 198656);
 8005bae:	f8df b244 	ldr.w	fp, [pc, #580]	@ 8005df4 <ai_network_init+0xfb4>
    eltwise_39_output_array.data_start = AI_PTR(g_network_activations_map[0] + 198656);
 8005bb2:	e9cb 1102 	strd	r1, r1, [fp, #8]
    conv2d_40_output_array.data = AI_PTR(g_network_activations_map[0] + 200192);
 8005bb6:	f8df b240 	ldr.w	fp, [pc, #576]	@ 8005df8 <ai_network_init+0xfb8>
    conv2d_40_output_array.data_start = AI_PTR(g_network_activations_map[0] + 200192);
 8005bba:	e9cb 5502 	strd	r5, r5, [fp, #8]
    conv2d_41_output_array.data = AI_PTR(g_network_activations_map[0] + 209408);
 8005bbe:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 8005dfc <ai_network_init+0xfbc>
    conv2d_41_output_array.data_start = AI_PTR(g_network_activations_map[0] + 209408);
 8005bc2:	e9cb 4402 	strd	r4, r4, [fp, #8]
    conv2d_42_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005bc6:	4c6a      	ldr	r4, [pc, #424]	@ (8005d70 <ai_network_init+0xf30>)
    conv2d_43_output_array.data = AI_PTR(g_network_activations_map[0] + 199168);
 8005bc8:	f8df b234 	ldr.w	fp, [pc, #564]	@ 8005e00 <ai_network_init+0xfc0>
    conv2d_42_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005bcc:	e9c4 2202 	strd	r2, r2, [r4, #8]
    conv2d_43_output_array.data = AI_PTR(g_network_activations_map[0] + 199168);
 8005bd0:	f501 7400 	add.w	r4, r1, #512	@ 0x200
    conv2d_43_output_array.data_start = AI_PTR(g_network_activations_map[0] + 199168);
 8005bd4:	e9cb 4402 	strd	r4, r4, [fp, #8]
    conv2d_44_output_array.data = AI_PTR(g_network_activations_map[0] + 211456);
 8005bd8:	f8df b228 	ldr.w	fp, [pc, #552]	@ 8005e04 <ai_network_init+0xfc4>
 8005bdc:	f509 7900 	add.w	r9, r9, #512	@ 0x200
    conv2d_44_output_array.data_start = AI_PTR(g_network_activations_map[0] + 211456);
 8005be0:	e9cb 9902 	strd	r9, r9, [fp, #8]
    conv2d_45_output_array.data = AI_PTR(g_network_activations_map[0] + 199168);
 8005be4:	f8df 9220 	ldr.w	r9, [pc, #544]	@ 8005e08 <ai_network_init+0xfc8>
    conv2d_45_output_array.data_start = AI_PTR(g_network_activations_map[0] + 199168);
 8005be8:	e9c9 4402 	strd	r4, r4, [r9, #8]
    eltwise_46_output_array.data = AI_PTR(g_network_activations_map[0] + 201216);
 8005bec:	f8df 921c 	ldr.w	r9, [pc, #540]	@ 8005e0c <ai_network_init+0xfcc>
    eltwise_46_output_array.data_start = AI_PTR(g_network_activations_map[0] + 201216);
 8005bf0:	e9c9 cc02 	strd	ip, ip, [r9, #8]
    conv2d_47_output_array.data = AI_PTR(g_network_activations_map[0] + 203264);
 8005bf4:	f8df 9218 	ldr.w	r9, [pc, #536]	@ 8005e10 <ai_network_init+0xfd0>
    conv2d_47_output_array.data_start = AI_PTR(g_network_activations_map[0] + 203264);
 8005bf8:	e9c9 ee02 	strd	lr, lr, [r9, #8]
    conv2d_48_output_array.data = AI_PTR(g_network_activations_map[0] + 215552);
 8005bfc:	f503 3e52 	add.w	lr, r3, #215040	@ 0x34800
 8005c00:	f8df 9210 	ldr.w	r9, [pc, #528]	@ 8005e14 <ai_network_init+0xfd4>
 8005c04:	f50e 7e00 	add.w	lr, lr, #512	@ 0x200
    conv2d_48_output_array.data_start = AI_PTR(g_network_activations_map[0] + 215552);
 8005c08:	e9c9 ee02 	strd	lr, lr, [r9, #8]
    conv2d_49_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005c0c:	f8df e208 	ldr.w	lr, [pc, #520]	@ 8005e18 <ai_network_init+0xfd8>
    conv2d_49_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005c10:	e9ce 2202 	strd	r2, r2, [lr, #8]
    eltwise_50_output_array.data = AI_PTR(g_network_activations_map[0] + 199168);
 8005c14:	f8df e204 	ldr.w	lr, [pc, #516]	@ 8005e1c <ai_network_init+0xfdc>
    eltwise_50_output_array.data_start = AI_PTR(g_network_activations_map[0] + 199168);
 8005c18:	e9ce 4402 	strd	r4, r4, [lr, #8]
    conv2d_51_output_array.data = AI_PTR(g_network_activations_map[0] + 201216);
 8005c1c:	4c55      	ldr	r4, [pc, #340]	@ (8005d74 <ai_network_init+0xf34>)
    conv2d_51_output_array.data_start = AI_PTR(g_network_activations_map[0] + 201216);
 8005c1e:	e9c4 cc02 	strd	ip, ip, [r4, #8]
    conv2d_53_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005c22:	4c55      	ldr	r4, [pc, #340]	@ (8005d78 <ai_network_init+0xf38>)
    conv2d_53_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005c24:	e9c4 2202 	strd	r2, r2, [r4, #8]
    conv2d_54_output_array.data = AI_PTR(g_network_activations_map[0] + 200192);
 8005c28:	4c54      	ldr	r4, [pc, #336]	@ (8005d7c <ai_network_init+0xf3c>)
    conv2d_54_output_array.data_start = AI_PTR(g_network_activations_map[0] + 200192);
 8005c2a:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_55_output_array.data = AI_PTR(g_network_activations_map[0] + 201088);
 8005c2e:	4d54      	ldr	r5, [pc, #336]	@ (8005d80 <ai_network_init+0xf40>)
 8005c30:	f50a 74c0 	add.w	r4, sl, #384	@ 0x180
    conv2d_55_output_array.data_start = AI_PTR(g_network_activations_map[0] + 201088);
 8005c34:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_56_output_array.data = AI_PTR(g_network_activations_map[0] + 206464);
 8005c38:	4d52      	ldr	r5, [pc, #328]	@ (8005d84 <ai_network_init+0xf44>)
 8005c3a:	f503 3449 	add.w	r4, r3, #205824	@ 0x32400
 8005c3e:	f504 7420 	add.w	r4, r4, #640	@ 0x280
    conv2d_56_output_array.data_start = AI_PTR(g_network_activations_map[0] + 206464);
 8005c42:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_57_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005c46:	4c50      	ldr	r4, [pc, #320]	@ (8005d88 <ai_network_init+0xf48>)
    conv2d_57_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005c48:	e9c4 2202 	strd	r2, r2, [r4, #8]
    eltwise_58_output_array.data = AI_PTR(g_network_activations_map[0] + 198016);
 8005c4c:	4c4f      	ldr	r4, [pc, #316]	@ (8005d8c <ai_network_init+0xf4c>)
 8005c4e:	f506 75c0 	add.w	r5, r6, #384	@ 0x180
    eltwise_58_output_array.data_start = AI_PTR(g_network_activations_map[0] + 198016);
 8005c52:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_59_output_array.data = AI_PTR(g_network_activations_map[0] + 198912);
 8005c56:	4c4e      	ldr	r4, [pc, #312]	@ (8005d90 <ai_network_init+0xf50>)
 8005c58:	f501 7180 	add.w	r1, r1, #256	@ 0x100
    conv2d_59_output_array.data_start = AI_PTR(g_network_activations_map[0] + 198912);
 8005c5c:	e9c4 1102 	strd	r1, r1, [r4, #8]
    conv2d_60_output_array.data = AI_PTR(g_network_activations_map[0] + 204288);
 8005c60:	f503 3347 	add.w	r3, r3, #203776	@ 0x31c00
 8005c64:	4c4b      	ldr	r4, [pc, #300]	@ (8005d94 <ai_network_init+0xf54>)
 8005c66:	f503 7300 	add.w	r3, r3, #512	@ 0x200
    conv2d_60_output_array.data_start = AI_PTR(g_network_activations_map[0] + 204288);
 8005c6a:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_61_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005d98 <ai_network_init+0xf58>)
    conv2d_61_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005c70:	e9c3 2202 	strd	r2, r2, [r3, #8]
    eltwise_62_output_array.data = AI_PTR(g_network_activations_map[0] + 198912);
 8005c74:	4b49      	ldr	r3, [pc, #292]	@ (8005d9c <ai_network_init+0xf5c>)
    eltwise_62_output_array.data_start = AI_PTR(g_network_activations_map[0] + 198912);
 8005c76:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_63_output_array.data = AI_PTR(g_network_activations_map[0] + 199808);
 8005c7a:	4b49      	ldr	r3, [pc, #292]	@ (8005da0 <ai_network_init+0xf60>)
 8005c7c:	3080      	adds	r0, #128	@ 0x80
    conv2d_63_output_array.data_start = AI_PTR(g_network_activations_map[0] + 199808);
 8005c7e:	e9c3 0002 	strd	r0, r0, [r3, #8]
    conv2d_64_output_array.data = AI_PTR(g_network_activations_map[0] + 205184);
 8005c82:	4b48      	ldr	r3, [pc, #288]	@ (8005da4 <ai_network_init+0xf64>)
 8005c84:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
    conv2d_64_output_array.data_start = AI_PTR(g_network_activations_map[0] + 205184);
 8005c88:	e9c3 7702 	strd	r7, r7, [r3, #8]
    conv2d_65_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005c8c:	4b46      	ldr	r3, [pc, #280]	@ (8005da8 <ai_network_init+0xf68>)
    conv2d_65_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005c8e:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_66_output_array.data = AI_PTR(g_network_activations_map[0] + 198912);
 8005c92:	4b46      	ldr	r3, [pc, #280]	@ (8005dac <ai_network_init+0xf6c>)
    conv2d_66_output_array.data_start = AI_PTR(g_network_activations_map[0] + 198912);
 8005c94:	e9c3 1102 	strd	r1, r1, [r3, #8]
    pool_67_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005c98:	4b45      	ldr	r3, [pc, #276]	@ (8005db0 <ai_network_init+0xf70>)
    pool_67_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005c9a:	e9c3 2202 	strd	r2, r2, [r3, #8]
    gemm_68_output_array.data = AI_PTR(g_network_activations_map[0] + 198400);
 8005c9e:	4b45      	ldr	r3, [pc, #276]	@ (8005db4 <ai_network_init+0xf74>)
 8005ca0:	f506 7640 	add.w	r6, r6, #768	@ 0x300
    gemm_68_output_array.data_start = AI_PTR(g_network_activations_map[0] + 198400);
 8005ca4:	e9c3 6602 	strd	r6, r6, [r3, #8]
    nl_69_output_array.data = AI_PTR(g_network_activations_map[0] + 197120);
 8005ca8:	4b43      	ldr	r3, [pc, #268]	@ (8005db8 <ai_network_init+0xf78>)
    nl_69_output_array.data_start = AI_PTR(g_network_activations_map[0] + 197120);
 8005caa:	e9c3 2202 	strd	r2, r2, [r3, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8005cae:	9801      	ldr	r0, [sp, #4]
 8005cb0:	f001 fd9a 	bl	80077e8 <ai_platform_network_post_init>
 8005cb4:	9b00      	ldr	r3, [sp, #0]
 8005cb6:	ea00 0008 	and.w	r0, r0, r8
 8005cba:	4003      	ands	r3, r0
 8005cbc:	b2d8      	uxtb	r0, r3

  return ok;
}
 8005cbe:	b003      	add	sp, #12
 8005cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005cc4:	2212      	movs	r2, #18
 8005cc6:	2130      	movs	r1, #48	@ 0x30
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f001 faf1 	bl	80072b0 <ai_platform_network_set_error>
  return false;
 8005cce:	e588      	b.n	80057e2 <ai_network_init+0x9a2>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8005cd0:	2213      	movs	r2, #19
 8005cd2:	2130      	movs	r1, #48	@ 0x30
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f001 faeb 	bl	80072b0 <ai_platform_network_set_error>
  return false;
 8005cda:	e7e8      	b.n	8005cae <ai_network_init+0xe6e>
 8005cdc:	20005ac0 	.word	0x20005ac0
 8005ce0:	20005ab0 	.word	0x20005ab0
 8005ce4:	20005aa0 	.word	0x20005aa0
 8005ce8:	20005a90 	.word	0x20005a90
 8005cec:	20005a80 	.word	0x20005a80
 8005cf0:	20005a70 	.word	0x20005a70
 8005cf4:	20005a60 	.word	0x20005a60
 8005cf8:	20005a50 	.word	0x20005a50
 8005cfc:	20005a40 	.word	0x20005a40
 8005d00:	20005a30 	.word	0x20005a30
 8005d04:	20005a20 	.word	0x20005a20
 8005d08:	20005a10 	.word	0x20005a10
 8005d0c:	20005a00 	.word	0x20005a00
 8005d10:	200059f0 	.word	0x200059f0
 8005d14:	200059e0 	.word	0x200059e0
 8005d18:	200059d0 	.word	0x200059d0
 8005d1c:	200059c0 	.word	0x200059c0
 8005d20:	200059b0 	.word	0x200059b0
 8005d24:	200059a0 	.word	0x200059a0
 8005d28:	20005990 	.word	0x20005990
 8005d2c:	20006790 	.word	0x20006790
 8005d30:	20006780 	.word	0x20006780
 8005d34:	20006770 	.word	0x20006770
 8005d38:	20005c90 	.word	0x20005c90
 8005d3c:	20006740 	.word	0x20006740
 8005d40:	20006730 	.word	0x20006730
 8005d44:	20006710 	.word	0x20006710
 8005d48:	20006700 	.word	0x20006700
 8005d4c:	200066f0 	.word	0x200066f0
 8005d50:	200066e0 	.word	0x200066e0
 8005d54:	20006640 	.word	0x20006640
 8005d58:	20006630 	.word	0x20006630
 8005d5c:	20006620 	.word	0x20006620
 8005d60:	20006610 	.word	0x20006610
 8005d64:	20006600 	.word	0x20006600
 8005d68:	200065f0 	.word	0x200065f0
 8005d6c:	200065e0 	.word	0x200065e0
 8005d70:	20006530 	.word	0x20006530
 8005d74:	200064a0 	.word	0x200064a0
 8005d78:	20006490 	.word	0x20006490
 8005d7c:	20006480 	.word	0x20006480
 8005d80:	20006470 	.word	0x20006470
 8005d84:	20006460 	.word	0x20006460
 8005d88:	20006450 	.word	0x20006450
 8005d8c:	20006440 	.word	0x20006440
 8005d90:	20006430 	.word	0x20006430
 8005d94:	20006420 	.word	0x20006420
 8005d98:	20006410 	.word	0x20006410
 8005d9c:	20006400 	.word	0x20006400
 8005da0:	200063f0 	.word	0x200063f0
 8005da4:	200063e0 	.word	0x200063e0
 8005da8:	200063d0 	.word	0x200063d0
 8005dac:	200063c0 	.word	0x200063c0
 8005db0:	200063b0 	.word	0x200063b0
 8005db4:	200063a0 	.word	0x200063a0
 8005db8:	20006390 	.word	0x20006390
 8005dbc:	200066c0 	.word	0x200066c0
 8005dc0:	200066b0 	.word	0x200066b0
 8005dc4:	200066a0 	.word	0x200066a0
 8005dc8:	20006690 	.word	0x20006690
 8005dcc:	20006680 	.word	0x20006680
 8005dd0:	20006660 	.word	0x20006660
 8005dd4:	20006650 	.word	0x20006650
 8005dd8:	200065d0 	.word	0x200065d0
 8005ddc:	200065c0 	.word	0x200065c0
 8005de0:	200065b0 	.word	0x200065b0
 8005de4:	200065a0 	.word	0x200065a0
 8005de8:	20006590 	.word	0x20006590
 8005dec:	20006580 	.word	0x20006580
 8005df0:	20006570 	.word	0x20006570
 8005df4:	20006560 	.word	0x20006560
 8005df8:	20006550 	.word	0x20006550
 8005dfc:	20006540 	.word	0x20006540
 8005e00:	20006520 	.word	0x20006520
 8005e04:	20006510 	.word	0x20006510
 8005e08:	20006500 	.word	0x20006500
 8005e0c:	200064f0 	.word	0x200064f0
 8005e10:	200064e0 	.word	0x200064e0
 8005e14:	200064d0 	.word	0x200064d0
 8005e18:	200064c0 	.word	0x200064c0
 8005e1c:	200064b0 	.word	0x200064b0

08005e20 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8005e20:	f001 bd10 	b.w	8007844 <ai_platform_network_process>

08005e24 <ai_network_forward>:


AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8005e24:	2200      	movs	r2, #0
 8005e26:	f001 bd0d 	b.w	8007844 <ai_platform_network_process>
	...

08005e2c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005e2c:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8005e2e:	4603      	mov	r3, r0
{
 8005e30:	b085      	sub	sp, #20
  if (!params) return false;
 8005e32:	b170      	cbz	r0, 8005e52 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8005e34:	4c08      	ldr	r4, [pc, #32]	@ (8005e58 <ai_network_data_params_get+0x2c>)
 8005e36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e3a:	466a      	mov	r2, sp
 8005e3c:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005e40:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8005e44:	ad02      	add	r5, sp, #8
 8005e46:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 f9b3 	bl	80071b8 <ai_platform_bind_network_params>
}
 8005e52:	b005      	add	sp, #20
 8005e54:	bd30      	pop	{r4, r5, pc}
 8005e56:	bf00      	nop
 8005e58:	08011558 	.word	0x08011558

08005e5c <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 8005e5c:	2300      	movs	r3, #0
    iter->dest_struct = dest_struct;
 8005e5e:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 8005e62:	888b      	ldrh	r3, [r1, #4]
 8005e64:	441a      	add	r2, r3
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8005e66:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 8005e6a:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8005e6c:	441a      	add	r2, r3
    iter->pos = fields;
 8005e6e:	e9c0 1100 	strd	r1, r1, [r0]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8005e72:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 8005e74:	8808      	ldrh	r0, [r1, #0]
}
 8005e76:	3800      	subs	r0, #0
 8005e78:	bf18      	it	ne
 8005e7a:	2001      	movne	r0, #1
 8005e7c:	4770      	bx	lr

08005e7e <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 8005e7e:	6842      	ldr	r2, [r0, #4]

    if (prev_field->tag == 0)
 8005e80:	8811      	ldrh	r1, [r2, #0]
{
 8005e82:	b570      	push	{r4, r5, r6, lr}
 8005e84:	4603      	mov	r3, r0
    if (prev_field->tag == 0)
 8005e86:	b141      	cbz	r1, 8005e9a <pb_field_iter_next+0x1c>
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
    }
    
    iter->pos++;
 8005e88:	f102 0110 	add.w	r1, r2, #16
 8005e8c:	6041      	str	r1, [r0, #4]
    
    if (iter->pos->tag == 0)
 8005e8e:	8a11      	ldrh	r1, [r2, #16]
 8005e90:	b929      	cbnz	r1, 8005e9e <pb_field_iter_next+0x20>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8005e92:	68c2      	ldr	r2, [r0, #12]
 8005e94:	6801      	ldr	r1, [r0, #0]
 8005e96:	f7ff ffe1 	bl	8005e5c <pb_field_iter_begin>
        return false;
 8005e9a:	2000      	movs	r0, #0
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 8005e9c:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8005e9e:	7890      	ldrb	r0, [r2, #2]
        size_t prev_size = prev_field->data_size;
 8005ea0:	8911      	ldrh	r1, [r2, #8]
            iter->pos->data_offset == PB_SIZE_MAX)
 8005ea2:	8a94      	ldrh	r4, [r2, #20]
 8005ea4:	f000 0630 	and.w	r6, r0, #48	@ 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8005ea8:	2e30      	cmp	r6, #48	@ 0x30
 8005eaa:	d10a      	bne.n	8005ec2 <pb_field_iter_next+0x44>
 8005eac:	7c95      	ldrb	r5, [r2, #18]
 8005eae:	f005 0530 	and.w	r5, r5, #48	@ 0x30
 8005eb2:	2d30      	cmp	r5, #48	@ 0x30
 8005eb4:	d114      	bne.n	8005ee0 <pb_field_iter_next+0x62>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8005eb6:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8005eba:	42ac      	cmp	r4, r5
 8005ebc:	d110      	bne.n	8005ee0 <pb_field_iter_next+0x62>
            return true;
 8005ebe:	2001      	movs	r0, #1
 8005ec0:	e7ec      	b.n	8005e9c <pb_field_iter_next+0x1e>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8005ec2:	f000 05f0 	and.w	r5, r0, #240	@ 0xf0
 8005ec6:	2d20      	cmp	r5, #32
 8005ec8:	d10a      	bne.n	8005ee0 <pb_field_iter_next+0x62>
            prev_size *= prev_field->array_size;
 8005eca:	8950      	ldrh	r0, [r2, #10]
 8005ecc:	4341      	muls	r1, r0
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8005ece:	440c      	add	r4, r1
 8005ed0:	6919      	ldr	r1, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8005ed2:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8005ed6:	4421      	add	r1, r4
 8005ed8:	6119      	str	r1, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8005eda:	4411      	add	r1, r2
 8005edc:	6159      	str	r1, [r3, #20]
        return true;
 8005ede:	e7ee      	b.n	8005ebe <pb_field_iter_next+0x40>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 8005ee0:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
            prev_size = sizeof(void*);
 8005ee4:	2880      	cmp	r0, #128	@ 0x80
 8005ee6:	bf08      	it	eq
 8005ee8:	2104      	moveq	r1, #4
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 8005eea:	2e00      	cmp	r6, #0
 8005eec:	d1ef      	bne.n	8005ece <pb_field_iter_next+0x50>
            iter->required_field_index++;
 8005eee:	6898      	ldr	r0, [r3, #8]
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	6098      	str	r0, [r3, #8]
 8005ef4:	e7eb      	b.n	8005ece <pb_field_iter_next+0x50>

08005ef6 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8005ef6:	b570      	push	{r4, r5, r6, lr}
    const pb_field_t *start = iter->pos;
 8005ef8:	6846      	ldr	r6, [r0, #4]
{
 8005efa:	4604      	mov	r4, r0
 8005efc:	460d      	mov	r5, r1
    
    do {
        if (iter->pos->tag == tag &&
 8005efe:	6863      	ldr	r3, [r4, #4]
 8005f00:	881a      	ldrh	r2, [r3, #0]
 8005f02:	42aa      	cmp	r2, r5
 8005f04:	d104      	bne.n	8005f10 <pb_field_iter_find+0x1a>
 8005f06:	789b      	ldrb	r3, [r3, #2]
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d107      	bne.n	8005f20 <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 8005f10:	4620      	mov	r0, r4
 8005f12:	f7ff ffb4 	bl	8005e7e <pb_field_iter_next>
    } while (iter->pos != start);
 8005f16:	6863      	ldr	r3, [r4, #4]
 8005f18:	42b3      	cmp	r3, r6
 8005f1a:	d1f0      	bne.n	8005efe <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 8005f1c:	2000      	movs	r0, #0
}
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 8005f20:	2001      	movs	r0, #1
 8005f22:	e7fc      	b.n	8005f1e <pb_field_iter_find+0x28>

08005f24 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005f24:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8005f26:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 8005f28:	18a3      	adds	r3, r4, r2
 8005f2a:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 8005f2c:	b939      	cbnz	r1, 8005f3e <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 8005f2e:	2001      	movs	r0, #1
 8005f30:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 8005f32:	5ce0      	ldrb	r0, [r4, r3]
 8005f34:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 8005f36:	3301      	adds	r3, #1
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d1fa      	bne.n	8005f32 <buf_read+0xe>
 8005f3c:	e7f7      	b.n	8005f2e <buf_read+0xa>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e7fa      	b.n	8005f38 <buf_read+0x14>

08005f42 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
    if (stream->bytes_left == 0)
 8005f42:	6883      	ldr	r3, [r0, #8]
{
 8005f44:	b510      	push	{r4, lr}
 8005f46:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 8005f48:	b90b      	cbnz	r3, 8005f4e <pb_readbyte+0xc>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005f4a:	2000      	movs	r0, #0
#endif

    stream->bytes_left--;
    
    return true;    
}
 8005f4c:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 8005f4e:	6803      	ldr	r3, [r0, #0]
 8005f50:	2201      	movs	r2, #1
 8005f52:	4798      	blx	r3
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d0f8      	beq.n	8005f4a <pb_readbyte+0x8>
    stream->bytes_left--;
 8005f58:	68a3      	ldr	r3, [r4, #8]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	60a3      	str	r3, [r4, #8]
    return true;    
 8005f5e:	e7f5      	b.n	8005f4c <pb_readbyte+0xa>

08005f60 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8005f60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f64:	4688      	mov	r8, r1
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8005f66:	f10d 0107 	add.w	r1, sp, #7
{
 8005f6a:	4607      	mov	r7, r0
 8005f6c:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 8005f6e:	f7ff ffe8 	bl	8005f42 <pb_readbyte>
 8005f72:	4606      	mov	r6, r0
 8005f74:	b958      	cbnz	r0, 8005f8e <pb_decode_varint32_eof+0x2e>
    {
        if (stream->bytes_left == 0)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	b123      	cbz	r3, 8005f84 <pb_decode_varint32_eof+0x24>
            {
                *eof = true;
            }
        }

        return false;
 8005f7a:	2600      	movs	r6, #0
        }
   }
   
   *dest = result;
   return true;
}
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	b002      	add	sp, #8
 8005f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (eof)
 8005f84:	2c00      	cmp	r4, #0
 8005f86:	d0f8      	beq.n	8005f7a <pb_decode_varint32_eof+0x1a>
                *eof = true;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	7023      	strb	r3, [r4, #0]
 8005f8c:	e7f5      	b.n	8005f7a <pb_decode_varint32_eof+0x1a>
    if ((byte & 0x80) == 0)
 8005f8e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8005f92:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	da21      	bge.n	8005fde <pb_decode_varint32_eof+0x7e>
        result = byte & 0x7F;
 8005f9a:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
        uint_fast8_t bitpos = 7;
 8005f9e:	2507      	movs	r5, #7
            if (!pb_readbyte(stream, &byte))
 8005fa0:	f10d 0107 	add.w	r1, sp, #7
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f7ff ffcc 	bl	8005f42 <pb_readbyte>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d0e5      	beq.n	8005f7a <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8005fae:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 8005fb2:	2d1f      	cmp	r5, #31
 8005fb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005fb8:	d914      	bls.n	8005fe4 <pb_decode_varint32_eof+0x84>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8005fba:	2d3e      	cmp	r5, #62	@ 0x3e
 8005fbc:	bf8c      	ite	hi
 8005fbe:	2101      	movhi	r1, #1
 8005fc0:	21ff      	movls	r1, #255	@ 0xff
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8005fc2:	b11a      	cbz	r2, 8005fcc <pb_decode_varint32_eof+0x6c>
 8005fc4:	2c00      	cmp	r4, #0
 8005fc6:	dad8      	bge.n	8005f7a <pb_decode_varint32_eof+0x1a>
 8005fc8:	4299      	cmp	r1, r3
 8005fca:	d1d6      	bne.n	8005f7a <pb_decode_varint32_eof+0x1a>
        } while (byte & 0x80);
 8005fcc:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 8005fce:	f105 0507 	add.w	r5, r5, #7
        } while (byte & 0x80);
 8005fd2:	d4e5      	bmi.n	8005fa0 <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 8005fd4:	2d23      	cmp	r5, #35	@ 0x23
 8005fd6:	d102      	bne.n	8005fde <pb_decode_varint32_eof+0x7e>
 8005fd8:	f013 0f70 	tst.w	r3, #112	@ 0x70
 8005fdc:	d1cd      	bne.n	8005f7a <pb_decode_varint32_eof+0x1a>
   *dest = result;
 8005fde:	f8c8 4000 	str.w	r4, [r8]
   return true;
 8005fe2:	e7cb      	b.n	8005f7c <pb_decode_varint32_eof+0x1c>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8005fe4:	40aa      	lsls	r2, r5
 8005fe6:	4314      	orrs	r4, r2
 8005fe8:	e7f0      	b.n	8005fcc <pb_decode_varint32_eof+0x6c>

08005fea <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 8005fea:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 8005fec:	6841      	ldr	r1, [r0, #4]
 8005fee:	788a      	ldrb	r2, [r1, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8005ff0:	f002 050f 	and.w	r5, r2, #15
 8005ff4:	2d08      	cmp	r5, #8
{
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	4603      	mov	r3, r0
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8005ffa:	d11f      	bne.n	800603c <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8005ffc:	6903      	ldr	r3, [r0, #16]
 8005ffe:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 8006000:	2600      	movs	r6, #0
        while (ext != NULL)
 8006002:	b90c      	cbnz	r4, 8006008 <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 8006004:	b006      	add	sp, #24
 8006006:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8006008:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800600a:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800600c:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 800600e:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8006010:	4629      	mov	r1, r5
 8006012:	4668      	mov	r0, sp
 8006014:	f7ff ff22 	bl	8005e5c <pb_field_iter_begin>
    iter->pData = extension->dest;
 8006018:	6863      	ldr	r3, [r4, #4]
 800601a:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 800601c:	f104 030c 	add.w	r3, r4, #12
 8006020:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006022:	78ab      	ldrb	r3, [r5, #2]
 8006024:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006028:	2b80      	cmp	r3, #128	@ 0x80
        iter->pData = &extension->dest;
 800602a:	bf08      	it	eq
 800602c:	1d23      	addeq	r3, r4, #4
            pb_field_set_to_default(&ext_iter);
 800602e:	4668      	mov	r0, sp
        iter->pData = &extension->dest;
 8006030:	bf08      	it	eq
 8006032:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 8006034:	f7ff ffd9 	bl	8005fea <pb_field_set_to_default>
            ext = ext->next;
 8006038:	68a4      	ldr	r4, [r4, #8]
 800603a:	e7e2      	b.n	8006002 <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800603c:	2a3f      	cmp	r2, #63	@ 0x3f
 800603e:	d827      	bhi.n	8006090 <pb_field_set_to_default+0xa6>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 8006040:	f002 0030 	and.w	r0, r2, #48	@ 0x30
 8006044:	2810      	cmp	r0, #16
 8006046:	d110      	bne.n	800606a <pb_field_set_to_default+0x80>
 8006048:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 800604c:	4282      	cmp	r2, r0
 800604e:	d001      	beq.n	8006054 <pb_field_set_to_default+0x6a>
            *(bool*)iter->pSize = false;
 8006050:	2000      	movs	r0, #0
 8006052:	7010      	strb	r0, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8006054:	2d07      	cmp	r5, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8006056:	68cc      	ldr	r4, [r1, #12]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8006058:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 800605a:	d10c      	bne.n	8006076 <pb_field_set_to_default+0x8c>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800605c:	4601      	mov	r1, r0
 800605e:	4620      	mov	r0, r4
}
 8006060:	b006      	add	sp, #24
 8006062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8006066:	f000 b81f 	b.w	80060a8 <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800606a:	0690      	lsls	r0, r2, #26
 800606c:	d5f2      	bpl.n	8006054 <pb_field_set_to_default+0x6a>
            *(pb_size_t*)iter->pSize = 0;
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	2200      	movs	r2, #0
 8006072:	801a      	strh	r2, [r3, #0]
        if (init_data)
 8006074:	e7c6      	b.n	8006004 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8006076:	890a      	ldrh	r2, [r1, #8]
 8006078:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 800607a:	b124      	cbz	r4, 8006086 <pb_field_set_to_default+0x9c>
}
 800607c:	b006      	add	sp, #24
 800607e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8006082:	f008 bbb8 	b.w	800e7f6 <memcpy>
}
 8006086:	b006      	add	sp, #24
 8006088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 800608c:	f008 bb11 	b.w	800e6b2 <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8006090:	f002 01c0 	and.w	r1, r2, #192	@ 0xc0
 8006094:	2980      	cmp	r1, #128	@ 0x80
 8006096:	d1b5      	bne.n	8006004 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 8006098:	6900      	ldr	r0, [r0, #16]
 800609a:	2100      	movs	r1, #0
 800609c:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800609e:	0692      	lsls	r2, r2, #26
            *(pb_size_t*)iter->pSize = 0;
 80060a0:	bf44      	itt	mi
 80060a2:	695b      	ldrmi	r3, [r3, #20]
 80060a4:	8019      	strhmi	r1, [r3, #0]
}
 80060a6:	e7ad      	b.n	8006004 <pb_field_set_to_default+0x1a>

080060a8 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 80060a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80060aa:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 80060ac:	4601      	mov	r1, r0
 80060ae:	4668      	mov	r0, sp
 80060b0:	f7ff fed4 	bl	8005e5c <pb_field_iter_begin>
 80060b4:	b130      	cbz	r0, 80060c4 <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 80060b6:	4668      	mov	r0, sp
 80060b8:	f7ff ff97 	bl	8005fea <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 80060bc:	4668      	mov	r0, sp
 80060be:	f7ff fede 	bl	8005e7e <pb_field_iter_next>
 80060c2:	e7f7      	b.n	80060b4 <pb_message_set_to_defaults+0xc>
}
 80060c4:	b007      	add	sp, #28
 80060c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080060cc <pb_read>:
{
 80060cc:	b530      	push	{r4, r5, lr}
 80060ce:	4604      	mov	r4, r0
 80060d0:	b085      	sub	sp, #20
 80060d2:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 80060d4:	b9a9      	cbnz	r1, 8006102 <pb_read+0x36>
 80060d6:	6802      	ldr	r2, [r0, #0]
 80060d8:	4b11      	ldr	r3, [pc, #68]	@ (8006120 <pb_read+0x54>)
 80060da:	429a      	cmp	r2, r3
 80060dc:	d011      	beq.n	8006102 <pb_read+0x36>
		while (count > 16)
 80060de:	2d10      	cmp	r5, #16
 80060e0:	d806      	bhi.n	80060f0 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 80060e2:	462a      	mov	r2, r5
 80060e4:	4669      	mov	r1, sp
 80060e6:	4620      	mov	r0, r4
 80060e8:	f7ff fff0 	bl	80060cc <pb_read>
}
 80060ec:	b005      	add	sp, #20
 80060ee:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 80060f0:	2210      	movs	r2, #16
 80060f2:	4669      	mov	r1, sp
 80060f4:	4620      	mov	r0, r4
 80060f6:	f7ff ffe9 	bl	80060cc <pb_read>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d0f6      	beq.n	80060ec <pb_read+0x20>
			count -= 16;
 80060fe:	3d10      	subs	r5, #16
 8006100:	e7ed      	b.n	80060de <pb_read+0x12>
    if (stream->bytes_left < count)
 8006102:	68a3      	ldr	r3, [r4, #8]
 8006104:	42ab      	cmp	r3, r5
 8006106:	d201      	bcs.n	800610c <pb_read+0x40>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8006108:	2000      	movs	r0, #0
 800610a:	e7ef      	b.n	80060ec <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	462a      	mov	r2, r5
 8006110:	4620      	mov	r0, r4
 8006112:	4798      	blx	r3
 8006114:	2800      	cmp	r0, #0
 8006116:	d0f7      	beq.n	8006108 <pb_read+0x3c>
    stream->bytes_left -= count;
 8006118:	68a3      	ldr	r3, [r4, #8]
 800611a:	1b5b      	subs	r3, r3, r5
 800611c:	60a3      	str	r3, [r4, #8]
    return true;
 800611e:	e7e5      	b.n	80060ec <pb_read+0x20>
 8006120:	08005f25 	.word	0x08005f25

08006124 <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 8006124:	2200      	movs	r2, #0
 8006126:	f7ff bf1b 	b.w	8005f60 <pb_decode_varint32_eof>

0800612a <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800612a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800612c:	460e      	mov	r6, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800612e:	a901      	add	r1, sp, #4
{
 8006130:	4607      	mov	r7, r0
 8006132:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 8006134:	f7ff fff6 	bl	8006124 <pb_decode_varint32>
 8006138:	4604      	mov	r4, r0
 800613a:	b140      	cbz	r0, 800614e <pb_dec_fixed_length_bytes+0x24>
        return false;

    if (size > PB_SIZE_MAX)
 800613c:	9901      	ldr	r1, [sp, #4]
 800613e:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8006142:	d212      	bcs.n	800616a <pb_dec_fixed_length_bytes+0x40>
        PB_RETURN_ERROR(stream, "bytes overflow");

    if (size == 0)
 8006144:	b931      	cbnz	r1, 8006154 <pb_dec_fixed_length_bytes+0x2a>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 8006146:	8932      	ldrh	r2, [r6, #8]
 8006148:	4628      	mov	r0, r5
 800614a:	f008 fab2 	bl	800e6b2 <memset>

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 800614e:	4620      	mov	r0, r4
 8006150:	b003      	add	sp, #12
 8006152:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 8006154:	8933      	ldrh	r3, [r6, #8]
 8006156:	4299      	cmp	r1, r3
 8006158:	d107      	bne.n	800616a <pb_dec_fixed_length_bytes+0x40>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 800615a:	460a      	mov	r2, r1
 800615c:	4638      	mov	r0, r7
 800615e:	4629      	mov	r1, r5
}
 8006160:	b003      	add	sp, #12
 8006162:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 8006166:	f7ff bfb1 	b.w	80060cc <pb_read>
        return false;
 800616a:	2400      	movs	r4, #0
 800616c:	e7ef      	b.n	800614e <pb_dec_fixed_length_bytes+0x24>

0800616e <pb_dec_string>:
{
 800616e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006172:	460f      	mov	r7, r1
    if (!pb_decode_varint32(stream, &size))
 8006174:	a901      	add	r1, sp, #4
{
 8006176:	4680      	mov	r8, r0
 8006178:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 800617a:	f7ff ffd3 	bl	8006124 <pb_decode_varint32>
 800617e:	b1a0      	cbz	r0, 80061aa <pb_dec_string+0x3c>
    alloc_size = size + 1;
 8006180:	9c01      	ldr	r4, [sp, #4]
 8006182:	1c62      	adds	r2, r4, #1
 8006184:	f04f 0500 	mov.w	r5, #0
 8006188:	d204      	bcs.n	8006194 <pb_dec_string+0x26>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800618a:	78bb      	ldrb	r3, [r7, #2]
 800618c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006190:	2b80      	cmp	r3, #128	@ 0x80
 8006192:	d101      	bne.n	8006198 <pb_dec_string+0x2a>
        return false;
 8006194:	4628      	mov	r0, r5
 8006196:	e008      	b.n	80061aa <pb_dec_string+0x3c>
        if (alloc_size > field->data_size)
 8006198:	893b      	ldrh	r3, [r7, #8]
 800619a:	4293      	cmp	r3, r2
 800619c:	d3fa      	bcc.n	8006194 <pb_dec_string+0x26>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 800619e:	4622      	mov	r2, r4
 80061a0:	4631      	mov	r1, r6
 80061a2:	4640      	mov	r0, r8
 80061a4:	f7ff ff92 	bl	80060cc <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 80061a8:	5535      	strb	r5, [r6, r4]
}
 80061aa:	b002      	add	sp, #8
 80061ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080061b0 <pb_dec_bytes>:
{
 80061b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061b2:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 80061b4:	a901      	add	r1, sp, #4
{
 80061b6:	4606      	mov	r6, r0
 80061b8:	4614      	mov	r4, r2
    if (!pb_decode_varint32(stream, &size))
 80061ba:	f7ff ffb3 	bl	8006124 <pb_decode_varint32>
 80061be:	b1b0      	cbz	r0, 80061ee <pb_dec_bytes+0x3e>
    if (size > PB_SIZE_MAX)
 80061c0:	9a01      	ldr	r2, [sp, #4]
 80061c2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80061c6:	d212      	bcs.n	80061ee <pb_dec_bytes+0x3e>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80061c8:	78ab      	ldrb	r3, [r5, #2]
 80061ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061ce:	2b80      	cmp	r3, #128	@ 0x80
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80061d0:	f102 0102 	add.w	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80061d4:	d00b      	beq.n	80061ee <pb_dec_bytes+0x3e>
        if (alloc_size > field->data_size)
 80061d6:	892b      	ldrh	r3, [r5, #8]
 80061d8:	428b      	cmp	r3, r1
 80061da:	d308      	bcc.n	80061ee <pb_dec_bytes+0x3e>
    bdest->size = (pb_size_t)size;
 80061dc:	4621      	mov	r1, r4
    return pb_read(stream, bdest->bytes, size);
 80061de:	4630      	mov	r0, r6
    bdest->size = (pb_size_t)size;
 80061e0:	f821 2b02 	strh.w	r2, [r1], #2
}
 80061e4:	b002      	add	sp, #8
 80061e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_read(stream, bdest->bytes, size);
 80061ea:	f7ff bf6f 	b.w	80060cc <pb_read>
}
 80061ee:	2000      	movs	r0, #0
 80061f0:	b002      	add	sp, #8
 80061f2:	bd70      	pop	{r4, r5, r6, pc}

080061f4 <pb_decode_varint>:
{
 80061f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 80061f8:	2500      	movs	r5, #0
{
 80061fa:	4606      	mov	r6, r0
 80061fc:	460f      	mov	r7, r1
    uint64_t result = 0;
 80061fe:	46a8      	mov	r8, r5
    uint_fast8_t bitpos = 0;
 8006200:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 8006202:	f10d 0107 	add.w	r1, sp, #7
 8006206:	4630      	mov	r0, r6
 8006208:	f7ff fe9b 	bl	8005f42 <pb_readbyte>
 800620c:	b1c0      	cbz	r0, 8006240 <pb_decode_varint+0x4c>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800620e:	f89d c007 	ldrb.w	ip, [sp, #7]
 8006212:	f1a4 0320 	sub.w	r3, r4, #32
 8006216:	f00c 027f 	and.w	r2, ip, #127	@ 0x7f
 800621a:	f1c4 0120 	rsb	r1, r4, #32
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	fa22 f101 	lsr.w	r1, r2, r1
 8006226:	430b      	orrs	r3, r1
 8006228:	40a2      	lsls	r2, r4
    } while (byte & 0x80);
 800622a:	f01c 0f80 	tst.w	ip, #128	@ 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800622e:	ea45 0502 	orr.w	r5, r5, r2
 8006232:	ea43 0808 	orr.w	r8, r3, r8
        bitpos = (uint_fast8_t)(bitpos + 7);
 8006236:	f104 0407 	add.w	r4, r4, #7
    } while (byte & 0x80);
 800623a:	d104      	bne.n	8006246 <pb_decode_varint+0x52>
    *dest = result;
 800623c:	e9c7 5800 	strd	r5, r8, [r7]
}
 8006240:	b002      	add	sp, #8
 8006242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (bitpos >= 64)
 8006246:	2c46      	cmp	r4, #70	@ 0x46
 8006248:	d1db      	bne.n	8006202 <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 800624a:	2000      	movs	r0, #0
 800624c:	e7f8      	b.n	8006240 <pb_decode_varint+0x4c>

0800624e <pb_dec_uvarint>:
{
 800624e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006250:	460d      	mov	r5, r1
    if (!pb_decode_varint(stream, &value))
 8006252:	4669      	mov	r1, sp
{
 8006254:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8006256:	f7ff ffcd 	bl	80061f4 <pb_decode_varint>
 800625a:	b1a8      	cbz	r0, 8006288 <pb_dec_uvarint+0x3a>
    if (field->data_size == sizeof(pb_uint64_t))
 800625c:	892b      	ldrh	r3, [r5, #8]
 800625e:	3b01      	subs	r3, #1
 8006260:	2b07      	cmp	r3, #7
 8006262:	d820      	bhi.n	80062a6 <pb_dec_uvarint+0x58>
 8006264:	e8df f003 	tbb	[pc, r3]
 8006268:	121f161a 	.word	0x121f161a
 800626c:	041f1f1f 	.word	0x041f1f1f
        clamped = *(pb_uint64_t*)dest = value;
 8006270:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006274:	e9c4 3200 	strd	r3, r2, [r4]
    if (clamped != value)
 8006278:	e9dd 0100 	ldrd	r0, r1, [sp]
 800627c:	4291      	cmp	r1, r2
 800627e:	bf08      	it	eq
 8006280:	4298      	cmpeq	r0, r3
 8006282:	bf0c      	ite	eq
 8006284:	2001      	moveq	r0, #1
 8006286:	2000      	movne	r0, #0
}
 8006288:	b003      	add	sp, #12
 800628a:	bd30      	pop	{r4, r5, pc}
        clamped = *(uint32_t*)dest = (uint32_t)value;
 800628c:	9b00      	ldr	r3, [sp, #0]
 800628e:	6023      	str	r3, [r4, #0]
 8006290:	2200      	movs	r2, #0
 8006292:	e7f1      	b.n	8006278 <pb_dec_uvarint+0x2a>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 8006294:	9b00      	ldr	r3, [sp, #0]
 8006296:	8023      	strh	r3, [r4, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	e7f9      	b.n	8006290 <pb_dec_uvarint+0x42>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 800629c:	9b00      	ldr	r3, [sp, #0]
 800629e:	7023      	strb	r3, [r4, #0]
 80062a0:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80062a4:	e7f4      	b.n	8006290 <pb_dec_uvarint+0x42>
    if (field->data_size == sizeof(pb_uint64_t))
 80062a6:	2000      	movs	r0, #0
 80062a8:	e7ee      	b.n	8006288 <pb_dec_uvarint+0x3a>

080062aa <pb_dec_varint>:
{
 80062aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062ac:	460d      	mov	r5, r1
    if (!pb_decode_varint(stream, &value))
 80062ae:	4669      	mov	r1, sp
{
 80062b0:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 80062b2:	f7ff ff9f 	bl	80061f4 <pb_decode_varint>
 80062b6:	b130      	cbz	r0, 80062c6 <pb_dec_varint+0x1c>
    if (field->data_size == sizeof(pb_int64_t))
 80062b8:	892b      	ldrh	r3, [r5, #8]
 80062ba:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 80062bc:	e9dd 1200 	ldrd	r1, r2, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 80062c0:	d103      	bne.n	80062ca <pb_dec_varint+0x20>
        clamped = *(pb_int64_t*)dest = svalue;
 80062c2:	e9c4 1200 	strd	r1, r2, [r4]
}
 80062c6:	b003      	add	sp, #12
 80062c8:	bd30      	pop	{r4, r5, pc}
        svalue = (int32_t)value;
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	ea4f 70e1 	mov.w	r0, r1, asr #31
    if (field->data_size == sizeof(pb_int64_t))
 80062d0:	d00f      	beq.n	80062f2 <pb_dec_varint+0x48>
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d003      	beq.n	80062de <pb_dec_varint+0x34>
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d00f      	beq.n	80062fa <pb_dec_varint+0x50>
        svalue = (int32_t)value;
 80062da:	2000      	movs	r0, #0
 80062dc:	e7f3      	b.n	80062c6 <pb_dec_varint+0x1c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 80062de:	6021      	str	r1, [r4, #0]
 80062e0:	460b      	mov	r3, r1
 80062e2:	4602      	mov	r2, r0
    if (clamped != svalue)
 80062e4:	4282      	cmp	r2, r0
 80062e6:	bf08      	it	eq
 80062e8:	428b      	cmpeq	r3, r1
 80062ea:	bf0c      	ite	eq
 80062ec:	2001      	moveq	r0, #1
 80062ee:	2000      	movne	r0, #0
 80062f0:	e7e9      	b.n	80062c6 <pb_dec_varint+0x1c>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 80062f2:	b20b      	sxth	r3, r1
 80062f4:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 80062f6:	17da      	asrs	r2, r3, #31
 80062f8:	e7f4      	b.n	80062e4 <pb_dec_varint+0x3a>
 80062fa:	b24b      	sxtb	r3, r1
 80062fc:	7023      	strb	r3, [r4, #0]
 80062fe:	e7fa      	b.n	80062f6 <pb_dec_varint+0x4c>

08006300 <pb_decode_tag>:
{
 8006300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006302:	461d      	mov	r5, r3
    *eof = false;
 8006304:	2300      	movs	r3, #0
 8006306:	702b      	strb	r3, [r5, #0]
{
 8006308:	460e      	mov	r6, r1
    *wire_type = (pb_wire_type_t) 0;
 800630a:	700b      	strb	r3, [r1, #0]
{
 800630c:	4617      	mov	r7, r2
    *tag = 0;
 800630e:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8006310:	a901      	add	r1, sp, #4
 8006312:	462a      	mov	r2, r5
 8006314:	f7ff fe24 	bl	8005f60 <pb_decode_varint32_eof>
 8006318:	b118      	cbz	r0, 8006322 <pb_decode_tag+0x22>
    if (temp == 0)
 800631a:	9c01      	ldr	r4, [sp, #4]
 800631c:	b924      	cbnz	r4, 8006328 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 800631e:	2301      	movs	r3, #1
 8006320:	702b      	strb	r3, [r5, #0]
        return false;
 8006322:	2000      	movs	r0, #0
}
 8006324:	b003      	add	sp, #12
 8006326:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 8006328:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 800632a:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 800632e:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8006330:	7034      	strb	r4, [r6, #0]
    return true;
 8006332:	e7f7      	b.n	8006324 <pb_decode_tag+0x24>

08006334 <pb_skip_field>:
{
 8006334:	b513      	push	{r0, r1, r4, lr}
 8006336:	4604      	mov	r4, r0
    switch (wire_type)
 8006338:	2905      	cmp	r1, #5
 800633a:	d821      	bhi.n	8006380 <pb_skip_field+0x4c>
 800633c:	e8df f001 	tbb	[pc, r1]
 8006340:	20170f03 	.word	0x20170f03
 8006344:	1e20      	.short	0x1e20
        if (!pb_read(stream, &byte, 1))
 8006346:	2201      	movs	r2, #1
 8006348:	a901      	add	r1, sp, #4
 800634a:	4620      	mov	r0, r4
 800634c:	f7ff febe 	bl	80060cc <pb_read>
 8006350:	b118      	cbz	r0, 800635a <pb_skip_field+0x26>
    } while (byte & 0x80);
 8006352:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	dbf5      	blt.n	8006346 <pb_skip_field+0x12>
}
 800635a:	b002      	add	sp, #8
 800635c:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800635e:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8006360:	2100      	movs	r1, #0
 8006362:	4620      	mov	r0, r4
}
 8006364:	b002      	add	sp, #8
 8006366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800636a:	f7ff beaf 	b.w	80060cc <pb_read>
    if (!pb_decode_varint32(stream, &length))
 800636e:	a901      	add	r1, sp, #4
 8006370:	f7ff fed8 	bl	8006124 <pb_decode_varint32>
 8006374:	2800      	cmp	r0, #0
 8006376:	d0f0      	beq.n	800635a <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8006378:	9a01      	ldr	r2, [sp, #4]
 800637a:	e7f1      	b.n	8006360 <pb_skip_field+0x2c>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800637c:	2204      	movs	r2, #4
 800637e:	e7ef      	b.n	8006360 <pb_skip_field+0x2c>
    switch (wire_type)
 8006380:	2000      	movs	r0, #0
 8006382:	e7ea      	b.n	800635a <pb_skip_field+0x26>

08006384 <pb_make_string_substream>:
{
 8006384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006386:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8006388:	a901      	add	r1, sp, #4
{
 800638a:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 800638c:	f7ff feca 	bl	8006124 <pb_decode_varint32>
 8006390:	4603      	mov	r3, r0
 8006392:	b918      	cbnz	r0, 800639c <pb_make_string_substream+0x18>
        return false;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	b003      	add	sp, #12
 800639a:	bd30      	pop	{r4, r5, pc}
    *substream = *stream;
 800639c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80063a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (substream->bytes_left < size)
 80063a4:	9901      	ldr	r1, [sp, #4]
 80063a6:	428a      	cmp	r2, r1
 80063a8:	d3f4      	bcc.n	8006394 <pb_make_string_substream+0x10>
    substream->bytes_left = size;
 80063aa:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 80063ac:	68a2      	ldr	r2, [r4, #8]
 80063ae:	1a52      	subs	r2, r2, r1
 80063b0:	60a2      	str	r2, [r4, #8]
    return true;
 80063b2:	e7f0      	b.n	8006396 <pb_make_string_substream+0x12>

080063b4 <pb_close_string_substream>:
    if (substream->bytes_left) {
 80063b4:	688a      	ldr	r2, [r1, #8]
{
 80063b6:	b538      	push	{r3, r4, r5, lr}
 80063b8:	4605      	mov	r5, r0
 80063ba:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 80063bc:	b91a      	cbnz	r2, 80063c6 <pb_close_string_substream+0x12>
    stream->state = substream->state;
 80063be:	6863      	ldr	r3, [r4, #4]
 80063c0:	606b      	str	r3, [r5, #4]
    return true;
 80063c2:	2001      	movs	r0, #1
}
 80063c4:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 80063c6:	2100      	movs	r1, #0
 80063c8:	4620      	mov	r0, r4
 80063ca:	f7ff fe7f 	bl	80060cc <pb_read>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d1f5      	bne.n	80063be <pb_close_string_substream+0xa>
 80063d2:	e7f7      	b.n	80063c4 <pb_close_string_substream+0x10>

080063d4 <decode_field>:
{
 80063d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063d8:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 80063da:	6851      	ldr	r1, [r2, #4]
{
 80063dc:	4614      	mov	r4, r2
    switch (PB_ATYPE(iter->pos->type))
 80063de:	788a      	ldrb	r2, [r1, #2]
 80063e0:	f012 0cc0 	ands.w	ip, r2, #192	@ 0xc0
{
 80063e4:	b087      	sub	sp, #28
 80063e6:	4606      	mov	r6, r0
    switch (PB_ATYPE(iter->pos->type))
 80063e8:	d004      	beq.n	80063f4 <decode_field+0x20>
 80063ea:	f1bc 0f40 	cmp.w	ip, #64	@ 0x40
 80063ee:	d06b      	beq.n	80064c8 <decode_field+0xf4>
            return false;
 80063f0:	2500      	movs	r5, #0
 80063f2:	e058      	b.n	80064a6 <decode_field+0xd2>
    func = PB_DECODERS[PB_LTYPE(type)];
 80063f4:	f002 050f 	and.w	r5, r2, #15
 80063f8:	4f5f      	ldr	r7, [pc, #380]	@ (8006578 <decode_field+0x1a4>)
 80063fa:	f002 0230 	and.w	r2, r2, #48	@ 0x30
    switch (PB_HTYPE(type))
 80063fe:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 8006400:	f857 7025 	ldr.w	r7, [r7, r5, lsl #2]
    switch (PB_HTYPE(type))
 8006404:	d023      	beq.n	800644e <decode_field+0x7a>
 8006406:	d806      	bhi.n	8006416 <decode_field+0x42>
 8006408:	b9ca      	cbnz	r2, 800643e <decode_field+0x6a>
            return func(stream, iter->pos, iter->pData);
 800640a:	6922      	ldr	r2, [r4, #16]
            return func(stream, iter->pos, iter->pData);
 800640c:	463b      	mov	r3, r7
}
 800640e:	b007      	add	sp, #28
 8006410:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 8006414:	4718      	bx	r3
    switch (PB_HTYPE(type))
 8006416:	2a30      	cmp	r2, #48	@ 0x30
 8006418:	d1ea      	bne.n	80063f0 <decode_field+0x1c>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 800641a:	6963      	ldr	r3, [r4, #20]
 800641c:	880a      	ldrh	r2, [r1, #0]
 800641e:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8006420:	2d07      	cmp	r5, #7
 8006422:	d109      	bne.n	8006438 <decode_field+0x64>
                memset(iter->pData, 0, iter->pos->data_size);
 8006424:	890a      	ldrh	r2, [r1, #8]
 8006426:	6920      	ldr	r0, [r4, #16]
 8006428:	4661      	mov	r1, ip
 800642a:	f008 f942 	bl	800e6b2 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 800642e:	6863      	ldr	r3, [r4, #4]
 8006430:	6921      	ldr	r1, [r4, #16]
 8006432:	68d8      	ldr	r0, [r3, #12]
 8006434:	f7ff fe38 	bl	80060a8 <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 8006438:	6922      	ldr	r2, [r4, #16]
 800643a:	6861      	ldr	r1, [r4, #4]
 800643c:	e005      	b.n	800644a <decode_field+0x76>
            if (iter->pSize != iter->pData)
 800643e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8006442:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 8006444:	bf1c      	itt	ne
 8006446:	2001      	movne	r0, #1
 8006448:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 800644a:	4630      	mov	r0, r6
 800644c:	e7de      	b.n	800640c <decode_field+0x38>
            if (wire_type == PB_WT_STRING
 800644e:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 8006450:	f8d4 8014 	ldr.w	r8, [r4, #20]
            if (wire_type == PB_WT_STRING
 8006454:	d12b      	bne.n	80064ae <decode_field+0xda>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8006456:	2d04      	cmp	r5, #4
 8006458:	d829      	bhi.n	80064ae <decode_field+0xda>
                if (!pb_make_string_substream(stream, &substream))
 800645a:	a903      	add	r1, sp, #12
 800645c:	f7ff ff92 	bl	8006384 <pb_make_string_substream>
 8006460:	4681      	mov	r9, r0
 8006462:	2800      	cmp	r0, #0
 8006464:	d0c4      	beq.n	80063f0 <decode_field+0x1c>
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 8006466:	9b05      	ldr	r3, [sp, #20]
 8006468:	b19b      	cbz	r3, 8006492 <decode_field+0xbe>
 800646a:	6861      	ldr	r1, [r4, #4]
 800646c:	f8b8 3000 	ldrh.w	r3, [r8]
 8006470:	894a      	ldrh	r2, [r1, #10]
 8006472:	429a      	cmp	r2, r3
 8006474:	d9bc      	bls.n	80063f0 <decode_field+0x1c>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8006476:	8908      	ldrh	r0, [r1, #8]
 8006478:	6922      	ldr	r2, [r4, #16]
                    if (!func(&substream, iter->pos, pItem))
 800647a:	fb03 2200 	mla	r2, r3, r0, r2
 800647e:	a803      	add	r0, sp, #12
 8006480:	47b8      	blx	r7
 8006482:	4605      	mov	r5, r0
 8006484:	b130      	cbz	r0, 8006494 <decode_field+0xc0>
                    (*size)++;
 8006486:	f8b8 3000 	ldrh.w	r3, [r8]
 800648a:	3301      	adds	r3, #1
 800648c:	f8a8 3000 	strh.w	r3, [r8]
 8006490:	e7e9      	b.n	8006466 <decode_field+0x92>
                bool status = true;
 8006492:	464d      	mov	r5, r9
                if (substream.bytes_left != 0)
 8006494:	9b05      	ldr	r3, [sp, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1aa      	bne.n	80063f0 <decode_field+0x1c>
                if (!pb_close_string_substream(stream, &substream))
 800649a:	a903      	add	r1, sp, #12
 800649c:	4630      	mov	r0, r6
 800649e:	f7ff ff89 	bl	80063b4 <pb_close_string_substream>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d0a4      	beq.n	80063f0 <decode_field+0x1c>
}
 80064a6:	4628      	mov	r0, r5
 80064a8:	b007      	add	sp, #28
 80064aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 80064ae:	f8b8 3000 	ldrh.w	r3, [r8]
 80064b2:	6922      	ldr	r2, [r4, #16]
 80064b4:	8908      	ldrh	r0, [r1, #8]
                if ((*size)++ >= iter->pos->array_size)
 80064b6:	1c5c      	adds	r4, r3, #1
 80064b8:	f8a8 4000 	strh.w	r4, [r8]
 80064bc:	894c      	ldrh	r4, [r1, #10]
 80064be:	429c      	cmp	r4, r3
 80064c0:	d996      	bls.n	80063f0 <decode_field+0x1c>
                return func(stream, iter->pos, pItem);
 80064c2:	fb03 2200 	mla	r2, r3, r0, r2
 80064c6:	e7c0      	b.n	800644a <decode_field+0x76>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 80064c8:	6927      	ldr	r7, [r4, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 80064ca:	b10f      	cbz	r7, 80064d0 <decode_field+0xfc>
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	b932      	cbnz	r2, 80064de <decode_field+0x10a>
        return pb_skip_field(stream, wire_type);
 80064d0:	4619      	mov	r1, r3
 80064d2:	4630      	mov	r0, r6
}
 80064d4:	b007      	add	sp, #28
 80064d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 80064da:	f7ff bf2b 	b.w	8006334 <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 80064de:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 80064e0:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 80064e4:	d116      	bne.n	8006514 <decode_field+0x140>
        if (!pb_make_string_substream(stream, &substream))
 80064e6:	a903      	add	r1, sp, #12
 80064e8:	f7ff ff4c 	bl	8006384 <pb_make_string_substream>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f43f af7f 	beq.w	80063f0 <decode_field+0x1c>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6861      	ldr	r1, [r4, #4]
 80064f6:	4642      	mov	r2, r8
 80064f8:	a803      	add	r0, sp, #12
 80064fa:	4798      	blx	r3
 80064fc:	2800      	cmp	r0, #0
 80064fe:	f43f af77 	beq.w	80063f0 <decode_field+0x1c>
        } while (substream.bytes_left);
 8006502:	9b05      	ldr	r3, [sp, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f4      	bne.n	80064f2 <decode_field+0x11e>
        if (!pb_close_string_substream(stream, &substream))
 8006508:	a903      	add	r1, sp, #12
 800650a:	4630      	mov	r0, r6
 800650c:	f7ff ff52 	bl	80063b4 <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8006510:	4605      	mov	r5, r0
 8006512:	e7c8      	b.n	80064a6 <decode_field+0xd2>
    switch (wire_type)
 8006514:	2b01      	cmp	r3, #1
 8006516:	d021      	beq.n	800655c <decode_field+0x188>
 8006518:	2b05      	cmp	r3, #5
 800651a:	d027      	beq.n	800656c <decode_field+0x198>
 800651c:	2b00      	cmp	r3, #0
 800651e:	f47f af67 	bne.w	80063f0 <decode_field+0x1c>
 8006522:	461d      	mov	r5, r3
 8006524:	46e9      	mov	r9, sp
                (*size)++;
 8006526:	3501      	adds	r5, #1
                if (*size > max_size) return false;
 8006528:	2d0b      	cmp	r5, #11
 800652a:	f43f af61 	beq.w	80063f0 <decode_field+0x1c>
                if (!pb_read(stream, buf, 1)) return false;
 800652e:	2201      	movs	r2, #1
 8006530:	4649      	mov	r1, r9
 8006532:	4630      	mov	r0, r6
 8006534:	f7ff fdca 	bl	80060cc <pb_read>
 8006538:	2800      	cmp	r0, #0
 800653a:	f43f af59 	beq.w	80063f0 <decode_field+0x1c>
            } while (*buf++ & 0x80);
 800653e:	f919 3b01 	ldrsb.w	r3, [r9], #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	dbef      	blt.n	8006526 <decode_field+0x152>
        substream = pb_istream_from_buffer(buffer, size);
 8006546:	4b0d      	ldr	r3, [pc, #52]	@ (800657c <decode_field+0x1a8>)
 8006548:	9303      	str	r3, [sp, #12]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800654a:	6861      	ldr	r1, [r4, #4]
 800654c:	683b      	ldr	r3, [r7, #0]
        substream = pb_istream_from_buffer(buffer, size);
 800654e:	f8cd d010 	str.w	sp, [sp, #16]
 8006552:	9505      	str	r5, [sp, #20]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8006554:	4642      	mov	r2, r8
 8006556:	a803      	add	r0, sp, #12
 8006558:	4798      	blx	r3
 800655a:	e7d9      	b.n	8006510 <decode_field+0x13c>
            return pb_read(stream, buf, 8);
 800655c:	2208      	movs	r2, #8
 800655e:	4669      	mov	r1, sp
 8006560:	f7ff fdb4 	bl	80060cc <pb_read>
            *size = 8;
 8006564:	2508      	movs	r5, #8
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8006566:	2800      	cmp	r0, #0
 8006568:	d1ed      	bne.n	8006546 <decode_field+0x172>
 800656a:	e741      	b.n	80063f0 <decode_field+0x1c>
            return pb_read(stream, buf, 4);
 800656c:	2204      	movs	r2, #4
 800656e:	4669      	mov	r1, sp
 8006570:	f7ff fdac 	bl	80060cc <pb_read>
            *size = 4;
 8006574:	2504      	movs	r5, #4
            return pb_read(stream, buf, 4);
 8006576:	e7f6      	b.n	8006566 <decode_field+0x192>
 8006578:	0807f6a8 	.word	0x0807f6a8
 800657c:	08005f25 	.word	0x08005f25

08006580 <pb_decode_noinit>:
{
 8006580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	b091      	sub	sp, #68	@ 0x44
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8006586:	2400      	movs	r4, #0
{
 8006588:	4605      	mov	r5, r0
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800658a:	a804      	add	r0, sp, #16
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800658c:	e9cd 4402 	strd	r4, r4, [sp, #8]
    pb_size_t fixed_count_size = 0;
 8006590:	f8ad 4002 	strh.w	r4, [sp, #2]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8006594:	f7ff fc62 	bl	8005e5c <pb_field_iter_begin>
    uint32_t extension_range_start = 0;
 8006598:	46a0      	mov	r8, r4
    while (stream->bytes_left)
 800659a:	68ab      	ldr	r3, [r5, #8]
 800659c:	bb93      	cbnz	r3, 8006604 <pb_decode_noinit+0x84>
    if (fixed_count_field != NULL &&
 800659e:	b124      	cbz	r4, 80065aa <pb_decode_noinit+0x2a>
 80065a0:	8962      	ldrh	r2, [r4, #10]
 80065a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d138      	bne.n	800661c <pb_decode_noinit+0x9c>
            last_type = iter.pos->type;
 80065aa:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
        } while (pb_field_iter_next(&iter));
 80065ae:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 80065b0:	789d      	ldrb	r5, [r3, #2]
        } while (pb_field_iter_next(&iter));
 80065b2:	f7ff fc64 	bl	8005e7e <pb_field_iter_next>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d1f7      	bne.n	80065aa <pb_decode_noinit+0x2a>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 80065ba:	f015 0f30 	tst.w	r5, #48	@ 0x30
 80065be:	d103      	bne.n	80065c8 <pb_decode_noinit+0x48>
 80065c0:	9b05      	ldr	r3, [sp, #20]
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b103      	cbz	r3, 80065c8 <pb_decode_noinit+0x48>
            req_field_count++;
 80065c6:	3401      	adds	r4, #1
        if (req_field_count > 0)
 80065c8:	2c00      	cmp	r4, #0
 80065ca:	f000 80c6 	beq.w	800675a <pb_decode_noinit+0x1da>
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 80065ce:	2c40      	cmp	r4, #64	@ 0x40
 80065d0:	bf28      	it	cs
 80065d2:	2440      	movcs	r4, #64	@ 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 80065d4:	0963      	lsrs	r3, r4, #5
 80065d6:	a902      	add	r1, sp, #8
 80065d8:	2200      	movs	r2, #0
 80065da:	4293      	cmp	r3, r2
 80065dc:	f040 80b6 	bne.w	800674c <pb_decode_noinit+0x1cc>
            if ((req_field_count & 31) != 0)
 80065e0:	f014 041f 	ands.w	r4, r4, #31
 80065e4:	f000 80b9 	beq.w	800675a <pb_decode_noinit+0x1da>
                if (fields_seen[req_field_count >> 5] !=
 80065e8:	aa10      	add	r2, sp, #64	@ 0x40
 80065ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 80065ee:	f1c4 0420 	rsb	r4, r4, #32
                if (fields_seen[req_field_count >> 5] !=
 80065f2:	f853 3c38 	ldr.w	r3, [r3, #-56]
                    (allbits >> (32 - (req_field_count & 31))))
 80065f6:	f04f 30ff 	mov.w	r0, #4294967295
 80065fa:	40e0      	lsrs	r0, r4
                if (fields_seen[req_field_count >> 5] !=
 80065fc:	1ac3      	subs	r3, r0, r3
 80065fe:	4258      	negs	r0, r3
 8006600:	4158      	adcs	r0, r3
 8006602:	e00c      	b.n	800661e <pb_decode_noinit+0x9e>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8006604:	f10d 0301 	add.w	r3, sp, #1
 8006608:	aa01      	add	r2, sp, #4
 800660a:	4669      	mov	r1, sp
 800660c:	4628      	mov	r0, r5
 800660e:	f7ff fe77 	bl	8006300 <pb_decode_tag>
 8006612:	b938      	cbnz	r0, 8006624 <pb_decode_noinit+0xa4>
            if (eof)
 8006614:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1c0      	bne.n	800659e <pb_decode_noinit+0x1e>
            for (i = 0; i < (req_field_count >> 5); i++)
 800661c:	2000      	movs	r0, #0
}
 800661e:	b011      	add	sp, #68	@ 0x44
 8006620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 8006624:	9f01      	ldr	r7, [sp, #4]
 8006626:	a804      	add	r0, sp, #16
 8006628:	4639      	mov	r1, r7
 800662a:	f7ff fc64 	bl	8005ef6 <pb_field_iter_find>
 800662e:	2800      	cmp	r0, #0
 8006630:	d159      	bne.n	80066e6 <pb_decode_noinit+0x166>
            if (tag >= extension_range_start)
 8006632:	4547      	cmp	r7, r8
 8006634:	d34e      	bcc.n	80066d4 <pb_decode_noinit+0x154>
    const pb_field_t *start = iter->pos;
 8006636:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8006638:	9a05      	ldr	r2, [sp, #20]
 800663a:	7893      	ldrb	r3, [r2, #2]
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	2b08      	cmp	r3, #8
 8006642:	f000 808c 	beq.w	800675e <pb_decode_noinit+0x1de>
        (void)pb_field_iter_next(iter);
 8006646:	a804      	add	r0, sp, #16
 8006648:	f7ff fc19 	bl	8005e7e <pb_field_iter_next>
    } while (iter->pos != start);
 800664c:	9b05      	ldr	r3, [sp, #20]
 800664e:	429e      	cmp	r6, r3
 8006650:	d1f2      	bne.n	8006638 <pb_decode_noinit+0xb8>
                    extension_range_start = (uint32_t)-1;
 8006652:	f04f 38ff 	mov.w	r8, #4294967295
                if (tag >= extension_range_start)
 8006656:	4547      	cmp	r7, r8
                    if (!decode_extension(stream, tag, wire_type, &iter))
 8006658:	f89d a000 	ldrb.w	sl, [sp]
                if (tag >= extension_range_start)
 800665c:	d33a      	bcc.n	80066d4 <pb_decode_noinit+0x154>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 800665e:	9b08      	ldr	r3, [sp, #32]
                    size_t pos = stream->bytes_left;
 8006660:	f8d5 9008 	ldr.w	r9, [r5, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8006664:	681e      	ldr	r6, [r3, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8006666:	68ab      	ldr	r3, [r5, #8]
 8006668:	2e00      	cmp	r6, #0
 800666a:	d030      	beq.n	80066ce <pb_decode_noinit+0x14e>
 800666c:	4599      	cmp	r9, r3
 800666e:	d194      	bne.n	800659a <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 8006670:	6833      	ldr	r3, [r6, #0]
 8006672:	f8d3 b000 	ldr.w	fp, [r3]
 8006676:	f1bb 0f00 	cmp.w	fp, #0
 800667a:	d008      	beq.n	800668e <pb_decode_noinit+0x10e>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800667c:	4653      	mov	r3, sl
 800667e:	463a      	mov	r2, r7
 8006680:	4631      	mov	r1, r6
 8006682:	4628      	mov	r0, r5
 8006684:	47d8      	blx	fp
        if (!status)
 8006686:	2800      	cmp	r0, #0
 8006688:	d0c8      	beq.n	800661c <pb_decode_noinit+0x9c>
        extension = extension->next;
 800668a:	68b6      	ldr	r6, [r6, #8]
 800668c:	e7eb      	b.n	8006666 <pb_decode_noinit+0xe6>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800668e:	f8d3 b008 	ldr.w	fp, [r3, #8]
    if (field->tag != tag)
 8006692:	f8bb 3000 	ldrh.w	r3, [fp]
 8006696:	429f      	cmp	r7, r3
 8006698:	d1f7      	bne.n	800668a <pb_decode_noinit+0x10a>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800669a:	6872      	ldr	r2, [r6, #4]
 800669c:	4659      	mov	r1, fp
 800669e:	a80a      	add	r0, sp, #40	@ 0x28
 80066a0:	f7ff fbdc 	bl	8005e5c <pb_field_iter_begin>
    iter->pData = extension->dest;
 80066a4:	6873      	ldr	r3, [r6, #4]
 80066a6:	930e      	str	r3, [sp, #56]	@ 0x38
    iter->pSize = &extension->found;
 80066a8:	f106 030c 	add.w	r3, r6, #12
 80066ac:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80066ae:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80066b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066b6:	2b80      	cmp	r3, #128	@ 0x80
        iter->pData = &extension->dest;
 80066b8:	bf04      	itt	eq
 80066ba:	1d33      	addeq	r3, r6, #4
 80066bc:	930e      	streq	r3, [sp, #56]	@ 0x38
    extension->found = true;
 80066be:	2301      	movs	r3, #1
 80066c0:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 80066c2:	aa0a      	add	r2, sp, #40	@ 0x28
 80066c4:	4651      	mov	r1, sl
 80066c6:	4628      	mov	r0, r5
 80066c8:	f7ff fe84 	bl	80063d4 <decode_field>
 80066cc:	e7db      	b.n	8006686 <pb_decode_noinit+0x106>
                    if (pos != stream->bytes_left)
 80066ce:	4599      	cmp	r9, r3
 80066d0:	f47f af63 	bne.w	800659a <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 80066d4:	f89d 1000 	ldrb.w	r1, [sp]
 80066d8:	4628      	mov	r0, r5
 80066da:	f7ff fe2b 	bl	8006334 <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 80066de:	2800      	cmp	r0, #0
 80066e0:	f47f af5b 	bne.w	800659a <pb_decode_noinit+0x1a>
 80066e4:	e79a      	b.n	800661c <pb_decode_noinit+0x9c>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 80066e6:	9a05      	ldr	r2, [sp, #20]
 80066e8:	7893      	ldrb	r3, [r2, #2]
 80066ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	d119      	bne.n	8006726 <pb_decode_noinit+0x1a6>
            && iter.pSize == iter.pData)
 80066f2:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 80066f6:	4299      	cmp	r1, r3
 80066f8:	d10e      	bne.n	8006718 <pb_decode_noinit+0x198>
            if (fixed_count_field != iter.pos) {
 80066fa:	42a2      	cmp	r2, r4
 80066fc:	d008      	beq.n	8006710 <pb_decode_noinit+0x190>
                if (fixed_count_field != NULL &&
 80066fe:	b124      	cbz	r4, 800670a <pb_decode_noinit+0x18a>
 8006700:	8961      	ldrh	r1, [r4, #10]
 8006702:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8006706:	4299      	cmp	r1, r3
 8006708:	d188      	bne.n	800661c <pb_decode_noinit+0x9c>
                fixed_count_size = 0;
 800670a:	2300      	movs	r3, #0
 800670c:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 8006710:	f10d 0302 	add.w	r3, sp, #2
 8006714:	9309      	str	r3, [sp, #36]	@ 0x24
 8006716:	4614      	mov	r4, r2
        if (!decode_field(stream, wire_type, &iter))
 8006718:	f89d 1000 	ldrb.w	r1, [sp]
 800671c:	aa04      	add	r2, sp, #16
 800671e:	4628      	mov	r0, r5
 8006720:	f7ff fe58 	bl	80063d4 <decode_field>
 8006724:	e7db      	b.n	80066de <pb_decode_noinit+0x15e>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f6      	bne.n	8006718 <pb_decode_noinit+0x198>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 800672a:	9a06      	ldr	r2, [sp, #24]
 800672c:	2a3f      	cmp	r2, #63	@ 0x3f
 800672e:	d8f3      	bhi.n	8006718 <pb_decode_noinit+0x198>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8006730:	0951      	lsrs	r1, r2, #5
 8006732:	ab10      	add	r3, sp, #64	@ 0x40
 8006734:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8006738:	f002 021f 	and.w	r2, r2, #31
 800673c:	2301      	movs	r3, #1
 800673e:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8006740:	f851 2c38 	ldr.w	r2, [r1, #-56]
 8006744:	4313      	orrs	r3, r2
 8006746:	f841 3c38 	str.w	r3, [r1, #-56]
 800674a:	e7e5      	b.n	8006718 <pb_decode_noinit+0x198>
                if (fields_seen[i] != allbits)
 800674c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006750:	3001      	adds	r0, #1
 8006752:	f47f af63 	bne.w	800661c <pb_decode_noinit+0x9c>
            for (i = 0; i < (req_field_count >> 5); i++)
 8006756:	3201      	adds	r2, #1
 8006758:	e73f      	b.n	80065da <pb_decode_noinit+0x5a>
    return true;
 800675a:	2001      	movs	r0, #1
 800675c:	e75f      	b.n	800661e <pb_decode_noinit+0x9e>
                    extension_range_start = iter.pos->tag;
 800675e:	f8b2 8000 	ldrh.w	r8, [r2]
 8006762:	e778      	b.n	8006656 <pb_decode_noinit+0xd6>

08006764 <pb_decode>:
{
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	460c      	mov	r4, r1
 8006768:	4606      	mov	r6, r0
 800676a:	4615      	mov	r5, r2
    pb_message_set_to_defaults(fields, dest_struct);
 800676c:	4611      	mov	r1, r2
 800676e:	4620      	mov	r0, r4
 8006770:	f7ff fc9a 	bl	80060a8 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8006774:	462a      	mov	r2, r5
 8006776:	4621      	mov	r1, r4
 8006778:	4630      	mov	r0, r6
}
 800677a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 800677e:	f7ff beff 	b.w	8006580 <pb_decode_noinit>

08006782 <pb_dec_submessage>:
{
 8006782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006784:	b085      	sub	sp, #20
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 8006786:	68cf      	ldr	r7, [r1, #12]
{
 8006788:	460c      	mov	r4, r1
    if (!pb_make_string_substream(stream, &substream))
 800678a:	a901      	add	r1, sp, #4
{
 800678c:	4606      	mov	r6, r0
 800678e:	4615      	mov	r5, r2
    if (!pb_make_string_substream(stream, &substream))
 8006790:	f7ff fdf8 	bl	8006384 <pb_make_string_substream>
 8006794:	b918      	cbnz	r0, 800679e <pb_dec_submessage+0x1c>
        return false;
 8006796:	2400      	movs	r4, #0
}
 8006798:	4620      	mov	r0, r4
 800679a:	b005      	add	sp, #20
 800679c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (field->ptr == NULL)
 800679e:	68e3      	ldr	r3, [r4, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0f8      	beq.n	8006796 <pb_dec_submessage+0x14>
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 80067a4:	78a3      	ldrb	r3, [r4, #2]
 80067a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80067aa:	2b20      	cmp	r3, #32
        status = pb_decode(&substream, submsg_fields, dest);
 80067ac:	462a      	mov	r2, r5
 80067ae:	4639      	mov	r1, r7
 80067b0:	a801      	add	r0, sp, #4
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 80067b2:	d109      	bne.n	80067c8 <pb_dec_submessage+0x46>
        status = pb_decode(&substream, submsg_fields, dest);
 80067b4:	f7ff ffd6 	bl	8006764 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 80067b8:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 80067ba:	a901      	add	r1, sp, #4
 80067bc:	4630      	mov	r0, r6
 80067be:	f7ff fdf9 	bl	80063b4 <pb_close_string_substream>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d1e8      	bne.n	8006798 <pb_dec_submessage+0x16>
 80067c6:	e7e6      	b.n	8006796 <pb_dec_submessage+0x14>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 80067c8:	f7ff feda 	bl	8006580 <pb_decode_noinit>
 80067cc:	e7f4      	b.n	80067b8 <pb_dec_submessage+0x36>

080067ce <pb_decode_delimited>:
{
 80067ce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80067d0:	460c      	mov	r4, r1
    if (!pb_make_string_substream(stream, &substream))
 80067d2:	a901      	add	r1, sp, #4
{
 80067d4:	4605      	mov	r5, r0
 80067d6:	4616      	mov	r6, r2
    if (!pb_make_string_substream(stream, &substream))
 80067d8:	f7ff fdd4 	bl	8006384 <pb_make_string_substream>
 80067dc:	b918      	cbnz	r0, 80067e6 <pb_decode_delimited+0x18>
        return false;
 80067de:	2400      	movs	r4, #0
}
 80067e0:	4620      	mov	r0, r4
 80067e2:	b004      	add	sp, #16
 80067e4:	bd70      	pop	{r4, r5, r6, pc}
    status = pb_decode(&substream, fields, dest_struct);
 80067e6:	4621      	mov	r1, r4
 80067e8:	4632      	mov	r2, r6
 80067ea:	a801      	add	r0, sp, #4
 80067ec:	f7ff ffba 	bl	8006764 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 80067f0:	a901      	add	r1, sp, #4
    status = pb_decode(&substream, fields, dest_struct);
 80067f2:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 80067f4:	4628      	mov	r0, r5
 80067f6:	f7ff fddd 	bl	80063b4 <pb_close_string_substream>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d1f0      	bne.n	80067e0 <pb_decode_delimited+0x12>
 80067fe:	e7ee      	b.n	80067de <pb_decode_delimited+0x10>

08006800 <pb_decode_svarint>:
{
 8006800:	b513      	push	{r0, r1, r4, lr}
 8006802:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 8006804:	4669      	mov	r1, sp
 8006806:	f7ff fcf5 	bl	80061f4 <pb_decode_varint>
 800680a:	b160      	cbz	r0, 8006826 <pb_decode_svarint+0x26>
    if (value & 1)
 800680c:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 8006810:	084a      	lsrs	r2, r1, #1
 8006812:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    if (value & 1)
 8006816:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 8006818:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800681c:	bf44      	itt	mi
 800681e:	43d2      	mvnmi	r2, r2
 8006820:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 8006822:	e9c4 2300 	strd	r2, r3, [r4]
}
 8006826:	b002      	add	sp, #8
 8006828:	bd10      	pop	{r4, pc}

0800682a <pb_dec_svarint>:
{
 800682a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800682c:	460d      	mov	r5, r1
    if (!pb_decode_svarint(stream, &value))
 800682e:	4669      	mov	r1, sp
{
 8006830:	4614      	mov	r4, r2
    if (!pb_decode_svarint(stream, &value))
 8006832:	f7ff ffe5 	bl	8006800 <pb_decode_svarint>
 8006836:	b1a8      	cbz	r0, 8006864 <pb_dec_svarint+0x3a>
    if (field->data_size == sizeof(pb_int64_t))
 8006838:	892b      	ldrh	r3, [r5, #8]
 800683a:	3b01      	subs	r3, #1
 800683c:	2b07      	cmp	r3, #7
 800683e:	d81f      	bhi.n	8006880 <pb_dec_svarint+0x56>
 8006840:	e8df f003 	tbb	[pc, r3]
 8006844:	121e161a 	.word	0x121e161a
 8006848:	041e1e1e 	.word	0x041e1e1e
        clamped = *(pb_int64_t*)dest = value;
 800684c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006850:	e9c4 3200 	strd	r3, r2, [r4]
    if (clamped != value)
 8006854:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006858:	4291      	cmp	r1, r2
 800685a:	bf08      	it	eq
 800685c:	4298      	cmpeq	r0, r3
 800685e:	bf0c      	ite	eq
 8006860:	2001      	moveq	r0, #1
 8006862:	2000      	movne	r0, #0
}
 8006864:	b003      	add	sp, #12
 8006866:	bd30      	pop	{r4, r5, pc}
        clamped = *(int32_t*)dest = (int32_t)value;
 8006868:	9b00      	ldr	r3, [sp, #0]
 800686a:	6023      	str	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 800686c:	17da      	asrs	r2, r3, #31
 800686e:	e7f1      	b.n	8006854 <pb_dec_svarint+0x2a>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 8006870:	f9bd 3000 	ldrsh.w	r3, [sp]
 8006874:	8023      	strh	r3, [r4, #0]
 8006876:	e7f9      	b.n	800686c <pb_dec_svarint+0x42>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8006878:	f99d 3000 	ldrsb.w	r3, [sp]
 800687c:	7023      	strb	r3, [r4, #0]
 800687e:	e7f5      	b.n	800686c <pb_dec_svarint+0x42>
    if (field->data_size == sizeof(pb_int64_t))
 8006880:	2000      	movs	r0, #0
 8006882:	e7ef      	b.n	8006864 <pb_dec_svarint+0x3a>

08006884 <pb_decode_fixed32>:
{
 8006884:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 4))
 8006886:	2204      	movs	r2, #4
{
 8006888:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 800688a:	eb0d 0102 	add.w	r1, sp, r2
 800688e:	f7ff fc1d 	bl	80060cc <pb_read>
 8006892:	b108      	cbz	r0, 8006898 <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8006894:	9b01      	ldr	r3, [sp, #4]
 8006896:	6023      	str	r3, [r4, #0]
}
 8006898:	b002      	add	sp, #8
 800689a:	bd10      	pop	{r4, pc}

0800689c <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 800689c:	4611      	mov	r1, r2
 800689e:	f7ff bff1 	b.w	8006884 <pb_decode_fixed32>

080068a2 <pb_decode_fixed64>:
{
 80068a2:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 80068a4:	2208      	movs	r2, #8
{
 80068a6:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 80068a8:	4669      	mov	r1, sp
 80068aa:	f7ff fc0f 	bl	80060cc <pb_read>
 80068ae:	b118      	cbz	r0, 80068b8 <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 80068b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068b4:	e9c4 2300 	strd	r2, r3, [r4]
}
 80068b8:	b002      	add	sp, #8
 80068ba:	bd10      	pop	{r4, pc}

080068bc <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 80068bc:	4611      	mov	r1, r2
 80068be:	f7ff bff0 	b.w	80068a2 <pb_decode_fixed64>

080068c2 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 80068c2:	b510      	push	{r4, lr}
    pb_type_t type = field->type;
 80068c4:	7883      	ldrb	r3, [r0, #2]
{
 80068c6:	4604      	mov	r4, r0
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80068c8:	f013 0030 	ands.w	r0, r3, #48	@ 0x30
{
 80068cc:	b086      	sub	sp, #24
 80068ce:	460a      	mov	r2, r1
    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80068d0:	d010      	beq.n	80068f4 <pb_check_proto3_default_value+0x32>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 80068d2:	2820      	cmp	r0, #32
    const void *pSize = (const char*)pData + field->size_offset;
 80068d4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 80068d8:	d104      	bne.n	80068e4 <pb_check_proto3_default_value+0x22>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 80068da:	5a50      	ldrh	r0, [r2, r1]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 80068dc:	fab0 f080 	clz	r0, r0
 80068e0:	0940      	lsrs	r0, r0, #5
 80068e2:	e007      	b.n	80068f4 <pb_check_proto3_default_value+0x32>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80068e4:	2830      	cmp	r0, #48	@ 0x30
 80068e6:	d0f8      	beq.n	80068da <pb_check_proto3_default_value+0x18>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 80068e8:	2810      	cmp	r0, #16
 80068ea:	d105      	bne.n	80068f8 <pb_check_proto3_default_value+0x36>
 80068ec:	b121      	cbz	r1, 80068f8 <pb_check_proto3_default_value+0x36>
        return *(const bool*)pSize == false;
 80068ee:	5c50      	ldrb	r0, [r2, r1]
 80068f0:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 80068f4:	b006      	add	sp, #24
 80068f6:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80068f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80068fa:	d809      	bhi.n	8006910 <pb_check_proto3_default_value+0x4e>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	3b05      	subs	r3, #5
 8006902:	2b04      	cmp	r3, #4
 8006904:	d804      	bhi.n	8006910 <pb_check_proto3_default_value+0x4e>
 8006906:	e8df f003 	tbb	[pc, r3]
 800690a:	0b09      	.short	0x0b09
 800690c:	030f      	.short	0x030f
 800690e:	0d          	.byte	0x0d
 800690f:	00          	.byte	0x00
 8006910:	8923      	ldrh	r3, [r4, #8]
 8006912:	4413      	add	r3, r2
	    for (i = 0; i < field->data_size; i++)
 8006914:	429a      	cmp	r2, r3
 8006916:	d117      	bne.n	8006948 <pb_check_proto3_default_value+0x86>
	    return true;
 8006918:	2001      	movs	r0, #1
 800691a:	e7eb      	b.n	80068f4 <pb_check_proto3_default_value+0x32>
            return bytes->size == 0;
 800691c:	8810      	ldrh	r0, [r2, #0]
 800691e:	e7dd      	b.n	80068dc <pb_check_proto3_default_value+0x1a>
            return *(const char*)pData == '\0';
 8006920:	7810      	ldrb	r0, [r2, #0]
 8006922:	e7db      	b.n	80068dc <pb_check_proto3_default_value+0x1a>
            return field->data_size == 0;
 8006924:	8920      	ldrh	r0, [r4, #8]
 8006926:	e7d9      	b.n	80068dc <pb_check_proto3_default_value+0x1a>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 8006928:	68e1      	ldr	r1, [r4, #12]
 800692a:	4668      	mov	r0, sp
 800692c:	f7ff fa96 	bl	8005e5c <pb_field_iter_begin>
 8006930:	2800      	cmp	r0, #0
 8006932:	d0f1      	beq.n	8006918 <pb_check_proto3_default_value+0x56>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 8006934:	9904      	ldr	r1, [sp, #16]
 8006936:	9801      	ldr	r0, [sp, #4]
 8006938:	f7ff ffc3 	bl	80068c2 <pb_check_proto3_default_value>
 800693c:	2800      	cmp	r0, #0
 800693e:	d0d9      	beq.n	80068f4 <pb_check_proto3_default_value+0x32>
                } while (pb_field_iter_next(&iter));
 8006940:	4668      	mov	r0, sp
 8006942:	f7ff fa9c 	bl	8005e7e <pb_field_iter_next>
 8006946:	e7f3      	b.n	8006930 <pb_check_proto3_default_value+0x6e>
	        if (p[i] != 0)
 8006948:	f812 1b01 	ldrb.w	r1, [r2], #1
 800694c:	2900      	cmp	r1, #0
 800694e:	d0e1      	beq.n	8006914 <pb_check_proto3_default_value+0x52>
        return false;
 8006950:	2000      	movs	r0, #0
 8006952:	e7cf      	b.n	80068f4 <pb_check_proto3_default_value+0x32>

08006954 <pb_write>:
{
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 8006956:	6806      	ldr	r6, [r0, #0]
        if (stream->bytes_written + count > stream->max_size)
 8006958:	68c3      	ldr	r3, [r0, #12]
{
 800695a:	4604      	mov	r4, r0
 800695c:	4615      	mov	r5, r2
    if (stream->callback != NULL)
 800695e:	b926      	cbnz	r6, 800696a <pb_write+0x16>
    stream->bytes_written += count;
 8006960:	68e3      	ldr	r3, [r4, #12]
 8006962:	442b      	add	r3, r5
 8006964:	60e3      	str	r3, [r4, #12]
    return true;
 8006966:	2001      	movs	r0, #1
}
 8006968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (stream->bytes_written + count > stream->max_size)
 800696a:	6887      	ldr	r7, [r0, #8]
 800696c:	4413      	add	r3, r2
 800696e:	429f      	cmp	r7, r3
 8006970:	d201      	bcs.n	8006976 <pb_write+0x22>
            PB_RETURN_ERROR(stream, "stream full");
 8006972:	2000      	movs	r0, #0
 8006974:	e7f8      	b.n	8006968 <pb_write+0x14>
        if (!stream->callback(stream, buf, count))
 8006976:	47b0      	blx	r6
 8006978:	2800      	cmp	r0, #0
 800697a:	d1f1      	bne.n	8006960 <pb_write+0xc>
 800697c:	e7f9      	b.n	8006972 <pb_write+0x1e>

0800697e <pb_encode_varint>:
  return pb_write(stream, buffer, i);
}
#endif

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800697e:	b5f0      	push	{r4, r5, r6, r7, lr}
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 8006980:	2a80      	cmp	r2, #128	@ 0x80
{
 8006982:	4611      	mov	r1, r2
    if (value <= 0x7F)
 8006984:	f173 0200 	sbcs.w	r2, r3, #0
{
 8006988:	b085      	sub	sp, #20
 800698a:	4604      	mov	r4, r0
    if (value <= 0x7F)
 800698c:	d207      	bcs.n	800699e <pb_encode_varint+0x20>
    {
        pb_byte_t v = (pb_byte_t)value;
 800698e:	f88d 1004 	strb.w	r1, [sp, #4]
        return pb_write(stream, &v, 1);
 8006992:	2201      	movs	r2, #1
 8006994:	a901      	add	r1, sp, #4
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 8006996:	f7ff ffdd 	bl	8006954 <pb_write>
}
 800699a:	b005      	add	sp, #20
 800699c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800699e:	ad01      	add	r5, sp, #4
    size_t i = 0;
 80069a0:	2200      	movs	r2, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 80069a2:	f061 007f 	orn	r0, r1, #127	@ 0x7f
 80069a6:	b2ce      	uxtb	r6, r1
        value >>= 7;
 80069a8:	09c9      	lsrs	r1, r1, #7
 80069aa:	ea41 6143 	orr.w	r1, r1, r3, lsl #25
 80069ae:	09db      	lsrs	r3, r3, #7
    while (value)
 80069b0:	ea51 0703 	orrs.w	r7, r1, r3
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 80069b4:	f805 0b01 	strb.w	r0, [r5], #1
        i++;
 80069b8:	4610      	mov	r0, r2
 80069ba:	f102 0201 	add.w	r2, r2, #1
    while (value)
 80069be:	d1f0      	bne.n	80069a2 <pb_encode_varint+0x24>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 80069c0:	f100 0310 	add.w	r3, r0, #16
 80069c4:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
 80069c6:	a901      	add	r1, sp, #4
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 80069c8:	f803 6c0c 	strb.w	r6, [r3, #-12]
    return pb_write(stream, buffer, i);
 80069cc:	4620      	mov	r0, r4
 80069ce:	e7e2      	b.n	8006996 <pb_encode_varint+0x18>

080069d0 <pb_enc_uvarint>:
#endif
      return pb_encode_varint(stream, (pb_uint64_t)value);
}

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80069d0:	4613      	mov	r3, r2
 80069d2:	890a      	ldrh	r2, [r1, #8]
 80069d4:	3a01      	subs	r2, #1
 80069d6:	2a07      	cmp	r2, #7
 80069d8:	d810      	bhi.n	80069fc <pb_enc_uvarint+0x2c>
 80069da:	e8df f002 	tbb	[pc, r2]
 80069de:	0804      	.short	0x0804
 80069e0:	0f0f0a0f 	.word	0x0f0f0a0f
 80069e4:	0c0f      	.short	0x0c0f
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
        value = *(const uint_least8_t*)src;
 80069e6:	781a      	ldrb	r2, [r3, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
 80069e8:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 80069ea:	f7ff bfc8 	b.w	800697e <pb_encode_varint>
        value = *(const uint_least16_t*)src;
 80069ee:	881a      	ldrh	r2, [r3, #0]
 80069f0:	e7fa      	b.n	80069e8 <pb_enc_uvarint+0x18>
        value = *(const uint32_t*)src;
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	e7f8      	b.n	80069e8 <pb_enc_uvarint+0x18>
        value = *(const pb_uint64_t*)src;
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	e7f6      	b.n	80069ea <pb_enc_uvarint+0x1a>
}
 80069fc:	2000      	movs	r0, #0
 80069fe:	4770      	bx	lr

08006a00 <pb_enc_varint>:
{
 8006a00:	4613      	mov	r3, r2
 8006a02:	890a      	ldrh	r2, [r1, #8]
 8006a04:	3a01      	subs	r2, #1
 8006a06:	2a07      	cmp	r2, #7
 8006a08:	d812      	bhi.n	8006a30 <pb_enc_varint+0x30>
 8006a0a:	e8df f002 	tbb	[pc, r2]
 8006a0e:	0904      	.short	0x0904
 8006a10:	11110c11 	.word	0x11110c11
 8006a14:	0e11      	.short	0x0e11
        value = *(const int_least8_t*)src;
 8006a16:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int_least16_t*)src;
 8006a1a:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 8006a1c:	f7ff bfaf 	b.w	800697e <pb_encode_varint>
        value = *(const int_least16_t*)src;
 8006a20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006a24:	e7f9      	b.n	8006a1a <pb_enc_varint+0x1a>
        value = *(const int32_t*)src;
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	e7f7      	b.n	8006a1a <pb_enc_varint+0x1a>
        value = *(const pb_int64_t*)src;
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	e7f5      	b.n	8006a1c <pb_enc_varint+0x1c>
}
 8006a30:	2000      	movs	r0, #0
 8006a32:	4770      	bx	lr

08006a34 <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 8006a34:	1892      	adds	r2, r2, r2
 8006a36:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
 8006a3a:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
 8006a3e:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
 8006a42:	f7ff bf9c 	b.w	800697e <pb_encode_varint>

08006a46 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8006a46:	4613      	mov	r3, r2
 8006a48:	890a      	ldrh	r2, [r1, #8]
 8006a4a:	3a01      	subs	r2, #1
 8006a4c:	2a07      	cmp	r2, #7
 8006a4e:	d812      	bhi.n	8006a76 <pb_enc_svarint+0x30>
 8006a50:	e8df f002 	tbb	[pc, r2]
 8006a54:	0c110904 	.word	0x0c110904
 8006a58:	0e111111 	.word	0x0e111111
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
        value = *(const int_least8_t*)src;
 8006a5c:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
 8006a60:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 8006a62:	f7ff bfe7 	b.w	8006a34 <pb_encode_svarint>
        value = *(const int_least16_t*)src;
 8006a66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006a6a:	e7f9      	b.n	8006a60 <pb_enc_svarint+0x1a>
        value = *(const int32_t*)src;
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	e7f7      	b.n	8006a60 <pb_enc_svarint+0x1a>
        value = *(const pb_int64_t*)src;
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	e7f5      	b.n	8006a62 <pb_enc_svarint+0x1c>
}
 8006a76:	2000      	movs	r0, #0
 8006a78:	4770      	bx	lr

08006a7a <pb_encode_fixed32>:
{
 8006a7a:	b507      	push	{r0, r1, r2, lr}
    return pb_write(stream, bytes, 4);
 8006a7c:	2204      	movs	r2, #4
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8006a7e:	680b      	ldr	r3, [r1, #0]
 8006a80:	9301      	str	r3, [sp, #4]
    return pb_write(stream, bytes, 4);
 8006a82:	eb0d 0102 	add.w	r1, sp, r2
 8006a86:	f7ff ff65 	bl	8006954 <pb_write>
}
 8006a8a:	b003      	add	sp, #12
 8006a8c:	f85d fb04 	ldr.w	pc, [sp], #4

08006a90 <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 8006a90:	4611      	mov	r1, r2
 8006a92:	f7ff bff2 	b.w	8006a7a <pb_encode_fixed32>

08006a96 <pb_encode_fixed64>:
{
 8006a96:	b507      	push	{r0, r1, r2, lr}
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8006a98:	e9d1 2300 	ldrd	r2, r3, [r1]
 8006a9c:	9200      	str	r2, [sp, #0]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8006a9e:	0a1a      	lsrs	r2, r3, #8
 8006aa0:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8006aa4:	0c1a      	lsrs	r2, r3, #16
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 8006aa6:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8006aaa:	f88d 2006 	strb.w	r2, [sp, #6]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8006aae:	0e1b      	lsrs	r3, r3, #24
    return pb_write(stream, bytes, 8);
 8006ab0:	2208      	movs	r2, #8
 8006ab2:	4669      	mov	r1, sp
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8006ab4:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 8006ab8:	f7ff ff4c 	bl	8006954 <pb_write>
}
 8006abc:	b003      	add	sp, #12
 8006abe:	f85d fb04 	ldr.w	pc, [sp], #4

08006ac2 <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	f7ff bfe7 	b.w	8006a96 <pb_encode_fixed64>

08006ac8 <pb_encode_tag>:
{
 8006ac8:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 8006aca:	0f5b      	lsrs	r3, r3, #29
 8006acc:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 8006ad0:	f7ff bf55 	b.w	800697e <pb_encode_varint>

08006ad4 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 8006ad4:	788a      	ldrb	r2, [r1, #2]
 8006ad6:	f002 020f 	and.w	r2, r2, #15
{
 8006ada:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
 8006adc:	2a09      	cmp	r2, #9
 8006ade:	d810      	bhi.n	8006b02 <pb_encode_tag_for_field+0x2e>
 8006ae0:	e8df f002 	tbb	[pc, r2]
 8006ae4:	0d050505 	.word	0x0d050505
 8006ae8:	0b0b0b09 	.word	0x0b0b0b09
 8006aec:	0b0f      	.short	0x0b0f
            wiretype = PB_WT_VARINT;
 8006aee:	2100      	movs	r1, #0
    return pb_encode_tag(stream, wiretype, field->tag);
 8006af0:	881a      	ldrh	r2, [r3, #0]
 8006af2:	f7ff bfe9 	b.w	8006ac8 <pb_encode_tag>
            wiretype = PB_WT_64BIT;
 8006af6:	2101      	movs	r1, #1
            break;
 8006af8:	e7fa      	b.n	8006af0 <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_STRING;
 8006afa:	2102      	movs	r1, #2
            break;
 8006afc:	e7f8      	b.n	8006af0 <pb_encode_tag_for_field+0x1c>
    switch (PB_LTYPE(field->type))
 8006afe:	2105      	movs	r1, #5
 8006b00:	e7f6      	b.n	8006af0 <pb_encode_tag_for_field+0x1c>
}
 8006b02:	2000      	movs	r0, #0
 8006b04:	4770      	bx	lr
	...

08006b08 <encode_field>:
{
 8006b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0c:	4615      	mov	r5, r2
    switch (PB_ATYPE(field->type))
 8006b0e:	788a      	ldrb	r2, [r1, #2]
 8006b10:	f002 03c0 	and.w	r3, r2, #192	@ 0xc0
 8006b14:	2b40      	cmp	r3, #64	@ 0x40
{
 8006b16:	b086      	sub	sp, #24
 8006b18:	4606      	mov	r6, r0
 8006b1a:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 8006b1c:	f000 80c9 	beq.w	8006cb2 <encode_field+0x1aa>
 8006b20:	0653      	lsls	r3, r2, #25
 8006b22:	d43c      	bmi.n	8006b9e <encode_field+0x96>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 8006b24:	4b66      	ldr	r3, [pc, #408]	@ (8006cc0 <encode_field+0x1b8>)
 8006b26:	f002 010f 	and.w	r1, r2, #15
 8006b2a:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
    if (field->size_offset)
 8006b2e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8006b32:	b1fb      	cbz	r3, 8006b74 <encode_field+0x6c>
        pSize = (const char*)pData + field->size_offset;
 8006b34:	442b      	add	r3, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006b36:	78a2      	ldrb	r2, [r4, #2]
 8006b38:	f002 00c0 	and.w	r0, r2, #192	@ 0xc0
 8006b3c:	2880      	cmp	r0, #128	@ 0x80
 8006b3e:	d105      	bne.n	8006b4c <encode_field+0x44>
        pData = *(const void* const*)pData;
 8006b40:	682d      	ldr	r5, [r5, #0]
        implicit_has = (pData != NULL);
 8006b42:	1e29      	subs	r1, r5, #0
 8006b44:	bf18      	it	ne
 8006b46:	2101      	movne	r1, #1
 8006b48:	f88d 1007 	strb.w	r1, [sp, #7]
    switch (PB_HTYPE(field->type))
 8006b4c:	f002 0130 	and.w	r1, r2, #48	@ 0x30
 8006b50:	2920      	cmp	r1, #32
 8006b52:	d02d      	beq.n	8006bb0 <encode_field+0xa8>
 8006b54:	d820      	bhi.n	8006b98 <encode_field+0x90>
 8006b56:	bb31      	cbnz	r1, 8006ba6 <encode_field+0x9e>
            if (!pData)
 8006b58:	b30d      	cbz	r5, 8006b9e <encode_field+0x96>
                if (!pb_encode_tag_for_field(stream, field))
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f7ff ffb9 	bl	8006ad4 <pb_encode_tag_for_field>
 8006b62:	b1e0      	cbz	r0, 8006b9e <encode_field+0x96>
                if (!func(stream, field, pData))
 8006b64:	462a      	mov	r2, r5
 8006b66:	4621      	mov	r1, r4
 8006b68:	4630      	mov	r0, r6
 8006b6a:	4643      	mov	r3, r8
}
 8006b6c:	b006      	add	sp, #24
 8006b6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (!callback->funcs.encode(stream, field, arg))
 8006b72:	4718      	bx	r3
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8006b74:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8006b78:	2a10      	cmp	r2, #16
 8006b7a:	d10b      	bne.n	8006b94 <encode_field+0x8c>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f7ff fe9f 	bl	80068c2 <pb_check_proto3_default_value>
 8006b84:	f080 0001 	eor.w	r0, r0, #1
 8006b88:	b2c0      	uxtb	r0, r0
        implicit_has = true;
 8006b8a:	f88d 0007 	strb.w	r0, [sp, #7]
    const void *pSize = &implicit_has;
 8006b8e:	f10d 0307 	add.w	r3, sp, #7
 8006b92:	e7d0      	b.n	8006b36 <encode_field+0x2e>
 8006b94:	2001      	movs	r0, #1
 8006b96:	e7f8      	b.n	8006b8a <encode_field+0x82>
    switch (PB_HTYPE(field->type))
 8006b98:	2930      	cmp	r1, #48	@ 0x30
 8006b9a:	f000 8084 	beq.w	8006ca6 <encode_field+0x19e>
    switch (PB_ATYPE(field->type))
 8006b9e:	2000      	movs	r0, #0
}
 8006ba0:	b006      	add	sp, #24
 8006ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (*(const bool*)pSize)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1d6      	bne.n	8006b5a <encode_field+0x52>
    return true;
 8006bac:	2001      	movs	r0, #1
 8006bae:	e7f7      	b.n	8006ba0 <encode_field+0x98>
            if (field->size_offset != 0) {
 8006bb0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8006bb4:	b349      	cbz	r1, 8006c0a <encode_field+0x102>
                count = *(const pb_size_t*)pSize;
 8006bb6:	881f      	ldrh	r7, [r3, #0]
    if (count == 0)
 8006bb8:	2f00      	cmp	r7, #0
 8006bba:	d0f7      	beq.n	8006bac <encode_field+0xa4>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8006bbc:	2880      	cmp	r0, #128	@ 0x80
 8006bbe:	d002      	beq.n	8006bc6 <encode_field+0xbe>
 8006bc0:	8963      	ldrh	r3, [r4, #10]
 8006bc2:	429f      	cmp	r7, r3
 8006bc4:	d8eb      	bhi.n	8006b9e <encode_field+0x96>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8006bc6:	f002 020f 	and.w	r2, r2, #15
 8006bca:	2a04      	cmp	r2, #4
 8006bcc:	d84a      	bhi.n	8006c64 <encode_field+0x15c>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8006bce:	8822      	ldrh	r2, [r4, #0]
 8006bd0:	2102      	movs	r1, #2
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f7ff ff78 	bl	8006ac8 <pb_encode_tag>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d0e0      	beq.n	8006b9e <encode_field+0x96>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8006bdc:	78a3      	ldrb	r3, [r4, #2]
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d113      	bne.n	8006c0e <encode_field+0x106>
            size = 4 * count;
 8006be6:	ea4f 0987 	mov.w	r9, r7, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8006bea:	464a      	mov	r2, r9
 8006bec:	2300      	movs	r3, #0
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f7ff fec5 	bl	800697e <pb_encode_varint>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d0d2      	beq.n	8006b9e <encode_field+0x96>
        if (stream->callback == NULL)
 8006bf8:	6831      	ldr	r1, [r6, #0]
 8006bfa:	bb21      	cbnz	r1, 8006c46 <encode_field+0x13e>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8006bfc:	464a      	mov	r2, r9
 8006bfe:	4630      	mov	r0, r6
}
 8006c00:	b006      	add	sp, #24
 8006c02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8006c06:	f7ff bea5 	b.w	8006954 <pb_write>
                count = field->array_size;
 8006c0a:	8967      	ldrh	r7, [r4, #10]
 8006c0c:	e7d4      	b.n	8006bb8 <encode_field+0xb0>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d102      	bne.n	8006c18 <encode_field+0x110>
            size = 8 * count;
 8006c12:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8006c16:	e7e8      	b.n	8006bea <encode_field+0xe2>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8006c18:	2210      	movs	r2, #16
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	a802      	add	r0, sp, #8
 8006c1e:	f007 fd48 	bl	800e6b2 <memset>
            p = pData;
 8006c22:	46aa      	mov	sl, r5
            for (i = 0; i < count; i++)
 8006c24:	f04f 0900 	mov.w	r9, #0
                if (!func(&sizestream, field, p))
 8006c28:	4652      	mov	r2, sl
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	a802      	add	r0, sp, #8
 8006c2e:	47c0      	blx	r8
 8006c30:	2800      	cmp	r0, #0
 8006c32:	d0b4      	beq.n	8006b9e <encode_field+0x96>
                p = (const char*)p + field->data_size;
 8006c34:	8923      	ldrh	r3, [r4, #8]
            for (i = 0; i < count; i++)
 8006c36:	f109 0901 	add.w	r9, r9, #1
 8006c3a:	454f      	cmp	r7, r9
                p = (const char*)p + field->data_size;
 8006c3c:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 8006c3e:	d8f3      	bhi.n	8006c28 <encode_field+0x120>
            size = sizestream.bytes_written;
 8006c40:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006c44:	e7d1      	b.n	8006bea <encode_field+0xe2>
        for (i = 0; i < count; i++)
 8006c46:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 8006c4a:	462a      	mov	r2, r5
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	4630      	mov	r0, r6
 8006c50:	47c0      	blx	r8
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d0a3      	beq.n	8006b9e <encode_field+0x96>
            p = (const char*)p + field->data_size;
 8006c56:	8923      	ldrh	r3, [r4, #8]
        for (i = 0; i < count; i++)
 8006c58:	f109 0901 	add.w	r9, r9, #1
 8006c5c:	454f      	cmp	r7, r9
            p = (const char*)p + field->data_size;
 8006c5e:	441d      	add	r5, r3
        for (i = 0; i < count; i++)
 8006c60:	d8f3      	bhi.n	8006c4a <encode_field+0x142>
 8006c62:	e7a3      	b.n	8006bac <encode_field+0xa4>
        for (i = 0; i < count; i++)
 8006c64:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f7ff ff32 	bl	8006ad4 <pb_encode_tag_for_field>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d094      	beq.n	8006b9e <encode_field+0x96>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8006c74:	78a3      	ldrb	r3, [r4, #2]
 8006c76:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8006c7a:	2a80      	cmp	r2, #128	@ 0x80
 8006c7c:	d111      	bne.n	8006ca2 <encode_field+0x19a>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d80c      	bhi.n	8006ca2 <encode_field+0x19a>
                if (!func(stream, field, *(const void* const*)p))
 8006c88:	682a      	ldr	r2, [r5, #0]
                if (!func(stream, field, p))
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	47c0      	blx	r8
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d084      	beq.n	8006b9e <encode_field+0x96>
            p = (const char*)p + field->data_size;
 8006c94:	8923      	ldrh	r3, [r4, #8]
        for (i = 0; i < count; i++)
 8006c96:	f109 0901 	add.w	r9, r9, #1
 8006c9a:	454f      	cmp	r7, r9
            p = (const char*)p + field->data_size;
 8006c9c:	441d      	add	r5, r3
        for (i = 0; i < count; i++)
 8006c9e:	d8e3      	bhi.n	8006c68 <encode_field+0x160>
 8006ca0:	e784      	b.n	8006bac <encode_field+0xa4>
                if (!func(stream, field, p))
 8006ca2:	462a      	mov	r2, r5
 8006ca4:	e7f1      	b.n	8006c8a <encode_field+0x182>
            if (*(const pb_size_t*)pSize == field->tag)
 8006ca6:	881a      	ldrh	r2, [r3, #0]
 8006ca8:	8823      	ldrh	r3, [r4, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	f47f af7e 	bne.w	8006bac <encode_field+0xa4>
 8006cb0:	e753      	b.n	8006b5a <encode_field+0x52>
    if (callback->funcs.encode != NULL)
 8006cb2:	682b      	ldr	r3, [r5, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f43f af79 	beq.w	8006bac <encode_field+0xa4>
        if (!callback->funcs.encode(stream, field, arg))
 8006cba:	1d2a      	adds	r2, r5, #4
 8006cbc:	e756      	b.n	8006b6c <encode_field+0x64>
 8006cbe:	bf00      	nop
 8006cc0:	0807f6d0 	.word	0x0807f6d0

08006cc4 <pb_encode>:
{
 8006cc4:	b530      	push	{r4, r5, lr}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 8006cca:	4668      	mov	r0, sp
 8006ccc:	f7ff f8c6 	bl	8005e5c <pb_field_iter_begin>
 8006cd0:	b910      	cbnz	r0, 8006cd8 <pb_encode+0x14>
        return true; /* Empty message type */
 8006cd2:	2001      	movs	r0, #1
}
 8006cd4:	b007      	add	sp, #28
 8006cd6:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8006cd8:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 8006cda:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8006cdc:	788b      	ldrb	r3, [r1, #2]
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	2b08      	cmp	r3, #8
 8006ce4:	d11c      	bne.n	8006d20 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 8006ce6:	6814      	ldr	r4, [r2, #0]
    while (extension)
 8006ce8:	b91c      	cbnz	r4, 8006cf2 <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 8006cea:	4668      	mov	r0, sp
 8006cec:	f7ff f8c7 	bl	8005e7e <pb_field_iter_next>
 8006cf0:	e7ee      	b.n	8006cd0 <pb_encode+0xc>
        if (extension->type->encode)
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	b12a      	cbz	r2, 8006d04 <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	4790      	blx	r2
        if (!status)
 8006cfe:	b968      	cbnz	r0, 8006d1c <pb_encode+0x58>
                return false;
 8006d00:	2000      	movs	r0, #0
 8006d02:	e7e7      	b.n	8006cd4 <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8006d04:	6899      	ldr	r1, [r3, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006d06:	788b      	ldrb	r3, [r1, #2]
 8006d08:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d0c:	2b80      	cmp	r3, #128	@ 0x80
        return encode_field(stream, field, extension->dest);
 8006d0e:	bf14      	ite	ne
 8006d10:	6862      	ldrne	r2, [r4, #4]
        return encode_field(stream, field, &extension->dest);
 8006d12:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 8006d14:	4628      	mov	r0, r5
 8006d16:	f7ff fef7 	bl	8006b08 <encode_field>
 8006d1a:	e7f0      	b.n	8006cfe <pb_encode+0x3a>
        extension = extension->next;
 8006d1c:	68a4      	ldr	r4, [r4, #8]
 8006d1e:	e7e3      	b.n	8006ce8 <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 8006d20:	4628      	mov	r0, r5
 8006d22:	f7ff fef1 	bl	8006b08 <encode_field>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d1df      	bne.n	8006cea <pb_encode+0x26>
 8006d2a:	e7e9      	b.n	8006d00 <pb_encode+0x3c>

08006d2c <pb_encode_string>:
{
 8006d2c:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8006d2e:	2300      	movs	r3, #0
{
 8006d30:	4604      	mov	r4, r0
 8006d32:	460d      	mov	r5, r1
 8006d34:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8006d36:	f7ff fe22 	bl	800697e <pb_encode_varint>
 8006d3a:	b130      	cbz	r0, 8006d4a <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
 8006d3c:	4632      	mov	r2, r6
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4620      	mov	r0, r4
}
 8006d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
 8006d46:	f7ff be05 	b.w	8006954 <pb_write>
}
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}

08006d4c <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8006d4c:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 8006d4e:	890a      	ldrh	r2, [r1, #8]
 8006d50:	4619      	mov	r1, r3
 8006d52:	f7ff bfeb 	b.w	8006d2c <pb_encode_string>

08006d56 <pb_enc_string>:
{
 8006d56:	b410      	push	{r4}
    size_t max_size = field->data_size;
 8006d58:	890b      	ldrh	r3, [r1, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006d5a:	7889      	ldrb	r1, [r1, #2]
 8006d5c:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
    size_t max_size = field->data_size;
 8006d60:	2980      	cmp	r1, #128	@ 0x80
 8006d62:	bf08      	it	eq
 8006d64:	f04f 33ff 	moveq.w	r3, #4294967295
    if (src == NULL)
 8006d68:	4611      	mov	r1, r2
 8006d6a:	b122      	cbz	r2, 8006d76 <pb_enc_string+0x20>
    size_t size = 0;
 8006d6c:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d001      	beq.n	8006d76 <pb_enc_string+0x20>
 8006d72:	5c8c      	ldrb	r4, [r1, r2]
 8006d74:	b91c      	cbnz	r4, 8006d7e <pb_enc_string+0x28>
}
 8006d76:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 8006d7a:	f7ff bfd7 	b.w	8006d2c <pb_encode_string>
            size++;
 8006d7e:	3201      	adds	r2, #1
            p++;
 8006d80:	e7f5      	b.n	8006d6e <pb_enc_string+0x18>

08006d82 <pb_enc_bytes>:
{
 8006d82:	b430      	push	{r4, r5}
 8006d84:	460b      	mov	r3, r1
 8006d86:	4604      	mov	r4, r0
    if (src == NULL)
 8006d88:	4611      	mov	r1, r2
 8006d8a:	b912      	cbnz	r2, 8006d92 <pb_enc_bytes+0x10>
}
 8006d8c:	bc30      	pop	{r4, r5}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8006d8e:	f7ff bfcd 	b.w	8006d2c <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8006d92:	7898      	ldrb	r0, [r3, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8006d94:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8006d96:	283f      	cmp	r0, #63	@ 0x3f
 8006d98:	d803      	bhi.n	8006da2 <pb_enc_bytes+0x20>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8006d9a:	891d      	ldrh	r5, [r3, #8]
 8006d9c:	1c90      	adds	r0, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8006d9e:	42a8      	cmp	r0, r5
 8006da0:	d802      	bhi.n	8006da8 <pb_enc_bytes+0x26>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8006da2:	3102      	adds	r1, #2
 8006da4:	4620      	mov	r0, r4
 8006da6:	e7f1      	b.n	8006d8c <pb_enc_bytes+0xa>
}
 8006da8:	2000      	movs	r0, #0
 8006daa:	bc30      	pop	{r4, r5}
 8006dac:	4770      	bx	lr

08006dae <pb_encode_submessage>:
{
 8006dae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006db2:	460e      	mov	r6, r1
 8006db4:	4617      	mov	r7, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8006db6:	2100      	movs	r1, #0
 8006db8:	2210      	movs	r2, #16
{
 8006dba:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8006dbc:	4668      	mov	r0, sp
 8006dbe:	f007 fc78 	bl	800e6b2 <memset>
    if (!pb_encode(&substream, fields, src_struct))
 8006dc2:	463a      	mov	r2, r7
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4668      	mov	r0, sp
 8006dc8:	f7ff ff7c 	bl	8006cc4 <pb_encode>
 8006dcc:	b918      	cbnz	r0, 8006dd6 <pb_encode_submessage+0x28>
        return false;
 8006dce:	2000      	movs	r0, #0
}
 8006dd0:	b004      	add	sp, #16
 8006dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size = substream.bytes_written;
 8006dd6:	9d03      	ldr	r5, [sp, #12]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8006dd8:	f04f 0800 	mov.w	r8, #0
 8006ddc:	462a      	mov	r2, r5
 8006dde:	4643      	mov	r3, r8
 8006de0:	4620      	mov	r0, r4
 8006de2:	f7ff fdcc 	bl	800697e <pb_encode_varint>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d0f1      	beq.n	8006dce <pb_encode_submessage+0x20>
    if (stream->callback == NULL)
 8006dea:	6821      	ldr	r1, [r4, #0]
 8006dec:	b921      	cbnz	r1, 8006df8 <pb_encode_submessage+0x4a>
        return pb_write(stream, NULL, size); /* Just sizing */
 8006dee:	462a      	mov	r2, r5
 8006df0:	4620      	mov	r0, r4
 8006df2:	f7ff fdaf 	bl	8006954 <pb_write>
 8006df6:	e7eb      	b.n	8006dd0 <pb_encode_submessage+0x22>
    if (stream->bytes_written + size > stream->max_size)
 8006df8:	68e2      	ldr	r2, [r4, #12]
 8006dfa:	68a3      	ldr	r3, [r4, #8]
 8006dfc:	442a      	add	r2, r5
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d8e5      	bhi.n	8006dce <pb_encode_submessage+0x20>
    substream.state = stream->state;
 8006e02:	6863      	ldr	r3, [r4, #4]
    substream.callback = stream->callback;
 8006e04:	9100      	str	r1, [sp, #0]
    status = pb_encode(&substream, fields, src_struct);
 8006e06:	463a      	mov	r2, r7
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4668      	mov	r0, sp
    substream.max_size = size;
 8006e0c:	e9cd 3501 	strd	r3, r5, [sp, #4]
    substream.bytes_written = 0;
 8006e10:	f8cd 800c 	str.w	r8, [sp, #12]
    status = pb_encode(&substream, fields, src_struct);
 8006e14:	f7ff ff56 	bl	8006cc4 <pb_encode>
    stream->bytes_written += substream.bytes_written;
 8006e18:	9a03      	ldr	r2, [sp, #12]
 8006e1a:	68e3      	ldr	r3, [r4, #12]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	60e3      	str	r3, [r4, #12]
    if (substream.bytes_written != size)
 8006e20:	42aa      	cmp	r2, r5
    stream->state = substream.state;
 8006e22:	9b01      	ldr	r3, [sp, #4]
 8006e24:	6063      	str	r3, [r4, #4]
    if (substream.bytes_written != size)
 8006e26:	d1d2      	bne.n	8006dce <pb_encode_submessage+0x20>
 8006e28:	e7d2      	b.n	8006dd0 <pb_encode_submessage+0x22>

08006e2a <pb_enc_submessage>:
    if (field->ptr == NULL)
 8006e2a:	68c9      	ldr	r1, [r1, #12]
 8006e2c:	b109      	cbz	r1, 8006e32 <pb_enc_submessage+0x8>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 8006e2e:	f7ff bfbe 	b.w	8006dae <pb_encode_submessage>
}
 8006e32:	4608      	mov	r0, r1
 8006e34:	4770      	bx	lr
	...

08006e38 <stai_runtime_get_info>:
 8006e38:	b170      	cbz	r0, 8006e58 <stai_runtime_get_info+0x20>
 8006e3a:	b410      	push	{r4}
 8006e3c:	4c08      	ldr	r4, [pc, #32]	@ (8006e60 <stai_runtime_get_info+0x28>)
 8006e3e:	4684      	mov	ip, r0
 8006e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006e4a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006e4e:	2300      	movs	r3, #0
 8006e50:	4618      	mov	r0, r3
 8006e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	4b02      	ldr	r3, [pc, #8]	@ (8006e64 <stai_runtime_get_info+0x2c>)
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	0807fc10 	.word	0x0807fc10
 8006e64:	00020001 	.word	0x00020001

08006e68 <ai_version_get>:
 8006e68:	0212      	lsls	r2, r2, #8
 8006e6a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006e6e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8006e72:	4770      	bx	lr

08006e74 <ai_platform_version_get>:
 8006e74:	0e02      	lsrs	r2, r0, #24
 8006e76:	2300      	movs	r3, #0
 8006e78:	f362 0307 	bfi	r3, r2, #0, #8
 8006e7c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8006e80:	f362 230f 	bfi	r3, r2, #8, #8
 8006e84:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8006e88:	f360 4317 	bfi	r3, r0, #16, #8
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 8006e92:	b002      	add	sp, #8
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop

08006e98 <get_tensor_size>:
 8006e98:	b111      	cbz	r1, 8006ea0 <get_tensor_size+0x8>
 8006e9a:	6983      	ldr	r3, [r0, #24]
 8006e9c:	6858      	ldr	r0, [r3, #4]
 8006e9e:	4770      	bx	lr
 8006ea0:	6883      	ldr	r3, [r0, #8]
 8006ea2:	0a1b      	lsrs	r3, r3, #8
 8006ea4:	d00a      	beq.n	8006ebc <get_tensor_size+0x24>
 8006ea6:	68c1      	ldr	r1, [r0, #12]
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006eae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006eb2:	4299      	cmp	r1, r3
 8006eb4:	fb02 f000 	mul.w	r0, r2, r0
 8006eb8:	d1f9      	bne.n	8006eae <get_tensor_size+0x16>
 8006eba:	4770      	bx	lr
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	4770      	bx	lr

08006ec0 <get_tensor_byte_size>:
 8006ec0:	b410      	push	{r4}
 8006ec2:	6983      	ldr	r3, [r0, #24]
 8006ec4:	68c4      	ldr	r4, [r0, #12]
 8006ec6:	6941      	ldr	r1, [r0, #20]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68e0      	ldr	r0, [r4, #12]
 8006ecc:	4a07      	ldr	r2, [pc, #28]	@ (8006eec <get_tensor_byte_size+0x2c>)
 8006ece:	68c9      	ldr	r1, [r1, #12]
 8006ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ed4:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8006ed8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006edc:	fb01 f000 	mul.w	r0, r1, r0
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	bf04      	itt	eq
 8006ee4:	3007      	addeq	r0, #7
 8006ee6:	08c0      	lsreq	r0, r0, #3
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	000400c0 	.word	0x000400c0

08006ef0 <ai_buffer_get_size>:
 8006ef0:	b360      	cbz	r0, 8006f4c <ai_buffer_get_size+0x5c>
 8006ef2:	b430      	push	{r4, r5}
 8006ef4:	6803      	ldr	r3, [r0, #0]
 8006ef6:	4d16      	ldr	r5, [pc, #88]	@ (8006f50 <ai_buffer_get_size+0x60>)
 8006ef8:	6984      	ldr	r4, [r0, #24]
 8006efa:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8006efe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006f02:	42ab      	cmp	r3, r5
 8006f04:	6862      	ldr	r2, [r4, #4]
 8006f06:	d01b      	beq.n	8006f40 <ai_buffer_get_size+0x50>
 8006f08:	7d03      	ldrb	r3, [r0, #20]
 8006f0a:	6941      	ldr	r1, [r0, #20]
 8006f0c:	f1a3 0301 	sub.w	r3, r3, #1
 8006f10:	fab3 f383 	clz	r3, r3
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8006f1a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8006f1e:	da0b      	bge.n	8006f38 <ai_buffer_get_size+0x48>
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d102      	bne.n	8006f2a <ai_buffer_get_size+0x3a>
 8006f24:	2802      	cmp	r0, #2
 8006f26:	d007      	beq.n	8006f38 <ai_buffer_get_size+0x48>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	4298      	cmp	r0, r3
 8006f32:	fb01 f202 	mul.w	r2, r1, r2
 8006f36:	d1f3      	bne.n	8006f20 <ai_buffer_get_size+0x30>
 8006f38:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006f3c:	bc30      	pop	{r4, r5}
 8006f3e:	4770      	bx	lr
 8006f40:	2900      	cmp	r1, #0
 8006f42:	d0e1      	beq.n	8006f08 <ai_buffer_get_size+0x18>
 8006f44:	321f      	adds	r2, #31
 8006f46:	f022 021f 	bic.w	r2, r2, #31
 8006f4a:	e7dd      	b.n	8006f08 <ai_buffer_get_size+0x18>
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	000400c0 	.word	0x000400c0

08006f54 <ai_buffer_get_byte_size>:
 8006f54:	b128      	cbz	r0, 8006f62 <ai_buffer_get_byte_size+0xe>
 8006f56:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8006f5a:	fb01 f000 	mul.w	r0, r1, r0
 8006f5e:	3007      	adds	r0, #7
 8006f60:	08c0      	lsrs	r0, r0, #3
 8006f62:	4770      	bx	lr

08006f64 <ai_buffer_array_sane>:
 8006f64:	b138      	cbz	r0, 8006f76 <ai_buffer_array_sane+0x12>
 8006f66:	6843      	ldr	r3, [r0, #4]
 8006f68:	b123      	cbz	r3, 8006f74 <ai_buffer_array_sane+0x10>
 8006f6a:	8840      	ldrh	r0, [r0, #2]
 8006f6c:	3800      	subs	r0, #0
 8006f6e:	bf18      	it	ne
 8006f70:	2001      	movne	r0, #1
 8006f72:	4770      	bx	lr
 8006f74:	4618      	mov	r0, r3
 8006f76:	4770      	bx	lr

08006f78 <ai_buffer_array_item_set_address>:
 8006f78:	b158      	cbz	r0, 8006f92 <ai_buffer_array_item_set_address+0x1a>
 8006f7a:	6843      	ldr	r3, [r0, #4]
 8006f7c:	b143      	cbz	r3, 8006f90 <ai_buffer_array_item_set_address+0x18>
 8006f7e:	8840      	ldrh	r0, [r0, #2]
 8006f80:	b138      	cbz	r0, 8006f92 <ai_buffer_array_item_set_address+0x1a>
 8006f82:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006f86:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	605a      	str	r2, [r3, #4]
 8006f8e:	4770      	bx	lr
 8006f90:	4618      	mov	r0, r3
 8006f92:	4770      	bx	lr

08006f94 <_platform_observer_node_exec_cb>:
 8006f94:	2a00      	cmp	r2, #0
 8006f96:	d060      	beq.n	800705a <_platform_observer_node_exec_cb+0xc6>
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	6816      	ldr	r6, [r2, #0]
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	4614      	mov	r4, r2
 8006fa0:	2e00      	cmp	r6, #0
 8006fa2:	d05c      	beq.n	800705e <_platform_observer_node_exec_cb+0xca>
 8006fa4:	8993      	ldrh	r3, [r2, #12]
 8006fa6:	89d2      	ldrh	r2, [r2, #14]
 8006fa8:	fab3 fc83 	clz	ip, r3
 8006fac:	3a01      	subs	r2, #1
 8006fae:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8006fb2:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	460d      	mov	r5, r1
 8006fba:	bf08      	it	eq
 8006fbc:	f44c 7c00 	orreq.w	ip, ip, #512	@ 0x200
 8006fc0:	b300      	cbz	r0, 8007004 <_platform_observer_node_exec_cb+0x70>
 8006fc2:	2801      	cmp	r0, #1
 8006fc4:	d04e      	beq.n	8007064 <_platform_observer_node_exec_cb+0xd0>
 8006fc6:	2802      	cmp	r0, #2
 8006fc8:	d031      	beq.n	800702e <_platform_observer_node_exec_cb+0x9a>
 8006fca:	2803      	cmp	r0, #3
 8006fcc:	d117      	bne.n	8006ffe <_platform_observer_node_exec_cb+0x6a>
 8006fce:	68a2      	ldr	r2, [r4, #8]
 8006fd0:	0752      	lsls	r2, r2, #29
 8006fd2:	d512      	bpl.n	8006ffa <_platform_observer_node_exec_cb+0x66>
 8006fd4:	6922      	ldr	r2, [r4, #16]
 8006fd6:	f8ad 3000 	strh.w	r3, [sp]
 8006fda:	8853      	ldrh	r3, [r2, #2]
 8006fdc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006fe0:	8813      	ldrh	r3, [r2, #0]
 8006fe2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8006fe6:	6992      	ldr	r2, [r2, #24]
 8006fe8:	6860      	ldr	r0, [r4, #4]
 8006fea:	2300      	movs	r3, #0
 8006fec:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8006ff0:	f04c 0104 	orr.w	r1, ip, #4
 8006ff4:	466a      	mov	r2, sp
 8006ff6:	47b0      	blx	r6
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	81a3      	strh	r3, [r4, #12]
 8006ffe:	2000      	movs	r0, #0
 8007000:	b004      	add	sp, #16
 8007002:	bd70      	pop	{r4, r5, r6, pc}
 8007004:	68a2      	ldr	r2, [r4, #8]
 8007006:	07d2      	lsls	r2, r2, #31
 8007008:	d5f7      	bpl.n	8006ffa <_platform_observer_node_exec_cb+0x66>
 800700a:	f8ad 3000 	strh.w	r3, [sp]
 800700e:	886b      	ldrh	r3, [r5, #2]
 8007010:	f8ad 3004 	strh.w	r3, [sp, #4]
 8007014:	882b      	ldrh	r3, [r5, #0]
 8007016:	f8ad 3002 	strh.w	r3, [sp, #2]
 800701a:	69ab      	ldr	r3, [r5, #24]
 800701c:	9002      	str	r0, [sp, #8]
 800701e:	9303      	str	r3, [sp, #12]
 8007020:	6860      	ldr	r0, [r4, #4]
 8007022:	466a      	mov	r2, sp
 8007024:	f04c 0101 	orr.w	r1, ip, #1
 8007028:	47b0      	blx	r6
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	e7e5      	b.n	8006ffa <_platform_observer_node_exec_cb+0x66>
 800702e:	68a2      	ldr	r2, [r4, #8]
 8007030:	6121      	str	r1, [r4, #16]
 8007032:	0791      	lsls	r1, r2, #30
 8007034:	d5e3      	bpl.n	8006ffe <_platform_observer_node_exec_cb+0x6a>
 8007036:	f8ad 3000 	strh.w	r3, [sp]
 800703a:	886b      	ldrh	r3, [r5, #2]
 800703c:	69aa      	ldr	r2, [r5, #24]
 800703e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8007042:	882b      	ldrh	r3, [r5, #0]
 8007044:	f8ad 3002 	strh.w	r3, [sp, #2]
 8007048:	2300      	movs	r3, #0
 800704a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800704e:	6860      	ldr	r0, [r4, #4]
 8007050:	466a      	mov	r2, sp
 8007052:	f04c 0102 	orr.w	r1, ip, #2
 8007056:	47b0      	blx	r6
 8007058:	e7d1      	b.n	8006ffe <_platform_observer_node_exec_cb+0x6a>
 800705a:	2001      	movs	r0, #1
 800705c:	4770      	bx	lr
 800705e:	2001      	movs	r0, #1
 8007060:	b004      	add	sp, #16
 8007062:	bd70      	pop	{r4, r5, r6, pc}
 8007064:	2300      	movs	r3, #0
 8007066:	6121      	str	r1, [r4, #16]
 8007068:	81a3      	strh	r3, [r4, #12]
 800706a:	e7c8      	b.n	8006ffe <_platform_observer_node_exec_cb+0x6a>

0800706c <ai_platform_get_weights_map>:
 800706c:	b1f2      	cbz	r2, 80070ac <ai_platform_get_weights_map+0x40>
 800706e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007070:	4605      	mov	r5, r0
 8007072:	b1c8      	cbz	r0, 80070a8 <ai_platform_get_weights_map+0x3c>
 8007074:	460c      	mov	r4, r1
 8007076:	b1b9      	cbz	r1, 80070a8 <ai_platform_get_weights_map+0x3c>
 8007078:	4b24      	ldr	r3, [pc, #144]	@ (800710c <ai_platform_get_weights_map+0xa0>)
 800707a:	6811      	ldr	r1, [r2, #0]
 800707c:	4299      	cmp	r1, r3
 800707e:	4616      	mov	r6, r2
 8007080:	d00b      	beq.n	800709a <ai_platform_get_weights_map+0x2e>
 8007082:	6856      	ldr	r6, [r2, #4]
 8007084:	b186      	cbz	r6, 80070a8 <ai_platform_get_weights_map+0x3c>
 8007086:	6837      	ldr	r7, [r6, #0]
 8007088:	429f      	cmp	r7, r3
 800708a:	d011      	beq.n	80070b0 <ai_platform_get_weights_map+0x44>
 800708c:	6006      	str	r6, [r0, #0]
 800708e:	f1a4 0001 	sub.w	r0, r4, #1
 8007092:	fab0 f080 	clz	r0, r0
 8007096:	0940      	lsrs	r0, r0, #5
 8007098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800709a:	1d10      	adds	r0, r2, #4
 800709c:	f7ff ff62 	bl	8006f64 <ai_buffer_array_sane>
 80070a0:	b110      	cbz	r0, 80070a8 <ai_platform_get_weights_map+0x3c>
 80070a2:	88f3      	ldrh	r3, [r6, #6]
 80070a4:	429c      	cmp	r4, r3
 80070a6:	d01b      	beq.n	80070e0 <ai_platform_get_weights_map+0x74>
 80070a8:	2000      	movs	r0, #0
 80070aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ac:	2000      	movs	r0, #0
 80070ae:	4770      	bx	lr
 80070b0:	4631      	mov	r1, r6
 80070b2:	3804      	subs	r0, #4
 80070b4:	2300      	movs	r3, #0
 80070b6:	e004      	b.n	80070c2 <ai_platform_get_weights_map+0x56>
 80070b8:	3301      	adds	r3, #1
 80070ba:	429c      	cmp	r4, r3
 80070bc:	f840 2f04 	str.w	r2, [r0, #4]!
 80070c0:	d005      	beq.n	80070ce <ai_platform_get_weights_map+0x62>
 80070c2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80070c6:	42ba      	cmp	r2, r7
 80070c8:	d1f6      	bne.n	80070b8 <ai_platform_get_weights_map+0x4c>
 80070ca:	429c      	cmp	r4, r3
 80070cc:	d1ec      	bne.n	80070a8 <ai_platform_get_weights_map+0x3c>
 80070ce:	3401      	adds	r4, #1
 80070d0:	4b0e      	ldr	r3, [pc, #56]	@ (800710c <ai_platform_get_weights_map+0xa0>)
 80070d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80070d6:	1ac0      	subs	r0, r0, r3
 80070d8:	fab0 f080 	clz	r0, r0
 80070dc:	0940      	lsrs	r0, r0, #5
 80070de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e0:	2100      	movs	r1, #0
 80070e2:	1f28      	subs	r0, r5, #4
 80070e4:	468c      	mov	ip, r1
 80070e6:	e005      	b.n	80070f4 <ai_platform_get_weights_map+0x88>
 80070e8:	f10c 0c01 	add.w	ip, ip, #1
 80070ec:	4564      	cmp	r4, ip
 80070ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80070f2:	d005      	beq.n	8007100 <ai_platform_get_weights_map+0x94>
 80070f4:	68b3      	ldr	r3, [r6, #8]
 80070f6:	440b      	add	r3, r1
 80070f8:	311c      	adds	r1, #28
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1f3      	bne.n	80070e8 <ai_platform_get_weights_map+0x7c>
 8007100:	eba4 000c 	sub.w	r0, r4, ip
 8007104:	fab0 f080 	clz	r0, r0
 8007108:	0940      	lsrs	r0, r0, #5
 800710a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800710c:	a1facade 	.word	0xa1facade

08007110 <ai_platform_get_activations_map>:
 8007110:	b1fa      	cbz	r2, 8007152 <ai_platform_get_activations_map+0x42>
 8007112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007114:	4605      	mov	r5, r0
 8007116:	b1d0      	cbz	r0, 800714e <ai_platform_get_activations_map+0x3e>
 8007118:	460c      	mov	r4, r1
 800711a:	b1c1      	cbz	r1, 800714e <ai_platform_get_activations_map+0x3e>
 800711c:	4b25      	ldr	r3, [pc, #148]	@ (80071b4 <ai_platform_get_activations_map+0xa4>)
 800711e:	6811      	ldr	r1, [r2, #0]
 8007120:	4299      	cmp	r1, r3
 8007122:	4616      	mov	r6, r2
 8007124:	d00b      	beq.n	800713e <ai_platform_get_activations_map+0x2e>
 8007126:	6a16      	ldr	r6, [r2, #32]
 8007128:	b18e      	cbz	r6, 800714e <ai_platform_get_activations_map+0x3e>
 800712a:	6837      	ldr	r7, [r6, #0]
 800712c:	429f      	cmp	r7, r3
 800712e:	d012      	beq.n	8007156 <ai_platform_get_activations_map+0x46>
 8007130:	6006      	str	r6, [r0, #0]
 8007132:	f1a4 0001 	sub.w	r0, r4, #1
 8007136:	fab0 f080 	clz	r0, r0
 800713a:	0940      	lsrs	r0, r0, #5
 800713c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800713e:	f102 000c 	add.w	r0, r2, #12
 8007142:	f7ff ff0f 	bl	8006f64 <ai_buffer_array_sane>
 8007146:	b110      	cbz	r0, 800714e <ai_platform_get_activations_map+0x3e>
 8007148:	89f3      	ldrh	r3, [r6, #14]
 800714a:	429c      	cmp	r4, r3
 800714c:	d01b      	beq.n	8007186 <ai_platform_get_activations_map+0x76>
 800714e:	2000      	movs	r0, #0
 8007150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007152:	2000      	movs	r0, #0
 8007154:	4770      	bx	lr
 8007156:	4631      	mov	r1, r6
 8007158:	3804      	subs	r0, #4
 800715a:	2300      	movs	r3, #0
 800715c:	e004      	b.n	8007168 <ai_platform_get_activations_map+0x58>
 800715e:	3301      	adds	r3, #1
 8007160:	429c      	cmp	r4, r3
 8007162:	f840 2f04 	str.w	r2, [r0, #4]!
 8007166:	d005      	beq.n	8007174 <ai_platform_get_activations_map+0x64>
 8007168:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800716c:	42ba      	cmp	r2, r7
 800716e:	d1f6      	bne.n	800715e <ai_platform_get_activations_map+0x4e>
 8007170:	429c      	cmp	r4, r3
 8007172:	d1ec      	bne.n	800714e <ai_platform_get_activations_map+0x3e>
 8007174:	3401      	adds	r4, #1
 8007176:	4b0f      	ldr	r3, [pc, #60]	@ (80071b4 <ai_platform_get_activations_map+0xa4>)
 8007178:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800717c:	1ac0      	subs	r0, r0, r3
 800717e:	fab0 f080 	clz	r0, r0
 8007182:	0940      	lsrs	r0, r0, #5
 8007184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007186:	2100      	movs	r1, #0
 8007188:	1f28      	subs	r0, r5, #4
 800718a:	468c      	mov	ip, r1
 800718c:	e005      	b.n	800719a <ai_platform_get_activations_map+0x8a>
 800718e:	f10c 0c01 	add.w	ip, ip, #1
 8007192:	4564      	cmp	r4, ip
 8007194:	f840 3f04 	str.w	r3, [r0, #4]!
 8007198:	d005      	beq.n	80071a6 <ai_platform_get_activations_map+0x96>
 800719a:	6933      	ldr	r3, [r6, #16]
 800719c:	440b      	add	r3, r1
 800719e:	311c      	adds	r1, #28
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f3      	bne.n	800718e <ai_platform_get_activations_map+0x7e>
 80071a6:	eba4 000c 	sub.w	r0, r4, ip
 80071aa:	fab0 f080 	clz	r0, r0
 80071ae:	0940      	lsrs	r0, r0, #5
 80071b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b2:	bf00      	nop
 80071b4:	a1facade 	.word	0xa1facade

080071b8 <ai_platform_bind_network_params>:
 80071b8:	b1a0      	cbz	r0, 80071e4 <ai_platform_bind_network_params+0x2c>
 80071ba:	b1b1      	cbz	r1, 80071ea <ai_platform_bind_network_params+0x32>
 80071bc:	b1c2      	cbz	r2, 80071f0 <ai_platform_bind_network_params+0x38>
 80071be:	b410      	push	{r4}
 80071c0:	4603      	mov	r3, r0
 80071c2:	4c0d      	ldr	r4, [pc, #52]	@ (80071f8 <ai_platform_bind_network_params+0x40>)
 80071c4:	f843 4b04 	str.w	r4, [r3], #4
 80071c8:	f100 0c0c 	add.w	ip, r0, #12
 80071cc:	c903      	ldmia	r1, {r0, r1}
 80071ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80071d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80071d6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80071da:	2301      	movs	r3, #1
 80071dc:	4618      	mov	r0, r3
 80071de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	4603      	mov	r3, r0
 80071e6:	4618      	mov	r0, r3
 80071e8:	4770      	bx	lr
 80071ea:	460b      	mov	r3, r1
 80071ec:	4618      	mov	r0, r3
 80071ee:	4770      	bx	lr
 80071f0:	4613      	mov	r3, r2
 80071f2:	4618      	mov	r0, r3
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	a1facade 	.word	0xa1facade

080071fc <ai_platform_runtime_get_revision>:
 80071fc:	4800      	ldr	r0, [pc, #0]	@ (8007200 <ai_platform_runtime_get_revision+0x4>)
 80071fe:	4770      	bx	lr
 8007200:	0807fc0c 	.word	0x0807fc0c

08007204 <ai_platform_runtime_get_version>:
 8007204:	4b09      	ldr	r3, [pc, #36]	@ (800722c <ai_platform_runtime_get_version+0x28>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2000      	movs	r0, #0
 800720a:	b2da      	uxtb	r2, r3
 800720c:	f362 0007 	bfi	r0, r2, #0, #8
 8007210:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007214:	f362 200f 	bfi	r0, r2, #8, #8
 8007218:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800721c:	f362 4017 	bfi	r0, r2, #16, #8
 8007220:	0e1b      	lsrs	r3, r3, #24
 8007222:	b082      	sub	sp, #8
 8007224:	f363 601f 	bfi	r0, r3, #24, #8
 8007228:	b002      	add	sp, #8
 800722a:	4770      	bx	lr
 800722c:	0807fc30 	.word	0x0807fc30

08007230 <ai_platform_api_get_version>:
 8007230:	4b09      	ldr	r3, [pc, #36]	@ (8007258 <ai_platform_api_get_version+0x28>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2000      	movs	r0, #0
 8007236:	b2da      	uxtb	r2, r3
 8007238:	f362 0007 	bfi	r0, r2, #0, #8
 800723c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007240:	f362 200f 	bfi	r0, r2, #8, #8
 8007244:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007248:	f362 4017 	bfi	r0, r2, #16, #8
 800724c:	0e1b      	lsrs	r3, r3, #24
 800724e:	b082      	sub	sp, #8
 8007250:	f363 601f 	bfi	r0, r3, #24, #8
 8007254:	b002      	add	sp, #8
 8007256:	4770      	bx	lr
 8007258:	0807fc2c 	.word	0x0807fc2c

0800725c <ai_platform_interface_api_get_version>:
 800725c:	4b09      	ldr	r3, [pc, #36]	@ (8007284 <ai_platform_interface_api_get_version+0x28>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2000      	movs	r0, #0
 8007262:	b2da      	uxtb	r2, r3
 8007264:	f362 0007 	bfi	r0, r2, #0, #8
 8007268:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800726c:	f362 200f 	bfi	r0, r2, #8, #8
 8007270:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007274:	f362 4017 	bfi	r0, r2, #16, #8
 8007278:	0e1b      	lsrs	r3, r3, #24
 800727a:	b082      	sub	sp, #8
 800727c:	f363 601f 	bfi	r0, r3, #24, #8
 8007280:	b002      	add	sp, #8
 8007282:	4770      	bx	lr
 8007284:	0807fc28 	.word	0x0807fc28

08007288 <ai_platform_context_acquire>:
 8007288:	6802      	ldr	r2, [r0, #0]
 800728a:	4b02      	ldr	r3, [pc, #8]	@ (8007294 <ai_platform_context_acquire+0xc>)
 800728c:	4393      	bics	r3, r2
 800728e:	bf18      	it	ne
 8007290:	2000      	movne	r0, #0
 8007292:	4770      	bx	lr
 8007294:	a1c00100 	.word	0xa1c00100

08007298 <ai_platform_network_get_error>:
 8007298:	4b04      	ldr	r3, [pc, #16]	@ (80072ac <ai_platform_network_get_error+0x14>)
 800729a:	6802      	ldr	r2, [r0, #0]
 800729c:	4393      	bics	r3, r2
 800729e:	d102      	bne.n	80072a6 <ai_platform_network_get_error+0xe>
 80072a0:	300c      	adds	r0, #12
 80072a2:	f000 bd35 	b.w	8007d10 <core_get_error>
 80072a6:	f241 0010 	movw	r0, #4112	@ 0x1010
 80072aa:	4770      	bx	lr
 80072ac:	a1c00100 	.word	0xa1c00100

080072b0 <ai_platform_network_set_error>:
 80072b0:	b110      	cbz	r0, 80072b8 <ai_platform_network_set_error+0x8>
 80072b2:	300c      	adds	r0, #12
 80072b4:	f000 bd32 	b.w	8007d1c <core_set_error>
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop

080072bc <ai_platform_api_get_network_report>:
 80072bc:	4b9e      	ldr	r3, [pc, #632]	@ (8007538 <ai_platform_api_get_network_report+0x27c>)
 80072be:	6802      	ldr	r2, [r0, #0]
 80072c0:	4393      	bics	r3, r2
 80072c2:	f040 817f 	bne.w	80075c4 <ai_platform_api_get_network_report+0x308>
 80072c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ca:	460d      	mov	r5, r1
 80072cc:	b089      	sub	sp, #36	@ 0x24
 80072ce:	2900      	cmp	r1, #0
 80072d0:	d074      	beq.n	80073bc <ai_platform_api_get_network_report+0x100>
 80072d2:	2300      	movs	r3, #0
 80072d4:	67cb      	str	r3, [r1, #124]	@ 0x7c
 80072d6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80072d8:	4682      	mov	sl, r0
 80072da:	2201      	movs	r2, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 8124 	beq.w	800752a <ai_platform_api_get_network_report+0x26e>
 80072e2:	67ea      	str	r2, [r5, #124]	@ 0x7c
 80072e4:	4619      	mov	r1, r3
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	428b      	cmp	r3, r1
 80072ea:	d007      	beq.n	80072fc <ai_platform_api_get_network_report+0x40>
 80072ec:	1c51      	adds	r1, r2, #1
 80072ee:	b12b      	cbz	r3, 80072fc <ai_platform_api_get_network_report+0x40>
 80072f0:	460a      	mov	r2, r1
 80072f2:	67ea      	str	r2, [r5, #124]	@ 0x7c
 80072f4:	4619      	mov	r1, r3
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	428b      	cmp	r3, r1
 80072fa:	d1f7      	bne.n	80072ec <ai_platform_api_get_network_report+0x30>
 80072fc:	2a00      	cmp	r2, #0
 80072fe:	f000 8114 	beq.w	800752a <ai_platform_api_get_network_report+0x26e>
 8007302:	f8ba 3030 	ldrh.w	r3, [sl, #48]	@ 0x30
 8007306:	2b00      	cmp	r3, #0
 8007308:	d04f      	beq.n	80073aa <ai_platform_api_get_network_report+0xee>
 800730a:	f8da 7034 	ldr.w	r7, [sl, #52]	@ 0x34
 800730e:	2f00      	cmp	r7, #0
 8007310:	d04b      	beq.n	80073aa <ai_platform_api_get_network_report+0xee>
 8007312:	f04f 0b00 	mov.w	fp, #0
 8007316:	f8cd a008 	str.w	sl, [sp, #8]
 800731a:	465e      	mov	r6, fp
 800731c:	46ba      	mov	sl, r7
 800731e:	9503      	str	r5, [sp, #12]
 8007320:	e015      	b.n	800734e <ai_platform_api_get_network_report+0x92>
 8007322:	00f1      	lsls	r1, r6, #3
 8007324:	2201      	movs	r2, #1
 8007326:	507a      	str	r2, [r7, r1]
 8007328:	69a9      	ldr	r1, [r5, #24]
 800732a:	684d      	ldr	r5, [r1, #4]
 800732c:	60a3      	str	r3, [r4, #8]
 800732e:	f04f 0201 	mov.w	r2, #1
 8007332:	7522      	strb	r2, [r4, #20]
 8007334:	6963      	ldr	r3, [r4, #20]
 8007336:	6125      	str	r5, [r4, #16]
 8007338:	f368 231f 	bfi	r3, r8, #8, #24
 800733c:	e9c4 0c00 	strd	r0, ip, [r4]
 8007340:	e9c4 3905 	strd	r3, r9, [r4, #20]
 8007344:	2200      	movs	r2, #0
 8007346:	60e2      	str	r2, [r4, #12]
 8007348:	3601      	adds	r6, #1
 800734a:	f10b 0b1c 	add.w	fp, fp, #28
 800734e:	f8ba 3000 	ldrh.w	r3, [sl]
 8007352:	42b3      	cmp	r3, r6
 8007354:	d936      	bls.n	80073c4 <ai_platform_api_get_network_report+0x108>
 8007356:	f8da 3004 	ldr.w	r3, [sl, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d032      	beq.n	80073c4 <ai_platform_api_get_network_report+0x108>
 800735e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 8007362:	b37d      	cbz	r5, 80073c4 <ai_platform_api_get_network_report+0x108>
 8007364:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007368:	f8d5 900c 	ldr.w	r9, [r5, #12]
 800736c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8007370:	69ab      	ldr	r3, [r5, #24]
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	68ab      	ldr	r3, [r5, #8]
 8007376:	00f1      	lsls	r1, r6, #3
 8007378:	9101      	str	r1, [sp, #4]
 800737a:	f3c3 2817 	ubfx	r8, r3, #8, #24
 800737e:	f006 f933 	bl	800d5e8 <ai_array_to_buffer_fmt>
 8007382:	69a9      	ldr	r1, [r5, #24]
 8007384:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8007388:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800738c:	445c      	add	r4, fp
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0cb      	beq.n	800732a <ai_platform_api_get_network_report+0x6e>
 8007392:	2200      	movs	r2, #0
 8007394:	f847 2036 	str.w	r2, [r7, r6, lsl #3]
 8007398:	6829      	ldr	r1, [r5, #0]
 800739a:	6059      	str	r1, [r3, #4]
 800739c:	b111      	cbz	r1, 80073a4 <ai_platform_api_get_network_report+0xe8>
 800739e:	8849      	ldrh	r1, [r1, #2]
 80073a0:	2900      	cmp	r1, #0
 80073a2:	d1be      	bne.n	8007322 <ai_platform_api_get_network_report+0x66>
 80073a4:	69a9      	ldr	r1, [r5, #24]
 80073a6:	2300      	movs	r3, #0
 80073a8:	e7bf      	b.n	800732a <ai_platform_api_get_network_report+0x6e>
 80073aa:	2300      	movs	r3, #0
 80073ac:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80073ae:	872b      	strh	r3, [r5, #56]	@ 0x38
 80073b0:	2218      	movs	r2, #24
 80073b2:	2112      	movs	r1, #18
 80073b4:	f10a 000c 	add.w	r0, sl, #12
 80073b8:	f000 fcb0 	bl	8007d1c <core_set_error>
 80073bc:	2000      	movs	r0, #0
 80073be:	b009      	add	sp, #36	@ 0x24
 80073c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c4:	b2b6      	uxth	r6, r6
 80073c6:	4657      	mov	r7, sl
 80073c8:	e9dd a502 	ldrd	sl, r5, [sp, #8]
 80073cc:	2e00      	cmp	r6, #0
 80073ce:	d0ec      	beq.n	80073aa <ai_platform_api_get_network_report+0xee>
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80073d6:	872e      	strh	r6, [r5, #56]	@ 0x38
 80073d8:	f8ba 3030 	ldrh.w	r3, [sl, #48]	@ 0x30
 80073dc:	2b01      	cmp	r3, #1
 80073de:	f240 809a 	bls.w	8007516 <ai_platform_api_get_network_report+0x25a>
 80073e2:	f04f 0900 	mov.w	r9, #0
 80073e6:	e9cd a502 	strd	sl, r5, [sp, #8]
 80073ea:	f8da 8034 	ldr.w	r8, [sl, #52]	@ 0x34
 80073ee:	464f      	mov	r7, r9
 80073f0:	46cb      	mov	fp, r9
 80073f2:	e016      	b.n	8007422 <ai_platform_api_get_network_report+0x166>
 80073f4:	2101      	movs	r1, #1
 80073f6:	f84a 100e 	str.w	r1, [sl, lr]
 80073fa:	69a9      	ldr	r1, [r5, #24]
 80073fc:	6849      	ldr	r1, [r1, #4]
 80073fe:	60a3      	str	r3, [r4, #8]
 8007400:	9b01      	ldr	r3, [sp, #4]
 8007402:	61a3      	str	r3, [r4, #24]
 8007404:	f04f 0301 	mov.w	r3, #1
 8007408:	7523      	strb	r3, [r4, #20]
 800740a:	6963      	ldr	r3, [r4, #20]
 800740c:	6121      	str	r1, [r4, #16]
 800740e:	e9c4 0200 	strd	r0, r2, [r4]
 8007412:	f366 231f 	bfi	r3, r6, #8, #24
 8007416:	f8c4 b00c 	str.w	fp, [r4, #12]
 800741a:	3701      	adds	r7, #1
 800741c:	f109 091c 	add.w	r9, r9, #28
 8007420:	6163      	str	r3, [r4, #20]
 8007422:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007426:	429f      	cmp	r7, r3
 8007428:	d226      	bcs.n	8007478 <ai_platform_api_get_network_report+0x1bc>
 800742a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800742e:	b31b      	cbz	r3, 8007478 <ai_platform_api_get_network_report+0x1bc>
 8007430:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8007434:	b305      	cbz	r5, 8007478 <ai_platform_api_get_network_report+0x1bc>
 8007436:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800743a:	68ae      	ldr	r6, [r5, #8]
 800743c:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 8007440:	69ab      	ldr	r3, [r5, #24]
 8007442:	6818      	ldr	r0, [r3, #0]
 8007444:	68eb      	ldr	r3, [r5, #12]
 8007446:	9301      	str	r3, [sp, #4]
 8007448:	f006 f8ce 	bl	800d5e8 <ai_array_to_buffer_fmt>
 800744c:	69a9      	ldr	r1, [r5, #24]
 800744e:	eb0a 03c7 	add.w	r3, sl, r7, lsl #3
 8007452:	688a      	ldr	r2, [r1, #8]
 8007454:	444c      	add	r4, r9
 8007456:	f3c6 2617 	ubfx	r6, r6, #8, #24
 800745a:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0cc      	beq.n	80073fc <ai_platform_api_get_network_report+0x140>
 8007462:	f84a b037 	str.w	fp, [sl, r7, lsl #3]
 8007466:	6829      	ldr	r1, [r5, #0]
 8007468:	6059      	str	r1, [r3, #4]
 800746a:	b111      	cbz	r1, 8007472 <ai_platform_api_get_network_report+0x1b6>
 800746c:	8849      	ldrh	r1, [r1, #2]
 800746e:	2900      	cmp	r1, #0
 8007470:	d1c0      	bne.n	80073f4 <ai_platform_api_get_network_report+0x138>
 8007472:	69a9      	ldr	r1, [r5, #24]
 8007474:	2300      	movs	r3, #0
 8007476:	e7c1      	b.n	80073fc <ai_platform_api_get_network_report+0x140>
 8007478:	b2bf      	uxth	r7, r7
 800747a:	e9dd a502 	ldrd	sl, r5, [sp, #8]
 800747e:	2f00      	cmp	r7, #0
 8007480:	d049      	beq.n	8007516 <ai_platform_api_get_network_report+0x25a>
 8007482:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007486:	f10a 0628 	add.w	r6, sl, #40	@ 0x28
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	642b      	str	r3, [r5, #64]	@ 0x40
 800748e:	876f      	strh	r7, [r5, #58]	@ 0x3a
 8007490:	4630      	mov	r0, r6
 8007492:	f7ff fd67 	bl	8006f64 <ai_buffer_array_sane>
 8007496:	b968      	cbnz	r0, 80074b4 <ai_platform_api_get_network_report+0x1f8>
 8007498:	4630      	mov	r0, r6
 800749a:	f7ff fd63 	bl	8006f64 <ai_buffer_array_sane>
 800749e:	b148      	cbz	r0, 80074b4 <ai_platform_api_get_network_report+0x1f8>
 80074a0:	f8ba 302a 	ldrh.w	r3, [sl, #42]	@ 0x2a
 80074a4:	b133      	cbz	r3, 80074b4 <ai_platform_api_get_network_report+0x1f8>
 80074a6:	2213      	movs	r2, #19
 80074a8:	2111      	movs	r1, #17
 80074aa:	f10a 000c 	add.w	r0, sl, #12
 80074ae:	f000 fc35 	bl	8007d1c <core_set_error>
 80074b2:	e783      	b.n	80073bc <ai_platform_api_get_network_report+0x100>
 80074b4:	f10a 0720 	add.w	r7, sl, #32
 80074b8:	4638      	mov	r0, r7
 80074ba:	f7ff fd53 	bl	8006f64 <ai_buffer_array_sane>
 80074be:	b920      	cbnz	r0, 80074ca <ai_platform_api_get_network_report+0x20e>
 80074c0:	4638      	mov	r0, r7
 80074c2:	f7ff fd4f 	bl	8006f64 <ai_buffer_array_sane>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d171      	bne.n	80075ae <ai_platform_api_get_network_report+0x2f2>
 80074ca:	f8da 3004 	ldr.w	r3, [sl, #4]
 80074ce:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 80074d2:	4b1a      	ldr	r3, [pc, #104]	@ (800753c <ai_platform_api_get_network_report+0x280>)
 80074d4:	612b      	str	r3, [r5, #16]
 80074d6:	f44f 7385 	mov.w	r3, #266	@ 0x10a
 80074da:	616b      	str	r3, [r5, #20]
 80074dc:	f240 2401 	movw	r4, #513	@ 0x201
 80074e0:	f240 5301 	movw	r3, #1281	@ 0x501
 80074e4:	e9c5 4309 	strd	r4, r3, [r5, #36]	@ 0x24
 80074e8:	f8da 0008 	ldr.w	r0, [sl, #8]
 80074ec:	f7ff fcc2 	bl	8006e74 <ai_platform_version_get>
 80074f0:	4b13      	ldr	r3, [pc, #76]	@ (8007540 <ai_platform_api_get_network_report+0x284>)
 80074f2:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 80074f4:	6228      	str	r0, [r5, #32]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d124      	bne.n	8007544 <ai_platform_api_get_network_report+0x288>
 80074fa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80074fe:	f105 0250 	add.w	r2, r5, #80	@ 0x50
 8007502:	e882 0003 	stmia.w	r2, {r0, r1}
 8007506:	e897 0003 	ldmia.w	r7, {r0, r1}
 800750a:	f105 0348 	add.w	r3, r5, #72	@ 0x48
 800750e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007512:	2001      	movs	r0, #1
 8007514:	e753      	b.n	80073be <ai_platform_api_get_network_report+0x102>
 8007516:	2300      	movs	r3, #0
 8007518:	642b      	str	r3, [r5, #64]	@ 0x40
 800751a:	876b      	strh	r3, [r5, #58]	@ 0x3a
 800751c:	2218      	movs	r2, #24
 800751e:	2113      	movs	r1, #19
 8007520:	f10a 000c 	add.w	r0, sl, #12
 8007524:	f000 fbfa 	bl	8007d1c <core_set_error>
 8007528:	e748      	b.n	80073bc <ai_platform_api_get_network_report+0x100>
 800752a:	2218      	movs	r2, #24
 800752c:	2111      	movs	r1, #17
 800752e:	f10a 000c 	add.w	r0, sl, #12
 8007532:	f000 fbf3 	bl	8007d1c <core_set_error>
 8007536:	e741      	b.n	80073bc <ai_platform_api_get_network_report+0x100>
 8007538:	a1c00100 	.word	0xa1c00100
 800753c:	0807fc0c 	.word	0x0807fc0c
 8007540:	a1facade 	.word	0xa1facade
 8007544:	2200      	movs	r2, #0
 8007546:	e9c5 2212 	strd	r2, r2, [r5, #72]	@ 0x48
 800754a:	e9c5 2214 	strd	r2, r2, [r5, #80]	@ 0x50
 800754e:	4b2e      	ldr	r3, [pc, #184]	@ (8007608 <ai_platform_api_get_network_report+0x34c>)
 8007550:	4a2e      	ldr	r2, [pc, #184]	@ (800760c <ai_platform_api_get_network_report+0x350>)
 8007552:	646a      	str	r2, [r5, #68]	@ 0x44
 8007554:	f240 4201 	movw	r2, #1025	@ 0x401
 8007558:	65aa      	str	r2, [r5, #88]	@ 0x58
 800755a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800755c:	f10d 0c10 	add.w	ip, sp, #16
 8007560:	f105 0844 	add.w	r8, r5, #68	@ 0x44
 8007564:	f8c5 c05c 	str.w	ip, [r5, #92]	@ 0x5c
 8007568:	f105 0960 	add.w	r9, r5, #96	@ 0x60
 800756c:	4645      	mov	r5, r8
 800756e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8007572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007574:	464c      	mov	r4, r9
 8007576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800757c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007580:	4630      	mov	r0, r6
 8007582:	f7ff fcef 	bl	8006f64 <ai_buffer_array_sane>
 8007586:	b9f8      	cbnz	r0, 80075c8 <ai_platform_api_get_network_report+0x30c>
 8007588:	4638      	mov	r0, r7
 800758a:	f7ff fceb 	bl	8006f64 <ai_buffer_array_sane>
 800758e:	2800      	cmp	r0, #0
 8007590:	d0bf      	beq.n	8007512 <ai_platform_api_get_network_report+0x256>
 8007592:	4638      	mov	r0, r7
 8007594:	f7ff fce6 	bl	8006f64 <ai_buffer_array_sane>
 8007598:	b320      	cbz	r0, 80075e4 <ai_platform_api_get_network_report+0x328>
 800759a:	f8da 4024 	ldr.w	r4, [sl, #36]	@ 0x24
 800759e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075a0:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80075a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80075a8:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80075ac:	e7b1      	b.n	8007512 <ai_platform_api_get_network_report+0x256>
 80075ae:	f8ba 3022 	ldrh.w	r3, [sl, #34]	@ 0x22
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d089      	beq.n	80074ca <ai_platform_api_get_network_report+0x20e>
 80075b6:	2212      	movs	r2, #18
 80075b8:	2111      	movs	r1, #17
 80075ba:	f10a 000c 	add.w	r0, sl, #12
 80075be:	f000 fbad 	bl	8007d1c <core_set_error>
 80075c2:	e6fb      	b.n	80073bc <ai_platform_api_get_network_report+0x100>
 80075c4:	2000      	movs	r0, #0
 80075c6:	4770      	bx	lr
 80075c8:	4630      	mov	r0, r6
 80075ca:	f7ff fccb 	bl	8006f64 <ai_buffer_array_sane>
 80075ce:	b190      	cbz	r0, 80075f6 <ai_platform_api_get_network_report+0x33a>
 80075d0:	f8da 402c 	ldr.w	r4, [sl, #44]	@ 0x2c
 80075d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075d6:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80075da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80075de:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 80075e2:	e7d1      	b.n	8007588 <ai_platform_api_get_network_report+0x2cc>
 80075e4:	4604      	mov	r4, r0
 80075e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075e8:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80075ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80075f0:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80075f4:	deff      	udf	#255	@ 0xff
 80075f6:	4604      	mov	r4, r0
 80075f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075fa:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80075fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007602:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8007606:	deff      	udf	#255	@ 0xff
 8007608:	08011568 	.word	0x08011568
 800760c:	00040440 	.word	0x00040440

08007610 <ai_platform_network_create>:
 8007610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007614:	b083      	sub	sp, #12
 8007616:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800761a:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800761e:	b320      	cbz	r0, 800766a <ai_platform_network_create+0x5a>
 8007620:	6002      	str	r2, [r0, #0]
 8007622:	4616      	mov	r6, r2
 8007624:	461f      	mov	r7, r3
 8007626:	4604      	mov	r4, r0
 8007628:	f000 fb70 	bl	8007d0c <core_init>
 800762c:	b970      	cbnz	r0, 800764c <ai_platform_network_create+0x3c>
 800762e:	2530      	movs	r5, #48	@ 0x30
 8007630:	2300      	movs	r3, #0
 8007632:	6023      	str	r3, [r4, #0]
 8007634:	2410      	movs	r4, #16
 8007636:	464a      	mov	r2, r9
 8007638:	4641      	mov	r1, r8
 800763a:	4638      	mov	r0, r7
 800763c:	f7ff fc14 	bl	8006e68 <ai_version_get>
 8007640:	60b0      	str	r0, [r6, #8]
 8007642:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8007646:	b003      	add	sp, #12
 8007648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800764c:	2200      	movs	r2, #0
 800764e:	4641      	mov	r1, r8
 8007650:	4638      	mov	r0, r7
 8007652:	f7ff fc09 	bl	8006e68 <ai_version_get>
 8007656:	2200      	movs	r2, #0
 8007658:	4605      	mov	r5, r0
 800765a:	2105      	movs	r1, #5
 800765c:	2001      	movs	r0, #1
 800765e:	f7ff fc03 	bl	8006e68 <ai_version_get>
 8007662:	4285      	cmp	r5, r0
 8007664:	d008      	beq.n	8007678 <ai_platform_network_create+0x68>
 8007666:	2501      	movs	r5, #1
 8007668:	e7e2      	b.n	8007630 <ai_platform_network_create+0x20>
 800766a:	2510      	movs	r5, #16
 800766c:	462c      	mov	r4, r5
 800766e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8007672:	b003      	add	sp, #12
 8007674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007678:	4b05      	ldr	r3, [pc, #20]	@ (8007690 <ai_platform_network_create+0x80>)
 800767a:	9301      	str	r3, [sp, #4]
 800767c:	a801      	add	r0, sp, #4
 800767e:	f000 fd1d 	bl	80080bc <ai_check_custom_types>
 8007682:	b110      	cbz	r0, 800768a <ai_platform_network_create+0x7a>
 8007684:	2400      	movs	r4, #0
 8007686:	4625      	mov	r5, r4
 8007688:	e7d5      	b.n	8007636 <ai_platform_network_create+0x26>
 800768a:	2502      	movs	r5, #2
 800768c:	e7d0      	b.n	8007630 <ai_platform_network_create+0x20>
 800768e:	bf00      	nop
 8007690:	84048403 	.word	0x84048403

08007694 <ai_platform_network_destroy>:
 8007694:	b508      	push	{r3, lr}
 8007696:	4a07      	ldr	r2, [pc, #28]	@ (80076b4 <ai_platform_network_destroy+0x20>)
 8007698:	6801      	ldr	r1, [r0, #0]
 800769a:	ea01 0c02 	and.w	ip, r1, r2
 800769e:	438a      	bics	r2, r1
 80076a0:	d102      	bne.n	80076a8 <ai_platform_network_destroy+0x14>
 80076a2:	4561      	cmp	r1, ip
 80076a4:	d001      	beq.n	80076aa <ai_platform_network_destroy+0x16>
 80076a6:	2000      	movs	r0, #0
 80076a8:	bd08      	pop	{r3, pc}
 80076aa:	f000 fda7 	bl	80081fc <ai_layers_destroy_all>
 80076ae:	2000      	movs	r0, #0
 80076b0:	e7fa      	b.n	80076a8 <ai_platform_network_destroy+0x14>
 80076b2:	bf00      	nop
 80076b4:	a1c00100 	.word	0xa1c00100

080076b8 <ai_platform_network_init>:
 80076b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076bc:	4a48      	ldr	r2, [pc, #288]	@ (80077e0 <ai_platform_network_init+0x128>)
 80076be:	4604      	mov	r4, r0
 80076c0:	6800      	ldr	r0, [r0, #0]
 80076c2:	460b      	mov	r3, r1
 80076c4:	ea00 0102 	and.w	r1, r0, r2
 80076c8:	4382      	bics	r2, r0
 80076ca:	d13b      	bne.n	8007744 <ai_platform_network_init+0x8c>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d078      	beq.n	80077c2 <ai_platform_network_init+0x10a>
 80076d0:	4a44      	ldr	r2, [pc, #272]	@ (80077e4 <ai_platform_network_init+0x12c>)
 80076d2:	681d      	ldr	r5, [r3, #0]
 80076d4:	4295      	cmp	r5, r2
 80076d6:	d10a      	bne.n	80076ee <ai_platform_network_init+0x36>
 80076d8:	4288      	cmp	r0, r1
 80076da:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 80076de:	e9d3 6301 	ldrd	r6, r3, [r3, #4]
 80076e2:	d03d      	beq.n	8007760 <ai_platform_network_init+0xa8>
 80076e4:	2303      	movs	r3, #3
 80076e6:	6123      	str	r3, [r4, #16]
 80076e8:	4620      	mov	r0, r4
 80076ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ee:	2101      	movs	r1, #1
 80076f0:	4618      	mov	r0, r3
 80076f2:	461d      	mov	r5, r3
 80076f4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80076f8:	f7ff fbfa 	bl	8006ef0 <ai_buffer_get_size>
 80076fc:	f105 071c 	add.w	r7, r5, #28
 8007700:	4606      	mov	r6, r0
 8007702:	2101      	movs	r1, #1
 8007704:	4638      	mov	r0, r7
 8007706:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800770a:	f7ff fbf1 	bl	8006ef0 <ai_buffer_get_size>
 800770e:	2e00      	cmp	r6, #0
 8007710:	bf0a      	itet	eq
 8007712:	4631      	moveq	r1, r6
 8007714:	2101      	movne	r1, #1
 8007716:	4635      	moveq	r5, r6
 8007718:	b1b0      	cbz	r0, 8007748 <ai_platform_network_init+0x90>
 800771a:	f1b9 0f00 	cmp.w	r9, #0
 800771e:	d057      	beq.n	80077d0 <ai_platform_network_init+0x118>
 8007720:	f04f 0e01 	mov.w	lr, #1
 8007724:	f1b8 0f00 	cmp.w	r8, #0
 8007728:	d011      	beq.n	800774e <ai_platform_network_init+0x96>
 800772a:	4b2d      	ldr	r3, [pc, #180]	@ (80077e0 <ai_platform_network_init+0x128>)
 800772c:	6822      	ldr	r2, [r4, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d1d8      	bne.n	80076e4 <ai_platform_network_init+0x2c>
 8007732:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8007734:	428b      	cmp	r3, r1
 8007736:	d21b      	bcs.n	8007770 <ai_platform_network_init+0xb8>
 8007738:	2212      	movs	r2, #18
 800773a:	2116      	movs	r1, #22
 800773c:	f104 000c 	add.w	r0, r4, #12
 8007740:	f000 faec 	bl	8007d1c <core_set_error>
 8007744:	2000      	movs	r0, #0
 8007746:	e7d0      	b.n	80076ea <ai_platform_network_init+0x32>
 8007748:	4607      	mov	r7, r0
 800774a:	4686      	mov	lr, r0
 800774c:	e7ea      	b.n	8007724 <ai_platform_network_init+0x6c>
 800774e:	2e00      	cmp	r6, #0
 8007750:	d0eb      	beq.n	800772a <ai_platform_network_init+0x72>
 8007752:	2212      	movs	r2, #18
 8007754:	2110      	movs	r1, #16
 8007756:	f104 000c 	add.w	r0, r4, #12
 800775a:	f000 fadf 	bl	8007d1c <core_set_error>
 800775e:	e7f1      	b.n	8007744 <ai_platform_network_init+0x8c>
 8007760:	e9c4 6308 	strd	r6, r3, [r4, #32]
 8007764:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8007766:	62a2      	str	r2, [r4, #40]	@ 0x28
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fcd1 	bl	8008110 <ai_layers_init_all>
 800776e:	e7b9      	b.n	80076e4 <ai_platform_network_init+0x2c>
 8007770:	b1e1      	cbz	r1, 80077ac <ai_platform_network_init+0xf4>
 8007772:	46ac      	mov	ip, r5
 8007774:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007778:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800777a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800777c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007780:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007784:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007786:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 800778a:	4573      	cmp	r3, lr
 800778c:	6226      	str	r6, [r4, #32]
 800778e:	d311      	bcc.n	80077b4 <ai_platform_network_init+0xfc>
 8007790:	f1be 0f00 	cmp.w	lr, #0
 8007794:	d007      	beq.n	80077a6 <ai_platform_network_init+0xee>
 8007796:	463e      	mov	r6, r7
 8007798:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800779a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800779c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800779e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80077a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80077a6:	ea4f 420e 	mov.w	r2, lr, lsl #16
 80077aa:	e7dc      	b.n	8007766 <ai_platform_network_init+0xae>
 80077ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80077ae:	6221      	str	r1, [r4, #32]
 80077b0:	4573      	cmp	r3, lr
 80077b2:	d2ed      	bcs.n	8007790 <ai_platform_network_init+0xd8>
 80077b4:	2213      	movs	r2, #19
 80077b6:	2116      	movs	r1, #22
 80077b8:	f104 000c 	add.w	r0, r4, #12
 80077bc:	f000 faae 	bl	8007d1c <core_set_error>
 80077c0:	e7c0      	b.n	8007744 <ai_platform_network_init+0x8c>
 80077c2:	2211      	movs	r2, #17
 80077c4:	2110      	movs	r1, #16
 80077c6:	f104 000c 	add.w	r0, r4, #12
 80077ca:	f000 faa7 	bl	8007d1c <core_set_error>
 80077ce:	e7b9      	b.n	8007744 <ai_platform_network_init+0x8c>
 80077d0:	2213      	movs	r2, #19
 80077d2:	2110      	movs	r1, #16
 80077d4:	f104 000c 	add.w	r0, r4, #12
 80077d8:	f000 faa0 	bl	8007d1c <core_set_error>
 80077dc:	e7b2      	b.n	8007744 <ai_platform_network_init+0x8c>
 80077de:	bf00      	nop
 80077e0:	a1c00100 	.word	0xa1c00100
 80077e4:	a1facade 	.word	0xa1facade

080077e8 <ai_platform_network_post_init>:
 80077e8:	4b15      	ldr	r3, [pc, #84]	@ (8007840 <ai_platform_network_post_init+0x58>)
 80077ea:	6802      	ldr	r2, [r0, #0]
 80077ec:	ea02 0103 	and.w	r1, r2, r3
 80077f0:	4393      	bics	r3, r2
 80077f2:	d123      	bne.n	800783c <ai_platform_network_post_init+0x54>
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	6903      	ldr	r3, [r0, #16]
 80077f8:	079b      	lsls	r3, r3, #30
 80077fa:	4604      	mov	r4, r0
 80077fc:	d503      	bpl.n	8007806 <ai_platform_network_post_init+0x1e>
 80077fe:	428a      	cmp	r2, r1
 8007800:	d008      	beq.n	8007814 <ai_platform_network_post_init+0x2c>
 8007802:	2001      	movs	r0, #1
 8007804:	bd70      	pop	{r4, r5, r6, pc}
 8007806:	2210      	movs	r2, #16
 8007808:	2111      	movs	r1, #17
 800780a:	300c      	adds	r0, #12
 800780c:	f000 fa86 	bl	8007d1c <core_set_error>
 8007810:	2000      	movs	r0, #0
 8007812:	bd70      	pop	{r4, r5, r6, pc}
 8007814:	f000 fc8c 	bl	8008130 <ai_layers_post_init_all>
 8007818:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 800781a:	2e00      	cmp	r6, #0
 800781c:	d0f1      	beq.n	8007802 <ai_platform_network_post_init+0x1a>
 800781e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007820:	2d00      	cmp	r5, #0
 8007822:	d0ee      	beq.n	8007802 <ai_platform_network_post_init+0x1a>
 8007824:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007826:	4629      	mov	r1, r5
 8007828:	2000      	movs	r0, #0
 800782a:	47b0      	blx	r6
 800782c:	692b      	ldr	r3, [r5, #16]
 800782e:	42ab      	cmp	r3, r5
 8007830:	d0e7      	beq.n	8007802 <ai_platform_network_post_init+0x1a>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0e5      	beq.n	8007802 <ai_platform_network_post_init+0x1a>
 8007836:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8007838:	461d      	mov	r5, r3
 800783a:	e7f3      	b.n	8007824 <ai_platform_network_post_init+0x3c>
 800783c:	2000      	movs	r0, #0
 800783e:	4770      	bx	lr
 8007840:	a1c00100 	.word	0xa1c00100

08007844 <ai_platform_network_process>:
 8007844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007848:	4bb7      	ldr	r3, [pc, #732]	@ (8007b28 <ai_platform_network_process+0x2e4>)
 800784a:	4607      	mov	r7, r0
 800784c:	6800      	ldr	r0, [r0, #0]
 800784e:	4383      	bics	r3, r0
 8007850:	b085      	sub	sp, #20
 8007852:	f040 812d 	bne.w	8007ab0 <ai_platform_network_process+0x26c>
 8007856:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 811d 	beq.w	8007a98 <ai_platform_network_process+0x254>
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 8007864:	f003 0303 	and.w	r3, r3, #3
 8007868:	2600      	movs	r6, #0
 800786a:	2b03      	cmp	r3, #3
 800786c:	61be      	str	r6, [r7, #24]
 800786e:	f040 8129 	bne.w	8007ac4 <ai_platform_network_process+0x280>
 8007872:	2900      	cmp	r1, #0
 8007874:	f000 8116 	beq.w	8007aa4 <ai_platform_network_process+0x260>
 8007878:	f1b9 0f00 	cmp.w	r9, #0
 800787c:	f000 8112 	beq.w	8007aa4 <ai_platform_network_process+0x260>
 8007880:	f8b9 3000 	ldrh.w	r3, [r9]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 810d 	beq.w	8007aa4 <ai_platform_network_process+0x260>
 800788a:	698b      	ldr	r3, [r1, #24]
 800788c:	e9cd 7202 	strd	r7, r2, [sp, #8]
 8007890:	f8d3 b000 	ldr.w	fp, [r3]
 8007894:	460c      	mov	r4, r1
 8007896:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d072      	beq.n	8007984 <ai_platform_network_process+0x140>
 800789e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 80078a2:	2d00      	cmp	r5, #0
 80078a4:	d06e      	beq.n	8007984 <ai_platform_network_process+0x140>
 80078a6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80078aa:	f8d3 a000 	ldr.w	sl, [r3]
 80078ae:	0133      	lsls	r3, r6, #4
 80078b0:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	f000 81ba 	beq.w	8007c2e <ai_platform_network_process+0x3ea>
 80078ba:	69ab      	ldr	r3, [r5, #24]
 80078bc:	2101      	movs	r1, #1
 80078be:	4620      	mov	r0, r4
 80078c0:	685f      	ldr	r7, [r3, #4]
 80078c2:	f7ff fb15 	bl	8006ef0 <ai_buffer_get_size>
 80078c6:	4287      	cmp	r7, r0
 80078c8:	f0c0 8103 	bcc.w	8007ad2 <ai_platform_network_process+0x28e>
 80078cc:	68e8      	ldr	r0, [r5, #12]
 80078ce:	69a1      	ldr	r1, [r4, #24]
 80078d0:	68c2      	ldr	r2, [r0, #12]
 80078d2:	68cb      	ldr	r3, [r1, #12]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	f040 80fc 	bne.w	8007ad2 <ai_platform_network_process+0x28e>
 80078da:	6882      	ldr	r2, [r0, #8]
 80078dc:	688b      	ldr	r3, [r1, #8]
 80078de:	429a      	cmp	r2, r3
 80078e0:	f040 80f7 	bne.w	8007ad2 <ai_platform_network_process+0x28e>
 80078e4:	6842      	ldr	r2, [r0, #4]
 80078e6:	684b      	ldr	r3, [r1, #4]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	f040 80f2 	bne.w	8007ad2 <ai_platform_network_process+0x28e>
 80078ee:	69ab      	ldr	r3, [r5, #24]
 80078f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078f4:	f005 ff06 	bl	800d704 <ai_array_get_data_byte_size>
 80078f8:	9001      	str	r0, [sp, #4]
 80078fa:	4628      	mov	r0, r5
 80078fc:	f7ff fae0 	bl	8006ec0 <get_tensor_byte_size>
 8007900:	9b01      	ldr	r3, [sp, #4]
 8007902:	4283      	cmp	r3, r0
 8007904:	f0c0 80e5 	bcc.w	8007ad2 <ai_platform_network_process+0x28e>
 8007908:	69ab      	ldr	r3, [r5, #24]
 800790a:	6818      	ldr	r0, [r3, #0]
 800790c:	f005 fe6c 	bl	800d5e8 <ai_array_to_buffer_fmt>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	4058      	eors	r0, r3
 8007914:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 8007918:	f040 8193 	bne.w	8007c42 <ai_platform_network_process+0x3fe>
 800791c:	6863      	ldr	r3, [r4, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 8185 	beq.w	8007c2e <ai_platform_network_process+0x3ea>
 8007924:	69a3      	ldr	r3, [r4, #24]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 8182 	beq.w	8007c32 <ai_platform_network_process+0x3ee>
 800792e:	459b      	cmp	fp, r3
 8007930:	4628      	mov	r0, r5
 8007932:	bf38      	it	cc
 8007934:	469b      	movcc	fp, r3
 8007936:	f7ff fac3 	bl	8006ec0 <get_tensor_byte_size>
 800793a:	f8c8 0008 	str.w	r0, [r8, #8]
 800793e:	69a3      	ldr	r3, [r4, #24]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	fb00 f303 	mul.w	r3, r0, r3
 8007946:	f8c8 300c 	str.w	r3, [r8, #12]
 800794a:	6861      	ldr	r1, [r4, #4]
 800794c:	f8c8 1004 	str.w	r1, [r8, #4]
 8007950:	0132      	lsls	r2, r6, #4
 8007952:	440b      	add	r3, r1
 8007954:	f84a 3002 	str.w	r3, [sl, r2]
 8007958:	69a8      	ldr	r0, [r5, #24]
 800795a:	6803      	ldr	r3, [r0, #0]
 800795c:	009a      	lsls	r2, r3, #2
 800795e:	f106 0601 	add.w	r6, r6, #1
 8007962:	f104 041c 	add.w	r4, r4, #28
 8007966:	f100 80a7 	bmi.w	8007ab8 <ai_platform_network_process+0x274>
 800796a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800796e:	1a9b      	subs	r3, r3, r2
 8007970:	4419      	add	r1, r3
 8007972:	6081      	str	r1, [r0, #8]
 8007974:	69ab      	ldr	r3, [r5, #24]
 8007976:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800797a:	60da      	str	r2, [r3, #12]
 800797c:	f8b9 3000 	ldrh.w	r3, [r9]
 8007980:	42b3      	cmp	r3, r6
 8007982:	d888      	bhi.n	8007896 <ai_platform_network_process+0x52>
 8007984:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 8007988:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800798a:	f1b8 0f00 	cmp.w	r8, #0
 800798e:	f000 80b5 	beq.w	8007afc <ai_platform_network_process+0x2b8>
 8007992:	2b01      	cmp	r3, #1
 8007994:	f240 80a5 	bls.w	8007ae2 <ai_platform_network_process+0x29e>
 8007998:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 800799c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 809e 	beq.w	8007ae2 <ai_platform_network_process+0x29e>
 80079a6:	4645      	mov	r5, r8
 80079a8:	2600      	movs	r6, #0
 80079aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 80a3 	beq.w	8007afa <ai_platform_network_process+0x2b6>
 80079b4:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 80079b8:	2c00      	cmp	r4, #0
 80079ba:	f000 809e 	beq.w	8007afa <ai_platform_network_process+0x2b6>
 80079be:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80079c2:	f8d3 a000 	ldr.w	sl, [r3]
 80079c6:	0133      	lsls	r3, r6, #4
 80079c8:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	f000 8140 	beq.w	8007c52 <ai_platform_network_process+0x40e>
 80079d2:	69a3      	ldr	r3, [r4, #24]
 80079d4:	2101      	movs	r1, #1
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	4628      	mov	r0, r5
 80079dc:	f7ff fa88 	bl	8006ef0 <ai_buffer_get_size>
 80079e0:	9b01      	ldr	r3, [sp, #4]
 80079e2:	4283      	cmp	r3, r0
 80079e4:	d37d      	bcc.n	8007ae2 <ai_platform_network_process+0x29e>
 80079e6:	68e0      	ldr	r0, [r4, #12]
 80079e8:	69a9      	ldr	r1, [r5, #24]
 80079ea:	68c2      	ldr	r2, [r0, #12]
 80079ec:	68cb      	ldr	r3, [r1, #12]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d177      	bne.n	8007ae2 <ai_platform_network_process+0x29e>
 80079f2:	6882      	ldr	r2, [r0, #8]
 80079f4:	688b      	ldr	r3, [r1, #8]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d173      	bne.n	8007ae2 <ai_platform_network_process+0x29e>
 80079fa:	6842      	ldr	r2, [r0, #4]
 80079fc:	684b      	ldr	r3, [r1, #4]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d16f      	bne.n	8007ae2 <ai_platform_network_process+0x29e>
 8007a02:	69a3      	ldr	r3, [r4, #24]
 8007a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a08:	f005 fe7c 	bl	800d704 <ai_array_get_data_byte_size>
 8007a0c:	9001      	str	r0, [sp, #4]
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f7ff fa56 	bl	8006ec0 <get_tensor_byte_size>
 8007a14:	9b01      	ldr	r3, [sp, #4]
 8007a16:	4283      	cmp	r3, r0
 8007a18:	d363      	bcc.n	8007ae2 <ai_platform_network_process+0x29e>
 8007a1a:	69a3      	ldr	r3, [r4, #24]
 8007a1c:	6818      	ldr	r0, [r3, #0]
 8007a1e:	f005 fde3 	bl	800d5e8 <ai_array_to_buffer_fmt>
 8007a22:	682b      	ldr	r3, [r5, #0]
 8007a24:	4043      	eors	r3, r0
 8007a26:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 8007a2a:	f040 8119 	bne.w	8007c60 <ai_platform_network_process+0x41c>
 8007a2e:	686b      	ldr	r3, [r5, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 810e 	beq.w	8007c52 <ai_platform_network_process+0x40e>
 8007a36:	69ab      	ldr	r3, [r5, #24]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 8117 	beq.w	8007c6e <ai_platform_network_process+0x42a>
 8007a40:	459b      	cmp	fp, r3
 8007a42:	4620      	mov	r0, r4
 8007a44:	bf38      	it	cc
 8007a46:	469b      	movcc	fp, r3
 8007a48:	f7ff fa3a 	bl	8006ec0 <get_tensor_byte_size>
 8007a4c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a50:	69aa      	ldr	r2, [r5, #24]
 8007a52:	6812      	ldr	r2, [r2, #0]
 8007a54:	4603      	mov	r3, r0
 8007a56:	fb02 f303 	mul.w	r3, r2, r3
 8007a5a:	f8c8 300c 	str.w	r3, [r8, #12]
 8007a5e:	6869      	ldr	r1, [r5, #4]
 8007a60:	f8c8 1004 	str.w	r1, [r8, #4]
 8007a64:	0132      	lsls	r2, r6, #4
 8007a66:	440b      	add	r3, r1
 8007a68:	f84a 3002 	str.w	r3, [sl, r2]
 8007a6c:	69a0      	ldr	r0, [r4, #24]
 8007a6e:	6803      	ldr	r3, [r0, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	f106 0601 	add.w	r6, r6, #1
 8007a76:	f105 051c 	add.w	r5, r5, #28
 8007a7a:	d439      	bmi.n	8007af0 <ai_platform_network_process+0x2ac>
 8007a7c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007a80:	1a9b      	subs	r3, r3, r2
 8007a82:	4419      	add	r1, r3
 8007a84:	6081      	str	r1, [r0, #8]
 8007a86:	69a3      	ldr	r3, [r4, #24]
 8007a88:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007a8c:	60da      	str	r2, [r3, #12]
 8007a8e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007a92:	429e      	cmp	r6, r3
 8007a94:	d389      	bcc.n	80079aa <ai_platform_network_process+0x166>
 8007a96:	e030      	b.n	8007afa <ai_platform_network_process+0x2b6>
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	61bb      	str	r3, [r7, #24]
 8007a9c:	f002 0203 	and.w	r2, r2, #3
 8007aa0:	2a03      	cmp	r2, #3
 8007aa2:	d10f      	bne.n	8007ac4 <ai_platform_network_process+0x280>
 8007aa4:	2217      	movs	r2, #23
 8007aa6:	2112      	movs	r1, #18
 8007aa8:	f107 000c 	add.w	r0, r7, #12
 8007aac:	f000 f936 	bl	8007d1c <core_set_error>
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	b005      	add	sp, #20
 8007ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab8:	f8b9 3000 	ldrh.w	r3, [r9]
 8007abc:	429e      	cmp	r6, r3
 8007abe:	f4ff aeea 	bcc.w	8007896 <ai_platform_network_process+0x52>
 8007ac2:	e75f      	b.n	8007984 <ai_platform_network_process+0x140>
 8007ac4:	2230      	movs	r2, #48	@ 0x30
 8007ac6:	2111      	movs	r1, #17
 8007ac8:	f107 000c 	add.w	r0, r7, #12
 8007acc:	f000 f926 	bl	8007d1c <core_set_error>
 8007ad0:	e7ee      	b.n	8007ab0 <ai_platform_network_process+0x26c>
 8007ad2:	9f02      	ldr	r7, [sp, #8]
 8007ad4:	2218      	movs	r2, #24
 8007ad6:	2112      	movs	r1, #18
 8007ad8:	f107 000c 	add.w	r0, r7, #12
 8007adc:	f000 f91e 	bl	8007d1c <core_set_error>
 8007ae0:	e7e6      	b.n	8007ab0 <ai_platform_network_process+0x26c>
 8007ae2:	2218      	movs	r2, #24
 8007ae4:	2113      	movs	r1, #19
 8007ae6:	f107 000c 	add.w	r0, r7, #12
 8007aea:	f000 f917 	bl	8007d1c <core_set_error>
 8007aee:	e7df      	b.n	8007ab0 <ai_platform_network_process+0x26c>
 8007af0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007af4:	429e      	cmp	r6, r3
 8007af6:	f4ff af58 	bcc.w	80079aa <ai_platform_network_process+0x166>
 8007afa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007afc:	fa1f fb8b 	uxth.w	fp, fp
 8007b00:	f8a7 b018 	strh.w	fp, [r7, #24]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 808c 	beq.w	8007c22 <ai_platform_network_process+0x3de>
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8007b0e:	f000 808b 	beq.w	8007c28 <ai_platform_network_process+0x3e4>
 8007b12:	f106 080c 	add.w	r8, r6, #12
 8007b16:	8b78      	ldrh	r0, [r7, #26]
 8007b18:	4583      	cmp	fp, r0
 8007b1a:	d9ca      	bls.n	8007ab2 <ai_platform_network_process+0x26e>
 8007b1c:	4645      	mov	r5, r8
 8007b1e:	46bb      	mov	fp, r7
 8007b20:	f04f 0800 	mov.w	r8, #0
 8007b24:	b9ae      	cbnz	r6, 8007b52 <ai_platform_network_process+0x30e>
 8007b26:	e02d      	b.n	8007b84 <ai_platform_network_process+0x340>
 8007b28:	a1c00100 	.word	0xa1c00100
 8007b2c:	68df      	ldr	r7, [r3, #12]
 8007b2e:	1bc9      	subs	r1, r1, r7
 8007b30:	4408      	add	r0, r1
 8007b32:	6098      	str	r0, [r3, #8]
 8007b34:	6993      	ldr	r3, [r2, #24]
 8007b36:	6862      	ldr	r2, [r4, #4]
 8007b38:	60da      	str	r2, [r3, #12]
 8007b3a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007b3e:	f859 200a 	ldr.w	r2, [r9, sl]
 8007b42:	440b      	add	r3, r1
 8007b44:	4293      	cmp	r3, r2
 8007b46:	bf24      	itt	cs
 8007b48:	68e3      	ldrcs	r3, [r4, #12]
 8007b4a:	1ad3      	subcs	r3, r2, r3
 8007b4c:	6063      	str	r3, [r4, #4]
 8007b4e:	f108 0801 	add.w	r8, r8, #1
 8007b52:	8833      	ldrh	r3, [r6, #0]
 8007b54:	4543      	cmp	r3, r8
 8007b56:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007b5a:	d913      	bls.n	8007b84 <ai_platform_network_process+0x340>
 8007b5c:	6873      	ldr	r3, [r6, #4]
 8007b5e:	b18b      	cbz	r3, 8007b84 <ai_platform_network_process+0x340>
 8007b60:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8007b64:	b172      	cbz	r2, 8007b84 <ai_platform_network_process+0x340>
 8007b66:	68b1      	ldr	r1, [r6, #8]
 8007b68:	6993      	ldr	r3, [r2, #24]
 8007b6a:	f8d1 9000 	ldr.w	r9, [r1]
 8007b6e:	681f      	ldr	r7, [r3, #0]
 8007b70:	6899      	ldr	r1, [r3, #8]
 8007b72:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007b76:	00bf      	lsls	r7, r7, #2
 8007b78:	6860      	ldr	r0, [r4, #4]
 8007b7a:	d5d7      	bpl.n	8007b2c <ai_platform_network_process+0x2e8>
 8007b7c:	68a2      	ldr	r2, [r4, #8]
 8007b7e:	f003 fc1b 	bl	800b3b8 <st_int8_copy>
 8007b82:	e7da      	b.n	8007b3a <ai_platform_network_process+0x2f6>
 8007b84:	4658      	mov	r0, fp
 8007b86:	f000 faf1 	bl	800816c <ai_layers_forward_all>
 8007b8a:	2400      	movs	r4, #0
 8007b8c:	b9b5      	cbnz	r5, 8007bbc <ai_platform_network_process+0x378>
 8007b8e:	e03b      	b.n	8007c08 <ai_platform_network_process+0x3c4>
 8007b90:	f859 300a 	ldr.w	r3, [r9, sl]
 8007b94:	eb01 020c 	add.w	r2, r1, ip
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	bf24      	itt	cs
 8007b9c:	f8d8 200c 	ldrcs.w	r2, [r8, #12]
 8007ba0:	1a9a      	subcs	r2, r3, r2
 8007ba2:	f8c8 2004 	str.w	r2, [r8, #4]
 8007ba6:	6981      	ldr	r1, [r0, #24]
 8007ba8:	e9d1 3702 	ldrd	r3, r7, [r1, #8]
 8007bac:	1bdb      	subs	r3, r3, r7
 8007bae:	441a      	add	r2, r3
 8007bb0:	608a      	str	r2, [r1, #8]
 8007bb2:	6983      	ldr	r3, [r0, #24]
 8007bb4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007bb8:	60da      	str	r2, [r3, #12]
 8007bba:	3401      	adds	r4, #1
 8007bbc:	882b      	ldrh	r3, [r5, #0]
 8007bbe:	42a3      	cmp	r3, r4
 8007bc0:	d922      	bls.n	8007c08 <ai_platform_network_process+0x3c4>
 8007bc2:	686b      	ldr	r3, [r5, #4]
 8007bc4:	b303      	cbz	r3, 8007c08 <ai_platform_network_process+0x3c4>
 8007bc6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007bca:	b1e8      	cbz	r0, 8007c08 <ai_platform_network_process+0x3c4>
 8007bcc:	68ab      	ldr	r3, [r5, #8]
 8007bce:	6982      	ldr	r2, [r0, #24]
 8007bd0:	f8d3 9000 	ldr.w	r9, [r3]
 8007bd4:	6813      	ldr	r3, [r2, #0]
 8007bd6:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	e9d8 1c01 	ldrd	r1, ip, [r8, #4]
 8007be0:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007be4:	d5d4      	bpl.n	8007b90 <ai_platform_network_process+0x34c>
 8007be6:	6890      	ldr	r0, [r2, #8]
 8007be8:	4662      	mov	r2, ip
 8007bea:	f003 fbe5 	bl	800b3b8 <st_int8_copy>
 8007bee:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007bf2:	f859 200a 	ldr.w	r2, [r9, sl]
 8007bf6:	440b      	add	r3, r1
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	bf24      	itt	cs
 8007bfc:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007c00:	1ad3      	subcs	r3, r2, r3
 8007c02:	f8c8 3004 	str.w	r3, [r8, #4]
 8007c06:	e7d8      	b.n	8007bba <ai_platform_network_process+0x376>
 8007c08:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 8007c0c:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8007c10:	3001      	adds	r0, #1
 8007c12:	b280      	uxth	r0, r0
 8007c14:	4283      	cmp	r3, r0
 8007c16:	f8ab 001a 	strh.w	r0, [fp, #26]
 8007c1a:	d881      	bhi.n	8007b20 <ai_platform_network_process+0x2dc>
 8007c1c:	b005      	add	sp, #20
 8007c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c22:	461e      	mov	r6, r3
 8007c24:	4698      	mov	r8, r3
 8007c26:	e776      	b.n	8007b16 <ai_platform_network_process+0x2d2>
 8007c28:	f04f 0800 	mov.w	r8, #0
 8007c2c:	e773      	b.n	8007b16 <ai_platform_network_process+0x2d2>
 8007c2e:	9f02      	ldr	r7, [sp, #8]
 8007c30:	e738      	b.n	8007aa4 <ai_platform_network_process+0x260>
 8007c32:	9f02      	ldr	r7, [sp, #8]
 8007c34:	2221      	movs	r2, #33	@ 0x21
 8007c36:	2112      	movs	r1, #18
 8007c38:	f107 000c 	add.w	r0, r7, #12
 8007c3c:	f000 f86e 	bl	8007d1c <core_set_error>
 8007c40:	e736      	b.n	8007ab0 <ai_platform_network_process+0x26c>
 8007c42:	9f02      	ldr	r7, [sp, #8]
 8007c44:	2219      	movs	r2, #25
 8007c46:	2112      	movs	r1, #18
 8007c48:	f107 000c 	add.w	r0, r7, #12
 8007c4c:	f000 f866 	bl	8007d1c <core_set_error>
 8007c50:	e72e      	b.n	8007ab0 <ai_platform_network_process+0x26c>
 8007c52:	2217      	movs	r2, #23
 8007c54:	2113      	movs	r1, #19
 8007c56:	f107 000c 	add.w	r0, r7, #12
 8007c5a:	f000 f85f 	bl	8007d1c <core_set_error>
 8007c5e:	e727      	b.n	8007ab0 <ai_platform_network_process+0x26c>
 8007c60:	2219      	movs	r2, #25
 8007c62:	2113      	movs	r1, #19
 8007c64:	f107 000c 	add.w	r0, r7, #12
 8007c68:	f000 f858 	bl	8007d1c <core_set_error>
 8007c6c:	e720      	b.n	8007ab0 <ai_platform_network_process+0x26c>
 8007c6e:	2221      	movs	r2, #33	@ 0x21
 8007c70:	2113      	movs	r1, #19
 8007c72:	f107 000c 	add.w	r0, r7, #12
 8007c76:	f000 f851 	bl	8007d1c <core_set_error>
 8007c7a:	e719      	b.n	8007ab0 <ai_platform_network_process+0x26c>

08007c7c <ai_platform_observer_register_s>:
 8007c7c:	b508      	push	{r3, lr}
 8007c7e:	4b17      	ldr	r3, [pc, #92]	@ (8007cdc <ai_platform_observer_register_s+0x60>)
 8007c80:	6802      	ldr	r2, [r0, #0]
 8007c82:	4393      	bics	r3, r2
 8007c84:	d121      	bne.n	8007cca <ai_platform_observer_register_s+0x4e>
 8007c86:	4684      	mov	ip, r0
 8007c88:	b309      	cbz	r1, 8007cce <ai_platform_observer_register_s+0x52>
 8007c8a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007c8c:	b9c3      	cbnz	r3, 8007cc0 <ai_platform_observer_register_s+0x44>
 8007c8e:	81cb      	strh	r3, [r1, #14]
 8007c90:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007c92:	2201      	movs	r2, #1
 8007c94:	b14b      	cbz	r3, 8007caa <ai_platform_observer_register_s+0x2e>
 8007c96:	81ca      	strh	r2, [r1, #14]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	4283      	cmp	r3, r0
 8007c9e:	f102 0201 	add.w	r2, r2, #1
 8007ca2:	d002      	beq.n	8007caa <ai_platform_observer_register_s+0x2e>
 8007ca4:	b292      	uxth	r2, r2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1f5      	bne.n	8007c96 <ai_platform_observer_register_s+0x1a>
 8007caa:	7a0b      	ldrb	r3, [r1, #8]
 8007cac:	4a0c      	ldr	r2, [pc, #48]	@ (8007ce0 <ai_platform_observer_register_s+0x64>)
 8007cae:	2000      	movs	r0, #0
 8007cb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cb4:	8188      	strh	r0, [r1, #12]
 8007cb6:	608b      	str	r3, [r1, #8]
 8007cb8:	e9cc 2110 	strd	r2, r1, [ip, #64]	@ 0x40
 8007cbc:	2001      	movs	r0, #1
 8007cbe:	bd08      	pop	{r3, pc}
 8007cc0:	2240      	movs	r2, #64	@ 0x40
 8007cc2:	2111      	movs	r1, #17
 8007cc4:	300c      	adds	r0, #12
 8007cc6:	f000 f829 	bl	8007d1c <core_set_error>
 8007cca:	2000      	movs	r0, #0
 8007ccc:	bd08      	pop	{r3, pc}
 8007cce:	2211      	movs	r2, #17
 8007cd0:	2110      	movs	r1, #16
 8007cd2:	300c      	adds	r0, #12
 8007cd4:	f000 f822 	bl	8007d1c <core_set_error>
 8007cd8:	e7f7      	b.n	8007cca <ai_platform_observer_register_s+0x4e>
 8007cda:	bf00      	nop
 8007cdc:	a1c00100 	.word	0xa1c00100
 8007ce0:	08006f95 	.word	0x08006f95

08007ce4 <ai_platform_observer_unregister_s>:
 8007ce4:	b508      	push	{r3, lr}
 8007ce6:	4b08      	ldr	r3, [pc, #32]	@ (8007d08 <ai_platform_observer_unregister_s+0x24>)
 8007ce8:	6802      	ldr	r2, [r0, #0]
 8007cea:	4393      	bics	r3, r2
 8007cec:	d10a      	bne.n	8007d04 <ai_platform_observer_unregister_s+0x20>
 8007cee:	b121      	cbz	r1, 8007cfa <ai_platform_observer_unregister_s+0x16>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	bd08      	pop	{r3, pc}
 8007cfa:	2211      	movs	r2, #17
 8007cfc:	2110      	movs	r1, #16
 8007cfe:	300c      	adds	r0, #12
 8007d00:	f000 f80c 	bl	8007d1c <core_set_error>
 8007d04:	2000      	movs	r0, #0
 8007d06:	bd08      	pop	{r3, pc}
 8007d08:	a1c00100 	.word	0xa1c00100

08007d0c <core_init>:
 8007d0c:	2001      	movs	r0, #1
 8007d0e:	4770      	bx	lr

08007d10 <core_get_error>:
 8007d10:	4603      	mov	r3, r0
 8007d12:	2200      	movs	r2, #0
 8007d14:	6800      	ldr	r0, [r0, #0]
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop

08007d1c <core_set_error>:
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	7800      	ldrb	r0, [r0, #0]
 8007d20:	b108      	cbz	r0, 8007d26 <core_set_error+0xa>
 8007d22:	2000      	movs	r0, #0
 8007d24:	4770      	bx	lr
 8007d26:	7019      	strb	r1, [r3, #0]
 8007d28:	6819      	ldr	r1, [r3, #0]
 8007d2a:	f362 211f 	bfi	r1, r2, #8, #24
 8007d2e:	2001      	movs	r0, #1
 8007d30:	6019      	str	r1, [r3, #0]
 8007d32:	4770      	bx	lr

08007d34 <node_convert>:
 8007d34:	6982      	ldr	r2, [r0, #24]
 8007d36:	8813      	ldrh	r3, [r2, #0]
 8007d38:	b90b      	cbnz	r3, 8007d3e <node_convert+0xa>
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	deff      	udf	#255	@ 0xff
 8007d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d40:	6852      	ldr	r2, [r2, #4]
 8007d42:	6855      	ldr	r5, [r2, #4]
 8007d44:	b083      	sub	sp, #12
 8007d46:	b105      	cbz	r5, 8007d4a <node_convert+0x16>
 8007d48:	682d      	ldr	r5, [r5, #0]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	f000 80d6 	beq.w	8007efc <node_convert+0x1c8>
 8007d50:	6916      	ldr	r6, [r2, #16]
 8007d52:	b106      	cbz	r6, 8007d56 <node_convert+0x22>
 8007d54:	6836      	ldr	r6, [r6, #0]
 8007d56:	68ab      	ldr	r3, [r5, #8]
 8007d58:	0a1b      	lsrs	r3, r3, #8
 8007d5a:	f000 80b8 	beq.w	8007ece <node_convert+0x19a>
 8007d5e:	68e9      	ldr	r1, [r5, #12]
 8007d60:	2401      	movs	r4, #1
 8007d62:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007d66:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d6a:	4299      	cmp	r1, r3
 8007d6c:	fb02 f404 	mul.w	r4, r2, r4
 8007d70:	d1f9      	bne.n	8007d66 <node_convert+0x32>
 8007d72:	69aa      	ldr	r2, [r5, #24]
 8007d74:	69b7      	ldr	r7, [r6, #24]
 8007d76:	6813      	ldr	r3, [r2, #0]
 8007d78:	6890      	ldr	r0, [r2, #8]
 8007d7a:	f3c3 4243 	ubfx	r2, r3, #17, #4
 8007d7e:	2a01      	cmp	r2, #1
 8007d80:	d016      	beq.n	8007db0 <node_convert+0x7c>
 8007d82:	6829      	ldr	r1, [r5, #0]
 8007d84:	68be      	ldr	r6, [r7, #8]
 8007d86:	15da      	asrs	r2, r3, #23
 8007d88:	f002 0201 	and.w	r2, r2, #1
 8007d8c:	b341      	cbz	r1, 8007de0 <node_convert+0xac>
 8007d8e:	684d      	ldr	r5, [r1, #4]
 8007d90:	2d00      	cmp	r5, #0
 8007d92:	d066      	beq.n	8007e62 <node_convert+0x12e>
 8007d94:	884b      	ldrh	r3, [r1, #2]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d146      	bne.n	8007e28 <node_convert+0xf4>
 8007d9a:	2a00      	cmp	r2, #0
 8007d9c:	d063      	beq.n	8007e66 <node_convert+0x132>
 8007d9e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007da2:	4622      	mov	r2, r4
 8007da4:	4631      	mov	r1, r6
 8007da6:	b003      	add	sp, #12
 8007da8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007dac:	f001 b886 	b.w	8008ebc <forward_lite_node_convert_integer_is8of32>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	6835      	ldr	r5, [r6, #0]
 8007db4:	15da      	asrs	r2, r3, #23
 8007db6:	2d00      	cmp	r5, #0
 8007db8:	d05f      	beq.n	8007e7a <node_convert+0x146>
 8007dba:	686b      	ldr	r3, [r5, #4]
 8007dbc:	68b9      	ldr	r1, [r7, #8]
 8007dbe:	f002 0201 	and.w	r2, r2, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d039      	beq.n	8007e3a <node_convert+0x106>
 8007dc6:	886d      	ldrh	r5, [r5, #2]
 8007dc8:	2d00      	cmp	r5, #0
 8007dca:	d03f      	beq.n	8007e4c <node_convert+0x118>
 8007dcc:	681d      	ldr	r5, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	ed95 0a00 	vldr	s0, [r5]
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	f000 8085 	beq.w	8007ee4 <node_convert+0x1b0>
 8007dda:	f993 3000 	ldrsb.w	r3, [r3]
 8007dde:	e02f      	b.n	8007e40 <node_convert+0x10c>
 8007de0:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8007de4:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
 8007de8:	1b4d      	subs	r5, r1, r5
 8007dea:	3540      	adds	r5, #64	@ 0x40
 8007dec:	2908      	cmp	r1, #8
 8007dee:	eba5 0502 	sub.w	r5, r5, r2
 8007df2:	4631      	mov	r1, r6
 8007df4:	4622      	mov	r2, r4
 8007df6:	d06c      	beq.n	8007ed2 <node_convert+0x19e>
 8007df8:	f003 f830 	bl	800ae5c <st_int16_to_f32>
 8007dfc:	b195      	cbz	r5, 8007e24 <node_convert+0xf0>
 8007dfe:	ee07 5a90 	vmov	s15, r5
 8007e02:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007e06:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8007e0a:	f008 fad5 	bl	80103b8 <powf>
 8007e0e:	b14c      	cbz	r4, 8007e24 <node_convert+0xf0>
 8007e10:	2300      	movs	r3, #0
 8007e12:	ecf6 7a01 	vldmia	r6!, {s15}
 8007e16:	3301      	adds	r3, #1
 8007e18:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007e1c:	42a3      	cmp	r3, r4
 8007e1e:	ed46 7a01 	vstr	s15, [r6, #-4]
 8007e22:	d1f6      	bne.n	8007e12 <node_convert+0xde>
 8007e24:	b003      	add	sp, #12
 8007e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	ed93 0a00 	vldr	s0, [r3]
 8007e2e:	686b      	ldr	r3, [r5, #4]
 8007e30:	2a00      	cmp	r2, #0
 8007e32:	d051      	beq.n	8007ed8 <node_convert+0x1a4>
 8007e34:	f993 3000 	ldrsb.w	r3, [r3]
 8007e38:	e7b3      	b.n	8007da2 <node_convert+0x6e>
 8007e3a:	b14a      	cbz	r2, 8007e50 <node_convert+0x11c>
 8007e3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007e40:	4622      	mov	r2, r4
 8007e42:	b003      	add	sp, #12
 8007e44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007e48:	f001 b83c 	b.w	8008ec4 <forward_lite_node_convert_integer_if32os8>
 8007e4c:	2a00      	cmp	r2, #0
 8007e4e:	d14b      	bne.n	8007ee8 <node_convert+0x1b4>
 8007e50:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007e54:	4613      	mov	r3, r2
 8007e56:	4622      	mov	r2, r4
 8007e58:	b003      	add	sp, #12
 8007e5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007e5e:	f001 b833 	b.w	8008ec8 <forward_lite_node_convert_integer_if32ou8>
 8007e62:	2a00      	cmp	r2, #0
 8007e64:	d13a      	bne.n	8007edc <node_convert+0x1a8>
 8007e66:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	4631      	mov	r1, r6
 8007e70:	b003      	add	sp, #12
 8007e72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007e76:	f001 b823 	b.w	8008ec0 <forward_lite_node_convert_integer_iu8of32>
 8007e7a:	f3c3 16c6 	ubfx	r6, r3, #7, #7
 8007e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e82:	1af3      	subs	r3, r6, r3
 8007e84:	f002 0201 	and.w	r2, r2, #1
 8007e88:	3340      	adds	r3, #64	@ 0x40
 8007e8a:	1a9b      	subs	r3, r3, r2
 8007e8c:	d016      	beq.n	8007ebc <node_convert+0x188>
 8007e8e:	425b      	negs	r3, r3
 8007e90:	ee00 3a90 	vmov	s1, r3
 8007e94:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007e98:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8007e9c:	9001      	str	r0, [sp, #4]
 8007e9e:	f008 fa8b 	bl	80103b8 <powf>
 8007ea2:	9801      	ldr	r0, [sp, #4]
 8007ea4:	b154      	cbz	r4, 8007ebc <node_convert+0x188>
 8007ea6:	462b      	mov	r3, r5
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	ecf2 7a01 	vldmia	r2!, {s15}
 8007eae:	3301      	adds	r3, #1
 8007eb0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007eba:	d1f6      	bne.n	8007eaa <node_convert+0x176>
 8007ebc:	2e08      	cmp	r6, #8
 8007ebe:	68b9      	ldr	r1, [r7, #8]
 8007ec0:	d016      	beq.n	8007ef0 <node_convert+0x1bc>
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	b003      	add	sp, #12
 8007ec6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007eca:	f002 be23 	b.w	800ab14 <st_f32_to_int16>
 8007ece:	2401      	movs	r4, #1
 8007ed0:	e74f      	b.n	8007d72 <node_convert+0x3e>
 8007ed2:	f003 fe63 	bl	800bb9c <st_int8_to_f32>
 8007ed6:	e791      	b.n	8007dfc <node_convert+0xc8>
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	e7c7      	b.n	8007e6c <node_convert+0x138>
 8007edc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007ee0:	462b      	mov	r3, r5
 8007ee2:	e75e      	b.n	8007da2 <node_convert+0x6e>
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	e7b6      	b.n	8007e56 <node_convert+0x122>
 8007ee8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007eec:	462b      	mov	r3, r5
 8007eee:	e7a7      	b.n	8007e40 <node_convert+0x10c>
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	b003      	add	sp, #12
 8007ef4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007ef8:	f002 bed2 	b.w	800aca0 <st_f32_to_int8>
 8007efc:	2300      	movs	r3, #0
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	deff      	udf	#255	@ 0xff
 8007f02:	bf00      	nop

08007f04 <node_convert_integer>:
 8007f04:	6982      	ldr	r2, [r0, #24]
 8007f06:	8813      	ldrh	r3, [r2, #0]
 8007f08:	b90b      	cbnz	r3, 8007f0e <node_convert_integer+0xa>
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	deff      	udf	#255	@ 0xff
 8007f0e:	b570      	push	{r4, r5, r6, lr}
 8007f10:	6852      	ldr	r2, [r2, #4]
 8007f12:	6855      	ldr	r5, [r2, #4]
 8007f14:	b082      	sub	sp, #8
 8007f16:	b105      	cbz	r5, 8007f1a <node_convert_integer+0x16>
 8007f18:	682d      	ldr	r5, [r5, #0]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	f000 80cb 	beq.w	80080b6 <node_convert_integer+0x1b2>
 8007f20:	6916      	ldr	r6, [r2, #16]
 8007f22:	b106      	cbz	r6, 8007f26 <node_convert_integer+0x22>
 8007f24:	6836      	ldr	r6, [r6, #0]
 8007f26:	68ab      	ldr	r3, [r5, #8]
 8007f28:	0a1b      	lsrs	r3, r3, #8
 8007f2a:	f000 80a0 	beq.w	800806e <node_convert_integer+0x16a>
 8007f2e:	68e8      	ldr	r0, [r5, #12]
 8007f30:	2201      	movs	r2, #1
 8007f32:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007f36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f3a:	4298      	cmp	r0, r3
 8007f3c:	fb01 f202 	mul.w	r2, r1, r2
 8007f40:	d1f9      	bne.n	8007f36 <node_convert_integer+0x32>
 8007f42:	682b      	ldr	r3, [r5, #0]
 8007f44:	6834      	ldr	r4, [r6, #0]
 8007f46:	b18b      	cbz	r3, 8007f6c <node_convert_integer+0x68>
 8007f48:	6859      	ldr	r1, [r3, #4]
 8007f4a:	b179      	cbz	r1, 8007f6c <node_convert_integer+0x68>
 8007f4c:	8858      	ldrh	r0, [r3, #2]
 8007f4e:	b168      	cbz	r0, 8007f6c <node_convert_integer+0x68>
 8007f50:	6809      	ldr	r1, [r1, #0]
 8007f52:	edd1 7a00 	vldr	s15, [r1]
 8007f56:	b16c      	cbz	r4, 8007f74 <node_convert_integer+0x70>
 8007f58:	6861      	ldr	r1, [r4, #4]
 8007f5a:	b159      	cbz	r1, 8007f74 <node_convert_integer+0x70>
 8007f5c:	8860      	ldrh	r0, [r4, #2]
 8007f5e:	b148      	cbz	r0, 8007f74 <node_convert_integer+0x70>
 8007f60:	6809      	ldr	r1, [r1, #0]
 8007f62:	ed91 7a00 	vldr	s14, [r1]
 8007f66:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8007f6a:	e007      	b.n	8007f7c <node_convert_integer+0x78>
 8007f6c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007f70:	2c00      	cmp	r4, #0
 8007f72:	d1f1      	bne.n	8007f58 <node_convert_integer+0x54>
 8007f74:	eeb0 0a67 	vmov.f32	s0, s15
 8007f78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f7c:	69a8      	ldr	r0, [r5, #24]
 8007f7e:	69b1      	ldr	r1, [r6, #24]
 8007f80:	6806      	ldr	r6, [r0, #0]
 8007f82:	680d      	ldr	r5, [r1, #0]
 8007f84:	6880      	ldr	r0, [r0, #8]
 8007f86:	6889      	ldr	r1, [r1, #8]
 8007f88:	0236      	lsls	r6, r6, #8
 8007f8a:	f3c5 55c0 	ubfx	r5, r5, #23, #1
 8007f8e:	d416      	bmi.n	8007fbe <node_convert_integer+0xba>
 8007f90:	2d00      	cmp	r5, #0
 8007f92:	d137      	bne.n	8008004 <node_convert_integer+0x100>
 8007f94:	b133      	cbz	r3, 8007fa4 <node_convert_integer+0xa0>
 8007f96:	685d      	ldr	r5, [r3, #4]
 8007f98:	2d00      	cmp	r5, #0
 8007f9a:	d078      	beq.n	800808e <node_convert_integer+0x18a>
 8007f9c:	885b      	ldrh	r3, [r3, #2]
 8007f9e:	b10b      	cbz	r3, 8007fa4 <node_convert_integer+0xa0>
 8007fa0:	686b      	ldr	r3, [r5, #4]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	b134      	cbz	r4, 8007fb4 <node_convert_integer+0xb0>
 8007fa6:	6865      	ldr	r5, [r4, #4]
 8007fa8:	2d00      	cmp	r5, #0
 8007faa:	d06a      	beq.n	8008082 <node_convert_integer+0x17e>
 8007fac:	8864      	ldrh	r4, [r4, #2]
 8007fae:	b10c      	cbz	r4, 8007fb4 <node_convert_integer+0xb0>
 8007fb0:	686c      	ldr	r4, [r5, #4]
 8007fb2:	7824      	ldrb	r4, [r4, #0]
 8007fb4:	9400      	str	r4, [sp, #0]
 8007fb6:	f000 ff91 	bl	8008edc <forward_lite_node_convert_integer_iu8ou8>
 8007fba:	b002      	add	sp, #8
 8007fbc:	bd70      	pop	{r4, r5, r6, pc}
 8007fbe:	b1b5      	cbz	r5, 8007fee <node_convert_integer+0xea>
 8007fc0:	b13b      	cbz	r3, 8007fd2 <node_convert_integer+0xce>
 8007fc2:	685d      	ldr	r5, [r3, #4]
 8007fc4:	2d00      	cmp	r5, #0
 8007fc6:	d05e      	beq.n	8008086 <node_convert_integer+0x182>
 8007fc8:	885b      	ldrh	r3, [r3, #2]
 8007fca:	b113      	cbz	r3, 8007fd2 <node_convert_integer+0xce>
 8007fcc:	686b      	ldr	r3, [r5, #4]
 8007fce:	f993 3000 	ldrsb.w	r3, [r3]
 8007fd2:	b13c      	cbz	r4, 8007fe4 <node_convert_integer+0xe0>
 8007fd4:	6865      	ldr	r5, [r4, #4]
 8007fd6:	2d00      	cmp	r5, #0
 8007fd8:	d05f      	beq.n	800809a <node_convert_integer+0x196>
 8007fda:	8864      	ldrh	r4, [r4, #2]
 8007fdc:	b114      	cbz	r4, 8007fe4 <node_convert_integer+0xe0>
 8007fde:	686c      	ldr	r4, [r5, #4]
 8007fe0:	f994 4000 	ldrsb.w	r4, [r4]
 8007fe4:	9400      	str	r4, [sp, #0]
 8007fe6:	f000 ff71 	bl	8008ecc <forward_lite_node_convert_integer_is8os8>
 8007fea:	b002      	add	sp, #8
 8007fec:	bd70      	pop	{r4, r5, r6, pc}
 8007fee:	b34b      	cbz	r3, 8008044 <node_convert_integer+0x140>
 8007ff0:	685d      	ldr	r5, [r3, #4]
 8007ff2:	2d00      	cmp	r5, #0
 8007ff4:	d040      	beq.n	8008078 <node_convert_integer+0x174>
 8007ff6:	885b      	ldrh	r3, [r3, #2]
 8007ff8:	b323      	cbz	r3, 8008044 <node_convert_integer+0x140>
 8007ffa:	686b      	ldr	r3, [r5, #4]
 8007ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8008000:	bb0c      	cbnz	r4, 8008046 <node_convert_integer+0x142>
 8008002:	e026      	b.n	8008052 <node_convert_integer+0x14e>
 8008004:	b143      	cbz	r3, 8008018 <node_convert_integer+0x114>
 8008006:	685d      	ldr	r5, [r3, #4]
 8008008:	2d00      	cmp	r5, #0
 800800a:	d032      	beq.n	8008072 <node_convert_integer+0x16e>
 800800c:	885b      	ldrh	r3, [r3, #2]
 800800e:	b11b      	cbz	r3, 8008018 <node_convert_integer+0x114>
 8008010:	686b      	ldr	r3, [r5, #4]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	b90c      	cbnz	r4, 800801a <node_convert_integer+0x116>
 8008016:	e007      	b.n	8008028 <node_convert_integer+0x124>
 8008018:	b364      	cbz	r4, 8008074 <node_convert_integer+0x170>
 800801a:	6865      	ldr	r5, [r4, #4]
 800801c:	b37d      	cbz	r5, 800807e <node_convert_integer+0x17a>
 800801e:	8864      	ldrh	r4, [r4, #2]
 8008020:	b114      	cbz	r4, 8008028 <node_convert_integer+0x124>
 8008022:	686c      	ldr	r4, [r5, #4]
 8008024:	f994 4000 	ldrsb.w	r4, [r4]
 8008028:	eef4 7a47 	vcmp.f32	s15, s14
 800802c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008030:	d103      	bne.n	800803a <node_convert_integer+0x136>
 8008032:	f104 0580 	add.w	r5, r4, #128	@ 0x80
 8008036:	42ab      	cmp	r3, r5
 8008038:	d039      	beq.n	80080ae <node_convert_integer+0x1aa>
 800803a:	9400      	str	r4, [sp, #0]
 800803c:	f000 ff56 	bl	8008eec <forward_lite_node_convert_integer_iu8os8>
 8008040:	b002      	add	sp, #8
 8008042:	bd70      	pop	{r4, r5, r6, pc}
 8008044:	b1cc      	cbz	r4, 800807a <node_convert_integer+0x176>
 8008046:	6865      	ldr	r5, [r4, #4]
 8008048:	b32d      	cbz	r5, 8008096 <node_convert_integer+0x192>
 800804a:	8864      	ldrh	r4, [r4, #2]
 800804c:	b10c      	cbz	r4, 8008052 <node_convert_integer+0x14e>
 800804e:	686c      	ldr	r4, [r5, #4]
 8008050:	7824      	ldrb	r4, [r4, #0]
 8008052:	eef4 7a47 	vcmp.f32	s15, s14
 8008056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800805a:	d103      	bne.n	8008064 <node_convert_integer+0x160>
 800805c:	f103 0580 	add.w	r5, r3, #128	@ 0x80
 8008060:	42a5      	cmp	r5, r4
 8008062:	d020      	beq.n	80080a6 <node_convert_integer+0x1a2>
 8008064:	9400      	str	r4, [sp, #0]
 8008066:	f000 ff4b 	bl	8008f00 <forward_lite_node_convert_integer_is8ou8>
 800806a:	b002      	add	sp, #8
 800806c:	bd70      	pop	{r4, r5, r6, pc}
 800806e:	2201      	movs	r2, #1
 8008070:	e767      	b.n	8007f42 <node_convert_integer+0x3e>
 8008072:	b9a4      	cbnz	r4, 800809e <node_convert_integer+0x19a>
 8008074:	4623      	mov	r3, r4
 8008076:	e7e0      	b.n	800803a <node_convert_integer+0x136>
 8008078:	b99c      	cbnz	r4, 80080a2 <node_convert_integer+0x19e>
 800807a:	4623      	mov	r3, r4
 800807c:	e7f2      	b.n	8008064 <node_convert_integer+0x160>
 800807e:	462c      	mov	r4, r5
 8008080:	e7d2      	b.n	8008028 <node_convert_integer+0x124>
 8008082:	462c      	mov	r4, r5
 8008084:	e796      	b.n	8007fb4 <node_convert_integer+0xb0>
 8008086:	462b      	mov	r3, r5
 8008088:	2c00      	cmp	r4, #0
 800808a:	d1a3      	bne.n	8007fd4 <node_convert_integer+0xd0>
 800808c:	e7aa      	b.n	8007fe4 <node_convert_integer+0xe0>
 800808e:	462b      	mov	r3, r5
 8008090:	2c00      	cmp	r4, #0
 8008092:	d188      	bne.n	8007fa6 <node_convert_integer+0xa2>
 8008094:	e78e      	b.n	8007fb4 <node_convert_integer+0xb0>
 8008096:	462c      	mov	r4, r5
 8008098:	e7db      	b.n	8008052 <node_convert_integer+0x14e>
 800809a:	462c      	mov	r4, r5
 800809c:	e7a2      	b.n	8007fe4 <node_convert_integer+0xe0>
 800809e:	462b      	mov	r3, r5
 80080a0:	e7bb      	b.n	800801a <node_convert_integer+0x116>
 80080a2:	462b      	mov	r3, r5
 80080a4:	e7cf      	b.n	8008046 <node_convert_integer+0x142>
 80080a6:	9400      	str	r4, [sp, #0]
 80080a8:	f000 ff32 	bl	8008f10 <forward_lite_node_convert_integer_is8ou8_fast>
 80080ac:	e785      	b.n	8007fba <node_convert_integer+0xb6>
 80080ae:	9400      	str	r4, [sp, #0]
 80080b0:	f000 ff24 	bl	8008efc <forward_lite_node_convert_integer_iu8os8_fast>
 80080b4:	e781      	b.n	8007fba <node_convert_integer+0xb6>
 80080b6:	2300      	movs	r3, #0
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	deff      	udf	#255	@ 0xff

080080bc <ai_check_custom_types>:
 80080bc:	b082      	sub	sp, #8
 80080be:	4b13      	ldr	r3, [pc, #76]	@ (800810c <ai_check_custom_types+0x50>)
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	b118      	cbz	r0, 80080cc <ai_check_custom_types+0x10>
 80080c4:	7803      	ldrb	r3, [r0, #0]
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d002      	beq.n	80080d0 <ai_check_custom_types+0x14>
 80080ca:	2000      	movs	r0, #0
 80080cc:	b002      	add	sp, #8
 80080ce:	4770      	bx	lr
 80080d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d004      	beq.n	80080e2 <ai_check_custom_types+0x26>
 80080d8:	2001      	movs	r0, #1
 80080da:	f080 0001 	eor.w	r0, r0, #1
 80080de:	b002      	add	sp, #8
 80080e0:	4770      	bx	lr
 80080e2:	7842      	ldrb	r2, [r0, #1]
 80080e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	f100 0001 	add.w	r0, r0, #1
 80080ee:	d1f3      	bne.n	80080d8 <ai_check_custom_types+0x1c>
 80080f0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80080f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d1ed      	bne.n	80080d8 <ai_check_custom_types+0x1c>
 80080fc:	7842      	ldrb	r2, [r0, #1]
 80080fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008102:	429a      	cmp	r2, r3
 8008104:	d1e8      	bne.n	80080d8 <ai_check_custom_types+0x1c>
 8008106:	2000      	movs	r0, #0
 8008108:	e7e7      	b.n	80080da <ai_check_custom_types+0x1e>
 800810a:	bf00      	nop
 800810c:	84048403 	.word	0x84048403

08008110 <ai_layers_init_all>:
 8008110:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008112:	4601      	mov	r1, r0
 8008114:	b153      	cbz	r3, 800812c <ai_layers_init_all+0x1c>
 8008116:	2000      	movs	r0, #0
 8008118:	461a      	mov	r2, r3
 800811a:	60d9      	str	r1, [r3, #12]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	4293      	cmp	r3, r2
 8008120:	f100 0001 	add.w	r0, r0, #1
 8008124:	d003      	beq.n	800812e <ai_layers_init_all+0x1e>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f6      	bne.n	8008118 <ai_layers_init_all+0x8>
 800812a:	4770      	bx	lr
 800812c:	4618      	mov	r0, r3
 800812e:	4770      	bx	lr

08008130 <ai_layers_post_init_all>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8008134:	b1b4      	cbz	r4, 8008164 <ai_layers_post_init_all+0x34>
 8008136:	6863      	ldr	r3, [r4, #4]
 8008138:	07db      	lsls	r3, r3, #31
 800813a:	f04f 0500 	mov.w	r5, #0
 800813e:	d504      	bpl.n	800814a <ai_layers_post_init_all+0x1a>
 8008140:	6a23      	ldr	r3, [r4, #32]
 8008142:	4620      	mov	r0, r4
 8008144:	b10b      	cbz	r3, 800814a <ai_layers_post_init_all+0x1a>
 8008146:	4798      	blx	r3
 8008148:	3501      	adds	r5, #1
 800814a:	6923      	ldr	r3, [r4, #16]
 800814c:	42a3      	cmp	r3, r4
 800814e:	d007      	beq.n	8008160 <ai_layers_post_init_all+0x30>
 8008150:	b133      	cbz	r3, 8008160 <ai_layers_post_init_all+0x30>
 8008152:	461c      	mov	r4, r3
 8008154:	6863      	ldr	r3, [r4, #4]
 8008156:	07db      	lsls	r3, r3, #31
 8008158:	d4f2      	bmi.n	8008140 <ai_layers_post_init_all+0x10>
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	42a3      	cmp	r3, r4
 800815e:	d1f7      	bne.n	8008150 <ai_layers_post_init_all+0x20>
 8008160:	4628      	mov	r0, r5
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	4625      	mov	r5, r4
 8008166:	4628      	mov	r0, r5
 8008168:	bd38      	pop	{r3, r4, r5, pc}
 800816a:	bf00      	nop

0800816c <ai_layers_forward_all>:
 800816c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008170:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8008174:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8008176:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8008178:	4604      	mov	r4, r0
 800817a:	f1b8 0f00 	cmp.w	r8, #0
 800817e:	d02a      	beq.n	80081d6 <ai_layers_forward_all+0x6a>
 8008180:	b32d      	cbz	r5, 80081ce <ai_layers_forward_all+0x62>
 8008182:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8008184:	4629      	mov	r1, r5
 8008186:	2001      	movs	r0, #1
 8008188:	47c0      	blx	r8
 800818a:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800818c:	b1fe      	cbz	r6, 80081ce <ai_layers_forward_all+0x62>
 800818e:	2700      	movs	r7, #0
 8008190:	4631      	mov	r1, r6
 8008192:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8008194:	2002      	movs	r0, #2
 8008196:	47c0      	blx	r8
 8008198:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800819a:	4628      	mov	r0, r5
 800819c:	696b      	ldr	r3, [r5, #20]
 800819e:	4798      	blx	r3
 80081a0:	692e      	ldr	r6, [r5, #16]
 80081a2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80081a4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80081a6:	42b5      	cmp	r5, r6
 80081a8:	f04f 0003 	mov.w	r0, #3
 80081ac:	d007      	beq.n	80081be <ai_layers_forward_all+0x52>
 80081ae:	47c0      	blx	r8
 80081b0:	3701      	adds	r7, #1
 80081b2:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80081b4:	2e00      	cmp	r6, #0
 80081b6:	d1eb      	bne.n	8008190 <ai_layers_forward_all+0x24>
 80081b8:	4638      	mov	r0, r7
 80081ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081be:	2003      	movs	r0, #3
 80081c0:	47c0      	blx	r8
 80081c2:	2300      	movs	r3, #0
 80081c4:	3701      	adds	r7, #1
 80081c6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80081c8:	4638      	mov	r0, r7
 80081ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ce:	2700      	movs	r7, #0
 80081d0:	4638      	mov	r0, r7
 80081d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	d0f9      	beq.n	80081ce <ai_layers_forward_all+0x62>
 80081da:	4647      	mov	r7, r8
 80081dc:	696b      	ldr	r3, [r5, #20]
 80081de:	4628      	mov	r0, r5
 80081e0:	4798      	blx	r3
 80081e2:	462b      	mov	r3, r5
 80081e4:	692d      	ldr	r5, [r5, #16]
 80081e6:	429d      	cmp	r5, r3
 80081e8:	d004      	beq.n	80081f4 <ai_layers_forward_all+0x88>
 80081ea:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80081ec:	3701      	adds	r7, #1
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	d1f4      	bne.n	80081dc <ai_layers_forward_all+0x70>
 80081f2:	e7e1      	b.n	80081b8 <ai_layers_forward_all+0x4c>
 80081f4:	2300      	movs	r3, #0
 80081f6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80081f8:	3701      	adds	r7, #1
 80081fa:	e7dd      	b.n	80081b8 <ai_layers_forward_all+0x4c>

080081fc <ai_layers_destroy_all>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8008200:	b1b4      	cbz	r4, 8008230 <ai_layers_destroy_all+0x34>
 8008202:	6863      	ldr	r3, [r4, #4]
 8008204:	075b      	lsls	r3, r3, #29
 8008206:	f04f 0500 	mov.w	r5, #0
 800820a:	d504      	bpl.n	8008216 <ai_layers_destroy_all+0x1a>
 800820c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800820e:	4620      	mov	r0, r4
 8008210:	b10b      	cbz	r3, 8008216 <ai_layers_destroy_all+0x1a>
 8008212:	4798      	blx	r3
 8008214:	3501      	adds	r5, #1
 8008216:	6923      	ldr	r3, [r4, #16]
 8008218:	42a3      	cmp	r3, r4
 800821a:	d007      	beq.n	800822c <ai_layers_destroy_all+0x30>
 800821c:	b133      	cbz	r3, 800822c <ai_layers_destroy_all+0x30>
 800821e:	461c      	mov	r4, r3
 8008220:	6863      	ldr	r3, [r4, #4]
 8008222:	075b      	lsls	r3, r3, #29
 8008224:	d4f2      	bmi.n	800820c <ai_layers_destroy_all+0x10>
 8008226:	6923      	ldr	r3, [r4, #16]
 8008228:	42a3      	cmp	r3, r4
 800822a:	d1f7      	bne.n	800821c <ai_layers_destroy_all+0x20>
 800822c:	4628      	mov	r0, r5
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	4625      	mov	r5, r4
 8008232:	4628      	mov	r0, r5
 8008234:	bd38      	pop	{r3, r4, r5, pc}
 8008236:	bf00      	nop

08008238 <forward_conv2d_rgb_sssa8_ch>:
 8008238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823c:	ed2d 8b02 	vpush	{d8}
 8008240:	6983      	ldr	r3, [r0, #24]
 8008242:	881c      	ldrh	r4, [r3, #0]
 8008244:	b095      	sub	sp, #84	@ 0x54
 8008246:	b90c      	cbnz	r4, 800824c <forward_conv2d_rgb_sssa8_ch+0x14>
 8008248:	6863      	ldr	r3, [r4, #4]
 800824a:	deff      	udf	#255	@ 0xff
 800824c:	685d      	ldr	r5, [r3, #4]
 800824e:	686a      	ldr	r2, [r5, #4]
 8008250:	b102      	cbz	r2, 8008254 <forward_conv2d_rgb_sssa8_ch+0x1c>
 8008252:	6812      	ldr	r2, [r2, #0]
 8008254:	2c01      	cmp	r4, #1
 8008256:	f000 8098 	beq.w	800838a <forward_conv2d_rgb_sssa8_ch+0x152>
 800825a:	692b      	ldr	r3, [r5, #16]
 800825c:	b103      	cbz	r3, 8008260 <forward_conv2d_rgb_sssa8_ch+0x28>
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2c02      	cmp	r4, #2
 8008262:	f000 8092 	beq.w	800838a <forward_conv2d_rgb_sssa8_ch+0x152>
 8008266:	69ee      	ldr	r6, [r5, #28]
 8008268:	2e00      	cmp	r6, #0
 800826a:	f000 809b 	beq.w	80083a4 <forward_conv2d_rgb_sssa8_ch+0x16c>
 800826e:	8b2f      	ldrh	r7, [r5, #24]
 8008270:	6831      	ldr	r1, [r6, #0]
 8008272:	2f01      	cmp	r7, #1
 8008274:	f240 8098 	bls.w	80083a8 <forward_conv2d_rgb_sssa8_ch+0x170>
 8008278:	6876      	ldr	r6, [r6, #4]
 800827a:	2c03      	cmp	r4, #3
 800827c:	f000 8085 	beq.w	800838a <forward_conv2d_rgb_sssa8_ch+0x152>
 8008280:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8008282:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8008284:	2c00      	cmp	r4, #0
 8008286:	f000 8091 	beq.w	80083ac <forward_conv2d_rgb_sssa8_ch+0x174>
 800828a:	b105      	cbz	r5, 800828e <forward_conv2d_rgb_sssa8_ch+0x56>
 800828c:	6863      	ldr	r3, [r4, #4]
 800828e:	6825      	ldr	r5, [r4, #0]
 8008290:	69b4      	ldr	r4, [r6, #24]
 8008292:	68de      	ldr	r6, [r3, #12]
 8008294:	68a4      	ldr	r4, [r4, #8]
 8008296:	9412      	str	r4, [sp, #72]	@ 0x48
 8008298:	68d4      	ldr	r4, [r2, #12]
 800829a:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800829e:	68a4      	ldr	r4, [r4, #8]
 80082a0:	940f      	str	r4, [sp, #60]	@ 0x3c
 80082a2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80082a4:	6815      	ldr	r5, [r2, #0]
 80082a6:	88a4      	ldrh	r4, [r4, #4]
 80082a8:	9411      	str	r4, [sp, #68]	@ 0x44
 80082aa:	68cc      	ldr	r4, [r1, #12]
 80082ac:	f8d4 b004 	ldr.w	fp, [r4, #4]
 80082b0:	88b4      	ldrh	r4, [r6, #4]
 80082b2:	940d      	str	r4, [sp, #52]	@ 0x34
 80082b4:	68b4      	ldr	r4, [r6, #8]
 80082b6:	940e      	str	r4, [sp, #56]	@ 0x38
 80082b8:	8d04      	ldrh	r4, [r0, #40]	@ 0x28
 80082ba:	9410      	str	r4, [sp, #64]	@ 0x40
 80082bc:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80082c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80082c2:	680e      	ldr	r6, [r1, #0]
 80082c4:	681c      	ldr	r4, [r3, #0]
 80082c6:	2d00      	cmp	r5, #0
 80082c8:	d065      	beq.n	8008396 <forward_conv2d_rgb_sssa8_ch+0x15e>
 80082ca:	686f      	ldr	r7, [r5, #4]
 80082cc:	2f00      	cmp	r7, #0
 80082ce:	d062      	beq.n	8008396 <forward_conv2d_rgb_sssa8_ch+0x15e>
 80082d0:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 80082d4:	f1be 0f00 	cmp.w	lr, #0
 80082d8:	d05d      	beq.n	8008396 <forward_conv2d_rgb_sssa8_ch+0x15e>
 80082da:	683f      	ldr	r7, [r7, #0]
 80082dc:	edd7 8a00 	vldr	s17, [r7]
 80082e0:	2c00      	cmp	r4, #0
 80082e2:	d055      	beq.n	8008390 <forward_conv2d_rgb_sssa8_ch+0x158>
 80082e4:	6867      	ldr	r7, [r4, #4]
 80082e6:	2f00      	cmp	r7, #0
 80082e8:	d052      	beq.n	8008390 <forward_conv2d_rgb_sssa8_ch+0x158>
 80082ea:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 80082ee:	f1be 0f00 	cmp.w	lr, #0
 80082f2:	d04d      	beq.n	8008390 <forward_conv2d_rgb_sssa8_ch+0x158>
 80082f4:	683f      	ldr	r7, [r7, #0]
 80082f6:	ed97 8a00 	vldr	s16, [r7]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	6997      	ldr	r7, [r2, #24]
 80082fe:	6989      	ldr	r1, [r1, #24]
 8008300:	f890 9041 	ldrb.w	r9, [r0, #65]	@ 0x41
 8008304:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8008308:	68bf      	ldr	r7, [r7, #8]
 800830a:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800830e:	b116      	cbz	r6, 8008316 <forward_conv2d_rgb_sssa8_ch+0xde>
 8008310:	6876      	ldr	r6, [r6, #4]
 8008312:	b106      	cbz	r6, 8008316 <forward_conv2d_rgb_sssa8_ch+0xde>
 8008314:	6836      	ldr	r6, [r6, #0]
 8008316:	b13d      	cbz	r5, 8008328 <forward_conv2d_rgb_sssa8_ch+0xf0>
 8008318:	6869      	ldr	r1, [r5, #4]
 800831a:	2900      	cmp	r1, #0
 800831c:	d03e      	beq.n	800839c <forward_conv2d_rgb_sssa8_ch+0x164>
 800831e:	886d      	ldrh	r5, [r5, #2]
 8008320:	b115      	cbz	r5, 8008328 <forward_conv2d_rgb_sssa8_ch+0xf0>
 8008322:	6849      	ldr	r1, [r1, #4]
 8008324:	f991 5000 	ldrsb.w	r5, [r1]
 8008328:	b13c      	cbz	r4, 800833a <forward_conv2d_rgb_sssa8_ch+0x102>
 800832a:	6861      	ldr	r1, [r4, #4]
 800832c:	2900      	cmp	r1, #0
 800832e:	d037      	beq.n	80083a0 <forward_conv2d_rgb_sssa8_ch+0x168>
 8008330:	8864      	ldrh	r4, [r4, #2]
 8008332:	b114      	cbz	r4, 800833a <forward_conv2d_rgb_sssa8_ch+0x102>
 8008334:	6849      	ldr	r1, [r1, #4]
 8008336:	f991 4000 	ldrsb.w	r4, [r1]
 800833a:	e9dc 0100 	ldrd	r0, r1, [ip]
 800833e:	f005 f9c3 	bl	800d6c8 <ai_array_get_byte_size>
 8008342:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008344:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8008348:	9504      	str	r5, [sp, #16]
 800834a:	e9cd 030a 	strd	r0, r3, [sp, #40]	@ 0x28
 800834e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008350:	9303      	str	r3, [sp, #12]
 8008352:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008354:	9302      	str	r3, [sp, #8]
 8008356:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800835e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008360:	fa1f f38b 	uxth.w	r3, fp
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	e9cd 9a07 	strd	r9, sl, [sp, #28]
 800836a:	e9cd 4605 	strd	r4, r6, [sp, #20]
 800836e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008370:	eef0 0a48 	vmov.f32	s1, s16
 8008374:	eeb0 0a68 	vmov.f32	s0, s17
 8008378:	4642      	mov	r2, r8
 800837a:	4638      	mov	r0, r7
 800837c:	f001 fca8 	bl	8009cd0 <forward_lite_conv2d_rgb_sssa8_ch>
 8008380:	b015      	add	sp, #84	@ 0x54
 8008382:	ecbd 8b02 	vpop	{d8}
 8008386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838a:	2300      	movs	r3, #0
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	deff      	udf	#255	@ 0xff
 8008390:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8008394:	e7b1      	b.n	80082fa <forward_conv2d_rgb_sssa8_ch+0xc2>
 8008396:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800839a:	e7a1      	b.n	80082e0 <forward_conv2d_rgb_sssa8_ch+0xa8>
 800839c:	460d      	mov	r5, r1
 800839e:	e7c3      	b.n	8008328 <forward_conv2d_rgb_sssa8_ch+0xf0>
 80083a0:	460c      	mov	r4, r1
 80083a2:	e7ca      	b.n	800833a <forward_conv2d_rgb_sssa8_ch+0x102>
 80083a4:	4631      	mov	r1, r6
 80083a6:	e768      	b.n	800827a <forward_conv2d_rgb_sssa8_ch+0x42>
 80083a8:	2600      	movs	r6, #0
 80083aa:	e766      	b.n	800827a <forward_conv2d_rgb_sssa8_ch+0x42>
 80083ac:	b90d      	cbnz	r5, 80083b2 <forward_conv2d_rgb_sssa8_ch+0x17a>
 80083ae:	69ab      	ldr	r3, [r5, #24]
 80083b0:	deff      	udf	#255	@ 0xff
 80083b2:	68e3      	ldr	r3, [r4, #12]
 80083b4:	deff      	udf	#255	@ 0xff
 80083b6:	bf00      	nop

080083b8 <forward_dense_integer_SSSA>:
 80083b8:	6983      	ldr	r3, [r0, #24]
 80083ba:	881a      	ldrh	r2, [r3, #0]
 80083bc:	b90a      	cbnz	r2, 80083c2 <forward_dense_integer_SSSA+0xa>
 80083be:	6853      	ldr	r3, [r2, #4]
 80083c0:	deff      	udf	#255	@ 0xff
 80083c2:	6858      	ldr	r0, [r3, #4]
 80083c4:	6841      	ldr	r1, [r0, #4]
 80083c6:	b101      	cbz	r1, 80083ca <forward_dense_integer_SSSA+0x12>
 80083c8:	6809      	ldr	r1, [r1, #0]
 80083ca:	2a01      	cmp	r2, #1
 80083cc:	f000 80d8 	beq.w	8008580 <forward_dense_integer_SSSA+0x1c8>
 80083d0:	6903      	ldr	r3, [r0, #16]
 80083d2:	b103      	cbz	r3, 80083d6 <forward_dense_integer_SSSA+0x1e>
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2a02      	cmp	r2, #2
 80083d8:	f000 80cf 	beq.w	800857a <forward_dense_integer_SSSA+0x1c2>
 80083dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e0:	69c4      	ldr	r4, [r0, #28]
 80083e2:	b089      	sub	sp, #36	@ 0x24
 80083e4:	2c00      	cmp	r4, #0
 80083e6:	f000 8099 	beq.w	800851c <forward_dense_integer_SSSA+0x164>
 80083ea:	8b05      	ldrh	r5, [r0, #24]
 80083ec:	6827      	ldr	r7, [r4, #0]
 80083ee:	2d01      	cmp	r5, #1
 80083f0:	f240 80b7 	bls.w	8008562 <forward_dense_integer_SSSA+0x1aa>
 80083f4:	6864      	ldr	r4, [r4, #4]
 80083f6:	2a03      	cmp	r2, #3
 80083f8:	f000 80c5 	beq.w	8008586 <forward_dense_integer_SSSA+0x1ce>
 80083fc:	69a2      	ldr	r2, [r4, #24]
 80083fe:	68dc      	ldr	r4, [r3, #12]
 8008400:	6892      	ldr	r2, [r2, #8]
 8008402:	9207      	str	r2, [sp, #28]
 8008404:	68ca      	ldr	r2, [r1, #12]
 8008406:	6a85      	ldr	r5, [r0, #40]	@ 0x28
 8008408:	f8b2 a004 	ldrh.w	sl, [r2, #4]
 800840c:	f8b4 b004 	ldrh.w	fp, [r4, #4]
 8008410:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
 8008414:	fb00 f802 	mul.w	r8, r0, r2
 8008418:	6988      	ldr	r0, [r1, #24]
 800841a:	699a      	ldr	r2, [r3, #24]
 800841c:	b11d      	cbz	r5, 8008426 <forward_dense_integer_SSSA+0x6e>
 800841e:	682d      	ldr	r5, [r5, #0]
 8008420:	b10d      	cbz	r5, 8008426 <forward_dense_integer_SSSA+0x6e>
 8008422:	69ac      	ldr	r4, [r5, #24]
 8008424:	68a5      	ldr	r5, [r4, #8]
 8008426:	681c      	ldr	r4, [r3, #0]
 8008428:	680e      	ldr	r6, [r1, #0]
 800842a:	6893      	ldr	r3, [r2, #8]
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	9306      	str	r3, [sp, #24]
 8008430:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	f8d2 e008 	ldr.w	lr, [r2, #8]
 800843a:	2e00      	cmp	r6, #0
 800843c:	d043      	beq.n	80084c6 <forward_dense_integer_SSSA+0x10e>
 800843e:	6871      	ldr	r1, [r6, #4]
 8008440:	2900      	cmp	r1, #0
 8008442:	d037      	beq.n	80084b4 <forward_dense_integer_SSSA+0xfc>
 8008444:	8877      	ldrh	r7, [r6, #2]
 8008446:	2f00      	cmp	r7, #0
 8008448:	d153      	bne.n	80084f2 <forward_dense_integer_SSSA+0x13a>
 800844a:	2c00      	cmp	r4, #0
 800844c:	d034      	beq.n	80084b8 <forward_dense_integer_SSSA+0x100>
 800844e:	6862      	ldr	r2, [r4, #4]
 8008450:	4691      	mov	r9, r2
 8008452:	2a00      	cmp	r2, #0
 8008454:	f000 8089 	beq.w	800856a <forward_dense_integer_SSSA+0x1b2>
 8008458:	8867      	ldrh	r7, [r4, #2]
 800845a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800845e:	2f00      	cmp	r7, #0
 8008460:	d152      	bne.n	8008508 <forward_dense_integer_SSSA+0x150>
 8008462:	2900      	cmp	r1, #0
 8008464:	f000 8086 	beq.w	8008574 <forward_dense_integer_SSSA+0x1bc>
 8008468:	8877      	ldrh	r7, [r6, #2]
 800846a:	2f00      	cmp	r7, #0
 800846c:	d171      	bne.n	8008552 <forward_dense_integer_SSSA+0x19a>
 800846e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8008472:	2100      	movs	r1, #0
 8008474:	2c00      	cmp	r4, #0
 8008476:	d07b      	beq.n	8008570 <forward_dense_integer_SSSA+0x1b8>
 8008478:	4691      	mov	r9, r2
 800847a:	2a00      	cmp	r2, #0
 800847c:	d073      	beq.n	8008566 <forward_dense_integer_SSSA+0x1ae>
 800847e:	8867      	ldrh	r7, [r4, #2]
 8008480:	2f00      	cmp	r7, #0
 8008482:	d131      	bne.n	80084e8 <forward_dense_integer_SSSA+0x130>
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8081 	beq.w	800858c <forward_dense_integer_SSSA+0x1d4>
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d07d      	beq.n	800858c <forward_dense_integer_SSSA+0x1d4>
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	9806      	ldr	r0, [sp, #24]
 8008494:	ed93 1a00 	vldr	s2, [r3]
 8008498:	9b07      	ldr	r3, [sp, #28]
 800849a:	e9cd 1700 	strd	r1, r7, [sp]
 800849e:	e9cd 8504 	strd	r8, r5, [sp, #16]
 80084a2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80084a6:	4672      	mov	r2, lr
 80084a8:	4661      	mov	r1, ip
 80084aa:	f000 fd33 	bl	8008f14 <forward_lite_dense_is8os8ws8>
 80084ae:	b009      	add	sp, #36	@ 0x24
 80084b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b4:	2c00      	cmp	r4, #0
 80084b6:	d133      	bne.n	8008520 <forward_dense_integer_SSSA+0x168>
 80084b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80084bc:	4621      	mov	r1, r4
 80084be:	eef0 0a40 	vmov.f32	s1, s0
 80084c2:	460f      	mov	r7, r1
 80084c4:	e7de      	b.n	8008484 <forward_dense_integer_SSSA+0xcc>
 80084c6:	2c00      	cmp	r4, #0
 80084c8:	d0f6      	beq.n	80084b8 <forward_dense_integer_SSSA+0x100>
 80084ca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80084ce:	f1b9 0f00 	cmp.w	r9, #0
 80084d2:	d037      	beq.n	8008544 <forward_dense_integer_SSSA+0x18c>
 80084d4:	8861      	ldrh	r1, [r4, #2]
 80084d6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80084da:	2900      	cmp	r1, #0
 80084dc:	d0ef      	beq.n	80084be <forward_dense_integer_SSSA+0x106>
 80084de:	f8d9 2000 	ldr.w	r2, [r9]
 80084e2:	edd2 0a00 	vldr	s1, [r2]
 80084e6:	4631      	mov	r1, r6
 80084e8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80084ec:	f992 7000 	ldrsb.w	r7, [r2]
 80084f0:	e7c8      	b.n	8008484 <forward_dense_integer_SSSA+0xcc>
 80084f2:	680f      	ldr	r7, [r1, #0]
 80084f4:	ed97 0a00 	vldr	s0, [r7]
 80084f8:	b1ec      	cbz	r4, 8008536 <forward_dense_integer_SSSA+0x17e>
 80084fa:	6862      	ldr	r2, [r4, #4]
 80084fc:	4691      	mov	r9, r2
 80084fe:	2a00      	cmp	r2, #0
 8008500:	d0af      	beq.n	8008462 <forward_dense_integer_SSSA+0xaa>
 8008502:	8867      	ldrh	r7, [r4, #2]
 8008504:	2f00      	cmp	r7, #0
 8008506:	d0ac      	beq.n	8008462 <forward_dense_integer_SSSA+0xaa>
 8008508:	6810      	ldr	r0, [r2, #0]
 800850a:	edd0 0a00 	vldr	s1, [r0]
 800850e:	2900      	cmp	r1, #0
 8008510:	d0b6      	beq.n	8008480 <forward_dense_integer_SSSA+0xc8>
 8008512:	8876      	ldrh	r6, [r6, #2]
 8008514:	b9fe      	cbnz	r6, 8008556 <forward_dense_integer_SSSA+0x19e>
 8008516:	4631      	mov	r1, r6
 8008518:	4691      	mov	r9, r2
 800851a:	e7ae      	b.n	800847a <forward_dense_integer_SSSA+0xc2>
 800851c:	4627      	mov	r7, r4
 800851e:	e76a      	b.n	80083f6 <forward_dense_integer_SSSA+0x3e>
 8008520:	6862      	ldr	r2, [r4, #4]
 8008522:	4691      	mov	r9, r2
 8008524:	2a00      	cmp	r2, #0
 8008526:	d197      	bne.n	8008458 <forward_dense_integer_SSSA+0xa0>
 8008528:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800852c:	4611      	mov	r1, r2
 800852e:	eef0 0a40 	vmov.f32	s1, s0
 8008532:	4617      	mov	r7, r2
 8008534:	e7a6      	b.n	8008484 <forward_dense_integer_SSSA+0xcc>
 8008536:	684a      	ldr	r2, [r1, #4]
 8008538:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800853c:	f992 1000 	ldrsb.w	r1, [r2]
 8008540:	4627      	mov	r7, r4
 8008542:	e79f      	b.n	8008484 <forward_dense_integer_SSSA+0xcc>
 8008544:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008548:	4649      	mov	r1, r9
 800854a:	eef0 0a40 	vmov.f32	s1, s0
 800854e:	464f      	mov	r7, r9
 8008550:	e798      	b.n	8008484 <forward_dense_integer_SSSA+0xcc>
 8008552:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8008556:	6849      	ldr	r1, [r1, #4]
 8008558:	f991 1000 	ldrsb.w	r1, [r1]
 800855c:	2c00      	cmp	r4, #0
 800855e:	d18b      	bne.n	8008478 <forward_dense_integer_SSSA+0xc0>
 8008560:	e006      	b.n	8008570 <forward_dense_integer_SSSA+0x1b8>
 8008562:	2400      	movs	r4, #0
 8008564:	e747      	b.n	80083f6 <forward_dense_integer_SSSA+0x3e>
 8008566:	4617      	mov	r7, r2
 8008568:	e78c      	b.n	8008484 <forward_dense_integer_SSSA+0xcc>
 800856a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800856e:	e77e      	b.n	800846e <forward_dense_integer_SSSA+0xb6>
 8008570:	4627      	mov	r7, r4
 8008572:	e787      	b.n	8008484 <forward_dense_integer_SSSA+0xcc>
 8008574:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8008578:	e77f      	b.n	800847a <forward_dense_integer_SSSA+0xc2>
 800857a:	2300      	movs	r3, #0
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	deff      	udf	#255	@ 0xff
 8008580:	2300      	movs	r3, #0
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	deff      	udf	#255	@ 0xff
 8008586:	2300      	movs	r3, #0
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	deff      	udf	#255	@ 0xff
 800858c:	2300      	movs	r3, #0
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	deff      	udf	#255	@ 0xff
 8008592:	bf00      	nop

08008594 <forward_dw_sssa8_ch>:
 8008594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008598:	ed2d 8b02 	vpush	{d8}
 800859c:	6983      	ldr	r3, [r0, #24]
 800859e:	4607      	mov	r7, r0
 80085a0:	8818      	ldrh	r0, [r3, #0]
 80085a2:	b09f      	sub	sp, #124	@ 0x7c
 80085a4:	b908      	cbnz	r0, 80085aa <forward_dw_sssa8_ch+0x16>
 80085a6:	6843      	ldr	r3, [r0, #4]
 80085a8:	deff      	udf	#255	@ 0xff
 80085aa:	685c      	ldr	r4, [r3, #4]
 80085ac:	6862      	ldr	r2, [r4, #4]
 80085ae:	b102      	cbz	r2, 80085b2 <forward_dw_sssa8_ch+0x1e>
 80085b0:	6812      	ldr	r2, [r2, #0]
 80085b2:	2801      	cmp	r0, #1
 80085b4:	f000 80b1 	beq.w	800871a <forward_dw_sssa8_ch+0x186>
 80085b8:	6923      	ldr	r3, [r4, #16]
 80085ba:	b103      	cbz	r3, 80085be <forward_dw_sssa8_ch+0x2a>
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2802      	cmp	r0, #2
 80085c0:	f000 80ab 	beq.w	800871a <forward_dw_sssa8_ch+0x186>
 80085c4:	69e5      	ldr	r5, [r4, #28]
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	f000 80b4 	beq.w	8008734 <forward_dw_sssa8_ch+0x1a0>
 80085cc:	8b26      	ldrh	r6, [r4, #24]
 80085ce:	6829      	ldr	r1, [r5, #0]
 80085d0:	2e01      	cmp	r6, #1
 80085d2:	f240 80b1 	bls.w	8008738 <forward_dw_sssa8_ch+0x1a4>
 80085d6:	686d      	ldr	r5, [r5, #4]
 80085d8:	2803      	cmp	r0, #3
 80085da:	f000 809e 	beq.w	800871a <forward_dw_sssa8_ch+0x186>
 80085de:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80085e0:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80085e2:	2800      	cmp	r0, #0
 80085e4:	f000 80aa 	beq.w	800873c <forward_dw_sssa8_ch+0x1a8>
 80085e8:	b104      	cbz	r4, 80085ec <forward_dw_sssa8_ch+0x58>
 80085ea:	6843      	ldr	r3, [r0, #4]
 80085ec:	69ac      	ldr	r4, [r5, #24]
 80085ee:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80085f2:	68a4      	ldr	r4, [r4, #8]
 80085f4:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80085f8:	941c      	str	r4, [sp, #112]	@ 0x70
 80085fa:	f8bc 4004 	ldrh.w	r4, [ip, #4]
 80085fe:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008600:	f8de 400c 	ldr.w	r4, [lr, #12]
 8008604:	9414      	str	r4, [sp, #80]	@ 0x50
 8008606:	f8de 4008 	ldr.w	r4, [lr, #8]
 800860a:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 800860c:	9415      	str	r4, [sp, #84]	@ 0x54
 800860e:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8008610:	9416      	str	r4, [sp, #88]	@ 0x58
 8008612:	8dbc      	ldrh	r4, [r7, #44]	@ 0x2c
 8008614:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8008618:	6800      	ldr	r0, [r0, #0]
 800861a:	9417      	str	r4, [sp, #92]	@ 0x5c
 800861c:	8834      	ldrh	r4, [r6, #0]
 800861e:	9418      	str	r4, [sp, #96]	@ 0x60
 8008620:	88b4      	ldrh	r4, [r6, #4]
 8008622:	6980      	ldr	r0, [r0, #24]
 8008624:	9419      	str	r4, [sp, #100]	@ 0x64
 8008626:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800862a:	941a      	str	r4, [sp, #104]	@ 0x68
 800862c:	6815      	ldr	r5, [r2, #0]
 800862e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008632:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008634:	6884      	ldr	r4, [r0, #8]
 8008636:	941d      	str	r4, [sp, #116]	@ 0x74
 8008638:	e9dc ab02 	ldrd	sl, fp, [ip, #8]
 800863c:	681c      	ldr	r4, [r3, #0]
 800863e:	680e      	ldr	r6, [r1, #0]
 8008640:	2d00      	cmp	r5, #0
 8008642:	d070      	beq.n	8008726 <forward_dw_sssa8_ch+0x192>
 8008644:	686f      	ldr	r7, [r5, #4]
 8008646:	2f00      	cmp	r7, #0
 8008648:	d06d      	beq.n	8008726 <forward_dw_sssa8_ch+0x192>
 800864a:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 800864e:	f1be 0f00 	cmp.w	lr, #0
 8008652:	d068      	beq.n	8008726 <forward_dw_sssa8_ch+0x192>
 8008654:	683f      	ldr	r7, [r7, #0]
 8008656:	edd7 8a00 	vldr	s17, [r7]
 800865a:	2c00      	cmp	r4, #0
 800865c:	d060      	beq.n	8008720 <forward_dw_sssa8_ch+0x18c>
 800865e:	6867      	ldr	r7, [r4, #4]
 8008660:	2f00      	cmp	r7, #0
 8008662:	d05d      	beq.n	8008720 <forward_dw_sssa8_ch+0x18c>
 8008664:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 8008668:	f1be 0f00 	cmp.w	lr, #0
 800866c:	d058      	beq.n	8008720 <forward_dw_sssa8_ch+0x18c>
 800866e:	683f      	ldr	r7, [r7, #0]
 8008670:	ed97 8a00 	vldr	s16, [r7]
 8008674:	699f      	ldr	r7, [r3, #24]
 8008676:	6992      	ldr	r2, [r2, #24]
 8008678:	698b      	ldr	r3, [r1, #24]
 800867a:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800867e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8008682:	689f      	ldr	r7, [r3, #8]
 8008684:	b116      	cbz	r6, 800868c <forward_dw_sssa8_ch+0xf8>
 8008686:	6876      	ldr	r6, [r6, #4]
 8008688:	b106      	cbz	r6, 800868c <forward_dw_sssa8_ch+0xf8>
 800868a:	6836      	ldr	r6, [r6, #0]
 800868c:	b13d      	cbz	r5, 800869e <forward_dw_sssa8_ch+0x10a>
 800868e:	6869      	ldr	r1, [r5, #4]
 8008690:	2900      	cmp	r1, #0
 8008692:	d04b      	beq.n	800872c <forward_dw_sssa8_ch+0x198>
 8008694:	886d      	ldrh	r5, [r5, #2]
 8008696:	b115      	cbz	r5, 800869e <forward_dw_sssa8_ch+0x10a>
 8008698:	6849      	ldr	r1, [r1, #4]
 800869a:	f991 5000 	ldrsb.w	r5, [r1]
 800869e:	b13c      	cbz	r4, 80086b0 <forward_dw_sssa8_ch+0x11c>
 80086a0:	6861      	ldr	r1, [r4, #4]
 80086a2:	2900      	cmp	r1, #0
 80086a4:	d044      	beq.n	8008730 <forward_dw_sssa8_ch+0x19c>
 80086a6:	8864      	ldrh	r4, [r4, #2]
 80086a8:	b114      	cbz	r4, 80086b0 <forward_dw_sssa8_ch+0x11c>
 80086aa:	6849      	ldr	r1, [r1, #4]
 80086ac:	f991 4000 	ldrsb.w	r4, [r1]
 80086b0:	e9d0 0100 	ldrd	r0, r1, [r0]
 80086b4:	f005 f808 	bl	800d6c8 <ai_array_get_byte_size>
 80086b8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80086ba:	9307      	str	r3, [sp, #28]
 80086bc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80086be:	9306      	str	r3, [sp, #24]
 80086c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80086c2:	9305      	str	r3, [sp, #20]
 80086c4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80086c6:	9304      	str	r3, [sp, #16]
 80086c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086ca:	9303      	str	r3, [sp, #12]
 80086cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80086ce:	9700      	str	r7, [sp, #0]
 80086d0:	e9cd 030f 	strd	r0, r3, [sp, #60]	@ 0x3c
 80086d4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80086d8:	930d      	str	r3, [sp, #52]	@ 0x34
 80086da:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80086de:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 80086e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80086e4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80086e8:	9302      	str	r3, [sp, #8]
 80086ea:	e9cd 5408 	strd	r5, r4, [sp, #32]
 80086ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80086f0:	9701      	str	r7, [sp, #4]
 80086f2:	eef0 0a48 	vmov.f32	s1, s16
 80086f6:	eeb0 0a68 	vmov.f32	s0, s17
 80086fa:	fa1f f28b 	uxth.w	r2, fp
 80086fe:	fa1f f18a 	uxth.w	r1, sl
 8008702:	4648      	mov	r0, r9
 8008704:	2400      	movs	r4, #0
 8008706:	e9cd 680a 	strd	r6, r8, [sp, #40]	@ 0x28
 800870a:	940e      	str	r4, [sp, #56]	@ 0x38
 800870c:	f000 fd1c 	bl	8009148 <forward_lite_dw_sssa8_ch>
 8008710:	b01f      	add	sp, #124	@ 0x7c
 8008712:	ecbd 8b02 	vpop	{d8}
 8008716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871a:	2300      	movs	r3, #0
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	deff      	udf	#255	@ 0xff
 8008720:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8008724:	e7a6      	b.n	8008674 <forward_dw_sssa8_ch+0xe0>
 8008726:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800872a:	e796      	b.n	800865a <forward_dw_sssa8_ch+0xc6>
 800872c:	460d      	mov	r5, r1
 800872e:	e7b6      	b.n	800869e <forward_dw_sssa8_ch+0x10a>
 8008730:	460c      	mov	r4, r1
 8008732:	e7bd      	b.n	80086b0 <forward_dw_sssa8_ch+0x11c>
 8008734:	4629      	mov	r1, r5
 8008736:	e74f      	b.n	80085d8 <forward_dw_sssa8_ch+0x44>
 8008738:	2500      	movs	r5, #0
 800873a:	e74d      	b.n	80085d8 <forward_dw_sssa8_ch+0x44>
 800873c:	b90c      	cbnz	r4, 8008742 <forward_dw_sssa8_ch+0x1ae>
 800873e:	69a3      	ldr	r3, [r4, #24]
 8008740:	deff      	udf	#255	@ 0xff
 8008742:	68c3      	ldr	r3, [r0, #12]
 8008744:	deff      	udf	#255	@ 0xff
 8008746:	bf00      	nop

08008748 <forward_nl_integer>:
 8008748:	6982      	ldr	r2, [r0, #24]
 800874a:	8813      	ldrh	r3, [r2, #0]
 800874c:	b90b      	cbnz	r3, 8008752 <forward_nl_integer+0xa>
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	deff      	udf	#255	@ 0xff
 8008752:	b470      	push	{r4, r5, r6}
 8008754:	6852      	ldr	r2, [r2, #4]
 8008756:	6855      	ldr	r5, [r2, #4]
 8008758:	b105      	cbz	r5, 800875c <forward_nl_integer+0x14>
 800875a:	682d      	ldr	r5, [r5, #0]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d040      	beq.n	80087e2 <forward_nl_integer+0x9a>
 8008760:	6916      	ldr	r6, [r2, #16]
 8008762:	b106      	cbz	r6, 8008766 <forward_nl_integer+0x1e>
 8008764:	6836      	ldr	r6, [r6, #0]
 8008766:	68ab      	ldr	r3, [r5, #8]
 8008768:	0a1b      	lsrs	r3, r3, #8
 800876a:	d02d      	beq.n	80087c8 <forward_nl_integer+0x80>
 800876c:	68ec      	ldr	r4, [r5, #12]
 800876e:	2201      	movs	r2, #1
 8008770:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008774:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008778:	429c      	cmp	r4, r3
 800877a:	fb01 f202 	mul.w	r2, r1, r2
 800877e:	d1f9      	bne.n	8008774 <forward_nl_integer+0x2c>
 8008780:	69ab      	ldr	r3, [r5, #24]
 8008782:	69c1      	ldr	r1, [r0, #28]
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	69b5      	ldr	r5, [r6, #24]
 8008788:	688c      	ldr	r4, [r1, #8]
 800878a:	6899      	ldr	r1, [r3, #8]
 800878c:	68ab      	ldr	r3, [r5, #8]
 800878e:	0200      	lsls	r0, r0, #8
 8008790:	d50d      	bpl.n	80087ae <forward_nl_integer+0x66>
 8008792:	b152      	cbz	r2, 80087aa <forward_nl_integer+0x62>
 8008794:	3901      	subs	r1, #1
 8008796:	441a      	add	r2, r3
 8008798:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800879c:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 80087a0:	5c20      	ldrb	r0, [r4, r0]
 80087a2:	f803 0b01 	strb.w	r0, [r3], #1
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d1f6      	bne.n	8008798 <forward_nl_integer+0x50>
 80087aa:	bc70      	pop	{r4, r5, r6}
 80087ac:	4770      	bx	lr
 80087ae:	2a00      	cmp	r2, #0
 80087b0:	d0fb      	beq.n	80087aa <forward_nl_integer+0x62>
 80087b2:	3901      	subs	r1, #1
 80087b4:	441a      	add	r2, r3
 80087b6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80087ba:	5c20      	ldrb	r0, [r4, r0]
 80087bc:	f803 0b01 	strb.w	r0, [r3], #1
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d1f8      	bne.n	80087b6 <forward_nl_integer+0x6e>
 80087c4:	bc70      	pop	{r4, r5, r6}
 80087c6:	4770      	bx	lr
 80087c8:	69ab      	ldr	r3, [r5, #24]
 80087ca:	69c1      	ldr	r1, [r0, #28]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	69b0      	ldr	r0, [r6, #24]
 80087d0:	688c      	ldr	r4, [r1, #8]
 80087d2:	6899      	ldr	r1, [r3, #8]
 80087d4:	6883      	ldr	r3, [r0, #8]
 80087d6:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 80087da:	f04f 0201 	mov.w	r2, #1
 80087de:	d0e8      	beq.n	80087b2 <forward_nl_integer+0x6a>
 80087e0:	e7d8      	b.n	8008794 <forward_nl_integer+0x4c>
 80087e2:	2300      	movs	r3, #0
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	deff      	udf	#255	@ 0xff

080087e8 <forward_ap_integer_INT8>:
 80087e8:	6983      	ldr	r3, [r0, #24]
 80087ea:	881a      	ldrh	r2, [r3, #0]
 80087ec:	b90a      	cbnz	r2, 80087f2 <forward_ap_integer_INT8+0xa>
 80087ee:	6853      	ldr	r3, [r2, #4]
 80087f0:	deff      	udf	#255	@ 0xff
 80087f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f6:	6859      	ldr	r1, [r3, #4]
 80087f8:	684b      	ldr	r3, [r1, #4]
 80087fa:	b093      	sub	sp, #76	@ 0x4c
 80087fc:	4607      	mov	r7, r0
 80087fe:	b103      	cbz	r3, 8008802 <forward_ap_integer_INT8+0x1a>
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2a01      	cmp	r2, #1
 8008804:	f000 80c8 	beq.w	8008998 <forward_ap_integer_INT8+0x1b0>
 8008808:	690a      	ldr	r2, [r1, #16]
 800880a:	2a00      	cmp	r2, #0
 800880c:	f000 80c7 	beq.w	800899e <forward_ap_integer_INT8+0x1b6>
 8008810:	6812      	ldr	r2, [r2, #0]
 8008812:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008816:	68d5      	ldr	r5, [r2, #12]
 8008818:	6991      	ldr	r1, [r2, #24]
 800881a:	6814      	ldr	r4, [r2, #0]
 800881c:	681e      	ldr	r6, [r3, #0]
 800881e:	699a      	ldr	r2, [r3, #24]
 8008820:	f8be 300c 	ldrh.w	r3, [lr, #12]
 8008824:	f8d7 c030 	ldr.w	ip, [r7, #48]	@ 0x30
 8008828:	930c      	str	r3, [sp, #48]	@ 0x30
 800882a:	8bbb      	ldrh	r3, [r7, #28]
 800882c:	930d      	str	r3, [sp, #52]	@ 0x34
 800882e:	8c3b      	ldrh	r3, [r7, #32]
 8008830:	930e      	str	r3, [sp, #56]	@ 0x38
 8008832:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 8008836:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008838:	f8bc 3000 	ldrh.w	r3, [ip]
 800883c:	9310      	str	r3, [sp, #64]	@ 0x40
 800883e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008840:	6890      	ldr	r0, [r2, #8]
 8008842:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8008846:	f8be 2008 	ldrh.w	r2, [lr, #8]
 800884a:	6889      	ldr	r1, [r1, #8]
 800884c:	f8b7 b028 	ldrh.w	fp, [r7, #40]	@ 0x28
 8008850:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008854:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 8008858:	9311      	str	r3, [sp, #68]	@ 0x44
 800885a:	b32e      	cbz	r6, 80088a8 <forward_ap_integer_INT8+0xc0>
 800885c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8008860:	f1bc 0f00 	cmp.w	ip, #0
 8008864:	d030      	beq.n	80088c8 <forward_ap_integer_INT8+0xe0>
 8008866:	8875      	ldrh	r5, [r6, #2]
 8008868:	2d00      	cmp	r5, #0
 800886a:	d156      	bne.n	800891a <forward_ap_integer_INT8+0x132>
 800886c:	2c00      	cmp	r4, #0
 800886e:	d037      	beq.n	80088e0 <forward_ap_integer_INT8+0xf8>
 8008870:	6867      	ldr	r7, [r4, #4]
 8008872:	46b9      	mov	r9, r7
 8008874:	2f00      	cmp	r7, #0
 8008876:	d079      	beq.n	800896c <forward_ap_integer_INT8+0x184>
 8008878:	8865      	ldrh	r5, [r4, #2]
 800887a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800887e:	2d00      	cmp	r5, #0
 8008880:	d056      	beq.n	8008930 <forward_ap_integer_INT8+0x148>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	edd3 0a00 	vldr	s1, [r3]
 8008888:	f1bc 0f00 	cmp.w	ip, #0
 800888c:	d07b      	beq.n	8008986 <forward_ap_integer_INT8+0x19e>
 800888e:	8876      	ldrh	r6, [r6, #2]
 8008890:	2e00      	cmp	r6, #0
 8008892:	d154      	bne.n	800893e <forward_ap_integer_INT8+0x156>
 8008894:	46b9      	mov	r9, r7
 8008896:	2f00      	cmp	r7, #0
 8008898:	d066      	beq.n	8008968 <forward_ap_integer_INT8+0x180>
 800889a:	8865      	ldrh	r5, [r4, #2]
 800889c:	b335      	cbz	r5, 80088ec <forward_ap_integer_INT8+0x104>
 800889e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80088a2:	f994 5000 	ldrsb.w	r5, [r4]
 80088a6:	e021      	b.n	80088ec <forward_ap_integer_INT8+0x104>
 80088a8:	b1d4      	cbz	r4, 80088e0 <forward_ap_integer_INT8+0xf8>
 80088aa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80088ae:	f1b9 0f00 	cmp.w	r9, #0
 80088b2:	d06a      	beq.n	800898a <forward_ap_integer_INT8+0x1a2>
 80088b4:	8864      	ldrh	r4, [r4, #2]
 80088b6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80088ba:	2c00      	cmp	r4, #0
 80088bc:	d15e      	bne.n	800897c <forward_ap_integer_INT8+0x194>
 80088be:	4626      	mov	r6, r4
 80088c0:	eef0 0a40 	vmov.f32	s1, s0
 80088c4:	4625      	mov	r5, r4
 80088c6:	e011      	b.n	80088ec <forward_ap_integer_INT8+0x104>
 80088c8:	b154      	cbz	r4, 80088e0 <forward_ap_integer_INT8+0xf8>
 80088ca:	6867      	ldr	r7, [r4, #4]
 80088cc:	46b9      	mov	r9, r7
 80088ce:	2f00      	cmp	r7, #0
 80088d0:	d1d2      	bne.n	8008878 <forward_ap_integer_INT8+0x90>
 80088d2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80088d6:	463e      	mov	r6, r7
 80088d8:	eef0 0a40 	vmov.f32	s1, s0
 80088dc:	463d      	mov	r5, r7
 80088de:	e005      	b.n	80088ec <forward_ap_integer_INT8+0x104>
 80088e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80088e4:	4626      	mov	r6, r4
 80088e6:	eef0 0a40 	vmov.f32	s1, s0
 80088ea:	4625      	mov	r5, r4
 80088ec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80088ee:	9405      	str	r4, [sp, #20]
 80088f0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80088f2:	9404      	str	r4, [sp, #16]
 80088f4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80088f6:	9403      	str	r4, [sp, #12]
 80088f8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80088fa:	9402      	str	r4, [sp, #8]
 80088fc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80088fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008900:	f8cd b018 	str.w	fp, [sp, #24]
 8008904:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
 8008908:	e9cd ae07 	strd	sl, lr, [sp, #28]
 800890c:	e9cd 8400 	strd	r8, r4, [sp]
 8008910:	f000 fb42 	bl	8008f98 <forward_lite_avepool_is8os8>
 8008914:	b013      	add	sp, #76	@ 0x4c
 8008916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891a:	f8dc 5000 	ldr.w	r5, [ip]
 800891e:	ed95 0a00 	vldr	s0, [r5]
 8008922:	b1a4      	cbz	r4, 800894e <forward_ap_integer_INT8+0x166>
 8008924:	6867      	ldr	r7, [r4, #4]
 8008926:	46b9      	mov	r9, r7
 8008928:	b117      	cbz	r7, 8008930 <forward_ap_integer_INT8+0x148>
 800892a:	8865      	ldrh	r5, [r4, #2]
 800892c:	2d00      	cmp	r5, #0
 800892e:	d1a8      	bne.n	8008882 <forward_ap_integer_INT8+0x9a>
 8008930:	f1bc 0f00 	cmp.w	ip, #0
 8008934:	d013      	beq.n	800895e <forward_ap_integer_INT8+0x176>
 8008936:	8875      	ldrh	r5, [r6, #2]
 8008938:	b1d5      	cbz	r5, 8008970 <forward_ap_integer_INT8+0x188>
 800893a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800893e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8008942:	f995 6000 	ldrsb.w	r6, [r5]
 8008946:	2c00      	cmp	r4, #0
 8008948:	d1a4      	bne.n	8008894 <forward_ap_integer_INT8+0xac>
 800894a:	4625      	mov	r5, r4
 800894c:	e7ce      	b.n	80088ec <forward_ap_integer_INT8+0x104>
 800894e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8008952:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8008956:	f995 6000 	ldrsb.w	r6, [r5]
 800895a:	4625      	mov	r5, r4
 800895c:	e7c6      	b.n	80088ec <forward_ap_integer_INT8+0x104>
 800895e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8008962:	4666      	mov	r6, ip
 8008964:	2f00      	cmp	r7, #0
 8008966:	d198      	bne.n	800889a <forward_ap_integer_INT8+0xb2>
 8008968:	463d      	mov	r5, r7
 800896a:	e7bf      	b.n	80088ec <forward_ap_integer_INT8+0x104>
 800896c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008970:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8008974:	2600      	movs	r6, #0
 8008976:	2c00      	cmp	r4, #0
 8008978:	d18c      	bne.n	8008894 <forward_ap_integer_INT8+0xac>
 800897a:	e7e6      	b.n	800894a <forward_ap_integer_INT8+0x162>
 800897c:	f8d9 4000 	ldr.w	r4, [r9]
 8008980:	edd4 0a00 	vldr	s1, [r4]
 8008984:	e78b      	b.n	800889e <forward_ap_integer_INT8+0xb6>
 8008986:	4666      	mov	r6, ip
 8008988:	e788      	b.n	800889c <forward_ap_integer_INT8+0xb4>
 800898a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800898e:	464e      	mov	r6, r9
 8008990:	eef0 0a40 	vmov.f32	s1, s0
 8008994:	464d      	mov	r5, r9
 8008996:	e7a9      	b.n	80088ec <forward_ap_integer_INT8+0x104>
 8008998:	2300      	movs	r3, #0
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	deff      	udf	#255	@ 0xff
 800899e:	68d3      	ldr	r3, [r2, #12]
 80089a0:	deff      	udf	#255	@ 0xff
 80089a2:	bf00      	nop

080089a4 <forward_pw_sssa8_ch>:
 80089a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a8:	ed2d 8b02 	vpush	{d8}
 80089ac:	6983      	ldr	r3, [r0, #24]
 80089ae:	881c      	ldrh	r4, [r3, #0]
 80089b0:	b097      	sub	sp, #92	@ 0x5c
 80089b2:	b90c      	cbnz	r4, 80089b8 <forward_pw_sssa8_ch+0x14>
 80089b4:	6863      	ldr	r3, [r4, #4]
 80089b6:	deff      	udf	#255	@ 0xff
 80089b8:	685d      	ldr	r5, [r3, #4]
 80089ba:	686a      	ldr	r2, [r5, #4]
 80089bc:	b102      	cbz	r2, 80089c0 <forward_pw_sssa8_ch+0x1c>
 80089be:	6812      	ldr	r2, [r2, #0]
 80089c0:	2c01      	cmp	r4, #1
 80089c2:	f000 8095 	beq.w	8008af0 <forward_pw_sssa8_ch+0x14c>
 80089c6:	692b      	ldr	r3, [r5, #16]
 80089c8:	b103      	cbz	r3, 80089cc <forward_pw_sssa8_ch+0x28>
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2c02      	cmp	r4, #2
 80089ce:	f000 808f 	beq.w	8008af0 <forward_pw_sssa8_ch+0x14c>
 80089d2:	69ee      	ldr	r6, [r5, #28]
 80089d4:	2e00      	cmp	r6, #0
 80089d6:	f000 8098 	beq.w	8008b0a <forward_pw_sssa8_ch+0x166>
 80089da:	8b2f      	ldrh	r7, [r5, #24]
 80089dc:	6831      	ldr	r1, [r6, #0]
 80089de:	2f01      	cmp	r7, #1
 80089e0:	f240 8095 	bls.w	8008b0e <forward_pw_sssa8_ch+0x16a>
 80089e4:	6876      	ldr	r6, [r6, #4]
 80089e6:	2c03      	cmp	r4, #3
 80089e8:	f000 8082 	beq.w	8008af0 <forward_pw_sssa8_ch+0x14c>
 80089ec:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80089ee:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 80089f0:	2c00      	cmp	r4, #0
 80089f2:	f000 808e 	beq.w	8008b12 <forward_pw_sssa8_ch+0x16e>
 80089f6:	b105      	cbz	r5, 80089fa <forward_pw_sssa8_ch+0x56>
 80089f8:	6863      	ldr	r3, [r4, #4]
 80089fa:	6825      	ldr	r5, [r4, #0]
 80089fc:	69b4      	ldr	r4, [r6, #24]
 80089fe:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8008a02:	68a4      	ldr	r4, [r4, #8]
 8008a04:	9414      	str	r4, [sp, #80]	@ 0x50
 8008a06:	68d4      	ldr	r4, [r2, #12]
 8008a08:	68dd      	ldr	r5, [r3, #12]
 8008a0a:	88a6      	ldrh	r6, [r4, #4]
 8008a0c:	88ad      	ldrh	r5, [r5, #4]
 8008a0e:	9510      	str	r5, [sp, #64]	@ 0x40
 8008a10:	e9d4 4a02 	ldrd	r4, sl, [r4, #8]
 8008a14:	9411      	str	r4, [sp, #68]	@ 0x44
 8008a16:	8d04      	ldrh	r4, [r0, #40]	@ 0x28
 8008a18:	9412      	str	r4, [sp, #72]	@ 0x48
 8008a1a:	6815      	ldr	r5, [r2, #0]
 8008a1c:	8d84      	ldrh	r4, [r0, #44]	@ 0x2c
 8008a1e:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008a20:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8008a24:	960f      	str	r6, [sp, #60]	@ 0x3c
 8008a26:	9415      	str	r4, [sp, #84]	@ 0x54
 8008a28:	680e      	ldr	r6, [r1, #0]
 8008a2a:	681c      	ldr	r4, [r3, #0]
 8008a2c:	2d00      	cmp	r5, #0
 8008a2e:	d065      	beq.n	8008afc <forward_pw_sssa8_ch+0x158>
 8008a30:	686f      	ldr	r7, [r5, #4]
 8008a32:	2f00      	cmp	r7, #0
 8008a34:	d062      	beq.n	8008afc <forward_pw_sssa8_ch+0x158>
 8008a36:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 8008a3a:	f1be 0f00 	cmp.w	lr, #0
 8008a3e:	d05d      	beq.n	8008afc <forward_pw_sssa8_ch+0x158>
 8008a40:	683f      	ldr	r7, [r7, #0]
 8008a42:	edd7 8a00 	vldr	s17, [r7]
 8008a46:	2c00      	cmp	r4, #0
 8008a48:	d055      	beq.n	8008af6 <forward_pw_sssa8_ch+0x152>
 8008a4a:	6867      	ldr	r7, [r4, #4]
 8008a4c:	2f00      	cmp	r7, #0
 8008a4e:	d052      	beq.n	8008af6 <forward_pw_sssa8_ch+0x152>
 8008a50:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 8008a54:	f1be 0f00 	cmp.w	lr, #0
 8008a58:	d04d      	beq.n	8008af6 <forward_pw_sssa8_ch+0x152>
 8008a5a:	683f      	ldr	r7, [r7, #0]
 8008a5c:	ed97 8a00 	vldr	s16, [r7]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	6997      	ldr	r7, [r2, #24]
 8008a64:	6989      	ldr	r1, [r1, #24]
 8008a66:	f890 b041 	ldrb.w	fp, [r0, #65]	@ 0x41
 8008a6a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8008a6e:	68bf      	ldr	r7, [r7, #8]
 8008a70:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8008a74:	b116      	cbz	r6, 8008a7c <forward_pw_sssa8_ch+0xd8>
 8008a76:	6876      	ldr	r6, [r6, #4]
 8008a78:	b106      	cbz	r6, 8008a7c <forward_pw_sssa8_ch+0xd8>
 8008a7a:	6836      	ldr	r6, [r6, #0]
 8008a7c:	b13d      	cbz	r5, 8008a8e <forward_pw_sssa8_ch+0xea>
 8008a7e:	6869      	ldr	r1, [r5, #4]
 8008a80:	2900      	cmp	r1, #0
 8008a82:	d03e      	beq.n	8008b02 <forward_pw_sssa8_ch+0x15e>
 8008a84:	886d      	ldrh	r5, [r5, #2]
 8008a86:	b115      	cbz	r5, 8008a8e <forward_pw_sssa8_ch+0xea>
 8008a88:	6849      	ldr	r1, [r1, #4]
 8008a8a:	f991 5000 	ldrsb.w	r5, [r1]
 8008a8e:	b13c      	cbz	r4, 8008aa0 <forward_pw_sssa8_ch+0xfc>
 8008a90:	6861      	ldr	r1, [r4, #4]
 8008a92:	2900      	cmp	r1, #0
 8008a94:	d037      	beq.n	8008b06 <forward_pw_sssa8_ch+0x162>
 8008a96:	8864      	ldrh	r4, [r4, #2]
 8008a98:	b114      	cbz	r4, 8008aa0 <forward_pw_sssa8_ch+0xfc>
 8008a9a:	6849      	ldr	r1, [r1, #4]
 8008a9c:	f991 4000 	ldrsb.w	r4, [r1]
 8008aa0:	e9dc 0100 	ldrd	r0, r1, [ip]
 8008aa4:	f004 fe10 	bl	800d6c8 <ai_array_get_byte_size>
 8008aa8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008aaa:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 8008aae:	9505      	str	r5, [sp, #20]
 8008ab0:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
 8008ab4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008aba:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8008abe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	e9cd 4606 	strd	r4, r6, [sp, #24]
 8008ac6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	2401      	movs	r4, #1
 8008acc:	e9cd b908 	strd	fp, r9, [sp, #32]
 8008ad0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ad2:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ad4:	eef0 0a48 	vmov.f32	s1, s16
 8008ad8:	eeb0 0a68 	vmov.f32	s0, s17
 8008adc:	fa1f f28a 	uxth.w	r2, sl
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f000 ff3f 	bl	8009964 <forward_lite_pw_sssa8_ch>
 8008ae6:	b017      	add	sp, #92	@ 0x5c
 8008ae8:	ecbd 8b02 	vpop	{d8}
 8008aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af0:	2300      	movs	r3, #0
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	deff      	udf	#255	@ 0xff
 8008af6:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8008afa:	e7b1      	b.n	8008a60 <forward_pw_sssa8_ch+0xbc>
 8008afc:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8008b00:	e7a1      	b.n	8008a46 <forward_pw_sssa8_ch+0xa2>
 8008b02:	460d      	mov	r5, r1
 8008b04:	e7c3      	b.n	8008a8e <forward_pw_sssa8_ch+0xea>
 8008b06:	460c      	mov	r4, r1
 8008b08:	e7ca      	b.n	8008aa0 <forward_pw_sssa8_ch+0xfc>
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	e76b      	b.n	80089e6 <forward_pw_sssa8_ch+0x42>
 8008b0e:	2600      	movs	r6, #0
 8008b10:	e769      	b.n	80089e6 <forward_pw_sssa8_ch+0x42>
 8008b12:	b90d      	cbnz	r5, 8008b18 <forward_pw_sssa8_ch+0x174>
 8008b14:	69ab      	ldr	r3, [r5, #24]
 8008b16:	deff      	udf	#255	@ 0xff
 8008b18:	68e3      	ldr	r3, [r4, #12]
 8008b1a:	deff      	udf	#255	@ 0xff

08008b1c <forward_eltwise_integer_INT8>:
 8008b1c:	6982      	ldr	r2, [r0, #24]
 8008b1e:	8813      	ldrh	r3, [r2, #0]
 8008b20:	b90b      	cbnz	r3, 8008b26 <forward_eltwise_integer_INT8+0xa>
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	deff      	udf	#255	@ 0xff
 8008b26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2a:	ed2d 8b02 	vpush	{d8}
 8008b2e:	6852      	ldr	r2, [r2, #4]
 8008b30:	6854      	ldr	r4, [r2, #4]
 8008b32:	b0a9      	sub	sp, #164	@ 0xa4
 8008b34:	2c00      	cmp	r4, #0
 8008b36:	f000 80f7 	beq.w	8008d28 <forward_eltwise_integer_INT8+0x20c>
 8008b3a:	e9d4 5400 	ldrd	r5, r4, [r4]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	f000 81b7 	beq.w	8008eb2 <forward_eltwise_integer_INT8+0x396>
 8008b44:	6916      	ldr	r6, [r2, #16]
 8008b46:	b106      	cbz	r6, 8008b4a <forward_eltwise_integer_INT8+0x2e>
 8008b48:	6836      	ldr	r6, [r6, #0]
 8008b4a:	68a9      	ldr	r1, [r5, #8]
 8008b4c:	e9d0 8307 	ldrd	r8, r3, [r0, #28]
 8008b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b52:	68a3      	ldr	r3, [r4, #8]
 8008b54:	f105 0208 	add.w	r2, r5, #8
 8008b58:	9208      	str	r2, [sp, #32]
 8008b5a:	ea81 0203 	eor.w	r2, r1, r3
 8008b5e:	f104 0008 	add.w	r0, r4, #8
 8008b62:	2aff      	cmp	r2, #255	@ 0xff
 8008b64:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8008b68:	9009      	str	r0, [sp, #36]	@ 0x24
 8008b6a:	d80c      	bhi.n	8008b86 <forward_eltwise_integer_INT8+0x6a>
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	f000 80d7 	beq.w	8008d22 <forward_eltwise_integer_INT8+0x206>
 8008b74:	3801      	subs	r0, #1
 8008b76:	68ef      	ldr	r7, [r5, #12]
 8008b78:	68e2      	ldr	r2, [r4, #12]
 8008b7a:	f857 7020 	ldr.w	r7, [r7, r0, lsl #2]
 8008b7e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8008b82:	4297      	cmp	r7, r2
 8008b84:	d0f3      	beq.n	8008b6e <forward_eltwise_integer_INT8+0x52>
 8008b86:	f04f 0900 	mov.w	r9, #0
 8008b8a:	b199      	cbz	r1, 8008bb4 <forward_eltwise_integer_INT8+0x98>
 8008b8c:	68ea      	ldr	r2, [r5, #12]
 8008b8e:	3901      	subs	r1, #1
 8008b90:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008b94:	2a01      	cmp	r2, #1
 8008b96:	d0f8      	beq.n	8008b8a <forward_eltwise_integer_INT8+0x6e>
 8008b98:	f04f 0a00 	mov.w	sl, #0
 8008b9c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8008ba0:	b173      	cbz	r3, 8008bc0 <forward_eltwise_integer_INT8+0xa4>
 8008ba2:	68e2      	ldr	r2, [r4, #12]
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008baa:	2a01      	cmp	r2, #1
 8008bac:	d0f8      	beq.n	8008ba0 <forward_eltwise_integer_INT8+0x84>
 8008bae:	f04f 0b00 	mov.w	fp, #0
 8008bb2:	e007      	b.n	8008bc4 <forward_eltwise_integer_INT8+0xa8>
 8008bb4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8008bb8:	f04f 0a01 	mov.w	sl, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1f0      	bne.n	8008ba2 <forward_eltwise_integer_INT8+0x86>
 8008bc0:	f04f 0b01 	mov.w	fp, #1
 8008bc4:	696a      	ldr	r2, [r5, #20]
 8008bc6:	6853      	ldr	r3, [r2, #4]
 8008bc8:	6972      	ldr	r2, [r6, #20]
 8008bca:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bcc:	6857      	ldr	r7, [r2, #4]
 8008bce:	aa19      	add	r2, sp, #100	@ 0x64
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	9214      	str	r2, [sp, #80]	@ 0x50
 8008bd4:	f240 5201 	movw	r2, #1281	@ 0x501
 8008bd8:	e9cd 1119 	strd	r1, r1, [sp, #100]	@ 0x64
 8008bdc:	e9cd 111b 	strd	r1, r1, [sp, #108]	@ 0x6c
 8008be0:	911d      	str	r1, [sp, #116]	@ 0x74
 8008be2:	9213      	str	r2, [sp, #76]	@ 0x4c
 8008be4:	a813      	add	r0, sp, #76	@ 0x4c
 8008be6:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8008bea:	f004 fd9d 	bl	800d728 <core_get_broadcasted_shape>
 8008bee:	6828      	ldr	r0, [r5, #0]
 8008bf0:	6832      	ldr	r2, [r6, #0]
 8008bf2:	69ad      	ldr	r5, [r5, #24]
 8008bf4:	6821      	ldr	r1, [r4, #0]
 8008bf6:	b1e0      	cbz	r0, 8008c32 <forward_eltwise_integer_INT8+0x116>
 8008bf8:	6843      	ldr	r3, [r0, #4]
 8008bfa:	b1d3      	cbz	r3, 8008c32 <forward_eltwise_integer_INT8+0x116>
 8008bfc:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 8008c00:	f1be 0f00 	cmp.w	lr, #0
 8008c04:	d015      	beq.n	8008c32 <forward_eltwise_integer_INT8+0x116>
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f8d3 c000 	ldr.w	ip, [r3]
 8008c0c:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8008c10:	b9a9      	cbnz	r1, 8008c3e <forward_eltwise_integer_INT8+0x122>
 8008c12:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
 8008c16:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
 8008c1a:	b1fa      	cbz	r2, 8008c5c <forward_eltwise_integer_INT8+0x140>
 8008c1c:	6853      	ldr	r3, [r2, #4]
 8008c1e:	b1eb      	cbz	r3, 8008c5c <forward_eltwise_integer_INT8+0x140>
 8008c20:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 8008c24:	f1be 0f00 	cmp.w	lr, #0
 8008c28:	d018      	beq.n	8008c5c <forward_eltwise_integer_INT8+0x140>
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f8d3 c000 	ldr.w	ip, [r3]
 8008c30:	e016      	b.n	8008c60 <forward_eltwise_integer_INT8+0x144>
 8008c32:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
 8008c36:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8008c3a:	2900      	cmp	r1, #0
 8008c3c:	d0e9      	beq.n	8008c12 <forward_eltwise_integer_INT8+0xf6>
 8008c3e:	684b      	ldr	r3, [r1, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d0e6      	beq.n	8008c12 <forward_eltwise_integer_INT8+0xf6>
 8008c44:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 8008c48:	f1be 0f00 	cmp.w	lr, #0
 8008c4c:	d0e1      	beq.n	8008c12 <forward_eltwise_integer_INT8+0xf6>
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f8d3 c000 	ldr.w	ip, [r3]
 8008c54:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
 8008c58:	2a00      	cmp	r2, #0
 8008c5a:	d1df      	bne.n	8008c1c <forward_eltwise_integer_INT8+0x100>
 8008c5c:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
 8008c60:	69a4      	ldr	r4, [r4, #24]
 8008c62:	69b6      	ldr	r6, [r6, #24]
 8008c64:	68ad      	ldr	r5, [r5, #8]
 8008c66:	68a4      	ldr	r4, [r4, #8]
 8008c68:	68b6      	ldr	r6, [r6, #8]
 8008c6a:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
 8008c6e:	b138      	cbz	r0, 8008c80 <forward_eltwise_integer_INT8+0x164>
 8008c70:	6843      	ldr	r3, [r0, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d053      	beq.n	8008d1e <forward_eltwise_integer_INT8+0x202>
 8008c76:	8840      	ldrh	r0, [r0, #2]
 8008c78:	b110      	cbz	r0, 8008c80 <forward_eltwise_integer_INT8+0x164>
 8008c7a:	6858      	ldr	r0, [r3, #4]
 8008c7c:	f990 0000 	ldrsb.w	r0, [r0]
 8008c80:	f88d 0031 	strb.w	r0, [sp, #49]	@ 0x31
 8008c84:	b139      	cbz	r1, 8008c96 <forward_eltwise_integer_INT8+0x17a>
 8008c86:	6848      	ldr	r0, [r1, #4]
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d046      	beq.n	8008d1a <forward_eltwise_integer_INT8+0x1fe>
 8008c8c:	8849      	ldrh	r1, [r1, #2]
 8008c8e:	b111      	cbz	r1, 8008c96 <forward_eltwise_integer_INT8+0x17a>
 8008c90:	6841      	ldr	r1, [r0, #4]
 8008c92:	f991 1000 	ldrsb.w	r1, [r1]
 8008c96:	f88d 1032 	strb.w	r1, [sp, #50]	@ 0x32
 8008c9a:	b13a      	cbz	r2, 8008cac <forward_eltwise_integer_INT8+0x190>
 8008c9c:	6851      	ldr	r1, [r2, #4]
 8008c9e:	2900      	cmp	r1, #0
 8008ca0:	d039      	beq.n	8008d16 <forward_eltwise_integer_INT8+0x1fa>
 8008ca2:	8852      	ldrh	r2, [r2, #2]
 8008ca4:	b112      	cbz	r2, 8008cac <forward_eltwise_integer_INT8+0x190>
 8008ca6:	684a      	ldr	r2, [r1, #4]
 8008ca8:	f992 2000 	ldrsb.w	r2, [r2]
 8008cac:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8008cb0:	f1b9 0f00 	cmp.w	r9, #0
 8008cb4:	d12b      	bne.n	8008d0e <forward_eltwise_integer_INT8+0x1f2>
 8008cb6:	45d3      	cmp	fp, sl
 8008cb8:	d038      	beq.n	8008d2c <forward_eltwise_integer_INT8+0x210>
 8008cba:	f1ca 0702 	rsb	r7, sl, #2
 8008cbe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cc0:	0a1b      	lsrs	r3, r3, #8
 8008cc2:	f000 80f4 	beq.w	8008eae <forward_eltwise_integer_INT8+0x392>
 8008cc6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8008cc8:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8008ccc:	2301      	movs	r3, #1
 8008cce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008cd2:	4290      	cmp	r0, r2
 8008cd4:	fb01 f303 	mul.w	r3, r1, r3
 8008cd8:	d1f9      	bne.n	8008cce <forward_eltwise_integer_INT8+0x1b2>
 8008cda:	4622      	mov	r2, r4
 8008cdc:	f10d 0433 	add.w	r4, sp, #51	@ 0x33
 8008ce0:	9405      	str	r4, [sp, #20]
 8008ce2:	ac0f      	add	r4, sp, #60	@ 0x3c
 8008ce4:	9404      	str	r4, [sp, #16]
 8008ce6:	f10d 0432 	add.w	r4, sp, #50	@ 0x32
 8008cea:	9403      	str	r4, [sp, #12]
 8008cec:	ac0e      	add	r4, sp, #56	@ 0x38
 8008cee:	9402      	str	r4, [sp, #8]
 8008cf0:	f10d 0431 	add.w	r4, sp, #49	@ 0x31
 8008cf4:	9401      	str	r4, [sp, #4]
 8008cf6:	ac0d      	add	r4, sp, #52	@ 0x34
 8008cf8:	9400      	str	r4, [sp, #0]
 8008cfa:	9706      	str	r7, [sp, #24]
 8008cfc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008cfe:	4629      	mov	r1, r5
 8008d00:	4630      	mov	r0, r6
 8008d02:	47a0      	blx	r4
 8008d04:	b029      	add	sp, #164	@ 0xa4
 8008d06:	ecbd 8b02 	vpop	{d8}
 8008d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0e:	45d3      	cmp	fp, sl
 8008d10:	d1d3      	bne.n	8008cba <forward_eltwise_integer_INT8+0x19e>
 8008d12:	2700      	movs	r7, #0
 8008d14:	e7d3      	b.n	8008cbe <forward_eltwise_integer_INT8+0x1a2>
 8008d16:	460a      	mov	r2, r1
 8008d18:	e7c8      	b.n	8008cac <forward_eltwise_integer_INT8+0x190>
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	e7bb      	b.n	8008c96 <forward_eltwise_integer_INT8+0x17a>
 8008d1e:	4618      	mov	r0, r3
 8008d20:	e7ae      	b.n	8008c80 <forward_eltwise_integer_INT8+0x164>
 8008d22:	f04f 0901 	mov.w	r9, #1
 8008d26:	e730      	b.n	8008b8a <forward_eltwise_integer_INT8+0x6e>
 8008d28:	4625      	mov	r5, r4
 8008d2a:	e708      	b.n	8008b3e <forward_eltwise_integer_INT8+0x22>
 8008d2c:	ab1e      	add	r3, sp, #120	@ 0x78
 8008d2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d32:	9316      	str	r3, [sp, #88]	@ 0x58
 8008d34:	ab23      	add	r3, sp, #140	@ 0x8c
 8008d36:	9318      	str	r3, [sp, #96]	@ 0x60
 8008d38:	f240 5302 	movw	r3, #1282	@ 0x502
 8008d3c:	9908      	ldr	r1, [sp, #32]
 8008d3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d40:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008d42:	a815      	add	r0, sp, #84	@ 0x54
 8008d44:	4653      	mov	r3, sl
 8008d46:	aa13      	add	r2, sp, #76	@ 0x4c
 8008d48:	e9cd 991f 	strd	r9, r9, [sp, #124]	@ 0x7c
 8008d4c:	e9cd 9921 	strd	r9, r9, [sp, #132]	@ 0x84
 8008d50:	e9cd 9924 	strd	r9, r9, [sp, #144]	@ 0x90
 8008d54:	e9cd 9926 	strd	r9, r9, [sp, #152]	@ 0x98
 8008d58:	f8cd 9078 	str.w	r9, [sp, #120]	@ 0x78
 8008d5c:	f8cd 908c 	str.w	r9, [sp, #140]	@ 0x8c
 8008d60:	f004 fd0c 	bl	800d77c <core_compute_offsets>
 8008d64:	4653      	mov	r3, sl
 8008d66:	aa13      	add	r2, sp, #76	@ 0x4c
 8008d68:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d6a:	a817      	add	r0, sp, #92	@ 0x5c
 8008d6c:	f004 fd06 	bl	800d77c <core_compute_offsets>
 8008d70:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008d72:	68d3      	ldr	r3, [r2, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0c5      	beq.n	8008d04 <forward_eltwise_integer_INT8+0x1e8>
 8008d78:	eddf 8a4f 	vldr	s17, [pc, #316]	@ 8008eb8 <forward_eltwise_integer_INT8+0x39c>
 8008d7c:	6891      	ldr	r1, [r2, #8]
 8008d7e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008d82:	2900      	cmp	r1, #0
 8008d84:	d0be      	beq.n	8008d04 <forward_eltwise_integer_INT8+0x1e8>
 8008d86:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8008d88:	f04f 0b00 	mov.w	fp, #0
 8008d8c:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8008d90:	f04f 0a00 	mov.w	sl, #0
 8008d94:	2804      	cmp	r0, #4
 8008d96:	bf8c      	ite	hi
 8008d98:	6911      	ldrhi	r1, [r2, #16]
 8008d9a:	2101      	movls	r1, #1
 8008d9c:	458a      	cmp	sl, r1
 8008d9e:	d26b      	bcs.n	8008e78 <forward_eltwise_integer_INT8+0x35c>
 8008da0:	6851      	ldr	r1, [r2, #4]
 8008da2:	2900      	cmp	r1, #0
 8008da4:	d057      	beq.n	8008e56 <forward_eltwise_integer_INT8+0x33a>
 8008da6:	f04f 0900 	mov.w	r9, #0
 8008daa:	eeb6 8a00 	vmov.f32	s16, #96	@ 0x3f000000  0.5
 8008dae:	f995 2000 	ldrsb.w	r2, [r5]
 8008db2:	f99d 1031 	ldrsb.w	r1, [sp, #49]	@ 0x31
 8008db6:	eddd 6a0d 	vldr	s13, [sp, #52]	@ 0x34
 8008dba:	ed9d 7a0e 	vldr	s14, [sp, #56]	@ 0x38
 8008dbe:	1a53      	subs	r3, r2, r1
 8008dc0:	ee07 3a90 	vmov	s15, r3
 8008dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dc8:	f99d 1032 	ldrsb.w	r1, [sp, #50]	@ 0x32
 8008dcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008dd0:	a812      	add	r0, sp, #72	@ 0x48
 8008dd2:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8008dd6:	f994 2000 	ldrsb.w	r2, [r4]
 8008dda:	1a53      	subs	r3, r2, r1
 8008ddc:	ee07 3a90 	vmov	s15, r3
 8008de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008de4:	aa11      	add	r2, sp, #68	@ 0x44
 8008de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dea:	a910      	add	r1, sp, #64	@ 0x40
 8008dec:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
 8008df0:	47c0      	blx	r8
 8008df2:	ed9d 6a12 	vldr	s12, [sp, #72]	@ 0x48
 8008df6:	eddd 6a0f 	vldr	s13, [sp, #60]	@ 0x3c
 8008dfa:	f99d 3033 	ldrsb.w	r3, [sp, #51]	@ 0x33
 8008dfe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8008e02:	ee07 3a10 	vmov	s14, r3
 8008e06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008e0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e16:	bfd4      	ite	le
 8008e18:	eeb0 7a68 	vmovle.f32	s14, s17
 8008e1c:	eeb0 7a48 	vmovgt.f32	s14, s16
 8008e20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e24:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e28:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
 8008e2c:	ee17 2a10 	vmov	r2, s14
 8008e30:	f302 0207 	ssat	r2, #8, r2
 8008e34:	7032      	strb	r2, [r6, #0]
 8008e36:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008e38:	6852      	ldr	r2, [r2, #4]
 8008e3a:	4415      	add	r5, r2
 8008e3c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008e3e:	6852      	ldr	r2, [r2, #4]
 8008e40:	4414      	add	r4, r2
 8008e42:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008e44:	6851      	ldr	r1, [r2, #4]
 8008e46:	f109 0901 	add.w	r9, r9, #1
 8008e4a:	4549      	cmp	r1, r9
 8008e4c:	443e      	add	r6, r7
 8008e4e:	d8ae      	bhi.n	8008dae <forward_eltwise_integer_INT8+0x292>
 8008e50:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8008e52:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8008e56:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8008e58:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 8008e5c:	d302      	bcc.n	8008e64 <forward_eltwise_integer_INT8+0x348>
 8008e5e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8008e60:	6909      	ldr	r1, [r1, #16]
 8008e62:	440d      	add	r5, r1
 8008e64:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8008e66:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 8008e6a:	d302      	bcc.n	8008e72 <forward_eltwise_integer_INT8+0x356>
 8008e6c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8008e6e:	6909      	ldr	r1, [r1, #16]
 8008e70:	440c      	add	r4, r1
 8008e72:	f10a 0a01 	add.w	sl, sl, #1
 8008e76:	e78d      	b.n	8008d94 <forward_eltwise_integer_INT8+0x278>
 8008e78:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 8008e7c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008e7e:	f8de 1008 	ldr.w	r1, [lr, #8]
 8008e82:	440d      	add	r5, r1
 8008e84:	6899      	ldr	r1, [r3, #8]
 8008e86:	440c      	add	r4, r1
 8008e88:	6891      	ldr	r1, [r2, #8]
 8008e8a:	f10b 0b01 	add.w	fp, fp, #1
 8008e8e:	4559      	cmp	r1, fp
 8008e90:	f63f af7e 	bhi.w	8008d90 <forward_eltwise_integer_INT8+0x274>
 8008e94:	f8de 000c 	ldr.w	r0, [lr, #12]
 8008e98:	4405      	add	r5, r0
 8008e9a:	68d8      	ldr	r0, [r3, #12]
 8008e9c:	9b08      	ldr	r3, [sp, #32]
 8008e9e:	4404      	add	r4, r0
 8008ea0:	68d0      	ldr	r0, [r2, #12]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	4298      	cmp	r0, r3
 8008ea6:	9308      	str	r3, [sp, #32]
 8008ea8:	f63f af6b 	bhi.w	8008d82 <forward_eltwise_integer_INT8+0x266>
 8008eac:	e72a      	b.n	8008d04 <forward_eltwise_integer_INT8+0x1e8>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e713      	b.n	8008cda <forward_eltwise_integer_INT8+0x1be>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	deff      	udf	#255	@ 0xff
 8008eb8:	befffffc 	.word	0xbefffffc

08008ebc <forward_lite_node_convert_integer_is8of32>:
 8008ebc:	f001 b98a 	b.w	800a1d4 <lite_convert_is8of32>

08008ec0 <forward_lite_node_convert_integer_iu8of32>:
 8008ec0:	f001 b99a 	b.w	800a1f8 <lite_convert_iu8of32>

08008ec4 <forward_lite_node_convert_integer_if32os8>:
 8008ec4:	f001 b9aa 	b.w	800a21c <lite_convert_if32os8>

08008ec8 <forward_lite_node_convert_integer_if32ou8>:
 8008ec8:	f001 b9de 	b.w	800a288 <lite_convert_if32ou8>

08008ecc <forward_lite_node_convert_integer_is8os8>:
 8008ecc:	b410      	push	{r4}
 8008ece:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8008ed2:	9401      	str	r4, [sp, #4]
 8008ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed8:	f001 b9f6 	b.w	800a2c8 <lite_convert_is8os8>

08008edc <forward_lite_node_convert_integer_iu8ou8>:
 8008edc:	b410      	push	{r4}
 8008ede:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8008ee2:	9401      	str	r4, [sp, #4]
 8008ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ee8:	f001 ba2e 	b.w	800a348 <lite_convert_iu8ou8>

08008eec <forward_lite_node_convert_integer_iu8os8>:
 8008eec:	b410      	push	{r4}
 8008eee:	f99d 4004 	ldrsb.w	r4, [sp, #4]
 8008ef2:	9401      	str	r4, [sp, #4]
 8008ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ef8:	f001 ba50 	b.w	800a39c <lite_convert_iu8os8>

08008efc <forward_lite_node_convert_integer_iu8os8_fast>:
 8008efc:	f001 ba8e 	b.w	800a41c <lite_convert_iu8os8_fast>

08008f00 <forward_lite_node_convert_integer_is8ou8>:
 8008f00:	b410      	push	{r4}
 8008f02:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8008f06:	9401      	str	r4, [sp, #4]
 8008f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f0c:	f001 babe 	b.w	800a48c <lite_convert_is8ou8>

08008f10 <forward_lite_node_convert_integer_is8ou8_fast>:
 8008f10:	f001 bae6 	b.w	800a4e0 <lite_convert_is8ou8_fast>

08008f14 <forward_lite_dense_is8os8ws8>:
 8008f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	b08f      	sub	sp, #60	@ 0x3c
 8008f1a:	ee21 0a00 	vmul.f32	s0, s2, s0
 8008f1e:	f99d 4060 	ldrsb.w	r4, [sp, #96]	@ 0x60
 8008f22:	940a      	str	r4, [sp, #40]	@ 0x28
 8008f24:	f10d 0932 	add.w	r9, sp, #50	@ 0x32
 8008f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f2a:	2400      	movs	r4, #0
 8008f2c:	f99d 3064 	ldrsb.w	r3, [sp, #100]	@ 0x64
 8008f30:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008f34:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 8008f38:	f8bd 806c 	ldrh.w	r8, [sp, #108]	@ 0x6c
 8008f3c:	f8ad 4032 	strh.w	r4, [sp, #50]	@ 0x32
 8008f40:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8008f44:	4605      	mov	r5, r0
 8008f46:	4648      	mov	r0, r9
 8008f48:	460e      	mov	r6, r1
 8008f4a:	4693      	mov	fp, r2
 8008f4c:	940d      	str	r4, [sp, #52]	@ 0x34
 8008f4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f50:	f001 fafa 	bl	800a548 <align_factor>
 8008f54:	900d      	str	r0, [sp, #52]	@ 0x34
 8008f56:	f1ba 0f00 	cmp.w	sl, #0
 8008f5a:	d019      	beq.n	8008f90 <forward_lite_dense_is8os8ws8+0x7c>
 8008f5c:	4643      	mov	r3, r8
 8008f5e:	46b8      	mov	r8, r7
 8008f60:	461f      	mov	r7, r3
 8008f62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f64:	9306      	str	r3, [sp, #24]
 8008f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f68:	9304      	str	r3, [sp, #16]
 8008f6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f6c:	9303      	str	r3, [sp, #12]
 8008f6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f70:	9505      	str	r5, [sp, #20]
 8008f72:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008f76:	ab0d      	add	r3, sp, #52	@ 0x34
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	3401      	adds	r4, #1
 8008f7e:	463b      	mov	r3, r7
 8008f80:	4642      	mov	r2, r8
 8008f82:	4659      	mov	r1, fp
 8008f84:	f002 f864 	bl	800b050 <st_sssa8_fully_connected>
 8008f88:	45a2      	cmp	sl, r4
 8008f8a:	443d      	add	r5, r7
 8008f8c:	4446      	add	r6, r8
 8008f8e:	d1e8      	bne.n	8008f62 <forward_lite_dense_is8os8ws8+0x4e>
 8008f90:	b00f      	add	sp, #60	@ 0x3c
 8008f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f96:	bf00      	nop

08008f98 <forward_lite_avepool_is8os8>:
 8008f98:	b410      	push	{r4}
 8008f9a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8008f9e:	9401      	str	r4, [sp, #4]
 8008fa0:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8008fa4:	9402      	str	r4, [sp, #8]
 8008fa6:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8008faa:	9403      	str	r4, [sp, #12]
 8008fac:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8008fb0:	9404      	str	r4, [sp, #16]
 8008fb2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8008fb6:	9405      	str	r4, [sp, #20]
 8008fb8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8008fbc:	9406      	str	r4, [sp, #24]
 8008fbe:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8008fc2:	9407      	str	r4, [sp, #28]
 8008fc4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8008fc8:	9408      	str	r4, [sp, #32]
 8008fca:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8008fce:	9409      	str	r4, [sp, #36]	@ 0x24
 8008fd0:	f99d 4028 	ldrsb.w	r4, [sp, #40]	@ 0x28
 8008fd4:	940a      	str	r4, [sp, #40]	@ 0x28
 8008fd6:	f99d 402c 	ldrsb.w	r4, [sp, #44]	@ 0x2c
 8008fda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fe0:	f001 bc94 	b.w	800a90c <st_int8_avepool>

08008fe4 <st_dw_sssa8_ch_Wadapt>:
 8008fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe8:	b087      	sub	sp, #28
 8008fea:	ea5f 0891 	movs.w	r8, r1, lsr #2
 8008fee:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8008ff0:	469a      	mov	sl, r3
 8008ff2:	468e      	mov	lr, r1
 8008ff4:	4681      	mov	r9, r0
 8008ff6:	4693      	mov	fp, r2
 8008ff8:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8008ffc:	d067      	beq.n	80090ce <st_dw_sssa8_ch_Wadapt+0xea>
 8008ffe:	fb0a f502 	mul.w	r5, sl, r2
 8009002:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8009006:	1e6e      	subs	r6, r5, #1
 8009008:	b2b6      	uxth	r6, r6
 800900a:	fb06 1601 	mla	r6, r6, r1, r1
 800900e:	0076      	lsls	r6, r6, #1
 8009010:	f108 32ff 	add.w	r2, r8, #4294967295
 8009014:	e9cd 6802 	strd	r6, r8, [sp, #8]
 8009018:	b292      	uxth	r2, r2
 800901a:	fb1b f00a 	smulbb	r0, fp, sl
 800901e:	f109 0704 	add.w	r7, r9, #4
 8009022:	f000 0001 	and.w	r0, r0, #1
 8009026:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 800902a:	4649      	mov	r1, r9
 800902c:	ea4f 044e 	mov.w	r4, lr, lsl #1
 8009030:	4688      	mov	r8, r1
 8009032:	9305      	str	r3, [sp, #20]
 8009034:	b365      	cbz	r5, 8009090 <st_dw_sssa8_ch_Wadapt+0xac>
 8009036:	462a      	mov	r2, r5
 8009038:	9501      	str	r5, [sp, #4]
 800903a:	9e05      	ldr	r6, [sp, #20]
 800903c:	f8d8 c000 	ldr.w	ip, [r8]
 8009040:	1d33      	adds	r3, r6, #4
 8009042:	9305      	str	r3, [sp, #20]
 8009044:	f858 300e 	ldr.w	r3, [r8, lr]
 8009048:	eacc 4503 	pkhbt	r5, ip, r3, lsl #16
 800904c:	44a0      	add	r8, r4
 800904e:	eac3 432c 	pkhtb	r3, r3, ip, asr #16
 8009052:	fa2f fc85 	sxtb16	ip, r5
 8009056:	f8c6 c000 	str.w	ip, [r6]
 800905a:	fa2f f595 	sxtb16	r5, r5, ror #8
 800905e:	9e05      	ldr	r6, [sp, #20]
 8009060:	6035      	str	r5, [r6, #0]
 8009062:	3604      	adds	r6, #4
 8009064:	9605      	str	r6, [sp, #20]
 8009066:	9d05      	ldr	r5, [sp, #20]
 8009068:	fa2f f683 	sxtb16	r6, r3
 800906c:	3504      	adds	r5, #4
 800906e:	f845 6c04 	str.w	r6, [r5, #-4]
 8009072:	9505      	str	r5, [sp, #20]
 8009074:	fa2f f393 	sxtb16	r3, r3, ror #8
 8009078:	9d05      	ldr	r5, [sp, #20]
 800907a:	3a01      	subs	r2, #1
 800907c:	602b      	str	r3, [r5, #0]
 800907e:	b292      	uxth	r2, r2
 8009080:	3504      	adds	r5, #4
 8009082:	9505      	str	r5, [sp, #20]
 8009084:	2a00      	cmp	r2, #0
 8009086:	d1d8      	bne.n	800903a <st_dw_sssa8_ch_Wadapt+0x56>
 8009088:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
 800908c:	eb03 0801 	add.w	r8, r3, r1
 8009090:	9b05      	ldr	r3, [sp, #20]
 8009092:	b198      	cbz	r0, 80090bc <st_dw_sssa8_ch_Wadapt+0xd8>
 8009094:	f8d8 2000 	ldr.w	r2, [r8]
 8009098:	eac2 2802 	pkhbt	r8, r2, r2, lsl #8
 800909c:	fa2f f888 	sxtb16	r8, r8
 80090a0:	f8a3 8000 	strh.w	r8, [r3]
 80090a4:	ea4f 4818 	mov.w	r8, r8, lsr #16
 80090a8:	eac2 6222 	pkhtb	r2, r2, r2, asr #24
 80090ac:	f8a3 8002 	strh.w	r8, [r3, #2]
 80090b0:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 80090b4:	809a      	strh	r2, [r3, #4]
 80090b6:	0c12      	lsrs	r2, r2, #16
 80090b8:	80da      	strh	r2, [r3, #6]
 80090ba:	3308      	adds	r3, #8
 80090bc:	3104      	adds	r1, #4
 80090be:	42b9      	cmp	r1, r7
 80090c0:	d1b6      	bne.n	8009030 <st_dw_sssa8_ch_Wadapt+0x4c>
 80090c2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80090c6:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80090ca:	fa1f f888 	uxth.w	r8, r8
 80090ce:	f01e 0203 	ands.w	r2, lr, #3
 80090d2:	d01d      	beq.n	8009110 <st_dw_sssa8_ch_Wadapt+0x12c>
 80090d4:	fb1b f00a 	smulbb	r0, fp, sl
 80090d8:	b280      	uxth	r0, r0
 80090da:	b1c8      	cbz	r0, 8009110 <st_dw_sssa8_ch_Wadapt+0x12c>
 80090dc:	f1be 0f01 	cmp.w	lr, #1
 80090e0:	d119      	bne.n	8009116 <st_dw_sssa8_ch_Wadapt+0x132>
 80090e2:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 80090e6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80090ea:	4601      	mov	r1, r0
 80090ec:	4645      	mov	r5, r8
 80090ee:	1c6c      	adds	r4, r5, #1
 80090f0:	eb09 0205 	add.w	r2, r9, r5
 80090f4:	462e      	mov	r6, r5
 80090f6:	b2a5      	uxth	r5, r4
 80090f8:	f912 4b01 	ldrsb.w	r4, [r2], #1
 80090fc:	f823 4b02 	strh.w	r4, [r3], #2
 8009100:	428b      	cmp	r3, r1
 8009102:	d1f9      	bne.n	80090f8 <st_dw_sssa8_ch_Wadapt+0x114>
 8009104:	4546      	cmp	r6, r8
 8009106:	4603      	mov	r3, r0
 8009108:	4461      	add	r1, ip
 800910a:	d001      	beq.n	8009110 <st_dw_sssa8_ch_Wadapt+0x12c>
 800910c:	4460      	add	r0, ip
 800910e:	e7ee      	b.n	80090ee <st_dw_sssa8_ch_Wadapt+0x10a>
 8009110:	b007      	add	sp, #28
 8009112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009116:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 800911a:	4442      	add	r2, r8
 800911c:	b295      	uxth	r5, r2
 800911e:	0040      	lsls	r0, r0, #1
 8009120:	4634      	mov	r4, r6
 8009122:	f108 0101 	add.w	r1, r8, #1
 8009126:	eb09 0208 	add.w	r2, r9, r8
 800912a:	fa1f f881 	uxth.w	r8, r1
 800912e:	f992 1000 	ldrsb.w	r1, [r2]
 8009132:	f823 1b02 	strh.w	r1, [r3], #2
 8009136:	42a3      	cmp	r3, r4
 8009138:	4472      	add	r2, lr
 800913a:	d1f8      	bne.n	800912e <st_dw_sssa8_ch_Wadapt+0x14a>
 800913c:	45a8      	cmp	r8, r5
 800913e:	4404      	add	r4, r0
 8009140:	4633      	mov	r3, r6
 8009142:	d0e5      	beq.n	8009110 <st_dw_sssa8_ch_Wadapt+0x12c>
 8009144:	4406      	add	r6, r0
 8009146:	e7ec      	b.n	8009122 <st_dw_sssa8_ch_Wadapt+0x13e>

08009148 <forward_lite_dw_sssa8_ch>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	b0d5      	sub	sp, #340	@ 0x154
 800914e:	9218      	str	r2, [sp, #96]	@ 0x60
 8009150:	f8bd 2184 	ldrh.w	r2, [sp, #388]	@ 0x184
 8009154:	9226      	str	r2, [sp, #152]	@ 0x98
 8009156:	f8bd 218c 	ldrh.w	r2, [sp, #396]	@ 0x18c
 800915a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800915c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800915e:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8009160:	f99d 2198 	ldrsb.w	r2, [sp, #408]	@ 0x198
 8009164:	f8bd 417c 	ldrh.w	r4, [sp, #380]	@ 0x17c
 8009168:	9202      	str	r2, [sp, #8]
 800916a:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	@ 0x1a8
 800916e:	f8bd 7180 	ldrh.w	r7, [sp, #384]	@ 0x180
 8009172:	f8bd b188 	ldrh.w	fp, [sp, #392]	@ 0x188
 8009176:	f8bd a190 	ldrh.w	sl, [sp, #400]	@ 0x190
 800917a:	f99d 519c 	ldrsb.w	r5, [sp, #412]	@ 0x19c
 800917e:	f8bd 91ac 	ldrh.w	r9, [sp, #428]	@ 0x1ac
 8009182:	9424      	str	r4, [sp, #144]	@ 0x90
 8009184:	901e      	str	r0, [sp, #120]	@ 0x78
 8009186:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009188:	921f      	str	r2, [sp, #124]	@ 0x7c
 800918a:	2b00      	cmp	r3, #0
 800918c:	f000 83d7 	beq.w	800993e <forward_lite_dw_sssa8_ch+0x7f6>
 8009190:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009192:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8009194:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
 8009196:	9868      	ldr	r0, [sp, #416]	@ 0x1a0
 8009198:	fb07 f603 	mul.w	r6, r7, r3
 800919c:	fb01 f406 	mul.w	r4, r1, r6
 80091a0:	9b6e      	ldr	r3, [sp, #440]	@ 0x1b8
 80091a2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80091a6:	4688      	mov	r8, r1
 80091a8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80091ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80091ae:	f001 fa1f 	bl	800a5f0 <align_factor_ch>
 80091b2:	996e      	ldr	r1, [sp, #440]	@ 0x1b8
 80091b4:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
 80091b6:	4643      	mov	r3, r8
 80091b8:	4444      	add	r4, r8
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 80091c0:	18cb      	adds	r3, r1, r3
 80091c2:	9210      	str	r2, [sp, #64]	@ 0x40
 80091c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80091c6:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 80091ca:	4643      	mov	r3, r8
 80091cc:	9212      	str	r2, [sp, #72]	@ 0x48
 80091ce:	b1cb      	cbz	r3, 8009204 <forward_lite_dw_sssa8_ch+0xbc>
 80091d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80091d2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80091d4:	4601      	mov	r1, r0
 80091d6:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80091d8:	1f1a      	subs	r2, r3, #4
 80091da:	eb01 0440 	add.w	r4, r1, r0, lsl #1
 80091de:	f04f 0e01 	mov.w	lr, #1
 80091e2:	f931 3b02 	ldrsh.w	r3, [r1], #2
 80091e6:	1e58      	subs	r0, r3, #1
 80091e8:	b280      	uxth	r0, r0
 80091ea:	fa0e fc03 	lsl.w	ip, lr, r3
 80091ee:	2814      	cmp	r0, #20
 80091f0:	fa05 f303 	lsl.w	r3, r5, r3
 80091f4:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 80091f8:	f200 839b 	bhi.w	8009932 <forward_lite_dw_sssa8_ch+0x7ea>
 80091fc:	428c      	cmp	r4, r1
 80091fe:	f842 3f04 	str.w	r3, [r2, #4]!
 8009202:	d1ee      	bne.n	80091e2 <forward_lite_dw_sssa8_ch+0x9a>
 8009204:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009206:	9336      	str	r3, [sp, #216]	@ 0xd8
 8009208:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800920a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800920c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800920e:	9c02      	ldr	r4, [sp, #8]
 8009210:	e9cd 9339 	strd	r9, r3, [sp, #228]	@ 0xe4
 8009214:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009216:	e9cd 733d 	strd	r7, r3, [sp, #244]	@ 0xf4
 800921a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800921c:	e9cd 3a4c 	strd	r3, sl, [sp, #304]	@ 0x130
 8009220:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009222:	e9cd 3b4e 	strd	r3, fp, [sp, #312]	@ 0x138
 8009226:	ab3c      	add	r3, sp, #240	@ 0xf0
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	aa34      	add	r2, sp, #208	@ 0xd0
 800922c:	ab38      	add	r3, sp, #224	@ 0xe0
 800922e:	a94a      	add	r1, sp, #296	@ 0x128
 8009230:	a840      	add	r0, sp, #256	@ 0x100
 8009232:	4264      	negs	r4, r4
 8009234:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
 8009238:	942f      	str	r4, [sp, #188]	@ 0xbc
 800923a:	f001 faf5 	bl	800a828 <ai_padding_opt_init>
 800923e:	f1b9 0f00 	cmp.w	r9, #0
 8009242:	f000 81dc 	beq.w	80095fe <forward_lite_dw_sssa8_ch+0x4b6>
 8009246:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009248:	9c27      	ldr	r4, [sp, #156]	@ 0x9c
 800924a:	f8cd a0b8 	str.w	sl, [sp, #184]	@ 0xb8
 800924e:	f3c6 024f 	ubfx	r2, r6, #1, #16
 8009252:	fb13 f307 	smulbb	r3, r3, r7
 8009256:	b299      	uxth	r1, r3
 8009258:	f003 0001 	and.w	r0, r3, #1
 800925c:	1e53      	subs	r3, r2, #1
 800925e:	b29b      	uxth	r3, r3
 8009260:	911d      	str	r1, [sp, #116]	@ 0x74
 8009262:	900a      	str	r0, [sp, #40]	@ 0x28
 8009264:	3901      	subs	r1, #1
 8009266:	0118      	lsls	r0, r3, #4
 8009268:	b289      	uxth	r1, r1
 800926a:	9022      	str	r0, [sp, #136]	@ 0x88
 800926c:	f1cb 0000 	rsb	r0, fp, #0
 8009270:	08a5      	lsrs	r5, r4, #2
 8009272:	fa1f f880 	uxth.w	r8, r0
 8009276:	3101      	adds	r1, #1
 8009278:	9865      	ldr	r0, [sp, #404]	@ 0x194
 800927a:	9209      	str	r2, [sp, #36]	@ 0x24
 800927c:	0049      	lsls	r1, r1, #1
 800927e:	1e6a      	subs	r2, r5, #1
 8009280:	b292      	uxth	r2, r2
 8009282:	9115      	str	r1, [sp, #84]	@ 0x54
 8009284:	3020      	adds	r0, #32
 8009286:	1c59      	adds	r1, r3, #1
 8009288:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800928c:	1c53      	adds	r3, r2, #1
 800928e:	fb01 f204 	mul.w	r2, r1, r4
 8009292:	0109      	lsls	r1, r1, #4
 8009294:	910e      	str	r1, [sp, #56]	@ 0x38
 8009296:	0051      	lsls	r1, r2, #1
 8009298:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800929a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800929e:	9520      	str	r5, [sp, #128]	@ 0x80
 80092a0:	fb04 f202 	mul.w	r2, r4, r2
 80092a4:	9225      	str	r2, [sp, #148]	@ 0x94
 80092a6:	f004 0203 	and.w	r2, r4, #3
 80092aa:	9217      	str	r2, [sp, #92]	@ 0x5c
 80092ac:	0062      	lsls	r2, r4, #1
 80092ae:	9221      	str	r2, [sp, #132]	@ 0x84
 80092b0:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
 80092b2:	f8cd 80a0 	str.w	r8, [sp, #160]	@ 0xa0
 80092b6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80092ba:	922d      	str	r2, [sp, #180]	@ 0xb4
 80092bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092be:	900b      	str	r0, [sp, #44]	@ 0x2c
 80092c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80092c4:	922c      	str	r2, [sp, #176]	@ 0xb0
 80092c6:	009a      	lsls	r2, r3, #2
 80092c8:	9223      	str	r2, [sp, #140]	@ 0x8c
 80092ca:	00aa      	lsls	r2, r5, #2
 80092cc:	922b      	str	r2, [sp, #172]	@ 0xac
 80092ce:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80092d0:	910d      	str	r1, [sp, #52]	@ 0x34
 80092d2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80092d6:	922a      	str	r2, [sp, #168]	@ 0xa8
 80092d8:	9a65      	ldr	r2, [sp, #404]	@ 0x194
 80092da:	2600      	movs	r6, #0
 80092dc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80092e0:	4635      	mov	r5, r6
 80092e2:	46b8      	mov	r8, r7
 80092e4:	9329      	str	r3, [sp, #164]	@ 0xa4
 80092e6:	4637      	mov	r7, r6
 80092e8:	464e      	mov	r6, r9
 80092ea:	a840      	add	r0, sp, #256	@ 0x100
 80092ec:	f001 faf4 	bl	800a8d8 <ai_padding_opt_phase1>
 80092f0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 8178 	beq.w	80095e8 <forward_lite_dw_sssa8_ch+0x4a0>
 80092f8:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80092fa:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 80092fc:	eba8 030b 	sub.w	r3, r8, fp
 8009300:	fb02 3305 	mla	r3, r2, r5, r3
 8009304:	9311      	str	r3, [sp, #68]	@ 0x44
 8009306:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009308:	425b      	negs	r3, r3
 800930a:	b29b      	uxth	r3, r3
 800930c:	e9cd b632 	strd	fp, r6, [sp, #200]	@ 0xc8
 8009310:	e9cd 7830 	strd	r7, r8, [sp, #192]	@ 0xc0
 8009314:	9314      	str	r3, [sp, #80]	@ 0x50
 8009316:	2200      	movs	r2, #0
 8009318:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	@ 0xa0
 800931c:	f8dd 809c 	ldr.w	r8, [sp, #156]	@ 0x9c
 8009320:	9216      	str	r2, [sp, #88]	@ 0x58
 8009322:	931c      	str	r3, [sp, #112]	@ 0x70
 8009324:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 820c 	beq.w	8009744 <forward_lite_dw_sssa8_ch+0x5fc>
 800932c:	3b01      	subs	r3, #1
 800932e:	9340      	str	r3, [sp, #256]	@ 0x100
 8009330:	f04f 0301 	mov.w	r3, #1
 8009334:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8009338:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800933a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800933c:	428b      	cmp	r3, r1
 800933e:	dd38      	ble.n	80093b2 <forward_lite_dw_sssa8_ch+0x26a>
 8009340:	4689      	mov	r9, r1
 8009342:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009344:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8009346:	f9bd b050 	ldrsh.w	fp, [sp, #80]	@ 0x50
 800934a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800934c:	9402      	str	r4, [sp, #8]
 800934e:	fb02 3201 	mla	r2, r2, r1, r3
 8009352:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009354:	1ad6      	subs	r6, r2, r3
 8009356:	464a      	mov	r2, r9
 8009358:	464c      	mov	r4, r9
 800935a:	46d9      	mov	r9, fp
 800935c:	4693      	mov	fp, r2
 800935e:	454e      	cmp	r6, r9
 8009360:	dd1e      	ble.n	80093a0 <forward_lite_dw_sssa8_ch+0x258>
 8009362:	f1bb 0f00 	cmp.w	fp, #0
 8009366:	f2c0 81d9 	blt.w	800971c <forward_lite_dw_sssa8_ch+0x5d4>
 800936a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800936c:	42a3      	cmp	r3, r4
 800936e:	f340 81c9 	ble.w	8009704 <forward_lite_dw_sssa8_ch+0x5bc>
 8009372:	4643      	mov	r3, r8
 8009374:	464f      	mov	r7, r9
 8009376:	46a0      	mov	r8, r4
 8009378:	46cc      	mov	ip, r9
 800937a:	461c      	mov	r4, r3
 800937c:	2f00      	cmp	r7, #0
 800937e:	4629      	mov	r1, r5
 8009380:	4622      	mov	r2, r4
 8009382:	4650      	mov	r0, sl
 8009384:	db03      	blt.n	800938e <forward_lite_dw_sssa8_ch+0x246>
 8009386:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009388:	4563      	cmp	r3, ip
 800938a:	f300 81d3 	bgt.w	8009734 <forward_lite_dw_sssa8_ch+0x5ec>
 800938e:	f002 f8b1 	bl	800b4f4 <st_int8_fill>
 8009392:	3701      	adds	r7, #1
 8009394:	b23f      	sxth	r7, r7
 8009396:	42be      	cmp	r6, r7
 8009398:	4425      	add	r5, r4
 800939a:	46bc      	mov	ip, r7
 800939c:	dcee      	bgt.n	800937c <forward_lite_dw_sssa8_ch+0x234>
 800939e:	46a0      	mov	r8, r4
 80093a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80093a2:	f10b 0201 	add.w	r2, fp, #1
 80093a6:	fa0f fb82 	sxth.w	fp, r2
 80093aa:	459b      	cmp	fp, r3
 80093ac:	465c      	mov	r4, fp
 80093ae:	dbd6      	blt.n	800935e <forward_lite_dw_sssa8_ch+0x216>
 80093b0:	9c02      	ldr	r4, [sp, #8]
 80093b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 81ff 	beq.w	80097b8 <forward_lite_dw_sssa8_ch+0x670>
 80093ba:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 80093bc:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
 80093c0:	f8dd 9084 	ldr.w	r9, [sp, #132]	@ 0x84
 80093c4:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
 80093c8:	3310      	adds	r3, #16
 80093ca:	9307      	str	r3, [sp, #28]
 80093cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093ce:	3308      	adds	r3, #8
 80093d0:	9302      	str	r3, [sp, #8]
 80093d2:	9b6e      	ldr	r3, [sp, #440]	@ 0x1b8
 80093d4:	3310      	adds	r3, #16
 80093d6:	9304      	str	r3, [sp, #16]
 80093d8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80093da:	3310      	adds	r3, #16
 80093dc:	9303      	str	r3, [sp, #12]
 80093de:	9b69      	ldr	r3, [sp, #420]	@ 0x1a4
 80093e0:	3304      	adds	r3, #4
 80093e2:	9305      	str	r3, [sp, #20]
 80093e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093e6:	9306      	str	r3, [sp, #24]
 80093e8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80093ea:	3320      	adds	r3, #32
 80093ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80093ee:	46c2      	mov	sl, r8
 80093f0:	9b07      	ldr	r3, [sp, #28]
 80093f2:	9a06      	ldr	r2, [sp, #24]
 80093f4:	e953 6504 	ldrd	r6, r5, [r3, #-16]
 80093f8:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80093fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093fe:	b383      	cbz	r3, 8009462 <forward_lite_dw_sssa8_ch+0x31a>
 8009400:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8009402:	f8cd b020 	str.w	fp, [sp, #32]
 8009406:	f10b 0310 	add.w	r3, fp, #16
 800940a:	eb0b 0c07 	add.w	ip, fp, r7
 800940e:	6817      	ldr	r7, [r2, #0]
 8009410:	f852 e00a 	ldr.w	lr, [r2, sl]
 8009414:	eac7 480e 	pkhbt	r8, r7, lr, lsl #16
 8009418:	444a      	add	r2, r9
 800941a:	eace 4e27 	pkhtb	lr, lr, r7, asr #16
 800941e:	fa24 fb88 	sxtab16	fp, r4, r8
 8009422:	f853 7c10 	ldr.w	r7, [r3, #-16]
 8009426:	fb27 660b 	smlad	r6, r7, fp, r6
 800942a:	fa24 f898 	sxtab16	r8, r4, r8, ror #8
 800942e:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 8009432:	fb27 5508 	smlad	r5, r7, r8, r5
 8009436:	f853 7c08 	ldr.w	r7, [r3, #-8]
 800943a:	fa24 f88e 	sxtab16	r8, r4, lr
 800943e:	fb27 0008 	smlad	r0, r7, r8, r0
 8009442:	fa24 fe9e 	sxtab16	lr, r4, lr, ror #8
 8009446:	f853 7c04 	ldr.w	r7, [r3, #-4]
 800944a:	fb27 110e 	smlad	r1, r7, lr, r1
 800944e:	3310      	adds	r3, #16
 8009450:	459c      	cmp	ip, r3
 8009452:	d1dc      	bne.n	800940e <forward_lite_dw_sssa8_ch+0x2c6>
 8009454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009456:	f8dd b020 	ldr.w	fp, [sp, #32]
 800945a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800945c:	449b      	add	fp, r3
 800945e:	9b06      	ldr	r3, [sp, #24]
 8009460:	189a      	adds	r2, r3, r2
 8009462:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009464:	b30b      	cbz	r3, 80094aa <forward_lite_dw_sssa8_ch+0x362>
 8009466:	6813      	ldr	r3, [r2, #0]
 8009468:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800946a:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 800946e:	f8bb 8000 	ldrh.w	r8, [fp]
 8009472:	f8ad 2020 	strh.w	r2, [sp, #32]
 8009476:	b25a      	sxtb	r2, r3
 8009478:	1bd2      	subs	r2, r2, r7
 800947a:	f8bb e002 	ldrh.w	lr, [fp, #2]
 800947e:	f8bb c004 	ldrh.w	ip, [fp, #4]
 8009482:	fb18 6602 	smlabb	r6, r8, r2, r6
 8009486:	f343 2207 	sbfx	r2, r3, #8, #8
 800948a:	1bd2      	subs	r2, r2, r7
 800948c:	fb1e 5502 	smlabb	r5, lr, r2, r5
 8009490:	f343 4207 	sbfx	r2, r3, #16, #8
 8009494:	1bd2      	subs	r2, r2, r7
 8009496:	fb1c 0002 	smlabb	r0, ip, r2, r0
 800949a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800949e:	ebc7 6323 	rsb	r3, r7, r3, asr #24
 80094a2:	f10b 0b08 	add.w	fp, fp, #8
 80094a6:	fb12 1103 	smlabb	r1, r2, r3, r1
 80094aa:	9b02      	ldr	r3, [sp, #8]
 80094ac:	f933 2c08 	ldrsh.w	r2, [r3, #-8]
 80094b0:	9b04      	ldr	r3, [sp, #16]
 80094b2:	f853 cc10 	ldr.w	ip, [r3, #-16]
 80094b6:	9b03      	ldr	r3, [sp, #12]
 80094b8:	2a15      	cmp	r2, #21
 80094ba:	f853 7c10 	ldr.w	r7, [r3, #-16]
 80094be:	f340 80d1 	ble.w	8009664 <forward_lite_dw_sssa8_ch+0x51c>
 80094c2:	1e93      	subs	r3, r2, #2
 80094c4:	f04f 0e01 	mov.w	lr, #1
 80094c8:	3a01      	subs	r2, #1
 80094ca:	fa0e f303 	lsl.w	r3, lr, r3
 80094ce:	fb56 330c 	smmla	r3, r6, ip, r3
 80094d2:	4113      	asrs	r3, r2
 80094d4:	443b      	add	r3, r7
 80094d6:	f303 0307 	ssat	r3, #8, r3
 80094da:	b25b      	sxtb	r3, r3
 80094dc:	9a05      	ldr	r2, [sp, #20]
 80094de:	f802 3c04 	strb.w	r3, [r2, #-4]
 80094e2:	9b02      	ldr	r3, [sp, #8]
 80094e4:	f933 6c06 	ldrsh.w	r6, [r3, #-6]
 80094e8:	2e15      	cmp	r6, #21
 80094ea:	f340 80ab 	ble.w	8009644 <forward_lite_dw_sssa8_ch+0x4fc>
 80094ee:	9b03      	ldr	r3, [sp, #12]
 80094f0:	1eb2      	subs	r2, r6, #2
 80094f2:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 80094f6:	2301      	movs	r3, #1
 80094f8:	fa03 f202 	lsl.w	r2, r3, r2
 80094fc:	9b04      	ldr	r3, [sp, #16]
 80094fe:	3e01      	subs	r6, #1
 8009500:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8009504:	fb55 2503 	smmla	r5, r5, r3, r2
 8009508:	fa45 f306 	asr.w	r3, r5, r6
 800950c:	443b      	add	r3, r7
 800950e:	f303 0307 	ssat	r3, #8, r3
 8009512:	b25b      	sxtb	r3, r3
 8009514:	9a05      	ldr	r2, [sp, #20]
 8009516:	f802 3c03 	strb.w	r3, [r2, #-3]
 800951a:	9b02      	ldr	r3, [sp, #8]
 800951c:	f933 5c04 	ldrsh.w	r5, [r3, #-4]
 8009520:	2d15      	cmp	r5, #21
 8009522:	dd7f      	ble.n	8009624 <forward_lite_dw_sssa8_ch+0x4dc>
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	1eaa      	subs	r2, r5, #2
 8009528:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800952c:	2301      	movs	r3, #1
 800952e:	fa03 f202 	lsl.w	r2, r3, r2
 8009532:	9b04      	ldr	r3, [sp, #16]
 8009534:	3d01      	subs	r5, #1
 8009536:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800953a:	fb50 2003 	smmla	r0, r0, r3, r2
 800953e:	fa40 f305 	asr.w	r3, r0, r5
 8009542:	4433      	add	r3, r6
 8009544:	f303 0307 	ssat	r3, #8, r3
 8009548:	b25b      	sxtb	r3, r3
 800954a:	9a05      	ldr	r2, [sp, #20]
 800954c:	f802 3c02 	strb.w	r3, [r2, #-2]
 8009550:	9b02      	ldr	r3, [sp, #8]
 8009552:	f933 0c02 	ldrsh.w	r0, [r3, #-2]
 8009556:	2815      	cmp	r0, #21
 8009558:	dd54      	ble.n	8009604 <forward_lite_dw_sssa8_ch+0x4bc>
 800955a:	9b03      	ldr	r3, [sp, #12]
 800955c:	1e82      	subs	r2, r0, #2
 800955e:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8009562:	2301      	movs	r3, #1
 8009564:	fa03 f202 	lsl.w	r2, r3, r2
 8009568:	9b04      	ldr	r3, [sp, #16]
 800956a:	3801      	subs	r0, #1
 800956c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8009570:	fb51 2103 	smmla	r1, r1, r3, r2
 8009574:	fa41 f300 	asr.w	r3, r1, r0
 8009578:	442b      	add	r3, r5
 800957a:	f303 0307 	ssat	r3, #8, r3
 800957e:	b25b      	sxtb	r3, r3
 8009580:	9a05      	ldr	r2, [sp, #20]
 8009582:	9902      	ldr	r1, [sp, #8]
 8009584:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009588:	3108      	adds	r1, #8
 800958a:	3204      	adds	r2, #4
 800958c:	9102      	str	r1, [sp, #8]
 800958e:	9205      	str	r2, [sp, #20]
 8009590:	9904      	ldr	r1, [sp, #16]
 8009592:	9a06      	ldr	r2, [sp, #24]
 8009594:	9b07      	ldr	r3, [sp, #28]
 8009596:	3110      	adds	r1, #16
 8009598:	3204      	adds	r2, #4
 800959a:	9104      	str	r1, [sp, #16]
 800959c:	9206      	str	r2, [sp, #24]
 800959e:	9903      	ldr	r1, [sp, #12]
 80095a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80095a2:	3310      	adds	r3, #16
 80095a4:	3110      	adds	r1, #16
 80095a6:	429a      	cmp	r2, r3
 80095a8:	9307      	str	r3, [sp, #28]
 80095aa:	9103      	str	r1, [sp, #12]
 80095ac:	f47f af20 	bne.w	80093f0 <forward_lite_dw_sssa8_ch+0x2a8>
 80095b0:	9b69      	ldr	r3, [sp, #420]	@ 0x1a4
 80095b2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80095b4:	4413      	add	r3, r2
 80095b6:	9369      	str	r3, [sp, #420]	@ 0x1a4
 80095b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095ba:	46d0      	mov	r8, sl
 80095bc:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f040 8133 	bne.w	800982c <forward_lite_dw_sssa8_ch+0x6e4>
 80095c6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80095c8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80095ca:	3301      	adds	r3, #1
 80095cc:	b21a      	sxth	r2, r3
 80095ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095d0:	9216      	str	r2, [sp, #88]	@ 0x58
 80095d2:	440b      	add	r3, r1
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	9314      	str	r3, [sp, #80]	@ 0x50
 80095d8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80095da:	4293      	cmp	r3, r2
 80095dc:	f73f aea2 	bgt.w	8009324 <forward_lite_dw_sssa8_ch+0x1dc>
 80095e0:	e9dd 7830 	ldrd	r7, r8, [sp, #192]	@ 0xc0
 80095e4:	e9dd b632 	ldrd	fp, r6, [sp, #200]	@ 0xc8
 80095e8:	1c7b      	adds	r3, r7, #1
 80095ea:	b21f      	sxth	r7, r3
 80095ec:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80095ee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80095f0:	4413      	add	r3, r2
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	42be      	cmp	r6, r7
 80095f6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80095f8:	463d      	mov	r5, r7
 80095fa:	f73f ae76 	bgt.w	80092ea <forward_lite_dw_sssa8_ch+0x1a2>
 80095fe:	b055      	add	sp, #340	@ 0x154
 8009600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009604:	2800      	cmp	r0, #0
 8009606:	dd37      	ble.n	8009678 <forward_lite_dw_sssa8_ch+0x530>
 8009608:	9b04      	ldr	r3, [sp, #16]
 800960a:	9a03      	ldr	r2, [sp, #12]
 800960c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8009610:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8009614:	0049      	lsls	r1, r1, #1
 8009616:	fb51 2103 	smmla	r1, r1, r3, r2
 800961a:	4101      	asrs	r1, r0
 800961c:	f301 0307 	ssat	r3, #8, r1
 8009620:	b25b      	sxtb	r3, r3
 8009622:	e7ad      	b.n	8009580 <forward_lite_dw_sssa8_ch+0x438>
 8009624:	2d00      	cmp	r5, #0
 8009626:	dd3a      	ble.n	800969e <forward_lite_dw_sssa8_ch+0x556>
 8009628:	9b04      	ldr	r3, [sp, #16]
 800962a:	9a03      	ldr	r2, [sp, #12]
 800962c:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8009630:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8009634:	0040      	lsls	r0, r0, #1
 8009636:	fb50 2003 	smmla	r0, r0, r3, r2
 800963a:	4128      	asrs	r0, r5
 800963c:	f300 0307 	ssat	r3, #8, r0
 8009640:	b25b      	sxtb	r3, r3
 8009642:	e782      	b.n	800954a <forward_lite_dw_sssa8_ch+0x402>
 8009644:	2e00      	cmp	r6, #0
 8009646:	dd3d      	ble.n	80096c4 <forward_lite_dw_sssa8_ch+0x57c>
 8009648:	9b04      	ldr	r3, [sp, #16]
 800964a:	9a03      	ldr	r2, [sp, #12]
 800964c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8009650:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 8009654:	006d      	lsls	r5, r5, #1
 8009656:	fb55 2503 	smmla	r5, r5, r3, r2
 800965a:	4135      	asrs	r5, r6
 800965c:	f305 0307 	ssat	r3, #8, r5
 8009660:	b25b      	sxtb	r3, r3
 8009662:	e757      	b.n	8009514 <forward_lite_dw_sssa8_ch+0x3cc>
 8009664:	2a00      	cmp	r2, #0
 8009666:	dd40      	ble.n	80096ea <forward_lite_dw_sssa8_ch+0x5a2>
 8009668:	0073      	lsls	r3, r6, #1
 800966a:	fb53 730c 	smmla	r3, r3, ip, r7
 800966e:	4113      	asrs	r3, r2
 8009670:	f303 0307 	ssat	r3, #8, r3
 8009674:	b25b      	sxtb	r3, r3
 8009676:	e731      	b.n	80094dc <forward_lite_dw_sssa8_ch+0x394>
 8009678:	f1c0 0001 	rsb	r0, r0, #1
 800967c:	fa01 f200 	lsl.w	r2, r1, r0
 8009680:	f302 021f 	ssat	r2, #32, r2
 8009684:	9b04      	ldr	r3, [sp, #16]
 8009686:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800968a:	fb52 f213 	smmulr	r2, r2, r3
 800968e:	9b03      	ldr	r3, [sp, #12]
 8009690:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8009694:	4413      	add	r3, r2
 8009696:	f303 0307 	ssat	r3, #8, r3
 800969a:	b25b      	sxtb	r3, r3
 800969c:	e770      	b.n	8009580 <forward_lite_dw_sssa8_ch+0x438>
 800969e:	f1c5 0501 	rsb	r5, r5, #1
 80096a2:	fa00 f205 	lsl.w	r2, r0, r5
 80096a6:	f302 021f 	ssat	r2, #32, r2
 80096aa:	9b04      	ldr	r3, [sp, #16]
 80096ac:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80096b0:	fb52 f213 	smmulr	r2, r2, r3
 80096b4:	9b03      	ldr	r3, [sp, #12]
 80096b6:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80096ba:	4413      	add	r3, r2
 80096bc:	f303 0307 	ssat	r3, #8, r3
 80096c0:	b25b      	sxtb	r3, r3
 80096c2:	e742      	b.n	800954a <forward_lite_dw_sssa8_ch+0x402>
 80096c4:	f1c6 0601 	rsb	r6, r6, #1
 80096c8:	fa05 f206 	lsl.w	r2, r5, r6
 80096cc:	f302 021f 	ssat	r2, #32, r2
 80096d0:	9b04      	ldr	r3, [sp, #16]
 80096d2:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80096d6:	fb52 f213 	smmulr	r2, r2, r3
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80096e0:	4413      	add	r3, r2
 80096e2:	f303 0307 	ssat	r3, #8, r3
 80096e6:	b25b      	sxtb	r3, r3
 80096e8:	e714      	b.n	8009514 <forward_lite_dw_sssa8_ch+0x3cc>
 80096ea:	f1c2 0301 	rsb	r3, r2, #1
 80096ee:	fa06 f303 	lsl.w	r3, r6, r3
 80096f2:	f303 031f 	ssat	r3, #32, r3
 80096f6:	fb53 f31c 	smmulr	r3, r3, ip
 80096fa:	443b      	add	r3, r7
 80096fc:	f303 0307 	ssat	r3, #8, r3
 8009700:	b25b      	sxtb	r3, r3
 8009702:	e6eb      	b.n	80094dc <forward_lite_dw_sssa8_ch+0x394>
 8009704:	464c      	mov	r4, r9
 8009706:	3401      	adds	r4, #1
 8009708:	4629      	mov	r1, r5
 800970a:	4642      	mov	r2, r8
 800970c:	4650      	mov	r0, sl
 800970e:	b224      	sxth	r4, r4
 8009710:	f001 fef0 	bl	800b4f4 <st_int8_fill>
 8009714:	42a6      	cmp	r6, r4
 8009716:	4445      	add	r5, r8
 8009718:	dcf5      	bgt.n	8009706 <forward_lite_dw_sssa8_ch+0x5be>
 800971a:	e641      	b.n	80093a0 <forward_lite_dw_sssa8_ch+0x258>
 800971c:	464c      	mov	r4, r9
 800971e:	3401      	adds	r4, #1
 8009720:	4629      	mov	r1, r5
 8009722:	4642      	mov	r2, r8
 8009724:	4650      	mov	r0, sl
 8009726:	b224      	sxth	r4, r4
 8009728:	f001 fee4 	bl	800b4f4 <st_int8_fill>
 800972c:	42a6      	cmp	r6, r4
 800972e:	4445      	add	r5, r8
 8009730:	dcf5      	bgt.n	800971e <forward_lite_dw_sssa8_ch+0x5d6>
 8009732:	e635      	b.n	80093a0 <forward_lite_dw_sssa8_ch+0x258>
 8009734:	fb08 c003 	mla	r0, r8, r3, ip
 8009738:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800973a:	fb04 3000 	mla	r0, r4, r0, r3
 800973e:	f001 fe3b 	bl	800b3b8 <st_int8_copy>
 8009742:	e626      	b.n	8009392 <forward_lite_dw_sssa8_ch+0x24a>
 8009744:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009746:	b93b      	cbnz	r3, 8009758 <forward_lite_dw_sssa8_ch+0x610>
 8009748:	f04f 0301 	mov.w	r3, #1
 800974c:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8009750:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 8009752:	3b01      	subs	r3, #1
 8009754:	9342      	str	r3, [sp, #264]	@ 0x108
 8009756:	e5ef      	b.n	8009338 <forward_lite_dw_sssa8_ch+0x1f0>
 8009758:	3b01      	subs	r3, #1
 800975a:	9341      	str	r3, [sp, #260]	@ 0x104
 800975c:	f8bd 3124 	ldrh.w	r3, [sp, #292]	@ 0x124
 8009760:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8009764:	2b01      	cmp	r3, #1
 8009766:	f43f ade7 	beq.w	8009338 <forward_lite_dw_sssa8_ch+0x1f0>
 800976a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800976c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800976e:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	@ 0x50
 8009772:	4293      	cmp	r3, r2
 8009774:	f77f ae1d 	ble.w	80093b2 <forward_lite_dw_sssa8_ch+0x26a>
 8009778:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800977a:	9402      	str	r4, [sp, #8]
 800977c:	f8cd a00c 	str.w	sl, [sp, #12]
 8009780:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8009782:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8009786:	46b2      	mov	sl, r6
 8009788:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800978a:	4615      	mov	r5, r2
 800978c:	4610      	mov	r0, r2
 800978e:	4699      	mov	r9, r3
 8009790:	fb00 7006 	mla	r0, r0, r6, r7
 8009794:	3501      	adds	r5, #1
 8009796:	fb08 b000 	mla	r0, r8, r0, fp
 800979a:	4651      	mov	r1, sl
 800979c:	b22d      	sxth	r5, r5
 800979e:	4622      	mov	r2, r4
 80097a0:	f001 fe0a 	bl	800b3b8 <st_int8_copy>
 80097a4:	454d      	cmp	r5, r9
 80097a6:	44a2      	add	sl, r4
 80097a8:	4628      	mov	r0, r5
 80097aa:	dbf1      	blt.n	8009790 <forward_lite_dw_sssa8_ch+0x648>
 80097ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80097ae:	e9dd 4a02 	ldrd	r4, sl, [sp, #8]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f47f ae01 	bne.w	80093ba <forward_lite_dw_sssa8_ch+0x272>
 80097b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f43f af03 	beq.w	80095c6 <forward_lite_dw_sssa8_ch+0x47e>
 80097c0:	f1b8 0f01 	cmp.w	r8, #1
 80097c4:	f040 80c4 	bne.w	8009950 <forward_lite_dw_sssa8_ch+0x808>
 80097c8:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 80097ca:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
 80097cc:	6819      	ldr	r1, [r3, #0]
 80097ce:	9b69      	ldr	r3, [sp, #420]	@ 0x1a4
 80097d0:	f1a2 0e04 	sub.w	lr, r2, #4
 80097d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80097d6:	1e5f      	subs	r7, r3, #1
 80097d8:	f1a2 0c04 	sub.w	ip, r2, #4
 80097dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097de:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80097e0:	3b02      	subs	r3, #2
 80097e2:	b16a      	cbz	r2, 8009800 <forward_lite_dw_sssa8_ch+0x6b8>
 80097e4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80097e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80097e8:	1816      	adds	r6, r2, r0
 80097ea:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80097ec:	f832 9b02 	ldrh.w	r9, [r2], #2
 80097f0:	f910 5b01 	ldrsb.w	r5, [r0], #1
 80097f4:	4296      	cmp	r6, r2
 80097f6:	eba5 050a 	sub.w	r5, r5, sl
 80097fa:	fb15 1109 	smlabb	r1, r5, r9, r1
 80097fe:	d1f5      	bne.n	80097ec <forward_lite_dw_sssa8_ch+0x6a4>
 8009800:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009804:	f8de 0004 	ldr.w	r0, [lr, #4]
 8009808:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800980c:	2a15      	cmp	r2, #21
 800980e:	dd75      	ble.n	80098fc <forward_lite_dw_sssa8_ch+0x7b4>
 8009810:	1e93      	subs	r3, r2, #2
 8009812:	2601      	movs	r6, #1
 8009814:	3a01      	subs	r2, #1
 8009816:	fa06 f303 	lsl.w	r3, r6, r3
 800981a:	fb51 3300 	smmla	r3, r1, r0, r3
 800981e:	4113      	asrs	r3, r2
 8009820:	442b      	add	r3, r5
 8009822:	f303 0307 	ssat	r3, #8, r3
 8009826:	b25b      	sxtb	r3, r3
 8009828:	707b      	strb	r3, [r7, #1]
 800982a:	e055      	b.n	80098d8 <forward_lite_dw_sssa8_ch+0x790>
 800982c:	e9dd c329 	ldrd	ip, r3, [sp, #164]	@ 0xa4
 8009830:	e9dd 012b 	ldrd	r0, r1, [sp, #172]	@ 0xac
 8009834:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8009836:	9404      	str	r4, [sp, #16]
 8009838:	1f1f      	subs	r7, r3, #4
 800983a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800983c:	4403      	add	r3, r0
 800983e:	b29b      	uxth	r3, r3
 8009840:	9302      	str	r3, [sp, #8]
 8009842:	9b69      	ldr	r3, [sp, #420]	@ 0x1a4
 8009844:	3a04      	subs	r2, #4
 8009846:	f1a1 0e02 	sub.w	lr, r1, #2
 800984a:	1e5e      	subs	r6, r3, #1
 800984c:	4614      	mov	r4, r2
 800984e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	1811      	adds	r1, r2, r0
 8009854:	b298      	uxth	r0, r3
 8009856:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009858:	f85c 2b04 	ldr.w	r2, [ip], #4
 800985c:	2b00      	cmp	r3, #0
 800985e:	d066      	beq.n	800992e <forward_lite_dw_sssa8_ch+0x7e6>
 8009860:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009862:	eb0b 0503 	add.w	r5, fp, r3
 8009866:	f991 3000 	ldrsb.w	r3, [r1]
 800986a:	f83b 9b02 	ldrh.w	r9, [fp], #2
 800986e:	eba3 030a 	sub.w	r3, r3, sl
 8009872:	45ab      	cmp	fp, r5
 8009874:	4441      	add	r1, r8
 8009876:	fb19 2203 	smlabb	r2, r9, r3, r2
 800987a:	d1f4      	bne.n	8009866 <forward_lite_dw_sssa8_ch+0x71e>
 800987c:	f93e 3f02 	ldrsh.w	r3, [lr, #2]!
 8009880:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009884:	f857 9f04 	ldr.w	r9, [r7, #4]!
 8009888:	2b15      	cmp	r3, #21
 800988a:	dd15      	ble.n	80098b8 <forward_lite_dw_sssa8_ch+0x770>
 800988c:	1e99      	subs	r1, r3, #2
 800988e:	3b01      	subs	r3, #1
 8009890:	9303      	str	r3, [sp, #12]
 8009892:	2301      	movs	r3, #1
 8009894:	fa03 f101 	lsl.w	r1, r3, r1
 8009898:	9b03      	ldr	r3, [sp, #12]
 800989a:	fb52 120b 	smmla	r2, r2, fp, r1
 800989e:	411a      	asrs	r2, r3
 80098a0:	eb02 0309 	add.w	r3, r2, r9
 80098a4:	f303 0307 	ssat	r3, #8, r3
 80098a8:	b25b      	sxtb	r3, r3
 80098aa:	f806 3f01 	strb.w	r3, [r6, #1]!
 80098ae:	9b02      	ldr	r3, [sp, #8]
 80098b0:	4298      	cmp	r0, r3
 80098b2:	d010      	beq.n	80098d6 <forward_lite_dw_sssa8_ch+0x78e>
 80098b4:	46ab      	mov	fp, r5
 80098b6:	e7ca      	b.n	800984e <forward_lite_dw_sssa8_ch+0x706>
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	dd12      	ble.n	80098e2 <forward_lite_dw_sssa8_ch+0x79a>
 80098bc:	0052      	lsls	r2, r2, #1
 80098be:	fb52 920b 	smmla	r2, r2, fp, r9
 80098c2:	fa42 f303 	asr.w	r3, r2, r3
 80098c6:	f303 0307 	ssat	r3, #8, r3
 80098ca:	b25b      	sxtb	r3, r3
 80098cc:	f806 3f01 	strb.w	r3, [r6, #1]!
 80098d0:	9b02      	ldr	r3, [sp, #8]
 80098d2:	4298      	cmp	r0, r3
 80098d4:	d1ee      	bne.n	80098b4 <forward_lite_dw_sssa8_ch+0x76c>
 80098d6:	9c04      	ldr	r4, [sp, #16]
 80098d8:	9b69      	ldr	r3, [sp, #420]	@ 0x1a4
 80098da:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80098dc:	4413      	add	r3, r2
 80098de:	9369      	str	r3, [sp, #420]	@ 0x1a4
 80098e0:	e671      	b.n	80095c6 <forward_lite_dw_sssa8_ch+0x47e>
 80098e2:	f1c3 0301 	rsb	r3, r3, #1
 80098e6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ea:	f303 031f 	ssat	r3, #32, r3
 80098ee:	fb53 f31b 	smmulr	r3, r3, fp
 80098f2:	444b      	add	r3, r9
 80098f4:	f303 0307 	ssat	r3, #8, r3
 80098f8:	b25b      	sxtb	r3, r3
 80098fa:	e7d6      	b.n	80098aa <forward_lite_dw_sssa8_ch+0x762>
 80098fc:	2a00      	cmp	r2, #0
 80098fe:	dd08      	ble.n	8009912 <forward_lite_dw_sssa8_ch+0x7ca>
 8009900:	004b      	lsls	r3, r1, #1
 8009902:	fb53 5300 	smmla	r3, r3, r0, r5
 8009906:	4113      	asrs	r3, r2
 8009908:	f303 0307 	ssat	r3, #8, r3
 800990c:	b25b      	sxtb	r3, r3
 800990e:	707b      	strb	r3, [r7, #1]
 8009910:	e7e2      	b.n	80098d8 <forward_lite_dw_sssa8_ch+0x790>
 8009912:	f1c2 0301 	rsb	r3, r2, #1
 8009916:	fa01 f303 	lsl.w	r3, r1, r3
 800991a:	f303 031f 	ssat	r3, #32, r3
 800991e:	fb53 f310 	smmulr	r3, r3, r0
 8009922:	442b      	add	r3, r5
 8009924:	f303 0307 	ssat	r3, #8, r3
 8009928:	b25b      	sxtb	r3, r3
 800992a:	707b      	strb	r3, [r7, #1]
 800992c:	e7d4      	b.n	80098d8 <forward_lite_dw_sssa8_ch+0x790>
 800992e:	465d      	mov	r5, fp
 8009930:	e7a4      	b.n	800987c <forward_lite_dw_sssa8_ch+0x734>
 8009932:	428c      	cmp	r4, r1
 8009934:	f842 5f04 	str.w	r5, [r2, #4]!
 8009938:	f47f ac53 	bne.w	80091e2 <forward_lite_dw_sssa8_ch+0x9a>
 800993c:	e462      	b.n	8009204 <forward_lite_dw_sssa8_ch+0xbc>
 800993e:	9b6e      	ldr	r3, [sp, #440]	@ 0x1b8
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8009944:	985e      	ldr	r0, [sp, #376]	@ 0x178
 8009946:	463b      	mov	r3, r7
 8009948:	4622      	mov	r2, r4
 800994a:	f7ff fb4b 	bl	8008fe4 <st_dw_sssa8_ch_Wadapt>
 800994e:	e41f      	b.n	8009190 <forward_lite_dw_sssa8_ch+0x48>
 8009950:	f8dd c194 	ldr.w	ip, [sp, #404]	@ 0x194
 8009954:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009956:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
 800995a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800995c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800995e:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
 8009960:	e769      	b.n	8009836 <forward_lite_dw_sssa8_ch+0x6ee>
 8009962:	bf00      	nop

08009964 <forward_lite_pw_sssa8_ch>:
 8009964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009968:	b09d      	sub	sp, #116	@ 0x74
 800996a:	4689      	mov	r9, r1
 800996c:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 8009970:	910d      	str	r1, [sp, #52]	@ 0x34
 8009972:	f99d 10ac 	ldrsb.w	r1, [sp, #172]	@ 0xac
 8009976:	9111      	str	r1, [sp, #68]	@ 0x44
 8009978:	f99d 10b0 	ldrsb.w	r1, [sp, #176]	@ 0xb0
 800997c:	9115      	str	r1, [sp, #84]	@ 0x54
 800997e:	f89d 10b8 	ldrb.w	r1, [sp, #184]	@ 0xb8
 8009982:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009984:	2b02      	cmp	r3, #2
 8009986:	f8bd 10c0 	ldrh.w	r1, [sp, #192]	@ 0xc0
 800998a:	9217      	str	r2, [sp, #92]	@ 0x5c
 800998c:	4616      	mov	r6, r2
 800998e:	f8bd b09c 	ldrh.w	fp, [sp, #156]	@ 0x9c
 8009992:	f8bd 2098 	ldrh.w	r2, [sp, #152]	@ 0x98
 8009996:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 8009998:	9114      	str	r1, [sp, #80]	@ 0x50
 800999a:	4680      	mov	r8, r0
 800999c:	46ca      	mov	sl, r9
 800999e:	f000 80be 	beq.w	8009b1e <forward_lite_pw_sssa8_ch+0x1ba>
 80099a2:	4645      	mov	r5, r8
 80099a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099a6:	fb0a f206 	mul.w	r2, sl, r6
 80099aa:	fb03 4302 	mla	r3, r3, r2, r4
 80099ae:	4598      	cmp	r8, r3
 80099b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80099b2:	d204      	bcs.n	80099be <forward_lite_pw_sssa8_ch+0x5a>
 80099b4:	fb0b 8802 	mla	r8, fp, r2, r8
 80099b8:	4544      	cmp	r4, r8
 80099ba:	f0c0 813c 	bcc.w	8009c36 <forward_lite_pw_sssa8_ch+0x2d2>
 80099be:	2301      	movs	r3, #1
 80099c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80099c2:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80099c4:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80099c6:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80099c8:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 80099ca:	eba3 0847 	sub.w	r8, r3, r7, lsl #1
 80099ce:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80099d0:	4498      	add	r8, r3
 80099d2:	4639      	mov	r1, r7
 80099d4:	4643      	mov	r3, r8
 80099d6:	f000 fe0b 	bl	800a5f0 <align_factor_ch>
 80099da:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80099dc:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 80099de:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80099e2:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80099e6:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 80099ea:	9213      	str	r2, [sp, #76]	@ 0x4c
 80099ec:	9112      	str	r1, [sp, #72]	@ 0x48
 80099ee:	2f00      	cmp	r7, #0
 80099f0:	f000 8169 	beq.w	8009cc6 <forward_lite_pw_sssa8_ch+0x362>
 80099f4:	2301      	movs	r3, #1
 80099f6:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80099f8:	9318      	str	r3, [sp, #96]	@ 0x60
 80099fa:	44c4      	add	ip, r8
 80099fc:	4641      	mov	r1, r8
 80099fe:	1f10      	subs	r0, r2, #4
 8009a00:	469e      	mov	lr, r3
 8009a02:	9616      	str	r6, [sp, #88]	@ 0x58
 8009a04:	f931 3b02 	ldrsh.w	r3, [r1], #2
 8009a08:	1e5a      	subs	r2, r3, #1
 8009a0a:	b292      	uxth	r2, r2
 8009a0c:	fa0e f603 	lsl.w	r6, lr, r3
 8009a10:	2a14      	cmp	r2, #20
 8009a12:	fa07 f303 	lsl.w	r3, r7, r3
 8009a16:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 8009a1a:	d878      	bhi.n	8009b0e <forward_lite_pw_sssa8_ch+0x1aa>
 8009a1c:	458c      	cmp	ip, r1
 8009a1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a22:	d1ef      	bne.n	8009a04 <forward_lite_pw_sssa8_ch+0xa0>
 8009a24:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8009a26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	f000 8118 	beq.w	8009c5e <forward_lite_pw_sssa8_ch+0x2fa>
 8009a2e:	2700      	movs	r7, #0
 8009a30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a32:	07db      	lsls	r3, r3, #31
 8009a34:	f140 810a 	bpl.w	8009c4c <forward_lite_pw_sssa8_ch+0x2e8>
 8009a38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a3a:	eb0a 0306 	add.w	r3, sl, r6
 8009a3e:	3302      	adds	r3, #2
 8009a40:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8009a44:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	f000 80fd 	beq.w	8009c46 <forward_lite_pw_sssa8_ch+0x2e2>
 8009a4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a4e:	942f      	str	r4, [sp, #188]	@ 0xbc
 8009a50:	fb02 f20a 	mul.w	r2, r2, sl
 8009a54:	9214      	str	r2, [sp, #80]	@ 0x50
 8009a56:	fb0a f20b 	mul.w	r2, sl, fp
 8009a5a:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 8009a5e:	465c      	mov	r4, fp
 8009a60:	46c2      	mov	sl, r8
 8009a62:	f8dd b0bc 	ldr.w	fp, [sp, #188]	@ 0xbc
 8009a66:	9215      	str	r2, [sp, #84]	@ 0x54
 8009a68:	2600      	movs	r6, #0
 8009a6a:	4698      	mov	r8, r3
 8009a6c:	e022      	b.n	8009ab4 <forward_lite_pw_sssa8_ch+0x150>
 8009a6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a70:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a76:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a78:	9308      	str	r3, [sp, #32]
 8009a7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a7c:	9307      	str	r3, [sp, #28]
 8009a7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a80:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8009a82:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8009a84:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009a86:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8009a8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a8c:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8009a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a92:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009a96:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	465b      	mov	r3, fp
 8009a9e:	f002 fe4f 	bl	800c740 <st_sssa8_ch_nn_mat_mult_pw_nt_t>
 8009aa2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009aa4:	449b      	add	fp, r3
 8009aa6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009aa8:	441d      	add	r5, r3
 8009aaa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009aac:	3601      	adds	r6, #1
 8009aae:	42b3      	cmp	r3, r6
 8009ab0:	f000 80c9 	beq.w	8009c46 <forward_lite_pw_sssa8_ch+0x2e2>
 8009ab4:	f1b9 0f05 	cmp.w	r9, #5
 8009ab8:	d1d9      	bne.n	8009a6e <forward_lite_pw_sssa8_ch+0x10a>
 8009aba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009abc:	2b19      	cmp	r3, #25
 8009abe:	d1d6      	bne.n	8009a6e <forward_lite_pw_sssa8_ch+0x10a>
 8009ac0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ac2:	2b40      	cmp	r3, #64	@ 0x40
 8009ac4:	d1d3      	bne.n	8009a6e <forward_lite_pw_sssa8_ch+0x10a>
 8009ac6:	2c40      	cmp	r4, #64	@ 0x40
 8009ac8:	d1d1      	bne.n	8009a6e <forward_lite_pw_sssa8_ch+0x10a>
 8009aca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009acc:	3380      	adds	r3, #128	@ 0x80
 8009ace:	d1ce      	bne.n	8009a6e <forward_lite_pw_sssa8_ch+0x10a>
 8009ad0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d0cb      	beq.n	8009a6e <forward_lite_pw_sssa8_ch+0x10a>
 8009ad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	d1c8      	bne.n	8009a6e <forward_lite_pw_sssa8_ch+0x10a>
 8009adc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ae0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ae2:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8009ae4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8009ae6:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009ae8:	e9cd 9308 	strd	r9, r3, [sp, #32]
 8009aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aee:	9307      	str	r3, [sp, #28]
 8009af0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009af2:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8009af6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009af8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009afc:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	e9cd 8403 	strd	r8, r4, [sp, #12]
 8009b04:	465b      	mov	r3, fp
 8009b06:	4628      	mov	r0, r5
 8009b08:	f003 f9ca 	bl	800cea0 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS>
 8009b0c:	e7c9      	b.n	8009aa2 <forward_lite_pw_sssa8_ch+0x13e>
 8009b0e:	458c      	cmp	ip, r1
 8009b10:	f840 7f04 	str.w	r7, [r0, #4]!
 8009b14:	f000 809c 	beq.w	8009c50 <forward_lite_pw_sssa8_ch+0x2ec>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	9318      	str	r3, [sp, #96]	@ 0x60
 8009b1c:	e772      	b.n	8009a04 <forward_lite_pw_sssa8_ch+0xa0>
 8009b1e:	2a02      	cmp	r2, #2
 8009b20:	f47f af3f 	bne.w	80099a2 <forward_lite_pw_sssa8_ch+0x3e>
 8009b24:	2e00      	cmp	r6, #0
 8009b26:	f000 80d1 	beq.w	8009ccc <forward_lite_pw_sssa8_ch+0x368>
 8009b2a:	ea4f 039b 	mov.w	r3, fp, lsr #2
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f109 33ff 	add.w	r3, r9, #4294967295
 8009b34:	085b      	lsrs	r3, r3, #1
 8009b36:	fb0b f303 	mul.w	r3, fp, r3
 8009b3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b3c:	fb09 f30b 	mul.w	r3, r9, fp
 8009b40:	005b      	lsls	r3, r3, #1
 8009b42:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b44:	0853      	lsrs	r3, r2, #1
 8009b46:	00db      	lsls	r3, r3, #3
 8009b48:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	f022 0c01 	bic.w	ip, r2, #1
 8009b50:	2100      	movs	r1, #0
 8009b52:	f003 0701 	and.w	r7, r3, #1
 8009b56:	f102 3aff 	add.w	sl, r2, #4294967295
 8009b5a:	0095      	lsls	r5, r2, #2
 8009b5c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8009b60:	f00b 0603 	and.w	r6, fp, #3
 8009b64:	4686      	mov	lr, r0
 8009b66:	460a      	mov	r2, r1
 8009b68:	9712      	str	r7, [sp, #72]	@ 0x48
 8009b6a:	901b      	str	r0, [sp, #108]	@ 0x6c
 8009b6c:	4698      	mov	r8, r3
 8009b6e:	f1b9 0f00 	cmp.w	r9, #0
 8009b72:	d037      	beq.n	8009be4 <forward_lite_pw_sssa8_ch+0x280>
 8009b74:	4673      	mov	r3, lr
 8009b76:	f8cd e04c 	str.w	lr, [sp, #76]	@ 0x4c
 8009b7a:	2700      	movs	r7, #0
 8009b7c:	46d6      	mov	lr, sl
 8009b7e:	9216      	str	r2, [sp, #88]	@ 0x58
 8009b80:	9118      	str	r1, [sp, #96]	@ 0x60
 8009b82:	f1b8 0f00 	cmp.w	r8, #0
 8009b86:	d010      	beq.n	8009baa <forward_lite_pw_sssa8_ch+0x246>
 8009b88:	f1be 0f06 	cmp.w	lr, #6
 8009b8c:	d903      	bls.n	8009b96 <forward_lite_pw_sssa8_ch+0x232>
 8009b8e:	43da      	mvns	r2, r3
 8009b90:	4402      	add	r2, r0
 8009b92:	2a06      	cmp	r2, #6
 8009b94:	d879      	bhi.n	8009c8a <forward_lite_pw_sssa8_ch+0x326>
 8009b96:	1959      	adds	r1, r3, r5
 8009b98:	4602      	mov	r2, r0
 8009b9a:	f853 4b04 	ldr.w	r4, [r3], #4
 8009b9e:	f842 4b04 	str.w	r4, [r2], #4
 8009ba2:	428b      	cmp	r3, r1
 8009ba4:	d1f9      	bne.n	8009b9a <forward_lite_pw_sssa8_ch+0x236>
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	4428      	add	r0, r5
 8009baa:	b176      	cbz	r6, 8009bca <forward_lite_pw_sssa8_ch+0x266>
 8009bac:	f993 2000 	ldrsb.w	r2, [r3]
 8009bb0:	7002      	strb	r2, [r0, #0]
 8009bb2:	2e01      	cmp	r6, #1
 8009bb4:	d007      	beq.n	8009bc6 <forward_lite_pw_sssa8_ch+0x262>
 8009bb6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8009bba:	7042      	strb	r2, [r0, #1]
 8009bbc:	2e03      	cmp	r6, #3
 8009bbe:	bf04      	itt	eq
 8009bc0:	f993 2002 	ldrsbeq.w	r2, [r3, #2]
 8009bc4:	7082      	strbeq	r2, [r0, #2]
 8009bc6:	4433      	add	r3, r6
 8009bc8:	4430      	add	r0, r6
 8009bca:	3702      	adds	r7, #2
 8009bcc:	454f      	cmp	r7, r9
 8009bce:	445b      	add	r3, fp
 8009bd0:	dbd7      	blt.n	8009b82 <forward_lite_pw_sssa8_ch+0x21e>
 8009bd2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8009bd4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009bd6:	eb01 030b 	add.w	r3, r1, fp
 8009bda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bdc:	46f2      	mov	sl, lr
 8009bde:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8009be2:	4419      	add	r1, r3
 8009be4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009be6:	449e      	add	lr, r3
 8009be8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009bea:	3202      	adds	r2, #2
 8009bec:	429a      	cmp	r2, r3
 8009bee:	dbbe      	blt.n	8009b6e <forward_lite_pw_sssa8_ch+0x20a>
 8009bf0:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 8009bf4:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 8009bf6:	460a      	mov	r2, r1
 8009bf8:	461e      	mov	r6, r3
 8009bfa:	fb06 f309 	mul.w	r3, r6, r9
 8009bfe:	eba8 0502 	sub.w	r5, r8, r2
 8009c02:	fb0b 5503 	mla	r5, fp, r3, r5
 8009c06:	4629      	mov	r1, r5
 8009c08:	4640      	mov	r0, r8
 8009c0a:	edcd 0a10 	vstr	s1, [sp, #64]	@ 0x40
 8009c0e:	ed8d 0a0e 	vstr	s0, [sp, #56]	@ 0x38
 8009c12:	f001 fbd1 	bl	800b3b8 <st_int8_copy>
 8009c16:	1c73      	adds	r3, r6, #1
 8009c18:	f109 0201 	add.w	r2, r9, #1
 8009c1c:	105e      	asrs	r6, r3, #1
 8009c1e:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8009c22:	ed9d 0a0e 	vldr	s0, [sp, #56]	@ 0x38
 8009c26:	eddd 0a10 	vldr	s1, [sp, #64]	@ 0x40
 8009c2a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009c2c:	ea4f 0a62 	mov.w	sl, r2, asr #1
 8009c30:	f3c2 094f 	ubfx	r9, r2, #1, #16
 8009c34:	e6b6      	b.n	80099a4 <forward_lite_pw_sssa8_ch+0x40>
 8009c36:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c38:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009c3e:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8009c42:	461e      	mov	r6, r3
 8009c44:	e6bd      	b.n	80099c2 <forward_lite_pw_sssa8_ch+0x5e>
 8009c46:	b01d      	add	sp, #116	@ 0x74
 8009c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c4e:	e6f9      	b.n	8009a44 <forward_lite_pw_sssa8_ch+0xe0>
 8009c50:	2300      	movs	r3, #0
 8009c52:	9318      	str	r3, [sp, #96]	@ 0x60
 8009c54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c56:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	f47f aee8 	bne.w	8009a2e <forward_lite_pw_sssa8_ch+0xca>
 8009c5e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c60:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8009c62:	f06f 0309 	mvn.w	r3, #9
 8009c66:	fb03 1302 	mla	r3, r3, r2, r1
 8009c6a:	fb0b f202 	mul.w	r2, fp, r2
 8009c6e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8009c72:	f6ff aedc 	blt.w	8009a2e <forward_lite_pw_sssa8_ch+0xca>
 8009c76:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8009c78:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009c7a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009c7c:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8009c7e:	e9cd b700 	strd	fp, r7, [sp]
 8009c82:	465b      	mov	r3, fp
 8009c84:	f001 ff4c 	bl	800bb20 <st_sssa8_ch_fullW_prefetch>
 8009c88:	e6d2      	b.n	8009a30 <forward_lite_pw_sssa8_ch+0xcc>
 8009c8a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8009c8c:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 8009c90:	461a      	mov	r2, r3
 8009c92:	4601      	mov	r1, r0
 8009c94:	eb03 0a04 	add.w	sl, r3, r4
 8009c98:	6814      	ldr	r4, [r2, #0]
 8009c9a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8009c9e:	f8c1 e004 	str.w	lr, [r1, #4]
 8009ca2:	3208      	adds	r2, #8
 8009ca4:	4552      	cmp	r2, sl
 8009ca6:	600c      	str	r4, [r1, #0]
 8009ca8:	f101 0108 	add.w	r1, r1, #8
 8009cac:	d1f4      	bne.n	8009c98 <forward_lite_pw_sssa8_ch+0x334>
 8009cae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009cb0:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
 8009cb4:	b11a      	cbz	r2, 8009cbe <forward_lite_pw_sssa8_ch+0x35a>
 8009cb6:	f853 200c 	ldr.w	r2, [r3, ip]
 8009cba:	f840 200c 	str.w	r2, [r0, ip]
 8009cbe:	1959      	adds	r1, r3, r5
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4428      	add	r0, r5
 8009cc4:	e771      	b.n	8009baa <forward_lite_pw_sssa8_ch+0x246>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	9318      	str	r3, [sp, #96]	@ 0x60
 8009cca:	e6ac      	b.n	8009a26 <forward_lite_pw_sssa8_ch+0xc2>
 8009ccc:	4632      	mov	r2, r6
 8009cce:	e794      	b.n	8009bfa <forward_lite_pw_sssa8_ch+0x296>

08009cd0 <forward_lite_conv2d_rgb_sssa8_ch>:
 8009cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	b0dd      	sub	sp, #372	@ 0x174
 8009cd6:	4688      	mov	r8, r1
 8009cd8:	f8dd 91c0 	ldr.w	r9, [sp, #448]	@ 0x1c0
 8009cdc:	9011      	str	r0, [sp, #68]	@ 0x44
 8009cde:	9871      	ldr	r0, [sp, #452]	@ 0x1c4
 8009ce0:	f89d 61b4 	ldrb.w	r6, [sp, #436]	@ 0x1b4
 8009ce4:	f8bd 71a0 	ldrh.w	r7, [sp, #416]	@ 0x1a0
 8009ce8:	9227      	str	r2, [sp, #156]	@ 0x9c
 8009cea:	4619      	mov	r1, r3
 8009cec:	eba9 0343 	sub.w	r3, r9, r3, lsl #1
 8009cf0:	eb00 0b03 	add.w	fp, r0, r3
 8009cf4:	f99d 31a8 	ldrsb.w	r3, [sp, #424]	@ 0x1a8
 8009cf8:	986c      	ldr	r0, [sp, #432]	@ 0x1b0
 8009cfa:	9a71      	ldr	r2, [sp, #452]	@ 0x1c4
 8009cfc:	9320      	str	r3, [sp, #128]	@ 0x80
 8009cfe:	962c      	str	r6, [sp, #176]	@ 0xb0
 8009d00:	465b      	mov	r3, fp
 8009d02:	f8bd 61bc 	ldrh.w	r6, [sp, #444]	@ 0x1bc
 8009d06:	f8bd 4198 	ldrh.w	r4, [sp, #408]	@ 0x198
 8009d0a:	9115      	str	r1, [sp, #84]	@ 0x54
 8009d0c:	ea4f 0a41 	mov.w	sl, r1, lsl #1
 8009d10:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009d12:	960e      	str	r6, [sp, #56]	@ 0x38
 8009d14:	f8bd 519c 	ldrh.w	r5, [sp, #412]	@ 0x19c
 8009d18:	f99d 71ac 	ldrsb.w	r7, [sp, #428]	@ 0x1ac
 8009d1c:	f000 fc68 	bl	800a5f0 <align_factor_ch>
 8009d20:	9b69      	ldr	r3, [sp, #420]	@ 0x1a4
 8009d22:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	9b71      	ldr	r3, [sp, #452]	@ 0x1c4
 8009d28:	9e71      	ldr	r6, [sp, #452]	@ 0x1c4
 8009d2a:	9303      	str	r3, [sp, #12]
 8009d2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d2e:	9302      	str	r3, [sp, #8]
 8009d30:	eb0a 0300 	add.w	r3, sl, r0
 8009d34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d38:	4602      	mov	r2, r0
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8009d3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009d40:	9400      	str	r4, [sp, #0]
 8009d42:	4623      	mov	r3, r4
 8009d44:	2003      	movs	r0, #3
 8009d46:	f001 f8ef 	bl	800af28 <st_sssa8_ch_convolve_rank1upd>
 8009d4a:	fb14 f304 	smulbb	r3, r4, r4
 8009d4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009d52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009d54:	b299      	uxth	r1, r3
 8009d56:	ebc6 7346 	rsb	r3, r6, r6, lsl #29
 8009d5a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d5e:	9330      	str	r3, [sp, #192]	@ 0xc0
 8009d60:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8009d64:	9116      	str	r1, [sp, #88]	@ 0x58
 8009d66:	9331      	str	r3, [sp, #196]	@ 0xc4
 8009d68:	b1d6      	cbz	r6, 8009da0 <forward_lite_conv2d_rgb_sssa8_ch+0xd0>
 8009d6a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009d6c:	465a      	mov	r2, fp
 8009d6e:	1f19      	subs	r1, r3, #4
 8009d70:	44d3      	add	fp, sl
 8009d72:	f04f 0e01 	mov.w	lr, #1
 8009d76:	f932 3b02 	ldrsh.w	r3, [r2], #2
 8009d7a:	1e58      	subs	r0, r3, #1
 8009d7c:	b280      	uxth	r0, r0
 8009d7e:	fa0e fc03 	lsl.w	ip, lr, r3
 8009d82:	2814      	cmp	r0, #20
 8009d84:	fa07 f303 	lsl.w	r3, r7, r3
 8009d88:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 8009d8c:	f200 8105 	bhi.w	8009f9a <forward_lite_conv2d_rgb_sssa8_ch+0x2ca>
 8009d90:	455a      	cmp	r2, fp
 8009d92:	f841 3f04 	str.w	r3, [r1, #4]!
 8009d96:	d1ee      	bne.n	8009d76 <forward_lite_conv2d_rgb_sssa8_ch+0xa6>
 8009d98:	9b71      	ldr	r3, [sp, #452]	@ 0x1c4
 8009d9a:	9620      	str	r6, [sp, #128]	@ 0x80
 8009d9c:	eb03 0b09 	add.w	fp, r3, r9
 8009da0:	ebab 030a 	sub.w	r3, fp, sl
 8009da4:	9332      	str	r3, [sp, #200]	@ 0xc8
 8009da6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8009da8:	f013 0f01 	tst.w	r3, #1
 8009dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dae:	bf18      	it	ne
 8009db0:	3302      	addne	r3, #2
 8009db2:	fb03 f303 	mul.w	r3, r3, r3
 8009db6:	9322      	str	r3, [sp, #136]	@ 0x88
 8009db8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dba:	e9cd 3341 	strd	r3, r3, [sp, #260]	@ 0x104
 8009dbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dc0:	e9cd 3354 	strd	r3, r3, [sp, #336]	@ 0x150
 8009dc4:	ab44      	add	r3, sp, #272	@ 0x110
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	aa3c      	add	r2, sp, #240	@ 0xf0
 8009dca:	ab40      	add	r3, sp, #256	@ 0x100
 8009dcc:	a952      	add	r1, sp, #328	@ 0x148
 8009dce:	a848      	add	r0, sp, #288	@ 0x120
 8009dd0:	e9cd 883d 	strd	r8, r8, [sp, #244]	@ 0xf4
 8009dd4:	e9cd 4445 	strd	r4, r4, [sp, #276]	@ 0x114
 8009dd8:	e9cd 5556 	strd	r5, r5, [sp, #344]	@ 0x158
 8009ddc:	f000 fd24 	bl	800a828 <ai_padding_opt_init>
 8009de0:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8009de2:	fb04 f304 	mul.w	r3, r4, r4
 8009de6:	fb01 f203 	mul.w	r2, r1, r3
 8009dea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009dee:	f5b2 6f20 	cmp.w	r2, #2560	@ 0xa00
 8009df2:	bfa8      	it	ge
 8009df4:	f44f 6220 	movge.w	r2, #2560	@ 0xa00
 8009df8:	4617      	mov	r7, r2
 8009dfa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009dfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009e00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e04:	930d      	str	r3, [sp, #52]	@ 0x34
 8009e06:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e08:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8009e0a:	fb01 f303 	mul.w	r3, r1, r3
 8009e0e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8009e12:	42bb      	cmp	r3, r7
 8009e14:	9223      	str	r2, [sp, #140]	@ 0x8c
 8009e16:	f340 81d5 	ble.w	800a1c4 <forward_lite_conv2d_rgb_sssa8_ch+0x4f4>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8009e1e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009e20:	fbb7 f2f2 	udiv	r2, r7, r2
 8009e24:	b292      	uxth	r2, r2
 8009e26:	4291      	cmp	r1, r2
 8009e28:	4608      	mov	r0, r1
 8009e2a:	bf28      	it	cs
 8009e2c:	4610      	movcs	r0, r2
 8009e2e:	fbb1 f2f0 	udiv	r2, r1, r0
 8009e32:	fb00 1112 	mls	r1, r0, r2, r1
 8009e36:	b289      	uxth	r1, r1
 8009e38:	b292      	uxth	r2, r2
 8009e3a:	b109      	cbz	r1, 8009e40 <forward_lite_conv2d_rgb_sssa8_ch+0x170>
 8009e3c:	3201      	adds	r2, #1
 8009e3e:	b292      	uxth	r2, r2
 8009e40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009e42:	2900      	cmp	r1, #0
 8009e44:	f000 80fd 	beq.w	800a042 <forward_lite_conv2d_rgb_sssa8_ch+0x372>
 8009e48:	9e6e      	ldr	r6, [sp, #440]	@ 0x1b8
 8009e4a:	9438      	str	r4, [sp, #224]	@ 0xe0
 8009e4c:	3103      	adds	r1, #3
 8009e4e:	440e      	add	r6, r1
 8009e50:	962a      	str	r6, [sp, #168]	@ 0xa8
 8009e52:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8009e56:	9e6e      	ldr	r6, [sp, #440]	@ 0x1b8
 8009e58:	962b      	str	r6, [sp, #172]	@ 0xac
 8009e5a:	004e      	lsls	r6, r1, #1
 8009e5c:	9621      	str	r6, [sp, #132]	@ 0x84
 8009e5e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8009e60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009e62:	fb08 fe05 	mul.w	lr, r8, r5
 8009e66:	fb08 f606 	mul.w	r6, r8, r6
 8009e6a:	9633      	str	r6, [sp, #204]	@ 0xcc
 8009e6c:	f1ce 0600 	rsb	r6, lr, #0
 8009e70:	9629      	str	r6, [sp, #164]	@ 0xa4
 8009e72:	1c8e      	adds	r6, r1, #2
 8009e74:	9634      	str	r6, [sp, #208]	@ 0xd0
 8009e76:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009e78:	e9cd e336 	strd	lr, r3, [sp, #216]	@ 0xd8
 8009e7c:	fb01 f606 	mul.w	r6, r1, r6
 8009e80:	eba4 0c05 	sub.w	ip, r4, r5
 8009e84:	2700      	movs	r7, #0
 8009e86:	9635      	str	r6, [sp, #212]	@ 0xd4
 8009e88:	2100      	movs	r1, #0
 8009e8a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8009e8e:	9726      	str	r7, [sp, #152]	@ 0x98
 8009e90:	9619      	str	r6, [sp, #100]	@ 0x64
 8009e92:	46c3      	mov	fp, r8
 8009e94:	462e      	mov	r6, r5
 8009e96:	9128      	str	r1, [sp, #160]	@ 0xa0
 8009e98:	46e0      	mov	r8, ip
 8009e9a:	4607      	mov	r7, r0
 8009e9c:	4615      	mov	r5, r2
 8009e9e:	46e1      	mov	r9, ip
 8009ea0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009ea2:	a848      	add	r0, sp, #288	@ 0x120
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009ea8:	f000 fd16 	bl	800a8d8 <ai_padding_opt_phase1>
 8009eac:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8009eb0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8009eb2:	2903      	cmp	r1, #3
 8009eb4:	bf08      	it	eq
 8009eb6:	4613      	moveq	r3, r2
 8009eb8:	931d      	str	r3, [sp, #116]	@ 0x74
 8009eba:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 80a1 	beq.w	800a004 <forward_lite_conv2d_rgb_sssa8_ch+0x334>
 8009ec2:	2d00      	cmp	r5, #0
 8009ec4:	f000 80a7 	beq.w	800a016 <forward_lite_conv2d_rgb_sssa8_ch+0x346>
 8009ec8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8009eca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009ecc:	9525      	str	r5, [sp, #148]	@ 0x94
 8009ece:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009ed2:	4413      	add	r3, r2
 8009ed4:	931f      	str	r3, [sp, #124]	@ 0x7c
 8009ed6:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8009ed8:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
 8009eda:	9717      	str	r7, [sp, #92]	@ 0x5c
 8009edc:	eba8 0403 	sub.w	r4, r8, r3
 8009ee0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009ee2:	9410      	str	r4, [sp, #64]	@ 0x40
 8009ee4:	1a9b      	subs	r3, r3, r2
 8009ee6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ee8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009eea:	9324      	str	r3, [sp, #144]	@ 0x90
 8009eec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009eee:	932e      	str	r3, [sp, #184]	@ 0xb8
 8009ef0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009ef2:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009ef4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8009ef6:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ef8:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8009efa:	931c      	str	r3, [sp, #112]	@ 0x70
 8009efc:	e9cd 5739 	strd	r5, r7, [sp, #228]	@ 0xe4
 8009f00:	9b71      	ldr	r3, [sp, #452]	@ 0x1c4
 8009f02:	931e      	str	r3, [sp, #120]	@ 0x78
 8009f04:	4273      	negs	r3, r6
 8009f06:	932f      	str	r3, [sp, #188]	@ 0xbc
 8009f08:	963b      	str	r6, [sp, #236]	@ 0xec
 8009f0a:	9a4c      	ldr	r2, [sp, #304]	@ 0x130
 8009f0c:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 8009f0e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8009f10:	9249      	str	r2, [sp, #292]	@ 0x124
 8009f12:	9a4d      	ldr	r2, [sp, #308]	@ 0x134
 8009f14:	924a      	str	r2, [sp, #296]	@ 0x128
 8009f16:	9e2f      	ldr	r6, [sp, #188]	@ 0xbc
 8009f18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009f1a:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8009f1c:	9348      	str	r3, [sp, #288]	@ 0x120
 8009f1e:	464d      	mov	r5, r9
 8009f20:	2700      	movs	r7, #0
 8009f22:	9018      	str	r0, [sp, #96]	@ 0x60
 8009f24:	f8cd 90b4 	str.w	r9, [sp, #180]	@ 0xb4
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d061      	beq.n	8009ff0 <forward_lite_conv2d_rgb_sssa8_ch+0x320>
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	9348      	str	r3, [sp, #288]	@ 0x120
 8009f30:	2301      	movs	r3, #1
 8009f32:	f8ad 3146 	strh.w	r3, [sp, #326]	@ 0x146
 8009f36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f38:	4543      	cmp	r3, r8
 8009f3a:	da4a      	bge.n	8009fd2 <forward_lite_conv2d_rgb_sssa8_ch+0x302>
 8009f3c:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8009f3e:	f8dd e064 	ldr.w	lr, [sp, #100]	@ 0x64
 8009f42:	f8dd a084 	ldr.w	sl, [sp, #132]	@ 0x84
 8009f46:	9714      	str	r7, [sp, #80]	@ 0x50
 8009f48:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 8009f4c:	4489      	add	r9, r1
 8009f4e:	469c      	mov	ip, r3
 8009f50:	42ae      	cmp	r6, r5
 8009f52:	da38      	bge.n	8009fc6 <forward_lite_conv2d_rgb_sssa8_ch+0x2f6>
 8009f54:	45dc      	cmp	ip, fp
 8009f56:	d277      	bcs.n	800a048 <forward_lite_conv2d_rgb_sssa8_ch+0x378>
 8009f58:	e9cd 620b 	strd	r6, r2, [sp, #44]	@ 0x2c
 8009f5c:	4648      	mov	r0, r9
 8009f5e:	4617      	mov	r7, r2
 8009f60:	4633      	mov	r3, r6
 8009f62:	2600      	movs	r6, #0
 8009f64:	f364 060f 	bfi	r6, r4, #0, #16
 8009f68:	455b      	cmp	r3, fp
 8009f6a:	f364 461f 	bfi	r6, r4, #16, #16
 8009f6e:	f107 0106 	add.w	r1, r7, #6
 8009f72:	d21c      	bcs.n	8009fae <forward_lite_conv2d_rgb_sssa8_ch+0x2de>
 8009f74:	f850 6b03 	ldr.w	r6, [r0], #3
 8009f78:	fa2f f286 	sxtb16	r2, r6
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	42ab      	cmp	r3, r5
 8009f80:	ea4f 2636 	mov.w	r6, r6, ror #8
 8009f84:	fa2f f686 	sxtb16	r6, r6
 8009f88:	eac6 0602 	pkhbt	r6, r6, r2
 8009f8c:	f8c7 6002 	str.w	r6, [r7, #2]
 8009f90:	f821 2c06 	strh.w	r2, [r1, #-6]
 8009f94:	d014      	beq.n	8009fc0 <forward_lite_conv2d_rgb_sssa8_ch+0x2f0>
 8009f96:	460f      	mov	r7, r1
 8009f98:	e7e3      	b.n	8009f62 <forward_lite_conv2d_rgb_sssa8_ch+0x292>
 8009f9a:	455a      	cmp	r2, fp
 8009f9c:	f841 7f04 	str.w	r7, [r1, #4]!
 8009fa0:	f47f aee9 	bne.w	8009d76 <forward_lite_conv2d_rgb_sssa8_ch+0xa6>
 8009fa4:	9b71      	ldr	r3, [sp, #452]	@ 0x1c4
 8009fa6:	9620      	str	r6, [sp, #128]	@ 0x80
 8009fa8:	eb03 0b09 	add.w	fp, r3, r9
 8009fac:	e6f8      	b.n	8009da0 <forward_lite_conv2d_rgb_sssa8_ch+0xd0>
 8009fae:	3301      	adds	r3, #1
 8009fb0:	42ab      	cmp	r3, r5
 8009fb2:	f841 6c04 	str.w	r6, [r1, #-4]
 8009fb6:	f821 4c06 	strh.w	r4, [r1, #-6]
 8009fba:	f100 0003 	add.w	r0, r0, #3
 8009fbe:	d1ea      	bne.n	8009f96 <forward_lite_conv2d_rgb_sssa8_ch+0x2c6>
 8009fc0:	e9dd 620b 	ldrd	r6, r2, [sp, #44]	@ 0x2c
 8009fc4:	4452      	add	r2, sl
 8009fc6:	f10c 0c01 	add.w	ip, ip, #1
 8009fca:	45c4      	cmp	ip, r8
 8009fcc:	44f1      	add	r9, lr
 8009fce:	d1bf      	bne.n	8009f50 <forward_lite_conv2d_rgb_sssa8_ch+0x280>
 8009fd0:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8009fd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	f000 8084 	beq.w	800a0e2 <forward_lite_conv2d_rgb_sssa8_ch+0x412>
 8009fda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fdc:	441d      	add	r5, r3
 8009fde:	441e      	add	r6, r3
 8009fe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fe2:	3701      	adds	r7, #1
 8009fe4:	429f      	cmp	r7, r3
 8009fe6:	f000 809f 	beq.w	800a128 <forward_lite_conv2d_rgb_sssa8_ch+0x458>
 8009fea:	9b48      	ldr	r3, [sp, #288]	@ 0x120
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d19d      	bne.n	8009f2c <forward_lite_conv2d_rgb_sssa8_ch+0x25c>
 8009ff0:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d136      	bne.n	800a064 <forward_lite_conv2d_rgb_sssa8_ch+0x394>
 8009ff6:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	934a      	str	r3, [sp, #296]	@ 0x128
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	f8ad 3146 	strh.w	r3, [sp, #326]	@ 0x146
 800a002:	e798      	b.n	8009f36 <forward_lite_conv2d_rgb_sssa8_ch+0x266>
 800a004:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a006:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a008:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 800a00a:	463b      	mov	r3, r7
 800a00c:	f000 fb20 	bl	800a650 <st_int8_to16_dual>
 800a010:	2d00      	cmp	r5, #0
 800a012:	f47f af59 	bne.w	8009ec8 <forward_lite_conv2d_rgb_sssa8_ch+0x1f8>
 800a016:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a018:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800a01a:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800a01c:	4498      	add	r8, r3
 800a01e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800a020:	4413      	add	r3, r2
 800a022:	9329      	str	r3, [sp, #164]	@ 0xa4
 800a024:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800a026:	440b      	add	r3, r1
 800a028:	932a      	str	r3, [sp, #168]	@ 0xa8
 800a02a:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 800a02c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800a02e:	440b      	add	r3, r1
 800a030:	932b      	str	r3, [sp, #172]	@ 0xac
 800a032:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a034:	4413      	add	r3, r2
 800a036:	9326      	str	r3, [sp, #152]	@ 0x98
 800a038:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a03a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a03c:	4293      	cmp	r3, r2
 800a03e:	f47f af2f 	bne.w	8009ea0 <forward_lite_conv2d_rgb_sssa8_ch+0x1d0>
 800a042:	b05d      	add	sp, #372	@ 0x174
 800a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a048:	4610      	mov	r0, r2
 800a04a:	4631      	mov	r1, r6
 800a04c:	2300      	movs	r3, #0
 800a04e:	3101      	adds	r1, #1
 800a050:	f364 030f 	bfi	r3, r4, #0, #16
 800a054:	f364 431f 	bfi	r3, r4, #16, #16
 800a058:	42a9      	cmp	r1, r5
 800a05a:	8084      	strh	r4, [r0, #4]
 800a05c:	f840 3b06 	str.w	r3, [r0], #6
 800a060:	d1f4      	bne.n	800a04c <forward_lite_conv2d_rgb_sssa8_ch+0x37c>
 800a062:	e7af      	b.n	8009fc4 <forward_lite_conv2d_rgb_sssa8_ch+0x2f4>
 800a064:	3b01      	subs	r3, #1
 800a066:	9349      	str	r3, [sp, #292]	@ 0x124
 800a068:	f8bd 3144 	ldrh.w	r3, [sp, #324]	@ 0x144
 800a06c:	f8ad 3146 	strh.w	r3, [sp, #326]	@ 0x146
 800a070:	2b01      	cmp	r3, #1
 800a072:	f43f af60 	beq.w	8009f36 <forward_lite_conv2d_rgb_sssa8_ch+0x266>
 800a076:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a078:	4543      	cmp	r3, r8
 800a07a:	daaa      	bge.n	8009fd2 <forward_lite_conv2d_rgb_sssa8_ch+0x302>
 800a07c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a07e:	f8dd c04c 	ldr.w	ip, [sp, #76]	@ 0x4c
 800a082:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a084:	eba5 0906 	sub.w	r9, r5, r6
 800a088:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800a08c:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800a090:	448a      	add	sl, r1
 800a092:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800a096:	469e      	mov	lr, r3
 800a098:	4639      	mov	r1, r7
 800a09a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a09c:	429e      	cmp	r6, r3
 800a09e:	da15      	bge.n	800a0cc <forward_lite_conv2d_rgb_sssa8_ch+0x3fc>
 800a0a0:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
 800a0a4:	4450      	add	r0, sl
 800a0a6:	eb02 0709 	add.w	r7, r2, r9
 800a0aa:	f850 3b03 	ldr.w	r3, [r0], #3
 800a0ae:	fa2f f583 	sxtb16	r5, r3
 800a0b2:	3206      	adds	r2, #6
 800a0b4:	4297      	cmp	r7, r2
 800a0b6:	ea4f 2333 	mov.w	r3, r3, ror #8
 800a0ba:	f822 5c06 	strh.w	r5, [r2, #-6]
 800a0be:	fa2f f383 	sxtb16	r3, r3
 800a0c2:	eac3 0305 	pkhbt	r3, r3, r5
 800a0c6:	f842 3c04 	str.w	r3, [r2, #-4]
 800a0ca:	d1ee      	bne.n	800a0aa <forward_lite_conv2d_rgb_sssa8_ch+0x3da>
 800a0cc:	f10e 0e01 	add.w	lr, lr, #1
 800a0d0:	45c6      	cmp	lr, r8
 800a0d2:	44dc      	add	ip, fp
 800a0d4:	d1e1      	bne.n	800a09a <forward_lite_conv2d_rgb_sssa8_ch+0x3ca>
 800a0d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0d8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	460f      	mov	r7, r1
 800a0de:	f47f af7c 	bne.w	8009fda <forward_lite_conv2d_rgb_sssa8_ch+0x30a>
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800a0e6:	9308      	str	r3, [sp, #32]
 800a0e8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a0ea:	9307      	str	r3, [sp, #28]
 800a0ec:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a0ee:	9306      	str	r3, [sp, #24]
 800a0f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a0f2:	9305      	str	r3, [sp, #20]
 800a0f4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800a0f6:	9304      	str	r3, [sp, #16]
 800a0f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a0fa:	9303      	str	r3, [sp, #12]
 800a0fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a102:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a104:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a106:	441d      	add	r5, r3
 800a108:	441e      	add	r6, r3
 800a10a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 800a10e:	9302      	str	r3, [sp, #8]
 800a110:	2300      	movs	r3, #0
 800a112:	9301      	str	r3, [sp, #4]
 800a114:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a116:	f002 f975 	bl	800c404 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800a11a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a11c:	9018      	str	r0, [sp, #96]	@ 0x60
 800a11e:	3701      	adds	r7, #1
 800a120:	429f      	cmp	r7, r3
 800a122:	d048      	beq.n	800a1b6 <forward_lite_conv2d_rgb_sssa8_ch+0x4e6>
 800a124:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a126:	e760      	b.n	8009fea <forward_lite_conv2d_rgb_sssa8_ch+0x31a>
 800a128:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a12a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800a12c:	f8dd 90b4 	ldr.w	r9, [sp, #180]	@ 0xb4
 800a130:	4291      	cmp	r1, r2
 800a132:	d014      	beq.n	800a15e <forward_lite_conv2d_rgb_sssa8_ch+0x48e>
 800a134:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a136:	9306      	str	r3, [sp, #24]
 800a138:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a13a:	9305      	str	r3, [sp, #20]
 800a13c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a13e:	9304      	str	r3, [sp, #16]
 800a140:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800a142:	9303      	str	r3, [sp, #12]
 800a144:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a146:	9302      	str	r3, [sp, #8]
 800a148:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 800a150:	9007      	str	r0, [sp, #28]
 800a152:	9301      	str	r3, [sp, #4]
 800a154:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a156:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a158:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a15a:	f001 fa3f 	bl	800b5dc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800a15e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a160:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a162:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800a164:	1ad2      	subs	r2, r2, r3
 800a166:	429a      	cmp	r2, r3
 800a168:	9224      	str	r2, [sp, #144]	@ 0x90
 800a16a:	bfa8      	it	ge
 800a16c:	461a      	movge	r2, r3
 800a16e:	4419      	add	r1, r3
 800a170:	2a00      	cmp	r2, #0
 800a172:	911d      	str	r1, [sp, #116]	@ 0x74
 800a174:	4615      	mov	r5, r2
 800a176:	dd18      	ble.n	800a1aa <forward_lite_conv2d_rgb_sssa8_ch+0x4da>
 800a178:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 800a17a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a17c:	fb03 1002 	mla	r0, r3, r2, r1
 800a180:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a182:	902e      	str	r0, [sp, #184]	@ 0xb8
 800a184:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800a188:	911a      	str	r1, [sp, #104]	@ 0x68
 800a18a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800a18c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800a190:	911c      	str	r1, [sp, #112]	@ 0x70
 800a192:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a194:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800a198:	911e      	str	r1, [sp, #120]	@ 0x78
 800a19a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800a19c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a1a0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a1a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a1a4:	b2ab      	uxth	r3, r5
 800a1a6:	f000 fa53 	bl	800a650 <st_int8_to16_dual>
 800a1aa:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	9325      	str	r3, [sp, #148]	@ 0x94
 800a1b0:	d004      	beq.n	800a1bc <forward_lite_conv2d_rgb_sssa8_ch+0x4ec>
 800a1b2:	9517      	str	r5, [sp, #92]	@ 0x5c
 800a1b4:	e6a9      	b.n	8009f0a <forward_lite_conv2d_rgb_sssa8_ch+0x23a>
 800a1b6:	f8dd 90b4 	ldr.w	r9, [sp, #180]	@ 0xb4
 800a1ba:	e7d0      	b.n	800a15e <forward_lite_conv2d_rgb_sssa8_ch+0x48e>
 800a1bc:	e9dd 5739 	ldrd	r5, r7, [sp, #228]	@ 0xe4
 800a1c0:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800a1c2:	e728      	b.n	800a016 <forward_lite_conv2d_rgb_sssa8_ch+0x346>
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a1c8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a1ca:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 800a1cc:	f000 fa40 	bl	800a650 <st_int8_to16_dual>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e623      	b.n	8009e1c <forward_lite_conv2d_rgb_sssa8_ch+0x14c>

0800a1d4 <lite_convert_is8of32>:
 800a1d4:	2a00      	cmp	r2, #0
 800a1d6:	dd0e      	ble.n	800a1f6 <lite_convert_is8of32+0x22>
 800a1d8:	4402      	add	r2, r0
 800a1da:	f910 cb01 	ldrsb.w	ip, [r0], #1
 800a1de:	ebac 0c03 	sub.w	ip, ip, r3
 800a1e2:	ee07 ca90 	vmov	s15, ip
 800a1e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1ea:	4290      	cmp	r0, r2
 800a1ec:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a1f0:	ece1 7a01 	vstmia	r1!, {s15}
 800a1f4:	d1f1      	bne.n	800a1da <lite_convert_is8of32+0x6>
 800a1f6:	4770      	bx	lr

0800a1f8 <lite_convert_iu8of32>:
 800a1f8:	2a00      	cmp	r2, #0
 800a1fa:	dd0e      	ble.n	800a21a <lite_convert_iu8of32+0x22>
 800a1fc:	4402      	add	r2, r0
 800a1fe:	f810 cb01 	ldrb.w	ip, [r0], #1
 800a202:	ebac 0c03 	sub.w	ip, ip, r3
 800a206:	ee07 ca90 	vmov	s15, ip
 800a20a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a20e:	4290      	cmp	r0, r2
 800a210:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a214:	ece1 7a01 	vstmia	r1!, {s15}
 800a218:	d1f1      	bne.n	800a1fe <lite_convert_iu8of32+0x6>
 800a21a:	4770      	bx	lr

0800a21c <lite_convert_if32os8>:
 800a21c:	ee06 3a10 	vmov	s12, r3
 800a220:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a224:	2a00      	cmp	r2, #0
 800a226:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800a22a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a22e:	dd28      	ble.n	800a282 <lite_convert_if32os8+0x66>
 800a230:	eddf 4a14 	vldr	s9, [pc, #80]	@ 800a284 <lite_convert_if32os8+0x68>
 800a234:	440a      	add	r2, r1
 800a236:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 800a23a:	ecf0 7a01 	vldmia	r0!, {s15}
 800a23e:	eef0 6a46 	vmov.f32	s13, s12
 800a242:	eee7 6aa5 	vfma.f32	s13, s15, s11
 800a246:	ee76 7a85 	vadd.f32	s15, s13, s10
 800a24a:	ee36 7ae4 	vsub.f32	s14, s13, s9
 800a24e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a25a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a25e:	db08      	blt.n	800a272 <lite_convert_if32os8+0x56>
 800a260:	ee17 3a90 	vmov	r3, s15
 800a264:	f303 0307 	ssat	r3, #8, r3
 800a268:	f801 3b01 	strb.w	r3, [r1], #1
 800a26c:	4291      	cmp	r1, r2
 800a26e:	d1e4      	bne.n	800a23a <lite_convert_if32os8+0x1e>
 800a270:	4770      	bx	lr
 800a272:	ee17 3a10 	vmov	r3, s14
 800a276:	f303 0307 	ssat	r3, #8, r3
 800a27a:	f801 3b01 	strb.w	r3, [r1], #1
 800a27e:	4291      	cmp	r1, r2
 800a280:	d1db      	bne.n	800a23a <lite_convert_if32os8+0x1e>
 800a282:	4770      	bx	lr
 800a284:	3efffffc 	.word	0x3efffffc

0800a288 <lite_convert_if32ou8>:
 800a288:	ee06 3a90 	vmov	s13, r3
 800a28c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a290:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a294:	2a00      	cmp	r2, #0
 800a296:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a29a:	dd14      	ble.n	800a2c6 <lite_convert_if32ou8+0x3e>
 800a29c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a2a0:	ee87 6a80 	vdiv.f32	s12, s15, s0
 800a2a4:	440a      	add	r2, r1
 800a2a6:	ecb0 7a01 	vldmia	r0!, {s14}
 800a2aa:	eef0 7a66 	vmov.f32	s15, s13
 800a2ae:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a2b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a2b6:	ee17 3a90 	vmov	r3, s15
 800a2ba:	f383 0308 	usat	r3, #8, r3
 800a2be:	f801 3b01 	strb.w	r3, [r1], #1
 800a2c2:	4291      	cmp	r1, r2
 800a2c4:	d1ef      	bne.n	800a2a6 <lite_convert_if32ou8+0x1e>
 800a2c6:	4770      	bx	lr

0800a2c8 <lite_convert_is8os8>:
 800a2c8:	b500      	push	{lr}
 800a2ca:	eb00 0e02 	add.w	lr, r0, r2
 800a2ce:	4570      	cmp	r0, lr
 800a2d0:	f9bd c004 	ldrsh.w	ip, [sp, #4]
 800a2d4:	d22a      	bcs.n	800a32c <lite_convert_is8os8+0x64>
 800a2d6:	ee07 ca90 	vmov	s15, ip
 800a2da:	ed9f 5a1a 	vldr	s10, [pc, #104]	@ 800a344 <lite_convert_is8os8+0x7c>
 800a2de:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a2e2:	3801      	subs	r0, #1
 800a2e4:	440a      	add	r2, r1
 800a2e6:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800a2ea:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
 800a2ee:	ebac 0c03 	sub.w	ip, ip, r3
 800a2f2:	ee07 ca90 	vmov	s15, ip
 800a2f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2fa:	eef0 6a46 	vmov.f32	s13, s12
 800a2fe:	eee7 6a80 	vfma.f32	s13, s15, s0
 800a302:	ee76 7aa5 	vadd.f32	s15, s13, s11
 800a306:	ee36 7ac5 	vsub.f32	s14, s13, s10
 800a30a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a316:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a31a:	dd09      	ble.n	800a330 <lite_convert_is8os8+0x68>
 800a31c:	ee17 ca90 	vmov	ip, s15
 800a320:	f30c 0c07 	ssat	ip, #8, ip
 800a324:	f801 cb01 	strb.w	ip, [r1], #1
 800a328:	4291      	cmp	r1, r2
 800a32a:	d1de      	bne.n	800a2ea <lite_convert_is8os8+0x22>
 800a32c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a330:	ee17 ca10 	vmov	ip, s14
 800a334:	f30c 0c07 	ssat	ip, #8, ip
 800a338:	f801 cb01 	strb.w	ip, [r1], #1
 800a33c:	4291      	cmp	r1, r2
 800a33e:	d1d4      	bne.n	800a2ea <lite_convert_is8os8+0x22>
 800a340:	f85d fb04 	ldr.w	pc, [sp], #4
 800a344:	3efffffc 	.word	0x3efffffc

0800a348 <lite_convert_iu8ou8>:
 800a348:	f89d c000 	ldrb.w	ip, [sp]
 800a34c:	ee06 ca90 	vmov	s13, ip
 800a350:	ee07 3a90 	vmov	s15, r3
 800a354:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a358:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a35c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a360:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a364:	1883      	adds	r3, r0, r2
 800a366:	4298      	cmp	r0, r3
 800a368:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800a36c:	d215      	bcs.n	800a39a <lite_convert_iu8ou8+0x52>
 800a36e:	3801      	subs	r0, #1
 800a370:	440a      	add	r2, r1
 800a372:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a376:	ee07 3a10 	vmov	s14, r3
 800a37a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a37e:	eef0 7a66 	vmov.f32	s15, s13
 800a382:	eee7 7a00 	vfma.f32	s15, s14, s0
 800a386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a38a:	ee17 3a90 	vmov	r3, s15
 800a38e:	f383 0308 	usat	r3, #8, r3
 800a392:	f801 3b01 	strb.w	r3, [r1], #1
 800a396:	4291      	cmp	r1, r2
 800a398:	d1eb      	bne.n	800a372 <lite_convert_iu8ou8+0x2a>
 800a39a:	4770      	bx	lr

0800a39c <lite_convert_iu8os8>:
 800a39c:	f99d c000 	ldrsb.w	ip, [sp]
 800a3a0:	ee07 3a90 	vmov	s15, r3
 800a3a4:	ee06 ca10 	vmov	s12, ip
 800a3a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ac:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a3b0:	1883      	adds	r3, r0, r2
 800a3b2:	4298      	cmp	r0, r3
 800a3b4:	eea7 6ac0 	vfms.f32	s12, s15, s0
 800a3b8:	d22d      	bcs.n	800a416 <lite_convert_iu8os8+0x7a>
 800a3ba:	ed9f 5a17 	vldr	s10, [pc, #92]	@ 800a418 <lite_convert_iu8os8+0x7c>
 800a3be:	3801      	subs	r0, #1
 800a3c0:	440a      	add	r2, r1
 800a3c2:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800a3c6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a3ca:	ee07 3a90 	vmov	s15, r3
 800a3ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3d2:	eef0 6a46 	vmov.f32	s13, s12
 800a3d6:	eee7 6a80 	vfma.f32	s13, s15, s0
 800a3da:	ee76 7aa5 	vadd.f32	s15, s13, s11
 800a3de:	ee36 7ac5 	vsub.f32	s14, s13, s10
 800a3e2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a3ee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a3f2:	dd08      	ble.n	800a406 <lite_convert_iu8os8+0x6a>
 800a3f4:	ee17 3a90 	vmov	r3, s15
 800a3f8:	f303 0307 	ssat	r3, #8, r3
 800a3fc:	f801 3b01 	strb.w	r3, [r1], #1
 800a400:	4291      	cmp	r1, r2
 800a402:	d1e0      	bne.n	800a3c6 <lite_convert_iu8os8+0x2a>
 800a404:	4770      	bx	lr
 800a406:	ee17 3a10 	vmov	r3, s14
 800a40a:	f303 0307 	ssat	r3, #8, r3
 800a40e:	f801 3b01 	strb.w	r3, [r1], #1
 800a412:	4291      	cmp	r1, r2
 800a414:	d1d7      	bne.n	800a3c6 <lite_convert_iu8os8+0x2a>
 800a416:	4770      	bx	lr
 800a418:	3efffffc 	.word	0x3efffffc

0800a41c <lite_convert_iu8os8_fast>:
 800a41c:	b570      	push	{r4, r5, r6, lr}
 800a41e:	1095      	asrs	r5, r2, #2
 800a420:	2d00      	cmp	r5, #0
 800a422:	dd31      	ble.n	800a488 <lite_convert_iu8os8_fast+0x6c>
 800a424:	00ae      	lsls	r6, r5, #2
 800a426:	460c      	mov	r4, r1
 800a428:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a42c:	f04f 1e80 	mov.w	lr, #8388736	@ 0x800080
 800a430:	f850 3b04 	ldr.w	r3, [r0], #4
 800a434:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800a438:	fa3f fc8c 	uxtb16	ip, ip
 800a43c:	fadc fc0e 	ssub16	ip, ip, lr
 800a440:	fa3f f383 	uxtb16	r3, r3
 800a444:	fad3 f30e 	ssub16	r3, r3, lr
 800a448:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 800a44c:	f00c 2cff 	and.w	ip, ip, #4278255360	@ 0xff00ff00
 800a450:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800a454:	ea43 030c 	orr.w	r3, r3, ip
 800a458:	4285      	cmp	r5, r0
 800a45a:	f844 3b04 	str.w	r3, [r4], #4
 800a45e:	d1e7      	bne.n	800a430 <lite_convert_iu8os8_fast+0x14>
 800a460:	4431      	add	r1, r6
 800a462:	f012 0203 	ands.w	r2, r2, #3
 800a466:	d00e      	beq.n	800a486 <lite_convert_iu8os8_fast+0x6a>
 800a468:	782b      	ldrb	r3, [r5, #0]
 800a46a:	2a01      	cmp	r2, #1
 800a46c:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 800a470:	700b      	strb	r3, [r1, #0]
 800a472:	d008      	beq.n	800a486 <lite_convert_iu8os8_fast+0x6a>
 800a474:	786b      	ldrb	r3, [r5, #1]
 800a476:	2a02      	cmp	r2, #2
 800a478:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 800a47c:	704b      	strb	r3, [r1, #1]
 800a47e:	d002      	beq.n	800a486 <lite_convert_iu8os8_fast+0x6a>
 800a480:	78ab      	ldrb	r3, [r5, #2]
 800a482:	3b80      	subs	r3, #128	@ 0x80
 800a484:	708b      	strb	r3, [r1, #2]
 800a486:	bd70      	pop	{r4, r5, r6, pc}
 800a488:	4605      	mov	r5, r0
 800a48a:	e7ea      	b.n	800a462 <lite_convert_iu8os8_fast+0x46>

0800a48c <lite_convert_is8ou8>:
 800a48c:	f89d c000 	ldrb.w	ip, [sp]
 800a490:	ee06 ca90 	vmov	s13, ip
 800a494:	ee07 3a90 	vmov	s15, r3
 800a498:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a49c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a4a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4a4:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a4a8:	1883      	adds	r3, r0, r2
 800a4aa:	4298      	cmp	r0, r3
 800a4ac:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800a4b0:	d215      	bcs.n	800a4de <lite_convert_is8ou8+0x52>
 800a4b2:	3801      	subs	r0, #1
 800a4b4:	440a      	add	r2, r1
 800a4b6:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 800a4ba:	ee07 3a10 	vmov	s14, r3
 800a4be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a4c2:	eef0 7a66 	vmov.f32	s15, s13
 800a4c6:	eee7 7a00 	vfma.f32	s15, s14, s0
 800a4ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4ce:	ee17 3a90 	vmov	r3, s15
 800a4d2:	f383 0308 	usat	r3, #8, r3
 800a4d6:	f801 3b01 	strb.w	r3, [r1], #1
 800a4da:	4291      	cmp	r1, r2
 800a4dc:	d1eb      	bne.n	800a4b6 <lite_convert_is8ou8+0x2a>
 800a4de:	4770      	bx	lr

0800a4e0 <lite_convert_is8ou8_fast>:
 800a4e0:	b570      	push	{r4, r5, r6, lr}
 800a4e2:	1095      	asrs	r5, r2, #2
 800a4e4:	2d00      	cmp	r5, #0
 800a4e6:	dd2d      	ble.n	800a544 <lite_convert_is8ou8_fast+0x64>
 800a4e8:	00ae      	lsls	r6, r5, #2
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a4f0:	f04f 1e80 	mov.w	lr, #8388736	@ 0x800080
 800a4f4:	f850 3b04 	ldr.w	r3, [r0], #4
 800a4f8:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800a4fc:	fa2f fc8c 	sxtb16	ip, ip
 800a500:	fa9c fc0e 	sadd16	ip, ip, lr
 800a504:	fa2f f383 	sxtb16	r3, r3
 800a508:	fa93 f30e 	sadd16	r3, r3, lr
 800a50c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800a510:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800a514:	4285      	cmp	r5, r0
 800a516:	f844 3b04 	str.w	r3, [r4], #4
 800a51a:	d1eb      	bne.n	800a4f4 <lite_convert_is8ou8_fast+0x14>
 800a51c:	4431      	add	r1, r6
 800a51e:	f012 0203 	ands.w	r2, r2, #3
 800a522:	d00e      	beq.n	800a542 <lite_convert_is8ou8_fast+0x62>
 800a524:	782b      	ldrb	r3, [r5, #0]
 800a526:	2a01      	cmp	r2, #1
 800a528:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 800a52c:	700b      	strb	r3, [r1, #0]
 800a52e:	d008      	beq.n	800a542 <lite_convert_is8ou8_fast+0x62>
 800a530:	786b      	ldrb	r3, [r5, #1]
 800a532:	2a02      	cmp	r2, #2
 800a534:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 800a538:	704b      	strb	r3, [r1, #1]
 800a53a:	d002      	beq.n	800a542 <lite_convert_is8ou8_fast+0x62>
 800a53c:	78ab      	ldrb	r3, [r5, #2]
 800a53e:	3b80      	subs	r3, #128	@ 0x80
 800a540:	708b      	strb	r3, [r1, #2]
 800a542:	bd70      	pop	{r4, r5, r6, pc}
 800a544:	4605      	mov	r5, r0
 800a546:	e7ea      	b.n	800a51e <lite_convert_is8ou8_fast+0x3e>

0800a548 <align_factor>:
 800a548:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a54c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a550:	b508      	push	{r3, lr}
 800a552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a556:	f04f 0300 	mov.w	r3, #0
 800a55a:	8003      	strh	r3, [r0, #0]
 800a55c:	d425      	bmi.n	800a5aa <align_factor+0x62>
 800a55e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a562:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a566:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a56a:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 800a56e:	e005      	b.n	800a57c <align_factor+0x34>
 800a570:	8003      	strh	r3, [r0, #0]
 800a572:	b293      	uxth	r3, r2
 800a574:	428b      	cmp	r3, r1
 800a576:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a57a:	d02d      	beq.n	800a5d8 <align_factor+0x90>
 800a57c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a584:	f103 32ff 	add.w	r2, r3, #4294967295
 800a588:	dcf2      	bgt.n	800a570 <align_factor+0x28>
 800a58a:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800a5ec <align_factor+0xa4>
 800a58e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a592:	ee17 0a90 	vmov	r0, s15
 800a596:	f7f6 fc3d 	bl	8000e14 <__aeabi_f2lz>
 800a59a:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800a59e:	bf1c      	itt	ne
 800a5a0:	f06f 4000 	mvnne.w	r0, #2147483648	@ 0x80000000
 800a5a4:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 800a5a8:	bd08      	pop	{r3, pc}
 800a5aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b2:	ddd4      	ble.n	800a55e <align_factor+0x16>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a5ba:	e005      	b.n	800a5c8 <align_factor+0x80>
 800a5bc:	8003      	strh	r3, [r0, #0]
 800a5be:	b293      	uxth	r3, r2
 800a5c0:	2b21      	cmp	r3, #33	@ 0x21
 800a5c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a5c6:	d00d      	beq.n	800a5e4 <align_factor+0x9c>
 800a5c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d0:	f103 0201 	add.w	r2, r3, #1
 800a5d4:	d4f2      	bmi.n	800a5bc <align_factor+0x74>
 800a5d6:	e7d8      	b.n	800a58a <align_factor+0x42>
 800a5d8:	f64f 73e2 	movw	r3, #65506	@ 0xffe2
 800a5dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a5e0:	8003      	strh	r3, [r0, #0]
 800a5e2:	e7d2      	b.n	800a58a <align_factor+0x42>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	8003      	strh	r3, [r0, #0]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	bd08      	pop	{r3, pc}
 800a5ec:	4f000000 	.word	0x4f000000

0800a5f0 <align_factor_ch>:
 800a5f0:	b361      	cbz	r1, 800a64c <align_factor_ch+0x5c>
 800a5f2:	ee80 7a20 	vdiv.f32	s14, s0, s1
 800a5f6:	b570      	push	{r4, r5, r6, lr}
 800a5f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a5fc:	1e9d      	subs	r5, r3, #2
 800a5fe:	1f14      	subs	r4, r2, #4
 800a600:	2600      	movs	r6, #0
 800a602:	ecf0 7a01 	vldmia	r0!, {s15}
 800a606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a60a:	ee17 ea90 	vmov	lr, s15
 800a60e:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 800a612:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 800a616:	f50c 0c00 	add.w	ip, ip, #8388608	@ 0x800000
 800a61a:	f1be 0f00 	cmp.w	lr, #0
 800a61e:	f1c2 027e 	rsb	r2, r2, #126	@ 0x7e
 800a622:	bfb8      	it	lt
 800a624:	f1cc 0c00 	rsblt	ip, ip, #0
 800a628:	2a1f      	cmp	r2, #31
 800a62a:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800a62e:	dc06      	bgt.n	800a63e <align_factor_ch+0x4e>
 800a630:	4281      	cmp	r1, r0
 800a632:	f825 2f02 	strh.w	r2, [r5, #2]!
 800a636:	f844 3f04 	str.w	r3, [r4, #4]!
 800a63a:	d1e2      	bne.n	800a602 <align_factor_ch+0x12>
 800a63c:	bd70      	pop	{r4, r5, r6, pc}
 800a63e:	4281      	cmp	r1, r0
 800a640:	f825 6f02 	strh.w	r6, [r5, #2]!
 800a644:	f844 6f04 	str.w	r6, [r4, #4]!
 800a648:	d1db      	bne.n	800a602 <align_factor_ch+0x12>
 800a64a:	bd70      	pop	{r4, r5, r6, pc}
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop

0800a650 <st_int8_to16_dual>:
 800a650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a654:	085f      	lsrs	r7, r3, #1
 800a656:	4616      	mov	r6, r2
 800a658:	4698      	mov	r8, r3
 800a65a:	eb00 0c02 	add.w	ip, r0, r2
 800a65e:	f000 80ba 	beq.w	800a7d6 <st_int8_to16_dual+0x186>
 800a662:	f1a2 0510 	sub.w	r5, r2, #16
 800a666:	1f14      	subs	r4, r2, #4
 800a668:	2d00      	cmp	r5, #0
 800a66a:	f04f 0200 	mov.w	r2, #0
 800a66e:	db73      	blt.n	800a758 <st_int8_to16_dual+0x108>
 800a670:	f8d0 e000 	ldr.w	lr, [r0]
 800a674:	f8dc 3000 	ldr.w	r3, [ip]
 800a678:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a67c:	fa2f fe8e 	sxtb16	lr, lr
 800a680:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a684:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a688:	fa2f f993 	sxtb16	r9, r3, ror #8
 800a68c:	f8c1 e000 	str.w	lr, [r1]
 800a690:	f8c1 a008 	str.w	sl, [r1, #8]
 800a694:	fa2f f383 	sxtb16	r3, r3
 800a698:	eac9 4e23 	pkhtb	lr, r9, r3, asr #16
 800a69c:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 800a6a0:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a6a4:	604b      	str	r3, [r1, #4]
 800a6a6:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800a6aa:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a6ae:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a6b2:	fa2f fe8e 	sxtb16	lr, lr
 800a6b6:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a6ba:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a6be:	fa2f f993 	sxtb16	r9, r3, ror #8
 800a6c2:	f8c1 e010 	str.w	lr, [r1, #16]
 800a6c6:	f8c1 a018 	str.w	sl, [r1, #24]
 800a6ca:	fa2f f383 	sxtb16	r3, r3
 800a6ce:	eac9 4e23 	pkhtb	lr, r9, r3, asr #16
 800a6d2:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 800a6d6:	f8c1 e01c 	str.w	lr, [r1, #28]
 800a6da:	614b      	str	r3, [r1, #20]
 800a6dc:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800a6e0:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800a6e4:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a6e8:	fa2f fe8e 	sxtb16	lr, lr
 800a6ec:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a6f0:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a6f4:	fa2f f993 	sxtb16	r9, r3, ror #8
 800a6f8:	3010      	adds	r0, #16
 800a6fa:	f8c1 e020 	str.w	lr, [r1, #32]
 800a6fe:	f8c1 a028 	str.w	sl, [r1, #40]	@ 0x28
 800a702:	fa2f f383 	sxtb16	r3, r3
 800a706:	eac9 4e23 	pkhtb	lr, r9, r3, asr #16
 800a70a:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 800a70e:	f8c1 e02c 	str.w	lr, [r1, #44]	@ 0x2c
 800a712:	624b      	str	r3, [r1, #36]	@ 0x24
 800a714:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800a718:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800a71c:	f10c 0c10 	add.w	ip, ip, #16
 800a720:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a724:	fa2f fe8e 	sxtb16	lr, lr
 800a728:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a72c:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a730:	fa2f f993 	sxtb16	r9, r3, ror #8
 800a734:	f8c1 e030 	str.w	lr, [r1, #48]	@ 0x30
 800a738:	f8c1 a038 	str.w	sl, [r1, #56]	@ 0x38
 800a73c:	3210      	adds	r2, #16
 800a73e:	3140      	adds	r1, #64	@ 0x40
 800a740:	42aa      	cmp	r2, r5
 800a742:	fa2f f383 	sxtb16	r3, r3
 800a746:	eac9 4e23 	pkhtb	lr, r9, r3, asr #16
 800a74a:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 800a74e:	f841 ec04 	str.w	lr, [r1, #-4]
 800a752:	f841 3c0c 	str.w	r3, [r1, #-12]
 800a756:	dd8b      	ble.n	800a670 <st_int8_to16_dual+0x20>
 800a758:	4294      	cmp	r4, r2
 800a75a:	db1e      	blt.n	800a79a <st_int8_to16_dual+0x14a>
 800a75c:	f850 3b04 	ldr.w	r3, [r0], #4
 800a760:	f85c eb04 	ldr.w	lr, [ip], #4
 800a764:	fa2f f993 	sxtb16	r9, r3, ror #8
 800a768:	fa2f f383 	sxtb16	r3, r3
 800a76c:	eac9 4a23 	pkhtb	sl, r9, r3, asr #16
 800a770:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 800a774:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a778:	600b      	str	r3, [r1, #0]
 800a77a:	f8c1 a008 	str.w	sl, [r1, #8]
 800a77e:	3204      	adds	r2, #4
 800a780:	3110      	adds	r1, #16
 800a782:	42a2      	cmp	r2, r4
 800a784:	fa2f fe8e 	sxtb16	lr, lr
 800a788:	eac9 432e 	pkhtb	r3, r9, lr, asr #16
 800a78c:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a790:	f841 3c04 	str.w	r3, [r1, #-4]
 800a794:	f841 ec0c 	str.w	lr, [r1, #-12]
 800a798:	dde0      	ble.n	800a75c <st_int8_to16_dual+0x10c>
 800a79a:	4296      	cmp	r6, r2
 800a79c:	dd41      	ble.n	800a822 <st_int8_to16_dual+0x1d2>
 800a79e:	1ab2      	subs	r2, r6, r2
 800a7a0:	1d0b      	adds	r3, r1, #4
 800a7a2:	eb00 0a02 	add.w	sl, r0, r2
 800a7a6:	46e6      	mov	lr, ip
 800a7a8:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a7ac:	f823 9c04 	strh.w	r9, [r3, #-4]
 800a7b0:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 800a7b4:	f823 9c02 	strh.w	r9, [r3, #-2]
 800a7b8:	4550      	cmp	r0, sl
 800a7ba:	f103 0304 	add.w	r3, r3, #4
 800a7be:	d1f3      	bne.n	800a7a8 <st_int8_to16_dual+0x158>
 800a7c0:	4494      	add	ip, r2
 800a7c2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a7c6:	3f01      	subs	r7, #1
 800a7c8:	b2bf      	uxth	r7, r7
 800a7ca:	eb0a 0006 	add.w	r0, sl, r6
 800a7ce:	44b4      	add	ip, r6
 800a7d0:	2f00      	cmp	r7, #0
 800a7d2:	f47f af49 	bne.w	800a668 <st_int8_to16_dual+0x18>
 800a7d6:	f018 0f01 	tst.w	r8, #1
 800a7da:	d020      	beq.n	800a81e <st_int8_to16_dual+0x1ce>
 800a7dc:	1f37      	subs	r7, r6, #4
 800a7de:	f04f 0200 	mov.w	r2, #0
 800a7e2:	d411      	bmi.n	800a808 <st_int8_to16_dual+0x1b8>
 800a7e4:	f850 3b04 	ldr.w	r3, [r0], #4
 800a7e8:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a7ec:	3108      	adds	r1, #8
 800a7ee:	3204      	adds	r2, #4
 800a7f0:	4297      	cmp	r7, r2
 800a7f2:	fa2f f383 	sxtb16	r3, r3
 800a7f6:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 800a7fa:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 800a7fe:	f841 5c04 	str.w	r5, [r1, #-4]
 800a802:	f841 3c08 	str.w	r3, [r1, #-8]
 800a806:	daed      	bge.n	800a7e4 <st_int8_to16_dual+0x194>
 800a808:	4296      	cmp	r6, r2
 800a80a:	dd08      	ble.n	800a81e <st_int8_to16_dual+0x1ce>
 800a80c:	1ab3      	subs	r3, r6, r2
 800a80e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a812:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a816:	f821 2b02 	strh.w	r2, [r1], #2
 800a81a:	428b      	cmp	r3, r1
 800a81c:	d1f9      	bne.n	800a812 <st_int8_to16_dual+0x1c2>
 800a81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a822:	4682      	mov	sl, r0
 800a824:	e7cf      	b.n	800a7c6 <st_int8_to16_dual+0x176>
 800a826:	bf00      	nop

0800a828 <ai_padding_opt_init>:
 800a828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a82c:	2700      	movs	r7, #0
 800a82e:	e9c0 7700 	strd	r7, r7, [r0]
 800a832:	6087      	str	r7, [r0, #8]
 800a834:	690e      	ldr	r6, [r1, #16]
 800a836:	9c07      	ldr	r4, [sp, #28]
 800a838:	f1c6 0c00 	rsb	ip, r6, #0
 800a83c:	689e      	ldr	r6, [r3, #8]
 800a83e:	42be      	cmp	r6, r7
 800a840:	46b9      	mov	r9, r7
 800a842:	dd1b      	ble.n	800a87c <ai_padding_opt_init+0x54>
 800a844:	463e      	mov	r6, r7
 800a846:	46be      	mov	lr, r7
 800a848:	e012      	b.n	800a870 <ai_padding_opt_init+0x48>
 800a84a:	6895      	ldr	r5, [r2, #8]
 800a84c:	eba5 080c 	sub.w	r8, r5, ip
 800a850:	68a5      	ldr	r5, [r4, #8]
 800a852:	45a8      	cmp	r8, r5
 800a854:	bfb5      	itete	lt
 800a856:	f109 0901 	addlt.w	r9, r9, #1
 800a85a:	3701      	addge	r7, #1
 800a85c:	f8c0 9008 	strlt.w	r9, [r0, #8]
 800a860:	6047      	strge	r7, [r0, #4]
 800a862:	688d      	ldr	r5, [r1, #8]
 800a864:	44ac      	add	ip, r5
 800a866:	689d      	ldr	r5, [r3, #8]
 800a868:	f10e 0e01 	add.w	lr, lr, #1
 800a86c:	4575      	cmp	r5, lr
 800a86e:	dd06      	ble.n	800a87e <ai_padding_opt_init+0x56>
 800a870:	f1bc 0f00 	cmp.w	ip, #0
 800a874:	dae9      	bge.n	800a84a <ai_padding_opt_init+0x22>
 800a876:	3601      	adds	r6, #1
 800a878:	6006      	str	r6, [r0, #0]
 800a87a:	e7f2      	b.n	800a862 <ai_padding_opt_init+0x3a>
 800a87c:	463e      	mov	r6, r7
 800a87e:	2500      	movs	r5, #0
 800a880:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800a884:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800a888:	f8c0 9014 	str.w	r9, [r0, #20]
 800a88c:	6205      	str	r5, [r0, #32]
 800a88e:	694e      	ldr	r6, [r1, #20]
 800a890:	f1c6 0c00 	rsb	ip, r6, #0
 800a894:	685e      	ldr	r6, [r3, #4]
 800a896:	42ae      	cmp	r6, r5
 800a898:	dd1c      	ble.n	800a8d4 <ai_padding_opt_init+0xac>
 800a89a:	46ae      	mov	lr, r5
 800a89c:	e00f      	b.n	800a8be <ai_padding_opt_init+0x96>
 800a89e:	6855      	ldr	r5, [r2, #4]
 800a8a0:	6866      	ldr	r6, [r4, #4]
 800a8a2:	eba5 050c 	sub.w	r5, r5, ip
 800a8a6:	42b5      	cmp	r5, r6
 800a8a8:	da10      	bge.n	800a8cc <ai_padding_opt_init+0xa4>
 800a8aa:	6a05      	ldr	r5, [r0, #32]
 800a8ac:	3501      	adds	r5, #1
 800a8ae:	6205      	str	r5, [r0, #32]
 800a8b0:	68cd      	ldr	r5, [r1, #12]
 800a8b2:	44ac      	add	ip, r5
 800a8b4:	685d      	ldr	r5, [r3, #4]
 800a8b6:	f10e 0e01 	add.w	lr, lr, #1
 800a8ba:	4575      	cmp	r5, lr
 800a8bc:	dd0a      	ble.n	800a8d4 <ai_padding_opt_init+0xac>
 800a8be:	f1bc 0f00 	cmp.w	ip, #0
 800a8c2:	daec      	bge.n	800a89e <ai_padding_opt_init+0x76>
 800a8c4:	6985      	ldr	r5, [r0, #24]
 800a8c6:	3501      	adds	r5, #1
 800a8c8:	6185      	str	r5, [r0, #24]
 800a8ca:	e7f1      	b.n	800a8b0 <ai_padding_opt_init+0x88>
 800a8cc:	69c5      	ldr	r5, [r0, #28]
 800a8ce:	3501      	adds	r5, #1
 800a8d0:	61c5      	str	r5, [r0, #28]
 800a8d2:	e7ed      	b.n	800a8b0 <ai_padding_opt_init+0x88>
 800a8d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a8d8 <ai_padding_opt_phase1>:
 800a8d8:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800a8dc:	b923      	cbnz	r3, 800a8e8 <ai_padding_opt_phase1+0x10>
 800a8de:	b17a      	cbz	r2, 800a900 <ai_padding_opt_phase1+0x28>
 800a8e0:	3a01      	subs	r2, #1
 800a8e2:	8483      	strh	r3, [r0, #36]	@ 0x24
 800a8e4:	61c2      	str	r2, [r0, #28]
 800a8e6:	e004      	b.n	800a8f2 <ai_padding_opt_phase1+0x1a>
 800a8e8:	b152      	cbz	r2, 800a900 <ai_padding_opt_phase1+0x28>
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	8482      	strh	r2, [r0, #36]	@ 0x24
 800a8f0:	6183      	str	r3, [r0, #24]
 800a8f2:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800a8f6:	68c1      	ldr	r1, [r0, #12]
 800a8f8:	6083      	str	r3, [r0, #8]
 800a8fa:	e9c0 1200 	strd	r1, r2, [r0]
 800a8fe:	4770      	bx	lr
 800a900:	6a03      	ldr	r3, [r0, #32]
 800a902:	2201      	movs	r2, #1
 800a904:	3b01      	subs	r3, #1
 800a906:	8482      	strh	r2, [r0, #36]	@ 0x24
 800a908:	6203      	str	r3, [r0, #32]
 800a90a:	e7f2      	b.n	800a8f2 <ai_padding_opt_phase1+0x1a>

0800a90c <st_int8_avepool>:
 800a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a910:	b097      	sub	sp, #92	@ 0x5c
 800a912:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a916:	4619      	mov	r1, r3
 800a918:	f8bd 3084 	ldrh.w	r3, [sp, #132]	@ 0x84
 800a91c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a91e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	@ 0x8c
 800a922:	f99d 40a4 	ldrsb.w	r4, [sp, #164]	@ 0xa4
 800a926:	930d      	str	r3, [sp, #52]	@ 0x34
 800a928:	f8bd 50a0 	ldrh.w	r5, [sp, #160]	@ 0xa0
 800a92c:	f8bd 3094 	ldrh.w	r3, [sp, #148]	@ 0x94
 800a930:	930e      	str	r3, [sp, #56]	@ 0x38
 800a932:	9404      	str	r4, [sp, #16]
 800a934:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 800a938:	f99d 40a8 	ldrsb.w	r4, [sp, #168]	@ 0xa8
 800a93c:	f8bd b080 	ldrh.w	fp, [sp, #128]	@ 0x80
 800a940:	f8bd c088 	ldrh.w	ip, [sp, #136]	@ 0x88
 800a944:	f8bd 6090 	ldrh.w	r6, [sp, #144]	@ 0x90
 800a948:	f8bd 0098 	ldrh.w	r0, [sp, #152]	@ 0x98
 800a94c:	9206      	str	r2, [sp, #24]
 800a94e:	9307      	str	r3, [sp, #28]
 800a950:	9405      	str	r4, [sp, #20]
 800a952:	b135      	cbz	r5, 800a962 <st_int8_avepool+0x56>
 800a954:	fb02 fa0b 	mul.w	sl, r2, fp
 800a958:	2200      	movs	r2, #0
 800a95a:	b92b      	cbnz	r3, 800a968 <st_int8_avepool+0x5c>
 800a95c:	3201      	adds	r2, #1
 800a95e:	4295      	cmp	r5, r2
 800a960:	dcfc      	bgt.n	800a95c <st_int8_avepool+0x50>
 800a962:	b017      	add	sp, #92	@ 0x5c
 800a964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a968:	eec0 4a20 	vdiv.f32	s9, s0, s1
 800a96c:	4688      	mov	r8, r1
 800a96e:	4637      	mov	r7, r6
 800a970:	4629      	mov	r1, r5
 800a972:	eddd 7a04 	vldr	s15, [sp, #16]
 800a976:	eddf 5a65 	vldr	s11, [pc, #404]	@ 800ab0c <st_int8_avepool+0x200>
 800a97a:	eddf 2a65 	vldr	s5, [pc, #404]	@ 800ab10 <st_int8_avepool+0x204>
 800a97e:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800a982:	eeb0 6a40 	vmov.f32	s12, s0
 800a986:	eef0 6a60 	vmov.f32	s13, s1
 800a98a:	fb02 f400 	mul.w	r4, r2, r0
 800a98e:	1be4      	subs	r4, r4, r7
 800a990:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800a994:	4464      	add	r4, ip
 800a996:	4544      	cmp	r4, r8
 800a998:	bfa8      	it	ge
 800a99a:	4644      	movge	r4, r8
 800a99c:	46a1      	mov	r9, r4
 800a99e:	9c07      	ldr	r4, [sp, #28]
 800a9a0:	fb02 f404 	mul.w	r4, r2, r4
 800a9a4:	9408      	str	r4, [sp, #32]
 800a9a6:	9c06      	ldr	r4, [sp, #24]
 800a9a8:	fb03 f404 	mul.w	r4, r3, r4
 800a9ac:	9409      	str	r4, [sp, #36]	@ 0x24
 800a9ae:	f1bb 0f00 	cmp.w	fp, #0
 800a9b2:	f000 8085 	beq.w	800aac0 <st_int8_avepool+0x1b4>
 800a9b6:	eddd 7a05 	vldr	s15, [sp, #20]
 800a9ba:	e9cd c711 	strd	ip, r7, [sp, #68]	@ 0x44
 800a9be:	e9cd 0113 	strd	r0, r1, [sp, #76]	@ 0x4c
 800a9c2:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 800a9c6:	e9cd 280f 	strd	r2, r8, [sp, #60]	@ 0x3c
 800a9ca:	2500      	movs	r5, #0
 800a9cc:	4698      	mov	r8, r3
 800a9ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9d0:	9c06      	ldr	r4, [sp, #24]
 800a9d2:	9515      	str	r5, [sp, #84]	@ 0x54
 800a9d4:	fb05 f203 	mul.w	r2, r5, r3
 800a9d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9da:	1ad2      	subs	r2, r2, r3
 800a9dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9de:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
 800a9e2:	441a      	add	r2, r3
 800a9e4:	9b08      	ldr	r3, [sp, #32]
 800a9e6:	4294      	cmp	r4, r2
 800a9e8:	bfa8      	it	ge
 800a9ea:	4614      	movge	r4, r2
 800a9ec:	18ea      	adds	r2, r5, r3
 800a9ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9f0:	fb0b 3002 	mla	r0, fp, r2, r3
 800a9f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f6:	eb03 020c 	add.w	r2, r3, ip
 800a9fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9fc:	fb0b 3302 	mla	r3, fp, r2, r3
 800aa00:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800aa04:	9303      	str	r3, [sp, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	eba4 0e0c 	sub.w	lr, r4, ip
 800aa0c:	4645      	mov	r5, r8
 800aa0e:	4601      	mov	r1, r0
 800aa10:	45a9      	cmp	r9, r5
 800aa12:	dd66      	ble.n	800aae2 <st_int8_avepool+0x1d6>
 800aa14:	9b03      	ldr	r3, [sp, #12]
 800aa16:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800aa1a:	f04f 0800 	mov.w	r8, #0
 800aa1e:	18d7      	adds	r7, r2, r3
 800aa20:	462e      	mov	r6, r5
 800aa22:	4640      	mov	r0, r8
 800aa24:	4564      	cmp	r4, ip
 800aa26:	dd09      	ble.n	800aa3c <st_int8_avepool+0x130>
 800aa28:	463a      	mov	r2, r7
 800aa2a:	4663      	mov	r3, ip
 800aa2c:	f992 5000 	ldrsb.w	r5, [r2]
 800aa30:	3301      	adds	r3, #1
 800aa32:	429c      	cmp	r4, r3
 800aa34:	4428      	add	r0, r5
 800aa36:	445a      	add	r2, fp
 800aa38:	d1f8      	bne.n	800aa2c <st_int8_avepool+0x120>
 800aa3a:	44f0      	add	r8, lr
 800aa3c:	3601      	adds	r6, #1
 800aa3e:	45b1      	cmp	r9, r6
 800aa40:	4457      	add	r7, sl
 800aa42:	d1ef      	bne.n	800aa24 <st_int8_avepool+0x118>
 800aa44:	eeb4 6a66 	vcmp.f32	s12, s13
 800aa48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa4c:	e9dd 5201 	ldrd	r5, r2, [sp, #4]
 800aa50:	d103      	bne.n	800aa5a <st_int8_avepool+0x14e>
 800aa52:	e9dd 3604 	ldrd	r3, r6, [sp, #16]
 800aa56:	42b3      	cmp	r3, r6
 800aa58:	d039      	beq.n	800aace <st_int8_avepool+0x1c2>
 800aa5a:	ee07 0a90 	vmov	s15, r0
 800aa5e:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
 800aa62:	ee07 8a90 	vmov	s15, r8
 800aa66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa6a:	eec3 7a07 	vdiv.f32	s15, s6, s14
 800aa6e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800aa72:	eeb0 7a44 	vmov.f32	s14, s8
 800aa76:	eea7 7aa4 	vfma.f32	s14, s15, s9
 800aa7a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800aa7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa82:	bfb4      	ite	lt
 800aa84:	eef0 7a65 	vmovlt.f32	s15, s11
 800aa88:	eef0 7a63 	vmovge.f32	s15, s7
 800aa8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa94:	ee17 3a90 	vmov	r3, s15
 800aa98:	f303 0307 	ssat	r3, #8, r3
 800aa9c:	700b      	strb	r3, [r1, #0]
 800aa9e:	3201      	adds	r2, #1
 800aaa0:	455a      	cmp	r2, fp
 800aaa2:	f101 0101 	add.w	r1, r1, #1
 800aaa6:	d1b3      	bne.n	800aa10 <st_int8_avepool+0x104>
 800aaa8:	46a8      	mov	r8, r5
 800aaaa:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 800aaac:	9b07      	ldr	r3, [sp, #28]
 800aaae:	3501      	adds	r5, #1
 800aab0:	42ab      	cmp	r3, r5
 800aab2:	dc8c      	bgt.n	800a9ce <st_int8_avepool+0xc2>
 800aab4:	e9dd 280f 	ldrd	r2, r8, [sp, #60]	@ 0x3c
 800aab8:	e9dd c711 	ldrd	ip, r7, [sp, #68]	@ 0x44
 800aabc:	e9dd 0113 	ldrd	r0, r1, [sp, #76]	@ 0x4c
 800aac0:	3201      	adds	r2, #1
 800aac2:	4291      	cmp	r1, r2
 800aac4:	f73f af61 	bgt.w	800a98a <st_int8_avepool+0x7e>
 800aac8:	b017      	add	sp, #92	@ 0x5c
 800aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aace:	2800      	cmp	r0, #0
 800aad0:	db13      	blt.n	800aafa <st_int8_avepool+0x1ee>
 800aad2:	eb00 0068 	add.w	r0, r0, r8, asr #1
 800aad6:	fbb0 f8f8 	udiv	r8, r0, r8
 800aada:	f308 0307 	ssat	r3, #8, r8
 800aade:	700b      	strb	r3, [r1, #0]
 800aae0:	e7dd      	b.n	800aa9e <st_int8_avepool+0x192>
 800aae2:	eeb4 6a66 	vcmp.f32	s12, s13
 800aae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaea:	d103      	bne.n	800aaf4 <st_int8_avepool+0x1e8>
 800aaec:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 800aaf0:	4283      	cmp	r3, r0
 800aaf2:	d009      	beq.n	800ab08 <st_int8_avepool+0x1fc>
 800aaf4:	eef0 7a62 	vmov.f32	s15, s5
 800aaf8:	e7b9      	b.n	800aa6e <st_int8_avepool+0x162>
 800aafa:	eb08 73d8 	add.w	r3, r8, r8, lsr #31
 800aafe:	eba0 0063 	sub.w	r0, r0, r3, asr #1
 800ab02:	fb90 f8f8 	sdiv	r8, r0, r8
 800ab06:	e7e8      	b.n	800aada <st_int8_avepool+0x1ce>
 800ab08:	deff      	udf	#255	@ 0xff
 800ab0a:	bf00      	nop
 800ab0c:	befffffc 	.word	0xbefffffc
 800ab10:	7fc00000 	.word	0x7fc00000

0800ab14 <st_f32_to_int16>:
 800ab14:	b530      	push	{r4, r5, lr}
 800ab16:	0895      	lsrs	r5, r2, #2
 800ab18:	d072      	beq.n	800ac00 <st_f32_to_int16+0xec>
 800ab1a:	eddf 5a60 	vldr	s11, [pc, #384]	@ 800ac9c <st_f32_to_int16+0x188>
 800ab1e:	f100 0c10 	add.w	ip, r0, #16
 800ab22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ab26:	eebe 5a00 	vmov.f32	s10, #224	@ 0xbf000000 -0.5
 800ab2a:	f101 0e08 	add.w	lr, r1, #8
 800ab2e:	462c      	mov	r4, r5
 800ab30:	ed5c 6a04 	vldr	s13, [ip, #-16]
 800ab34:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ab38:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ab3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab40:	bfd4      	ite	le
 800ab42:	eef0 7a45 	vmovle.f32	s15, s10
 800ab46:	eef0 7a47 	vmovgt.f32	s15, s14
 800ab4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab52:	ee17 3a90 	vmov	r3, s15
 800ab56:	f303 030f 	ssat	r3, #16, r3
 800ab5a:	f82e 3c08 	strh.w	r3, [lr, #-8]
 800ab5e:	ed5c 6a03 	vldr	s13, [ip, #-12]
 800ab62:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ab66:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ab6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab6e:	bfd4      	ite	le
 800ab70:	eef0 7a45 	vmovle.f32	s15, s10
 800ab74:	eef0 7a47 	vmovgt.f32	s15, s14
 800ab78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab80:	ee17 3a90 	vmov	r3, s15
 800ab84:	f303 030f 	ssat	r3, #16, r3
 800ab88:	f82e 3c06 	strh.w	r3, [lr, #-6]
 800ab8c:	ed5c 6a02 	vldr	s13, [ip, #-8]
 800ab90:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ab94:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ab98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9c:	bfd4      	ite	le
 800ab9e:	eef0 7a45 	vmovle.f32	s15, s10
 800aba2:	eef0 7a47 	vmovgt.f32	s15, s14
 800aba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abae:	ee17 3a90 	vmov	r3, s15
 800abb2:	f303 030f 	ssat	r3, #16, r3
 800abb6:	f82e 3c04 	strh.w	r3, [lr, #-4]
 800abba:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800abbe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800abc2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800abc6:	ee37 6ac7 	vsub.f32	s12, s15, s14
 800abca:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800abce:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 800abd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800abd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abda:	bfcc      	ite	gt
 800abdc:	ee16 3a90 	vmovgt	r3, s13
 800abe0:	ee16 3a10 	vmovle	r3, s12
 800abe4:	f303 030f 	ssat	r3, #16, r3
 800abe8:	3c01      	subs	r4, #1
 800abea:	f82e 3c02 	strh.w	r3, [lr, #-2]
 800abee:	f10c 0c10 	add.w	ip, ip, #16
 800abf2:	f10e 0e08 	add.w	lr, lr, #8
 800abf6:	d19b      	bne.n	800ab30 <st_f32_to_int16+0x1c>
 800abf8:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800abfc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800ac00:	f012 0203 	ands.w	r2, r2, #3
 800ac04:	d049      	beq.n	800ac9a <st_f32_to_int16+0x186>
 800ac06:	edd0 6a00 	vldr	s13, [r0]
 800ac0a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800ac9c <st_f32_to_int16+0x188>
 800ac0e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ac12:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ac16:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ac1a:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 800ac1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac22:	bfd4      	ite	le
 800ac24:	eef0 7a46 	vmovle.f32	s15, s12
 800ac28:	eef0 7a47 	vmovgt.f32	s15, s14
 800ac2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac34:	ee17 3a90 	vmov	r3, s15
 800ac38:	f303 030f 	ssat	r3, #16, r3
 800ac3c:	2a01      	cmp	r2, #1
 800ac3e:	800b      	strh	r3, [r1, #0]
 800ac40:	d02b      	beq.n	800ac9a <st_f32_to_int16+0x186>
 800ac42:	edd0 7a01 	vldr	s15, [r0, #4]
 800ac46:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ac4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ac4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac52:	bfd4      	ite	le
 800ac54:	eef0 6a46 	vmovle.f32	s13, s12
 800ac58:	eef0 6a47 	vmovgt.f32	s13, s14
 800ac5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac64:	ee17 3a90 	vmov	r3, s15
 800ac68:	f303 030f 	ssat	r3, #16, r3
 800ac6c:	2a02      	cmp	r2, #2
 800ac6e:	804b      	strh	r3, [r1, #2]
 800ac70:	d013      	beq.n	800ac9a <st_f32_to_int16+0x186>
 800ac72:	edd0 7a02 	vldr	s15, [r0, #8]
 800ac76:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ac7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ac7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac82:	bfd8      	it	le
 800ac84:	eeb0 7a46 	vmovle.f32	s14, s12
 800ac88:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac8c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800ac90:	ee17 3a10 	vmov	r3, s14
 800ac94:	f303 030f 	ssat	r3, #16, r3
 800ac98:	808b      	strh	r3, [r1, #4]
 800ac9a:	bd30      	pop	{r4, r5, pc}
 800ac9c:	47000000 	.word	0x47000000

0800aca0 <st_f32_to_int8>:
 800aca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aca2:	0895      	lsrs	r5, r2, #2
 800aca4:	d078      	beq.n	800ad98 <st_f32_to_int8+0xf8>
 800aca6:	f101 0c04 	add.w	ip, r1, #4
 800acaa:	eddf 5a6b 	vldr	s11, [pc, #428]	@ 800ae58 <st_f32_to_int8+0x1b8>
 800acae:	f100 0e10 	add.w	lr, r0, #16
 800acb2:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800acb6:	eebe 5a00 	vmov.f32	s10, #224	@ 0xbf000000 -0.5
 800acba:	00ae      	lsls	r6, r5, #2
 800acbc:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 800acc0:	ed1e 7a04 	vldr	s14, [lr, #-16]
 800acc4:	ee27 7a25 	vmul.f32	s14, s14, s11
 800acc8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800accc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd0:	bfd4      	ite	le
 800acd2:	eef0 7a45 	vmovle.f32	s15, s10
 800acd6:	eef0 7a46 	vmovgt.f32	s15, s12
 800acda:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ace2:	ee17 3a90 	vmov	r3, s15
 800ace6:	b21b      	sxth	r3, r3
 800ace8:	f303 0307 	ssat	r3, #8, r3
 800acec:	f80c 3c04 	strb.w	r3, [ip, #-4]
 800acf0:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800acf4:	ee27 7a25 	vmul.f32	s14, s14, s11
 800acf8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800acfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad00:	bfd4      	ite	le
 800ad02:	eef0 7a45 	vmovle.f32	s15, s10
 800ad06:	eef0 7a46 	vmovgt.f32	s15, s12
 800ad0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad12:	ee17 3a90 	vmov	r3, s15
 800ad16:	b21b      	sxth	r3, r3
 800ad18:	f303 0307 	ssat	r3, #8, r3
 800ad1c:	f80c 3c03 	strb.w	r3, [ip, #-3]
 800ad20:	ed1e 7a02 	vldr	s14, [lr, #-8]
 800ad24:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ad28:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ad2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad30:	bfd4      	ite	le
 800ad32:	eef0 7a45 	vmovle.f32	s15, s10
 800ad36:	eef0 7a46 	vmovgt.f32	s15, s12
 800ad3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad42:	ee17 3a90 	vmov	r3, s15
 800ad46:	b21b      	sxth	r3, r3
 800ad48:	f303 0307 	ssat	r3, #8, r3
 800ad4c:	f80c 3c02 	strb.w	r3, [ip, #-2]
 800ad50:	ed5e 6a01 	vldr	s13, [lr, #-4]
 800ad54:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ad58:	ee76 7a86 	vadd.f32	s15, s13, s12
 800ad5c:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800ad60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad64:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800ad68:	ee17 3a90 	vmov	r3, s15
 800ad6c:	ee17 7a10 	vmov	r7, s14
 800ad70:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ad74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad78:	b21b      	sxth	r3, r3
 800ad7a:	b23f      	sxth	r7, r7
 800ad7c:	dd5f      	ble.n	800ae3e <st_f32_to_int8+0x19e>
 800ad7e:	f303 0307 	ssat	r3, #8, r3
 800ad82:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800ad86:	f10c 0c04 	add.w	ip, ip, #4
 800ad8a:	4564      	cmp	r4, ip
 800ad8c:	f10e 0e10 	add.w	lr, lr, #16
 800ad90:	d196      	bne.n	800acc0 <st_f32_to_int8+0x20>
 800ad92:	4431      	add	r1, r6
 800ad94:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800ad98:	f012 0203 	ands.w	r2, r2, #3
 800ad9c:	d04e      	beq.n	800ae3c <st_f32_to_int8+0x19c>
 800ad9e:	edd0 6a00 	vldr	s13, [r0]
 800ada2:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800ae58 <st_f32_to_int8+0x1b8>
 800ada6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800adaa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800adae:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800adb2:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 800adb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adba:	bfd4      	ite	le
 800adbc:	eef0 7a46 	vmovle.f32	s15, s12
 800adc0:	eef0 7a47 	vmovgt.f32	s15, s14
 800adc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800adcc:	ee17 3a90 	vmov	r3, s15
 800add0:	b21b      	sxth	r3, r3
 800add2:	f303 0307 	ssat	r3, #8, r3
 800add6:	2a01      	cmp	r2, #1
 800add8:	700b      	strb	r3, [r1, #0]
 800adda:	d02f      	beq.n	800ae3c <st_f32_to_int8+0x19c>
 800addc:	edd0 6a01 	vldr	s13, [r0, #4]
 800ade0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ade4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ade8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adec:	bfd4      	ite	le
 800adee:	eef0 7a46 	vmovle.f32	s15, s12
 800adf2:	eef0 7a47 	vmovgt.f32	s15, s14
 800adf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800adfe:	ee17 3a90 	vmov	r3, s15
 800ae02:	b21b      	sxth	r3, r3
 800ae04:	f303 0307 	ssat	r3, #8, r3
 800ae08:	2a02      	cmp	r2, #2
 800ae0a:	704b      	strb	r3, [r1, #1]
 800ae0c:	d016      	beq.n	800ae3c <st_f32_to_int8+0x19c>
 800ae0e:	edd0 6a02 	vldr	s13, [r0, #8]
 800ae12:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ae16:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ae1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae1e:	bfd4      	ite	le
 800ae20:	eef0 7a46 	vmovle.f32	s15, s12
 800ae24:	eef0 7a47 	vmovgt.f32	s15, s14
 800ae28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae30:	ee17 3a90 	vmov	r3, s15
 800ae34:	b21b      	sxth	r3, r3
 800ae36:	f303 0307 	ssat	r3, #8, r3
 800ae3a:	708b      	strb	r3, [r1, #2]
 800ae3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae3e:	f307 0707 	ssat	r7, #8, r7
 800ae42:	f80c 7c01 	strb.w	r7, [ip, #-1]
 800ae46:	f10c 0c04 	add.w	ip, ip, #4
 800ae4a:	45a4      	cmp	ip, r4
 800ae4c:	f10e 0e10 	add.w	lr, lr, #16
 800ae50:	f47f af36 	bne.w	800acc0 <st_f32_to_int8+0x20>
 800ae54:	e79d      	b.n	800ad92 <st_f32_to_int8+0xf2>
 800ae56:	bf00      	nop
 800ae58:	43000000 	.word	0x43000000

0800ae5c <st_int16_to_f32>:
 800ae5c:	b530      	push	{r4, r5, lr}
 800ae5e:	0894      	lsrs	r4, r2, #2
 800ae60:	d038      	beq.n	800aed4 <st_int16_to_f32+0x78>
 800ae62:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800af24 <st_int16_to_f32+0xc8>
 800ae66:	f100 0c08 	add.w	ip, r0, #8
 800ae6a:	f101 0310 	add.w	r3, r1, #16
 800ae6e:	46a6      	mov	lr, r4
 800ae70:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 800ae74:	ee07 5a90 	vmov	s15, r5
 800ae78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae7c:	3310      	adds	r3, #16
 800ae7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae82:	f10c 0c08 	add.w	ip, ip, #8
 800ae86:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 800ae8a:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 800ae8e:	ee07 5a90 	vmov	s15, r5
 800ae92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae96:	f1be 0e01 	subs.w	lr, lr, #1
 800ae9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae9e:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 800aea2:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 800aea6:	ee07 5a90 	vmov	s15, r5
 800aeaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aeb2:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800aeb6:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 800aeba:	ee07 5a90 	vmov	s15, r5
 800aebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aec6:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800aeca:	d1d1      	bne.n	800ae70 <st_int16_to_f32+0x14>
 800aecc:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800aed0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800aed4:	f012 0203 	ands.w	r2, r2, #3
 800aed8:	d023      	beq.n	800af22 <st_int16_to_f32+0xc6>
 800aeda:	f9b0 3000 	ldrsh.w	r3, [r0]
 800aede:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800af24 <st_int16_to_f32+0xc8>
 800aee2:	ee07 3a90 	vmov	s15, r3
 800aee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeea:	2a01      	cmp	r2, #1
 800aeec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aef0:	edc1 7a00 	vstr	s15, [r1]
 800aef4:	d015      	beq.n	800af22 <st_int16_to_f32+0xc6>
 800aef6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800aefa:	ee07 3a90 	vmov	s15, r3
 800aefe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af02:	2a02      	cmp	r2, #2
 800af04:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af08:	edc1 7a01 	vstr	s15, [r1, #4]
 800af0c:	d009      	beq.n	800af22 <st_int16_to_f32+0xc6>
 800af0e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800af12:	ee07 3a90 	vmov	s15, r3
 800af16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af1e:	edc1 7a02 	vstr	s15, [r1, #8]
 800af22:	bd30      	pop	{r4, r5, pc}
 800af24:	38000000 	.word	0x38000000

0800af28 <st_sssa8_ch_convolve_rank1upd>:
 800af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af2c:	b087      	sub	sp, #28
 800af2e:	f8bd 4040 	ldrh.w	r4, [sp, #64]	@ 0x40
 800af32:	f99d a048 	ldrsb.w	sl, [sp, #72]	@ 0x48
 800af36:	fb13 f304 	smulbb	r3, r3, r4
 800af3a:	fb13 f400 	smulbb	r4, r3, r0
 800af3e:	4608      	mov	r0, r1
 800af40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af42:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800af44:	2a00      	cmp	r2, #0
 800af46:	d078      	beq.n	800b03a <st_sssa8_ch_convolve_rank1upd+0x112>
 800af48:	b2a4      	uxth	r4, r4
 800af4a:	08a7      	lsrs	r7, r4, #2
 800af4c:	f1a3 0804 	sub.w	r8, r3, #4
 800af50:	f1a7 0381 	sub.w	r3, r7, #129	@ 0x81
 800af54:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800af58:	ebc3 2643 	rsb	r6, r3, r3, lsl #9
 800af5c:	f004 0403 	and.w	r4, r4, #3
 800af60:	f1a7 0580 	sub.w	r5, r7, #128	@ 0x80
 800af64:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
 800af68:	1e66      	subs	r6, r4, #1
 800af6a:	b2b6      	uxth	r6, r6
 800af6c:	fa1f fb85 	uxth.w	fp, r5
 800af70:	eb01 0982 	add.w	r9, r1, r2, lsl #2
 800af74:	025d      	lsls	r5, r3, #9
 800af76:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800af7a:	3301      	adds	r3, #1
 800af7c:	025b      	lsls	r3, r3, #9
 800af7e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800af82:	9201      	str	r2, [sp, #4]
 800af84:	1c72      	adds	r2, r6, #1
 800af86:	9502      	str	r5, [sp, #8]
 800af88:	9203      	str	r2, [sp, #12]
 800af8a:	461d      	mov	r5, r3
 800af8c:	4633      	mov	r3, r6
 800af8e:	2f80      	cmp	r7, #128	@ 0x80
 800af90:	d958      	bls.n	800b044 <st_sssa8_ch_convolve_rank1upd+0x11c>
 800af92:	9a02      	ldr	r2, [sp, #8]
 800af94:	e9cd 9304 	strd	r9, r3, [sp, #16]
 800af98:	f500 7600 	add.w	r6, r0, #512	@ 0x200
 800af9c:	eb00 0e02 	add.w	lr, r0, r2
 800afa0:	f04f 0c00 	mov.w	ip, #0
 800afa4:	f5a6 7900 	sub.w	r9, r6, #512	@ 0x200
 800afa8:	2200      	movs	r2, #0
 800afaa:	f859 3b04 	ldr.w	r3, [r9], #4
 800afae:	fa2f f183 	sxtb16	r1, r3
 800afb2:	45b1      	cmp	r9, r6
 800afb4:	ea4f 2333 	mov.w	r3, r3, ror #8
 800afb8:	fa92 f211 	qadd16	r2, r2, r1
 800afbc:	fa2f f383 	sxtb16	r3, r3
 800afc0:	fa92 f213 	qadd16	r2, r2, r3
 800afc4:	d1f1      	bne.n	800afaa <st_sssa8_ch_convolve_rank1upd+0x82>
 800afc6:	f509 7600 	add.w	r6, r9, #512	@ 0x200
 800afca:	b213      	sxth	r3, r2
 800afcc:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800afd0:	4576      	cmp	r6, lr
 800afd2:	449c      	add	ip, r3
 800afd4:	d1e6      	bne.n	800afa4 <st_sssa8_ch_convolve_rank1upd+0x7c>
 800afd6:	e9dd 9304 	ldrd	r9, r3, [sp, #16]
 800afda:	1946      	adds	r6, r0, r5
 800afdc:	4658      	mov	r0, fp
 800afde:	b378      	cbz	r0, 800b040 <st_sssa8_ch_convolve_rank1upd+0x118>
 800afe0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800afe4:	2100      	movs	r1, #0
 800afe6:	f856 2b04 	ldr.w	r2, [r6], #4
 800afea:	fa2f fe82 	sxtb16	lr, r2
 800afee:	4286      	cmp	r6, r0
 800aff0:	ea4f 2232 	mov.w	r2, r2, ror #8
 800aff4:	fa91 f11e 	qadd16	r1, r1, lr
 800aff8:	fa2f f282 	sxtb16	r2, r2
 800affc:	fa91 f112 	qadd16	r1, r1, r2
 800b000:	d1f1      	bne.n	800afe6 <st_sssa8_ch_convolve_rank1upd+0xbe>
 800b002:	b20a      	sxth	r2, r1
 800b004:	eb02 4221 	add.w	r2, r2, r1, asr #16
 800b008:	4494      	add	ip, r2
 800b00a:	b16c      	cbz	r4, 800b028 <st_sssa8_ch_convolve_rank1upd+0x100>
 800b00c:	f990 2000 	ldrsb.w	r2, [r0]
 800b010:	4494      	add	ip, r2
 800b012:	b13b      	cbz	r3, 800b024 <st_sssa8_ch_convolve_rank1upd+0xfc>
 800b014:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800b018:	2c02      	cmp	r4, #2
 800b01a:	4494      	add	ip, r2
 800b01c:	bf1c      	itt	ne
 800b01e:	f990 2002 	ldrsbne.w	r2, [r0, #2]
 800b022:	4494      	addne	ip, r2
 800b024:	9a03      	ldr	r2, [sp, #12]
 800b026:	4410      	add	r0, r2
 800b028:	f858 2f04 	ldr.w	r2, [r8, #4]!
 800b02c:	fb0c 221a 	mls	r2, ip, sl, r2
 800b030:	f849 2b04 	str.w	r2, [r9], #4
 800b034:	9a01      	ldr	r2, [sp, #4]
 800b036:	4591      	cmp	r9, r2
 800b038:	d1a9      	bne.n	800af8e <st_sssa8_ch_convolve_rank1upd+0x66>
 800b03a:	b007      	add	sp, #28
 800b03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b040:	4630      	mov	r0, r6
 800b042:	e7e2      	b.n	800b00a <st_sssa8_ch_convolve_rank1upd+0xe2>
 800b044:	4606      	mov	r6, r0
 800b046:	f04f 0c00 	mov.w	ip, #0
 800b04a:	4638      	mov	r0, r7
 800b04c:	e7c7      	b.n	800afde <st_sssa8_ch_convolve_rank1upd+0xb6>
 800b04e:	bf00      	nop

0800b050 <st_sssa8_fully_connected>:
 800b050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	b091      	sub	sp, #68	@ 0x44
 800b056:	468a      	mov	sl, r1
 800b058:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b05a:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800b05c:	f9b1 8000 	ldrsh.w	r8, [r1]
 800b060:	6824      	ldr	r4, [r4, #0]
 800b062:	920a      	str	r2, [sp, #40]	@ 0x28
 800b064:	f108 32ff 	add.w	r2, r8, #4294967295
 800b068:	f99d 1074 	ldrsb.w	r1, [sp, #116]	@ 0x74
 800b06c:	f99d 6070 	ldrsb.w	r6, [sp, #112]	@ 0x70
 800b070:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b072:	2a14      	cmp	r2, #20
 800b074:	e9cd 0408 	strd	r0, r4, [sp, #32]
 800b078:	9107      	str	r1, [sp, #28]
 800b07a:	d807      	bhi.n	800b08c <st_sssa8_fully_connected+0x3c>
 800b07c:	fa01 f008 	lsl.w	r0, r1, r8
 800b080:	2101      	movs	r1, #1
 800b082:	fa01 f108 	lsl.w	r1, r1, r8
 800b086:	eb00 0251 	add.w	r2, r0, r1, lsr #1
 800b08a:	9207      	str	r2, [sp, #28]
 800b08c:	49c2      	ldr	r1, [pc, #776]	@ (800b398 <st_sssa8_fully_connected+0x348>)
 800b08e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b090:	fba1 0103 	umull	r0, r1, r1, r3
 800b094:	ea4f 0b91 	mov.w	fp, r1, lsr #2
 800b098:	eb0b 014b 	add.w	r1, fp, fp, lsl #1
 800b09c:	eba3 0941 	sub.w	r9, r3, r1, lsl #1
 800b0a0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800b0a2:	eb03 0541 	add.w	r5, r3, r1, lsl #1
 800b0a6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b0a8:	fb0b f402 	mul.w	r4, fp, r2
 800b0ac:	eb03 07c1 	add.w	r7, r3, r1, lsl #3
 800b0b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b0b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800b0b6:	fa1f f989 	uxth.w	r9, r9
 800b0ba:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f000 80a3 	beq.w	800b20a <st_sssa8_fully_connected+0x1ba>
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	9808      	ldr	r0, [sp, #32]
 800b0c8:	eac6 4306 	pkhbt	r3, r6, r6, lsl #16
 800b0cc:	9600      	str	r6, [sp, #0]
 800b0ce:	4616      	mov	r6, r2
 800b0d0:	f000 fa50 	bl	800b574 <st_int8_reordered_no_shift_zero>
 800b0d4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800b0d6:	9304      	str	r3, [sp, #16]
 800b0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0da:	9302      	str	r3, [sp, #8]
 800b0dc:	9b07      	ldr	r3, [sp, #28]
 800b0de:	9301      	str	r3, [sp, #4]
 800b0e0:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b0e2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b0e4:	f8cd b000 	str.w	fp, [sp]
 800b0e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ec:	4651      	mov	r1, sl
 800b0ee:	4632      	mov	r2, r6
 800b0f0:	f000 fdbe 	bl	800bc70 <st_sssa8_dense_loop>
 800b0f4:	f1b9 0f00 	cmp.w	r9, #0
 800b0f8:	d063      	beq.n	800b1c2 <st_sssa8_fully_connected+0x172>
 800b0fa:	f006 0203 	and.w	r2, r6, #3
 800b0fe:	1e51      	subs	r1, r2, #1
 800b100:	2001      	movs	r0, #1
 800b102:	ea4f 0e96 	mov.w	lr, r6, lsr #2
 800b106:	b28e      	uxth	r6, r1
 800b108:	f1a8 0102 	sub.w	r1, r8, #2
 800b10c:	fa00 f101 	lsl.w	r1, r0, r1
 800b110:	f10e 33ff 	add.w	r3, lr, #4294967295
 800b114:	b29b      	uxth	r3, r3
 800b116:	910d      	str	r1, [sp, #52]	@ 0x34
 800b118:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b11a:	920a      	str	r2, [sp, #40]	@ 0x28
 800b11c:	3301      	adds	r3, #1
 800b11e:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 800b122:	eb05 0b09 	add.w	fp, r5, r9
 800b126:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800b12a:	1833      	adds	r3, r6, r0
 800b12c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b12e:	eba0 0308 	sub.w	r3, r0, r8
 800b132:	930e      	str	r3, [sp, #56]	@ 0x38
 800b134:	4649      	mov	r1, r9
 800b136:	4632      	mov	r2, r6
 800b138:	f857 3b04 	ldr.w	r3, [r7], #4
 800b13c:	f1be 0f00 	cmp.w	lr, #0
 800b140:	d060      	beq.n	800b204 <st_sssa8_fully_connected+0x1b4>
 800b142:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b144:	9508      	str	r5, [sp, #32]
 800b146:	eb04 0901 	add.w	r9, r4, r1
 800b14a:	f854 0b04 	ldr.w	r0, [r4], #4
 800b14e:	fa2f fc90 	sxtb16	ip, r0, ror #8
 800b152:	6835      	ldr	r5, [r6, #0]
 800b154:	fa2f f080 	sxtb16	r0, r0
 800b158:	fb25 3500 	smlad	r5, r5, r0, r3
 800b15c:	6873      	ldr	r3, [r6, #4]
 800b15e:	3608      	adds	r6, #8
 800b160:	fb23 530c 	smlad	r3, r3, ip, r5
 800b164:	45a1      	cmp	r9, r4
 800b166:	d1f0      	bne.n	800b14a <st_sssa8_fully_connected+0xfa>
 800b168:	9d08      	ldr	r5, [sp, #32]
 800b16a:	4650      	mov	r0, sl
 800b16c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b16e:	2c00      	cmp	r4, #0
 800b170:	d039      	beq.n	800b1e6 <st_sssa8_fully_connected+0x196>
 800b172:	f999 4000 	ldrsb.w	r4, [r9]
 800b176:	8806      	ldrh	r6, [r0, #0]
 800b178:	fb16 3304 	smlabb	r3, r6, r4, r3
 800b17c:	b162      	cbz	r2, 800b198 <st_sssa8_fully_connected+0x148>
 800b17e:	f999 4001 	ldrsb.w	r4, [r9, #1]
 800b182:	8846      	ldrh	r6, [r0, #2]
 800b184:	fb16 3304 	smlabb	r3, r6, r4, r3
 800b188:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b18a:	2c02      	cmp	r4, #2
 800b18c:	d004      	beq.n	800b198 <st_sssa8_fully_connected+0x148>
 800b18e:	8884      	ldrh	r4, [r0, #4]
 800b190:	f999 0002 	ldrsb.w	r0, [r9, #2]
 800b194:	fb14 3300 	smlabb	r3, r4, r0, r3
 800b198:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800b19a:	eb09 0400 	add.w	r4, r9, r0
 800b19e:	f1b8 0f15 	cmp.w	r8, #21
 800b1a2:	dd12      	ble.n	800b1ca <st_sssa8_fully_connected+0x17a>
 800b1a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1a6:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800b1a8:	fb53 6300 	smmla	r3, r3, r0, r6
 800b1ac:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b1ae:	4103      	asrs	r3, r0
 800b1b0:	9807      	ldr	r0, [sp, #28]
 800b1b2:	4403      	add	r3, r0
 800b1b4:	f303 0307 	ssat	r3, #8, r3
 800b1b8:	b25b      	sxtb	r3, r3
 800b1ba:	f805 3b01 	strb.w	r3, [r5], #1
 800b1be:	455d      	cmp	r5, fp
 800b1c0:	d1ba      	bne.n	800b138 <st_sssa8_fully_connected+0xe8>
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	b011      	add	sp, #68	@ 0x44
 800b1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ca:	f1b8 0f00 	cmp.w	r8, #0
 800b1ce:	dd0c      	ble.n	800b1ea <st_sssa8_fully_connected+0x19a>
 800b1d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1d2:	9e07      	ldr	r6, [sp, #28]
 800b1d4:	005b      	lsls	r3, r3, #1
 800b1d6:	fb53 6300 	smmla	r3, r3, r0, r6
 800b1da:	fa43 f308 	asr.w	r3, r3, r8
 800b1de:	f303 0307 	ssat	r3, #8, r3
 800b1e2:	b25b      	sxtb	r3, r3
 800b1e4:	e7e9      	b.n	800b1ba <st_sssa8_fully_connected+0x16a>
 800b1e6:	464c      	mov	r4, r9
 800b1e8:	e7d9      	b.n	800b19e <st_sssa8_fully_connected+0x14e>
 800b1ea:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b1ec:	4083      	lsls	r3, r0
 800b1ee:	f303 031f 	ssat	r3, #32, r3
 800b1f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1f4:	fb53 f310 	smmulr	r3, r3, r0
 800b1f8:	9807      	ldr	r0, [sp, #28]
 800b1fa:	4403      	add	r3, r0
 800b1fc:	f303 0307 	ssat	r3, #8, r3
 800b200:	b25b      	sxtb	r3, r3
 800b202:	e7da      	b.n	800b1ba <st_sssa8_fully_connected+0x16a>
 800b204:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b206:	46a1      	mov	r9, r4
 800b208:	e7b0      	b.n	800b16c <st_sssa8_fully_connected+0x11c>
 800b20a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800b20c:	9305      	str	r3, [sp, #20]
 800b20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b210:	f8cd b000 	str.w	fp, [sp]
 800b214:	4651      	mov	r1, sl
 800b216:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b21a:	f8cd 8010 	str.w	r8, [sp, #16]
 800b21e:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800b222:	9b07      	ldr	r3, [sp, #28]
 800b224:	9301      	str	r3, [sp, #4]
 800b226:	4650      	mov	r0, sl
 800b228:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b22a:	f000 fef9 	bl	800c020 <st_sssa8_dense_memopt_loop>
 800b22e:	f1b9 0f00 	cmp.w	r9, #0
 800b232:	d0c6      	beq.n	800b1c2 <st_sssa8_fully_connected+0x172>
 800b234:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b236:	f1a0 0310 	sub.w	r3, r0, #16
 800b23a:	f023 030f 	bic.w	r3, r3, #15
 800b23e:	eb05 0b09 	add.w	fp, r5, r9
 800b242:	2101      	movs	r1, #1
 800b244:	f103 0910 	add.w	r9, r3, #16
 800b248:	f1a8 0302 	sub.w	r3, r8, #2
 800b24c:	fa01 f303 	lsl.w	r3, r1, r3
 800b250:	eb0a 0209 	add.w	r2, sl, r9
 800b254:	4682      	mov	sl, r0
 800b256:	930e      	str	r3, [sp, #56]	@ 0x38
 800b258:	f1ba 0f0f 	cmp.w	sl, #15
 800b25c:	eba1 0308 	sub.w	r3, r1, r8
 800b260:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b262:	f1c6 0100 	rsb	r1, r6, #0
 800b266:	46de      	mov	lr, fp
 800b268:	f857 3b04 	ldr.w	r3, [r7], #4
 800b26c:	920d      	str	r2, [sp, #52]	@ 0x34
 800b26e:	46c3      	mov	fp, r8
 800b270:	eac1 4101 	pkhbt	r1, r1, r1, lsl #16
 800b274:	dd78      	ble.n	800b368 <st_sssa8_fully_connected+0x318>
 800b276:	9808      	ldr	r0, [sp, #32]
 800b278:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 800b27c:	eb04 0809 	add.w	r8, r4, r9
 800b280:	950c      	str	r5, [sp, #48]	@ 0x30
 800b282:	6822      	ldr	r2, [r4, #0]
 800b284:	6805      	ldr	r5, [r0, #0]
 800b286:	fa2f f992 	sxtb16	r9, r2, ror #8
 800b28a:	ea4f 2c35 	mov.w	ip, r5, ror #8
 800b28e:	fa2f f282 	sxtb16	r2, r2
 800b292:	fa21 f585 	sxtab16	r5, r1, r5
 800b296:	fa21 fc8c 	sxtab16	ip, r1, ip
 800b29a:	fb25 3502 	smlad	r5, r5, r2, r3
 800b29e:	fb2c 5509 	smlad	r5, ip, r9, r5
 800b2a2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800b2a6:	6843      	ldr	r3, [r0, #4]
 800b2a8:	fa2f f99c 	sxtb16	r9, ip, ror #8
 800b2ac:	ea4f 2233 	mov.w	r2, r3, ror #8
 800b2b0:	fa2f fc8c 	sxtb16	ip, ip
 800b2b4:	fa21 f383 	sxtab16	r3, r1, r3
 800b2b8:	fa21 f282 	sxtab16	r2, r1, r2
 800b2bc:	fb23 530c 	smlad	r3, r3, ip, r5
 800b2c0:	fb22 3209 	smlad	r2, r2, r9, r3
 800b2c4:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800b2c8:	6883      	ldr	r3, [r0, #8]
 800b2ca:	fa2f f99c 	sxtb16	r9, ip, ror #8
 800b2ce:	ea4f 2533 	mov.w	r5, r3, ror #8
 800b2d2:	fa2f fc8c 	sxtb16	ip, ip
 800b2d6:	fa21 f383 	sxtab16	r3, r1, r3
 800b2da:	fa21 f585 	sxtab16	r5, r1, r5
 800b2de:	fb23 230c 	smlad	r3, r3, ip, r2
 800b2e2:	fb25 3509 	smlad	r5, r5, r9, r3
 800b2e6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b2ea:	68c2      	ldr	r2, [r0, #12]
 800b2ec:	3410      	adds	r4, #16
 800b2ee:	3010      	adds	r0, #16
 800b2f0:	fa2f f99c 	sxtb16	r9, ip, ror #8
 800b2f4:	ea4f 2332 	mov.w	r3, r2, ror #8
 800b2f8:	fa2f fc8c 	sxtb16	ip, ip
 800b2fc:	fa21 f282 	sxtab16	r2, r1, r2
 800b300:	fa21 f383 	sxtab16	r3, r1, r3
 800b304:	fb22 520c 	smlad	r2, r2, ip, r5
 800b308:	fb23 2309 	smlad	r3, r3, r9, r2
 800b30c:	45a0      	cmp	r8, r4
 800b30e:	d1b8      	bne.n	800b282 <st_sssa8_fully_connected+0x232>
 800b310:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b314:	464c      	mov	r4, r9
 800b316:	45a2      	cmp	sl, r4
 800b318:	e9dd 500c 	ldrd	r5, r0, [sp, #48]	@ 0x30
 800b31c:	dd29      	ble.n	800b372 <st_sssa8_fully_connected+0x322>
 800b31e:	ebaa 0404 	sub.w	r4, sl, r4
 800b322:	4444      	add	r4, r8
 800b324:	f918 cb01 	ldrsb.w	ip, [r8], #1
 800b328:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800b32c:	45a0      	cmp	r8, r4
 800b32e:	eba2 0206 	sub.w	r2, r2, r6
 800b332:	fb12 330c 	smlabb	r3, r2, ip, r3
 800b336:	d1f5      	bne.n	800b324 <st_sssa8_fully_connected+0x2d4>
 800b338:	f1bb 0f15 	cmp.w	fp, #21
 800b33c:	dd1d      	ble.n	800b37a <st_sssa8_fully_connected+0x32a>
 800b33e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b340:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b342:	fb53 0302 	smmla	r3, r3, r2, r0
 800b346:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b348:	4113      	asrs	r3, r2
 800b34a:	9a07      	ldr	r2, [sp, #28]
 800b34c:	4413      	add	r3, r2
 800b34e:	f303 0307 	ssat	r3, #8, r3
 800b352:	b25b      	sxtb	r3, r3
 800b354:	f805 3b01 	strb.w	r3, [r5], #1
 800b358:	4575      	cmp	r5, lr
 800b35a:	f43f af32 	beq.w	800b1c2 <st_sssa8_fully_connected+0x172>
 800b35e:	f1ba 0f0f 	cmp.w	sl, #15
 800b362:	f857 3b04 	ldr.w	r3, [r7], #4
 800b366:	dc86      	bgt.n	800b276 <st_sssa8_fully_connected+0x226>
 800b368:	46a0      	mov	r8, r4
 800b36a:	2400      	movs	r4, #0
 800b36c:	45a2      	cmp	sl, r4
 800b36e:	9808      	ldr	r0, [sp, #32]
 800b370:	dcd5      	bgt.n	800b31e <st_sssa8_fully_connected+0x2ce>
 800b372:	f1bb 0f15 	cmp.w	fp, #21
 800b376:	4644      	mov	r4, r8
 800b378:	dce1      	bgt.n	800b33e <st_sssa8_fully_connected+0x2ee>
 800b37a:	f1bb 0f00 	cmp.w	fp, #0
 800b37e:	dd0d      	ble.n	800b39c <st_sssa8_fully_connected+0x34c>
 800b380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b382:	9807      	ldr	r0, [sp, #28]
 800b384:	005b      	lsls	r3, r3, #1
 800b386:	fb53 0302 	smmla	r3, r3, r2, r0
 800b38a:	fa43 f30b 	asr.w	r3, r3, fp
 800b38e:	f303 0307 	ssat	r3, #8, r3
 800b392:	b25b      	sxtb	r3, r3
 800b394:	e7de      	b.n	800b354 <st_sssa8_fully_connected+0x304>
 800b396:	bf00      	nop
 800b398:	aaaaaaab 	.word	0xaaaaaaab
 800b39c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b39e:	4093      	lsls	r3, r2
 800b3a0:	f303 031f 	ssat	r3, #32, r3
 800b3a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3a6:	fb53 f312 	smmulr	r3, r3, r2
 800b3aa:	9a07      	ldr	r2, [sp, #28]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	f303 0307 	ssat	r3, #8, r3
 800b3b2:	b25b      	sxtb	r3, r3
 800b3b4:	e7ce      	b.n	800b354 <st_sssa8_fully_connected+0x304>
 800b3b6:	bf00      	nop

0800b3b8 <st_int8_copy>:
 800b3b8:	4288      	cmp	r0, r1
 800b3ba:	d021      	beq.n	800b400 <st_int8_copy+0x48>
 800b3bc:	b302      	cbz	r2, 800b400 <st_int8_copy+0x48>
 800b3be:	4288      	cmp	r0, r1
 800b3c0:	d313      	bcc.n	800b3ea <st_int8_copy+0x32>
 800b3c2:	2a03      	cmp	r2, #3
 800b3c4:	d81d      	bhi.n	800b402 <st_int8_copy+0x4a>
 800b3c6:	3a01      	subs	r2, #1
 800b3c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b3cc:	f801 3b01 	strb.w	r3, [r1], #1
 800b3d0:	b1b2      	cbz	r2, 800b400 <st_int8_copy+0x48>
 800b3d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b3d6:	f801 3b01 	strb.w	r3, [r1], #1
 800b3da:	2a01      	cmp	r2, #1
 800b3dc:	f000 8088 	beq.w	800b4f0 <st_int8_copy+0x138>
 800b3e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b3e4:	f801 3b01 	strb.w	r3, [r1], #1
 800b3e8:	4770      	bx	lr
 800b3ea:	1883      	adds	r3, r0, r2
 800b3ec:	428b      	cmp	r3, r1
 800b3ee:	d9e8      	bls.n	800b3c2 <st_int8_copy+0xa>
 800b3f0:	440a      	add	r2, r1
 800b3f2:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800b3f6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800b3fa:	4298      	cmp	r0, r3
 800b3fc:	d1f9      	bne.n	800b3f2 <st_int8_copy+0x3a>
 800b3fe:	4770      	bx	lr
 800b400:	4770      	bx	lr
 800b402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b406:	f001 0e03 	and.w	lr, r1, #3
 800b40a:	f1ce 0304 	rsb	r3, lr, #4
 800b40e:	eba2 0c03 	sub.w	ip, r2, r3
 800b412:	f000 0803 	and.w	r8, r0, #3
 800b416:	f1ce 0203 	rsb	r2, lr, #3
 800b41a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b41e:	f801 3b01 	strb.w	r3, [r1], #1
 800b422:	b182      	cbz	r2, 800b446 <st_int8_copy+0x8e>
 800b424:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b428:	f801 3b01 	strb.w	r3, [r1], #1
 800b42c:	2a01      	cmp	r2, #1
 800b42e:	d00a      	beq.n	800b446 <st_int8_copy+0x8e>
 800b430:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b434:	f801 3b01 	strb.w	r3, [r1], #1
 800b438:	f1be 0f01 	cmp.w	lr, #1
 800b43c:	d003      	beq.n	800b446 <st_int8_copy+0x8e>
 800b43e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b442:	f801 3b01 	strb.w	r3, [r1], #1
 800b446:	45c6      	cmp	lr, r8
 800b448:	d02a      	beq.n	800b4a0 <st_int8_copy+0xe8>
 800b44a:	ea5f 121c 	movs.w	r2, ip, lsr #4
 800b44e:	d00a      	beq.n	800b466 <st_int8_copy+0xae>
 800b450:	f850 3b04 	ldr.w	r3, [r0], #4
 800b454:	f850 4b04 	ldr.w	r4, [r0], #4
 800b458:	f850 5b04 	ldr.w	r5, [r0], #4
 800b45c:	f850 6b04 	ldr.w	r6, [r0], #4
 800b460:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800b462:	3a01      	subs	r2, #1
 800b464:	d1f4      	bne.n	800b450 <st_int8_copy+0x98>
 800b466:	f01c 0f08 	tst.w	ip, #8
 800b46a:	d004      	beq.n	800b476 <st_int8_copy+0xbe>
 800b46c:	f850 3b04 	ldr.w	r3, [r0], #4
 800b470:	f850 4b04 	ldr.w	r4, [r0], #4
 800b474:	c118      	stmia	r1!, {r3, r4}
 800b476:	f01c 0f04 	tst.w	ip, #4
 800b47a:	d003      	beq.n	800b484 <st_int8_copy+0xcc>
 800b47c:	f850 3b04 	ldr.w	r3, [r0], #4
 800b480:	f841 3b04 	str.w	r3, [r1], #4
 800b484:	f01c 0f02 	tst.w	ip, #2
 800b488:	d003      	beq.n	800b492 <st_int8_copy+0xda>
 800b48a:	f830 3b02 	ldrh.w	r3, [r0], #2
 800b48e:	f821 3b02 	strh.w	r3, [r1], #2
 800b492:	f01c 0f01 	tst.w	ip, #1
 800b496:	d001      	beq.n	800b49c <st_int8_copy+0xe4>
 800b498:	7803      	ldrb	r3, [r0, #0]
 800b49a:	700b      	strb	r3, [r1, #0]
 800b49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4a0:	ea5f 199c 	movs.w	r9, ip, lsr #6
 800b4a4:	d00e      	beq.n	800b4c4 <st_int8_copy+0x10c>
 800b4a6:	4688      	mov	r8, r1
 800b4a8:	4686      	mov	lr, r0
 800b4aa:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b4ae:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b4b2:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b4b6:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b4ba:	f1b9 0901 	subs.w	r9, r9, #1
 800b4be:	4641      	mov	r1, r8
 800b4c0:	4670      	mov	r0, lr
 800b4c2:	d1f0      	bne.n	800b4a6 <st_int8_copy+0xee>
 800b4c4:	f01c 0f20 	tst.w	ip, #32
 800b4c8:	d007      	beq.n	800b4da <st_int8_copy+0x122>
 800b4ca:	4688      	mov	r8, r1
 800b4cc:	4686      	mov	lr, r0
 800b4ce:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b4d2:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b4d6:	4641      	mov	r1, r8
 800b4d8:	4670      	mov	r0, lr
 800b4da:	f01c 0f10 	tst.w	ip, #16
 800b4de:	d001      	beq.n	800b4e4 <st_int8_copy+0x12c>
 800b4e0:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800b4e2:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800b4e4:	f01c 0f08 	tst.w	ip, #8
 800b4e8:	d0c5      	beq.n	800b476 <st_int8_copy+0xbe>
 800b4ea:	c818      	ldmia	r0!, {r3, r4}
 800b4ec:	c118      	stmia	r1!, {r3, r4}
 800b4ee:	e7c2      	b.n	800b476 <st_int8_copy+0xbe>
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop

0800b4f4 <st_int8_fill>:
 800b4f4:	fa5f fc80 	uxtb.w	ip, r0
 800b4f8:	0203      	lsls	r3, r0, #8
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 800b500:	ea4c 0c03 	orr.w	ip, ip, r3
 800b504:	0403      	lsls	r3, r0, #16
 800b506:	b410      	push	{r4}
 800b508:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b50c:	078c      	lsls	r4, r1, #30
 800b50e:	ea4c 0c03 	orr.w	ip, ip, r3
 800b512:	d006      	beq.n	800b522 <st_int8_fill+0x2e>
 800b514:	b35a      	cbz	r2, 800b56e <st_int8_fill+0x7a>
 800b516:	f801 0b01 	strb.w	r0, [r1], #1
 800b51a:	078b      	lsls	r3, r1, #30
 800b51c:	f102 32ff 	add.w	r2, r2, #4294967295
 800b520:	d1f8      	bne.n	800b514 <st_int8_fill+0x20>
 800b522:	0913      	lsrs	r3, r2, #4
 800b524:	f3c2 0481 	ubfx	r4, r2, #2, #2
 800b528:	f002 0203 	and.w	r2, r2, #3
 800b52c:	b14b      	cbz	r3, 800b542 <st_int8_fill+0x4e>
 800b52e:	f841 cb04 	str.w	ip, [r1], #4
 800b532:	f841 cb04 	str.w	ip, [r1], #4
 800b536:	f841 cb04 	str.w	ip, [r1], #4
 800b53a:	f841 cb04 	str.w	ip, [r1], #4
 800b53e:	3b01      	subs	r3, #1
 800b540:	d1f5      	bne.n	800b52e <st_int8_fill+0x3a>
 800b542:	b14c      	cbz	r4, 800b558 <st_int8_fill+0x64>
 800b544:	f841 cb04 	str.w	ip, [r1], #4
 800b548:	2c01      	cmp	r4, #1
 800b54a:	d005      	beq.n	800b558 <st_int8_fill+0x64>
 800b54c:	f841 cb04 	str.w	ip, [r1], #4
 800b550:	2c02      	cmp	r4, #2
 800b552:	d001      	beq.n	800b558 <st_int8_fill+0x64>
 800b554:	f841 cb04 	str.w	ip, [r1], #4
 800b558:	b14a      	cbz	r2, 800b56e <st_int8_fill+0x7a>
 800b55a:	f801 0b01 	strb.w	r0, [r1], #1
 800b55e:	2a01      	cmp	r2, #1
 800b560:	d005      	beq.n	800b56e <st_int8_fill+0x7a>
 800b562:	f801 0b01 	strb.w	r0, [r1], #1
 800b566:	2a02      	cmp	r2, #2
 800b568:	d001      	beq.n	800b56e <st_int8_fill+0x7a>
 800b56a:	f801 0b01 	strb.w	r0, [r1], #1
 800b56e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <st_int8_reordered_no_shift_zero>:
 800b574:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b576:	0897      	lsrs	r7, r2, #2
 800b578:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800b57c:	d02c      	beq.n	800b5d8 <st_int8_reordered_no_shift_zero+0x64>
 800b57e:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800b582:	468e      	mov	lr, r1
 800b584:	f850 cb04 	ldr.w	ip, [r0], #4
 800b588:	fa2f f49c 	sxtb16	r4, ip, ror #8
 800b58c:	fad4 f403 	ssub16	r4, r4, r3
 800b590:	fa2f fc8c 	sxtb16	ip, ip
 800b594:	fadc fc03 	ssub16	ip, ip, r3
 800b598:	4285      	cmp	r5, r0
 800b59a:	f8ce c000 	str.w	ip, [lr]
 800b59e:	f8ce 4004 	str.w	r4, [lr, #4]
 800b5a2:	f10e 0e08 	add.w	lr, lr, #8
 800b5a6:	d1ed      	bne.n	800b584 <st_int8_reordered_no_shift_zero+0x10>
 800b5a8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800b5ac:	f012 0203 	ands.w	r2, r2, #3
 800b5b0:	d011      	beq.n	800b5d6 <st_int8_reordered_no_shift_zero+0x62>
 800b5b2:	f995 0000 	ldrsb.w	r0, [r5]
 800b5b6:	b273      	sxtb	r3, r6
 800b5b8:	1ac0      	subs	r0, r0, r3
 800b5ba:	2a01      	cmp	r2, #1
 800b5bc:	8008      	strh	r0, [r1, #0]
 800b5be:	d00a      	beq.n	800b5d6 <st_int8_reordered_no_shift_zero+0x62>
 800b5c0:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800b5c4:	2a02      	cmp	r2, #2
 800b5c6:	eba0 0003 	sub.w	r0, r0, r3
 800b5ca:	8048      	strh	r0, [r1, #2]
 800b5cc:	d003      	beq.n	800b5d6 <st_int8_reordered_no_shift_zero+0x62>
 800b5ce:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800b5d2:	1ad3      	subs	r3, r2, r3
 800b5d4:	808b      	strh	r3, [r1, #4]
 800b5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d8:	4605      	mov	r5, r0
 800b5da:	e7e7      	b.n	800b5ac <st_int8_reordered_no_shift_zero+0x38>

0800b5dc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 800b5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e0:	b093      	sub	sp, #76	@ 0x4c
 800b5e2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800b5e6:	f8bd c074 	ldrh.w	ip, [sp, #116]	@ 0x74
 800b5ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	f89d 2088 	ldrb.w	r2, [sp, #136]	@ 0x88
 800b5f2:	f8bd e078 	ldrh.w	lr, [sp, #120]	@ 0x78
 800b5f6:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 800b5f8:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800b5fc:	2a00      	cmp	r2, #0
 800b5fe:	f000 816d 	beq.w	800b8dc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x300>
 800b602:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800b604:	b280      	uxth	r0, r0
 800b606:	eb04 0b00 	add.w	fp, r4, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f000 80d1 	beq.w	800b7b2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d6>
 800b610:	0040      	lsls	r0, r0, #1
 800b612:	9004      	str	r0, [sp, #16]
 800b614:	ea4f 009e 	mov.w	r0, lr, lsr #2
 800b618:	4605      	mov	r5, r0
 800b61a:	f00e 0003 	and.w	r0, lr, #3
 800b61e:	9005      	str	r0, [sp, #20]
 800b620:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b622:	9503      	str	r5, [sp, #12]
 800b624:	f100 0908 	add.w	r9, r0, #8
 800b628:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800b62a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b62c:	f100 0808 	add.w	r8, r0, #8
 800b630:	0128      	lsls	r0, r5, #4
 800b632:	9007      	str	r0, [sp, #28]
 800b634:	e9dd 5002 	ldrd	r5, r0, [sp, #8]
 800b638:	1e5e      	subs	r6, r3, #1
 800b63a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 800b63e:	f101 0710 	add.w	r7, r1, #16
 800b642:	b2b6      	uxth	r6, r6
 800b644:	9008      	str	r0, [sp, #32]
 800b646:	9805      	ldr	r0, [sp, #20]
 800b648:	9d01      	ldr	r5, [sp, #4]
 800b64a:	9423      	str	r4, [sp, #140]	@ 0x8c
 800b64c:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 800b650:	e9cd 1c0b 	strd	r1, ip, [sp, #44]	@ 0x2c
 800b654:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 800b656:	9606      	str	r6, [sp, #24]
 800b658:	e9cd e20d 	strd	lr, r2, [sp, #52]	@ 0x34
 800b65c:	0080      	lsls	r0, r0, #2
 800b65e:	f101 0608 	add.w	r6, r1, #8
 800b662:	3704      	adds	r7, #4
 800b664:	9009      	str	r0, [sp, #36]	@ 0x24
 800b666:	46a2      	mov	sl, r4
 800b668:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800b66c:	9311      	str	r3, [sp, #68]	@ 0x44
 800b66e:	9c03      	ldr	r4, [sp, #12]
 800b670:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b674:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b676:	9311      	str	r3, [sp, #68]	@ 0x44
 800b678:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b67a:	2c00      	cmp	r4, #0
 800b67c:	f000 812c 	beq.w	800b8d8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2fc>
 800b680:	9802      	ldr	r0, [sp, #8]
 800b682:	9601      	str	r6, [sp, #4]
 800b684:	46a6      	mov	lr, r4
 800b686:	462b      	mov	r3, r5
 800b688:	460c      	mov	r4, r1
 800b68a:	4616      	mov	r6, r2
 800b68c:	f8d0 c000 	ldr.w	ip, [r0]
 800b690:	6819      	ldr	r1, [r3, #0]
 800b692:	fb21 410c 	smlad	r1, r1, ip, r4
 800b696:	685a      	ldr	r2, [r3, #4]
 800b698:	fb22 620c 	smlad	r2, r2, ip, r6
 800b69c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b6a0:	689c      	ldr	r4, [r3, #8]
 800b6a2:	68de      	ldr	r6, [r3, #12]
 800b6a4:	3008      	adds	r0, #8
 800b6a6:	3310      	adds	r3, #16
 800b6a8:	fb24 140c 	smlad	r4, r4, ip, r1
 800b6ac:	fb26 260c 	smlad	r6, r6, ip, r2
 800b6b0:	f1be 0e01 	subs.w	lr, lr, #1
 800b6b4:	d1ea      	bne.n	800b68c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xb0>
 800b6b6:	9b07      	ldr	r3, [sp, #28]
 800b6b8:	4632      	mov	r2, r6
 800b6ba:	441d      	add	r5, r3
 800b6bc:	9e01      	ldr	r6, [sp, #4]
 800b6be:	9b08      	ldr	r3, [sp, #32]
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	9c05      	ldr	r4, [sp, #20]
 800b6c4:	b30c      	cbz	r4, 800b70a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x12e>
 800b6c6:	f9b3 0000 	ldrsh.w	r0, [r3]
 800b6ca:	f8b5 c000 	ldrh.w	ip, [r5]
 800b6ce:	fb10 110c 	smlabb	r1, r0, ip, r1
 800b6d2:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 800b6d6:	2c01      	cmp	r4, #1
 800b6d8:	fb1c 2200 	smlabb	r2, ip, r0, r2
 800b6dc:	d013      	beq.n	800b706 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x12a>
 800b6de:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800b6e2:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800b6e6:	fb10 110c 	smlabb	r1, r0, ip, r1
 800b6ea:	f8b5 c006 	ldrh.w	ip, [r5, #6]
 800b6ee:	2c02      	cmp	r4, #2
 800b6f0:	fb1c 2200 	smlabb	r2, ip, r0, r2
 800b6f4:	d007      	beq.n	800b706 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x12a>
 800b6f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b6fa:	8928      	ldrh	r0, [r5, #8]
 800b6fc:	fb10 1103 	smlabb	r1, r0, r3, r1
 800b700:	8968      	ldrh	r0, [r5, #10]
 800b702:	fb13 2200 	smlabb	r2, r3, r0, r2
 800b706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b708:	441d      	add	r5, r3
 800b70a:	f937 0c04 	ldrsh.w	r0, [r7, #-4]
 800b70e:	f859 ec08 	ldr.w	lr, [r9, #-8]
 800b712:	f858 cc08 	ldr.w	ip, [r8, #-8]
 800b716:	2815      	cmp	r0, #21
 800b718:	f340 80a3 	ble.w	800b862 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x286>
 800b71c:	1e83      	subs	r3, r0, #2
 800b71e:	2401      	movs	r4, #1
 800b720:	3801      	subs	r0, #1
 800b722:	fa04 f303 	lsl.w	r3, r4, r3
 800b726:	fb51 330e 	smmla	r3, r1, lr, r3
 800b72a:	4103      	asrs	r3, r0
 800b72c:	4463      	add	r3, ip
 800b72e:	f303 0307 	ssat	r3, #8, r3
 800b732:	b25b      	sxtb	r3, r3
 800b734:	f88a 3000 	strb.w	r3, [sl]
 800b738:	f937 0c02 	ldrsh.w	r0, [r7, #-2]
 800b73c:	2815      	cmp	r0, #21
 800b73e:	f340 80a0 	ble.w	800b882 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a6>
 800b742:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800b746:	1e81      	subs	r1, r0, #2
 800b748:	2401      	movs	r4, #1
 800b74a:	3801      	subs	r0, #1
 800b74c:	fa04 f101 	lsl.w	r1, r4, r1
 800b750:	f859 4c04 	ldr.w	r4, [r9, #-4]
 800b754:	fb52 1204 	smmla	r2, r2, r4, r1
 800b758:	4102      	asrs	r2, r0
 800b75a:	4413      	add	r3, r2
 800b75c:	f303 0307 	ssat	r3, #8, r3
 800b760:	b25b      	sxtb	r3, r3
 800b762:	f88b 3000 	strb.w	r3, [fp]
 800b766:	9b04      	ldr	r3, [sp, #16]
 800b768:	449a      	add	sl, r3
 800b76a:	449b      	add	fp, r3
 800b76c:	9b06      	ldr	r3, [sp, #24]
 800b76e:	3608      	adds	r6, #8
 800b770:	429e      	cmp	r6, r3
 800b772:	f107 0704 	add.w	r7, r7, #4
 800b776:	f109 0908 	add.w	r9, r9, #8
 800b77a:	f108 0808 	add.w	r8, r8, #8
 800b77e:	f47f af73 	bne.w	800b668 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8c>
 800b782:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b784:	9804      	ldr	r0, [sp, #16]
 800b786:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 800b788:	9501      	str	r5, [sp, #4]
 800b78a:	fb03 4400 	mla	r4, r3, r0, r4
 800b78e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800b790:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b794:	901f      	str	r0, [sp, #124]	@ 0x7c
 800b796:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b798:	e9dd 1c0b 	ldrd	r1, ip, [sp, #44]	@ 0x2c
 800b79c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800b7a0:	9020      	str	r0, [sp, #128]	@ 0x80
 800b7a2:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800b7a4:	e9dd e20d 	ldrd	lr, r2, [sp, #52]	@ 0x34
 800b7a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b7ac:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b7b0:	9321      	str	r3, [sp, #132]	@ 0x84
 800b7b2:	f01c 0f01 	tst.w	ip, #1
 800b7b6:	d049      	beq.n	800b84c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x270>
 800b7b8:	ea5f 089e 	movs.w	r8, lr, lsr #2
 800b7bc:	680b      	ldr	r3, [r1, #0]
 800b7be:	f000 80ac 	beq.w	800b91a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x33e>
 800b7c2:	9d01      	ldr	r5, [sp, #4]
 800b7c4:	9802      	ldr	r0, [sp, #8]
 800b7c6:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800b7ca:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 800b7ce:	682e      	ldr	r6, [r5, #0]
 800b7d0:	6869      	ldr	r1, [r5, #4]
 800b7d2:	f8d0 9000 	ldr.w	r9, [r0]
 800b7d6:	3508      	adds	r5, #8
 800b7d8:	fb26 3309 	smlad	r3, r6, r9, r3
 800b7dc:	6846      	ldr	r6, [r0, #4]
 800b7de:	3008      	adds	r0, #8
 800b7e0:	fb21 3306 	smlad	r3, r1, r6, r3
 800b7e4:	45a8      	cmp	r8, r5
 800b7e6:	d1f2      	bne.n	800b7ce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1f2>
 800b7e8:	9902      	ldr	r1, [sp, #8]
 800b7ea:	4439      	add	r1, r7
 800b7ec:	9102      	str	r1, [sp, #8]
 800b7ee:	f01e 0103 	ands.w	r1, lr, #3
 800b7f2:	d013      	beq.n	800b81c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 800b7f4:	9e02      	ldr	r6, [sp, #8]
 800b7f6:	f8b8 0000 	ldrh.w	r0, [r8]
 800b7fa:	8835      	ldrh	r5, [r6, #0]
 800b7fc:	2901      	cmp	r1, #1
 800b7fe:	fb15 3300 	smlabb	r3, r5, r0, r3
 800b802:	d00b      	beq.n	800b81c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 800b804:	8875      	ldrh	r5, [r6, #2]
 800b806:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800b80a:	2902      	cmp	r1, #2
 800b80c:	fb15 3300 	smlabb	r3, r5, r0, r3
 800b810:	d004      	beq.n	800b81c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 800b812:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800b816:	88b1      	ldrh	r1, [r6, #4]
 800b818:	fb10 3301 	smlabb	r3, r0, r1, r3
 800b81c:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800b81e:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b820:	f9b1 1000 	ldrsh.w	r1, [r1]
 800b824:	6805      	ldr	r5, [r0, #0]
 800b826:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800b828:	2915      	cmp	r1, #21
 800b82a:	6800      	ldr	r0, [r0, #0]
 800b82c:	dd5f      	ble.n	800b8ee <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x312>
 800b82e:	1e8f      	subs	r7, r1, #2
 800b830:	1e4e      	subs	r6, r1, #1
 800b832:	2101      	movs	r1, #1
 800b834:	40b9      	lsls	r1, r7
 800b836:	fb53 1305 	smmla	r3, r3, r5, r1
 800b83a:	4133      	asrs	r3, r6
 800b83c:	4403      	add	r3, r0
 800b83e:	f303 0307 	ssat	r3, #8, r3
 800b842:	b25b      	sxtb	r3, r3
 800b844:	4621      	mov	r1, r4
 800b846:	f801 3b01 	strb.w	r3, [r1], #1
 800b84a:	460c      	mov	r4, r1
 800b84c:	2a00      	cmp	r2, #0
 800b84e:	d047      	beq.n	800b8e0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x304>
 800b850:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800b852:	fb0c f303 	mul.w	r3, ip, r3
 800b856:	f1c3 0301 	rsb	r3, r3, #1
 800b85a:	18e0      	adds	r0, r4, r3
 800b85c:	b013      	add	sp, #76	@ 0x4c
 800b85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b862:	2800      	cmp	r0, #0
 800b864:	dd1b      	ble.n	800b89e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c2>
 800b866:	004b      	lsls	r3, r1, #1
 800b868:	fb53 c30e 	smmla	r3, r3, lr, ip
 800b86c:	4103      	asrs	r3, r0
 800b86e:	f303 0307 	ssat	r3, #8, r3
 800b872:	b25b      	sxtb	r3, r3
 800b874:	f88a 3000 	strb.w	r3, [sl]
 800b878:	f937 0c02 	ldrsh.w	r0, [r7, #-2]
 800b87c:	2815      	cmp	r0, #21
 800b87e:	f73f af60 	bgt.w	800b742 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x166>
 800b882:	2800      	cmp	r0, #0
 800b884:	dd18      	ble.n	800b8b8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2dc>
 800b886:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800b88a:	f858 1c04 	ldr.w	r1, [r8, #-4]
 800b88e:	0052      	lsls	r2, r2, #1
 800b890:	fb52 1203 	smmla	r2, r2, r3, r1
 800b894:	4102      	asrs	r2, r0
 800b896:	f302 0307 	ssat	r3, #8, r2
 800b89a:	b25b      	sxtb	r3, r3
 800b89c:	e761      	b.n	800b762 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x186>
 800b89e:	f1c0 0301 	rsb	r3, r0, #1
 800b8a2:	fa01 f303 	lsl.w	r3, r1, r3
 800b8a6:	f303 031f 	ssat	r3, #32, r3
 800b8aa:	fb53 f31e 	smmulr	r3, r3, lr
 800b8ae:	4463      	add	r3, ip
 800b8b0:	f303 0307 	ssat	r3, #8, r3
 800b8b4:	b25b      	sxtb	r3, r3
 800b8b6:	e73d      	b.n	800b734 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x158>
 800b8b8:	f1c0 0001 	rsb	r0, r0, #1
 800b8bc:	4082      	lsls	r2, r0
 800b8be:	f302 021f 	ssat	r2, #32, r2
 800b8c2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800b8c6:	fb52 f213 	smmulr	r2, r2, r3
 800b8ca:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	f303 0307 	ssat	r3, #8, r3
 800b8d4:	b25b      	sxtb	r3, r3
 800b8d6:	e744      	b.n	800b762 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x186>
 800b8d8:	9b02      	ldr	r3, [sp, #8]
 800b8da:	e6f2      	b.n	800b6c2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xe6>
 800b8dc:	2001      	movs	r0, #1
 800b8de:	e692      	b.n	800b606 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a>
 800b8e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8e2:	eba3 030c 	sub.w	r3, r3, ip
 800b8e6:	18e0      	adds	r0, r4, r3
 800b8e8:	b013      	add	sp, #76	@ 0x4c
 800b8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ee:	2900      	cmp	r1, #0
 800b8f0:	dd07      	ble.n	800b902 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x326>
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	fb53 0305 	smmla	r3, r3, r5, r0
 800b8f8:	410b      	asrs	r3, r1
 800b8fa:	f303 0307 	ssat	r3, #8, r3
 800b8fe:	b25b      	sxtb	r3, r3
 800b900:	e7a0      	b.n	800b844 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x268>
 800b902:	f1c1 0101 	rsb	r1, r1, #1
 800b906:	408b      	lsls	r3, r1
 800b908:	f303 031f 	ssat	r3, #32, r3
 800b90c:	fb53 f315 	smmulr	r3, r3, r5
 800b910:	4403      	add	r3, r0
 800b912:	f303 0307 	ssat	r3, #8, r3
 800b916:	b25b      	sxtb	r3, r3
 800b918:	e794      	b.n	800b844 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x268>
 800b91a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b91e:	e766      	b.n	800b7ee <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x212>

0800b920 <weights_2channels_prefetch>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	b087      	sub	sp, #28
 800b926:	2b00      	cmp	r3, #0
 800b928:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800b92c:	9302      	str	r3, [sp, #8]
 800b92e:	f340 80ed 	ble.w	800bb0c <weights_2channels_prefetch+0x1ec>
 800b932:	f1a8 0310 	sub.w	r3, r8, #16
 800b936:	091b      	lsrs	r3, r3, #4
 800b938:	3301      	adds	r3, #1
 800b93a:	460f      	mov	r7, r1
 800b93c:	0119      	lsls	r1, r3, #4
 800b93e:	019b      	lsls	r3, r3, #6
 800b940:	4616      	mov	r6, r2
 800b942:	9304      	str	r3, [sp, #16]
 800b944:	f1a8 0203 	sub.w	r2, r8, #3
 800b948:	f04f 0e00 	mov.w	lr, #0
 800b94c:	f1a8 0304 	sub.w	r3, r8, #4
 800b950:	460d      	mov	r5, r1
 800b952:	9203      	str	r2, [sp, #12]
 800b954:	9305      	str	r3, [sp, #20]
 800b956:	4671      	mov	r1, lr
 800b958:	f1b8 0f0f 	cmp.w	r8, #15
 800b95c:	f340 80db 	ble.w	800bb16 <weights_2channels_prefetch+0x1f6>
 800b960:	1944      	adds	r4, r0, r5
 800b962:	4633      	mov	r3, r6
 800b964:	463a      	mov	r2, r7
 800b966:	f8d0 e000 	ldr.w	lr, [r0]
 800b96a:	f8d2 c000 	ldr.w	ip, [r2]
 800b96e:	ea4f 293e 	mov.w	r9, lr, ror #8
 800b972:	fa2f fe8e 	sxtb16	lr, lr
 800b976:	f8c3 e000 	str.w	lr, [r3]
 800b97a:	fa2f fe89 	sxtb16	lr, r9
 800b97e:	f8c3 e004 	str.w	lr, [r3, #4]
 800b982:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800b986:	fa2f fc8c 	sxtb16	ip, ip
 800b98a:	f8c3 c008 	str.w	ip, [r3, #8]
 800b98e:	fa2f fc8e 	sxtb16	ip, lr
 800b992:	f8c3 c00c 	str.w	ip, [r3, #12]
 800b996:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800b99a:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800b99e:	ea4f 293e 	mov.w	r9, lr, ror #8
 800b9a2:	fa2f fe8e 	sxtb16	lr, lr
 800b9a6:	f8c3 e010 	str.w	lr, [r3, #16]
 800b9aa:	fa2f fe89 	sxtb16	lr, r9
 800b9ae:	f8c3 e014 	str.w	lr, [r3, #20]
 800b9b2:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800b9b6:	fa2f fc8c 	sxtb16	ip, ip
 800b9ba:	f8c3 c018 	str.w	ip, [r3, #24]
 800b9be:	fa2f fc8e 	sxtb16	ip, lr
 800b9c2:	f8c3 c01c 	str.w	ip, [r3, #28]
 800b9c6:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800b9ca:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b9ce:	ea4f 293e 	mov.w	r9, lr, ror #8
 800b9d2:	fa2f fe8e 	sxtb16	lr, lr
 800b9d6:	f8c3 e020 	str.w	lr, [r3, #32]
 800b9da:	fa2f fe89 	sxtb16	lr, r9
 800b9de:	f8c3 e024 	str.w	lr, [r3, #36]	@ 0x24
 800b9e2:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800b9e6:	fa2f fc8c 	sxtb16	ip, ip
 800b9ea:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
 800b9ee:	fa2f fc8e 	sxtb16	ip, lr
 800b9f2:	f8c3 c02c 	str.w	ip, [r3, #44]	@ 0x2c
 800b9f6:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800b9fa:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800b9fe:	3010      	adds	r0, #16
 800ba00:	42a0      	cmp	r0, r4
 800ba02:	ea4f 293e 	mov.w	r9, lr, ror #8
 800ba06:	f102 0210 	add.w	r2, r2, #16
 800ba0a:	fa2f fe8e 	sxtb16	lr, lr
 800ba0e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ba12:	f843 ec10 	str.w	lr, [r3, #-16]
 800ba16:	fa2f fe89 	sxtb16	lr, r9
 800ba1a:	f843 ec0c 	str.w	lr, [r3, #-12]
 800ba1e:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800ba22:	fa2f fc8c 	sxtb16	ip, ip
 800ba26:	f843 cc08 	str.w	ip, [r3, #-8]
 800ba2a:	fa2f fc8e 	sxtb16	ip, lr
 800ba2e:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba32:	d198      	bne.n	800b966 <weights_2channels_prefetch+0x46>
 800ba34:	9b04      	ldr	r3, [sp, #16]
 800ba36:	442f      	add	r7, r5
 800ba38:	441e      	add	r6, r3
 800ba3a:	46ae      	mov	lr, r5
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	4573      	cmp	r3, lr
 800ba40:	dd67      	ble.n	800bb12 <weights_2channels_prefetch+0x1f2>
 800ba42:	9b05      	ldr	r3, [sp, #20]
 800ba44:	eba3 090e 	sub.w	r9, r3, lr
 800ba48:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800ba4c:	e9cd 1900 	strd	r1, r9, [sp]
 800ba50:	f109 0a01 	add.w	sl, r9, #1
 800ba54:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 800ba58:	eb04 008a 	add.w	r0, r4, sl, lsl #2
 800ba5c:	4633      	mov	r3, r6
 800ba5e:	46bc      	mov	ip, r7
 800ba60:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba64:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba68:	4284      	cmp	r4, r0
 800ba6a:	ea4f 2931 	mov.w	r9, r1, ror #8
 800ba6e:	f103 0310 	add.w	r3, r3, #16
 800ba72:	fa2f f181 	sxtb16	r1, r1
 800ba76:	fa2f f989 	sxtb16	r9, r9
 800ba7a:	f843 1c10 	str.w	r1, [r3, #-16]
 800ba7e:	f843 9c0c 	str.w	r9, [r3, #-12]
 800ba82:	ea4f 2132 	mov.w	r1, r2, ror #8
 800ba86:	fa2f f282 	sxtb16	r2, r2
 800ba8a:	fa2f f181 	sxtb16	r1, r1
 800ba8e:	f843 2c08 	str.w	r2, [r3, #-8]
 800ba92:	f843 1c04 	str.w	r1, [r3, #-4]
 800ba96:	d1e3      	bne.n	800ba60 <weights_2channels_prefetch+0x140>
 800ba98:	e9dd 1900 	ldrd	r1, r9, [sp]
 800ba9c:	f10e 0e04 	add.w	lr, lr, #4
 800baa0:	eb06 160a 	add.w	r6, r6, sl, lsl #4
 800baa4:	445f      	add	r7, fp
 800baa6:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800baaa:	45f0      	cmp	r8, lr
 800baac:	dd29      	ble.n	800bb02 <weights_2channels_prefetch+0x1e2>
 800baae:	f990 3000 	ldrsb.w	r3, [r0]
 800bab2:	8033      	strh	r3, [r6, #0]
 800bab4:	f997 3000 	ldrsb.w	r3, [r7]
 800bab8:	8073      	strh	r3, [r6, #2]
 800baba:	f10e 0301 	add.w	r3, lr, #1
 800babe:	4598      	cmp	r8, r3
 800bac0:	dd19      	ble.n	800baf6 <weights_2channels_prefetch+0x1d6>
 800bac2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bac6:	80b3      	strh	r3, [r6, #4]
 800bac8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800bacc:	80f3      	strh	r3, [r6, #6]
 800bace:	f10e 0302 	add.w	r3, lr, #2
 800bad2:	4598      	cmp	r8, r3
 800bad4:	dd0f      	ble.n	800baf6 <weights_2channels_prefetch+0x1d6>
 800bad6:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800bada:	8133      	strh	r3, [r6, #8]
 800badc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bae0:	8173      	strh	r3, [r6, #10]
 800bae2:	f10e 0303 	add.w	r3, lr, #3
 800bae6:	4598      	cmp	r8, r3
 800bae8:	dd05      	ble.n	800baf6 <weights_2channels_prefetch+0x1d6>
 800baea:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800baee:	81b3      	strh	r3, [r6, #12]
 800baf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800baf4:	81f3      	strh	r3, [r6, #14]
 800baf6:	eba8 0e0e 	sub.w	lr, r8, lr
 800bafa:	4470      	add	r0, lr
 800bafc:	4477      	add	r7, lr
 800bafe:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800bb02:	9b02      	ldr	r3, [sp, #8]
 800bb04:	3101      	adds	r1, #1
 800bb06:	428b      	cmp	r3, r1
 800bb08:	f47f af26 	bne.w	800b958 <weights_2channels_prefetch+0x38>
 800bb0c:	b007      	add	sp, #28
 800bb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb12:	4620      	mov	r0, r4
 800bb14:	e7c9      	b.n	800baaa <weights_2channels_prefetch+0x18a>
 800bb16:	4604      	mov	r4, r0
 800bb18:	f04f 0e00 	mov.w	lr, #0
 800bb1c:	e78e      	b.n	800ba3c <weights_2channels_prefetch+0x11c>
 800bb1e:	bf00      	nop

0800bb20 <st_sssa8_ch_fullW_prefetch>:
 800bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	b087      	sub	sp, #28
 800bb26:	4680      	mov	r8, r0
 800bb28:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
 800bb2c:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 800bb30:	eb00 040c 	add.w	r4, r0, ip
 800bb34:	1048      	asrs	r0, r1, #1
 800bb36:	d021      	beq.n	800bb7c <st_sssa8_ch_fullW_prefetch+0x5c>
 800bb38:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800bb3c:	4646      	mov	r6, r8
 800bb3e:	4655      	mov	r5, sl
 800bb40:	ea4f 094c 	mov.w	r9, ip, lsl #1
 800bb44:	ea4f 0b8c 	mov.w	fp, ip, lsl #2
 800bb48:	4607      	mov	r7, r0
 800bb4a:	9105      	str	r1, [sp, #20]
 800bb4c:	4690      	mov	r8, r2
 800bb4e:	469a      	mov	sl, r3
 800bb50:	462a      	mov	r2, r5
 800bb52:	4621      	mov	r1, r4
 800bb54:	4630      	mov	r0, r6
 800bb56:	f8cd a000 	str.w	sl, [sp]
 800bb5a:	4643      	mov	r3, r8
 800bb5c:	f7ff fee0 	bl	800b920 <weights_2channels_prefetch>
 800bb60:	3f01      	subs	r7, #1
 800bb62:	445d      	add	r5, fp
 800bb64:	444c      	add	r4, r9
 800bb66:	444e      	add	r6, r9
 800bb68:	d1f2      	bne.n	800bb50 <st_sssa8_ch_fullW_prefetch+0x30>
 800bb6a:	e9dd 0803 	ldrd	r0, r8, [sp, #12]
 800bb6e:	e9dd ca10 	ldrd	ip, sl, [sp, #64]	@ 0x40
 800bb72:	9905      	ldr	r1, [sp, #20]
 800bb74:	fb00 aa0b 	mla	sl, r0, fp, sl
 800bb78:	fb00 8809 	mla	r8, r0, r9, r8
 800bb7c:	07cb      	lsls	r3, r1, #31
 800bb7e:	d509      	bpl.n	800bb94 <st_sssa8_ch_fullW_prefetch+0x74>
 800bb80:	f1bc 0f00 	cmp.w	ip, #0
 800bb84:	dd06      	ble.n	800bb94 <st_sssa8_ch_fullW_prefetch+0x74>
 800bb86:	44c4      	add	ip, r8
 800bb88:	f918 3b01 	ldrsb.w	r3, [r8], #1
 800bb8c:	f82a 3b02 	strh.w	r3, [sl], #2
 800bb90:	45c4      	cmp	ip, r8
 800bb92:	d1f9      	bne.n	800bb88 <st_sssa8_ch_fullW_prefetch+0x68>
 800bb94:	b007      	add	sp, #28
 800bb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb9a:	bf00      	nop

0800bb9c <st_int8_to_f32>:
 800bb9c:	b530      	push	{r4, r5, lr}
 800bb9e:	0894      	lsrs	r4, r2, #2
 800bba0:	d036      	beq.n	800bc10 <st_int8_to_f32+0x74>
 800bba2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800bc60 <st_int8_to_f32+0xc4>
 800bba6:	1d03      	adds	r3, r0, #4
 800bba8:	f101 0c10 	add.w	ip, r1, #16
 800bbac:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800bbb0:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 800bbb4:	ee07 ea90 	vmov	s15, lr
 800bbb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbbc:	469e      	mov	lr, r3
 800bbbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbc2:	3304      	adds	r3, #4
 800bbc4:	ed4c 7a04 	vstr	s15, [ip, #-16]
 800bbc8:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 800bbcc:	ee07 5a90 	vmov	s15, r5
 800bbd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbd4:	4586      	cmp	lr, r0
 800bbd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbda:	f10c 0c10 	add.w	ip, ip, #16
 800bbde:	ed4c 7a07 	vstr	s15, [ip, #-28]	@ 0xffffffe4
 800bbe2:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 800bbe6:	ee07 5a90 	vmov	s15, r5
 800bbea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbf2:	ed4c 7a06 	vstr	s15, [ip, #-24]	@ 0xffffffe8
 800bbf6:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 800bbfa:	ee07 5a90 	vmov	s15, r5
 800bbfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc02:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc06:	ed4c 7a05 	vstr	s15, [ip, #-20]	@ 0xffffffec
 800bc0a:	d1d1      	bne.n	800bbb0 <st_int8_to_f32+0x14>
 800bc0c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800bc10:	f012 0203 	ands.w	r2, r2, #3
 800bc14:	d023      	beq.n	800bc5e <st_int8_to_f32+0xc2>
 800bc16:	f990 3000 	ldrsb.w	r3, [r0]
 800bc1a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800bc60 <st_int8_to_f32+0xc4>
 800bc1e:	ee07 3a90 	vmov	s15, r3
 800bc22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc26:	2a01      	cmp	r2, #1
 800bc28:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc2c:	edc1 7a00 	vstr	s15, [r1]
 800bc30:	d015      	beq.n	800bc5e <st_int8_to_f32+0xc2>
 800bc32:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bc36:	ee07 3a90 	vmov	s15, r3
 800bc3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc3e:	2a02      	cmp	r2, #2
 800bc40:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc44:	edc1 7a01 	vstr	s15, [r1, #4]
 800bc48:	d009      	beq.n	800bc5e <st_int8_to_f32+0xc2>
 800bc4a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800bc4e:	ee07 3a90 	vmov	s15, r3
 800bc52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc5a:	edc1 7a02 	vstr	s15, [r1, #8]
 800bc5e:	bd30      	pop	{r4, r5, pc}
 800bc60:	3c000000 	.word	0x3c000000
	...

0800bc70 <st_sssa8_dense_loop>:
 800bc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc74:	b086      	sub	sp, #24
 800bc76:	bf00      	nop
 800bc78:	bf00      	nop
 800bc7a:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
 800bc7e:	f1bb 0f00 	cmp.w	fp, #0
 800bc82:	bfcc      	ite	gt
 800bc84:	f04f 0c00 	movgt.w	ip, #0
 800bc88:	f04f 3cff 	movle.w	ip, #4294967295
 800bc8c:	f1bb 0f15 	cmp.w	fp, #21
 800bc90:	bfc8      	it	gt
 800bc92:	f04f 0c01 	movgt.w	ip, #1
 800bc96:	f8cd c000 	str.w	ip, [sp]
 800bc9a:	9001      	str	r0, [sp, #4]
 800bc9c:	4692      	mov	sl, r2
 800bc9e:	4699      	mov	r9, r3
 800bca0:	f8cd 9014 	str.w	r9, [sp, #20]
 800bca4:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 800bca8:	460f      	mov	r7, r1
 800bcaa:	ea4f 06aa 	mov.w	r6, sl, asr #2
 800bcae:	9603      	str	r6, [sp, #12]
 800bcb0:	f00a 0603 	and.w	r6, sl, #3
 800bcb4:	9604      	str	r6, [sp, #16]
 800bcb6:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 800bcba:	eb0b 0284 	add.w	r2, fp, r4, lsl #2
 800bcbe:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800bcc2:	9202      	str	r2, [sp, #8]
 800bcc4:	2c00      	cmp	r4, #0
 800bcc6:	f000 8132 	beq.w	800bf2e <Exit>

0800bcca <MainLoop>:
 800bcca:	9e03      	ldr	r6, [sp, #12]
 800bccc:	f8dd e014 	ldr.w	lr, [sp, #20]
 800bcd0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bcd4:	e8be 003f 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5}
 800bcd8:	f8cd e014 	str.w	lr, [sp, #20]
 800bcdc:	3e01      	subs	r6, #1
 800bcde:	dd7d      	ble.n	800bddc <FinalLoop>

0800bce0 <Loop4>:
 800bce0:	f857 eb04 	ldr.w	lr, [r7], #4
 800bce4:	e8b8 0600 	ldmia.w	r8!, {r9, sl}
 800bce8:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800bcec:	fa2f fe8e 	sxtb16	lr, lr
 800bcf0:	fb2c 000a 	smlad	r0, ip, sl, r0
 800bcf4:	fb2e 0009 	smlad	r0, lr, r9, r0
 800bcf8:	f857 eb04 	ldr.w	lr, [r7], #4
 800bcfc:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800bd00:	fa2f fe8e 	sxtb16	lr, lr
 800bd04:	fb2c 110a 	smlad	r1, ip, sl, r1
 800bd08:	fb2e 1109 	smlad	r1, lr, r9, r1
 800bd0c:	f857 eb04 	ldr.w	lr, [r7], #4
 800bd10:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800bd14:	fa2f fe8e 	sxtb16	lr, lr
 800bd18:	fb2c 220a 	smlad	r2, ip, sl, r2
 800bd1c:	fb2e 2209 	smlad	r2, lr, r9, r2
 800bd20:	f857 eb04 	ldr.w	lr, [r7], #4
 800bd24:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800bd28:	fa2f fe8e 	sxtb16	lr, lr
 800bd2c:	fb2c 330a 	smlad	r3, ip, sl, r3
 800bd30:	fb2e 3309 	smlad	r3, lr, r9, r3
 800bd34:	f857 eb04 	ldr.w	lr, [r7], #4
 800bd38:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800bd3c:	fa2f fe8e 	sxtb16	lr, lr
 800bd40:	fb2c 440a 	smlad	r4, ip, sl, r4
 800bd44:	fb2e 4409 	smlad	r4, lr, r9, r4
 800bd48:	f857 eb04 	ldr.w	lr, [r7], #4
 800bd4c:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800bd50:	fa2f fe8e 	sxtb16	lr, lr
 800bd54:	fb2c 550a 	smlad	r5, ip, sl, r5
 800bd58:	fb2e 5509 	smlad	r5, lr, r9, r5
 800bd5c:	f857 eb04 	ldr.w	lr, [r7], #4
 800bd60:	e8b8 0600 	ldmia.w	r8!, {r9, sl}
 800bd64:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800bd68:	fa2f fe8e 	sxtb16	lr, lr
 800bd6c:	fb2c 000a 	smlad	r0, ip, sl, r0
 800bd70:	fb2e 0009 	smlad	r0, lr, r9, r0
 800bd74:	f857 eb04 	ldr.w	lr, [r7], #4
 800bd78:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800bd7c:	fa2f fe8e 	sxtb16	lr, lr
 800bd80:	fb2c 110a 	smlad	r1, ip, sl, r1
 800bd84:	fb2e 1109 	smlad	r1, lr, r9, r1
 800bd88:	f857 eb04 	ldr.w	lr, [r7], #4
 800bd8c:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800bd90:	fa2f fe8e 	sxtb16	lr, lr
 800bd94:	fb2c 220a 	smlad	r2, ip, sl, r2
 800bd98:	fb2e 2209 	smlad	r2, lr, r9, r2
 800bd9c:	f857 eb04 	ldr.w	lr, [r7], #4
 800bda0:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800bda4:	fa2f fe8e 	sxtb16	lr, lr
 800bda8:	fb2c 330a 	smlad	r3, ip, sl, r3
 800bdac:	fb2e 3309 	smlad	r3, lr, r9, r3
 800bdb0:	f857 eb04 	ldr.w	lr, [r7], #4
 800bdb4:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800bdb8:	fa2f fe8e 	sxtb16	lr, lr
 800bdbc:	fb2c 440a 	smlad	r4, ip, sl, r4
 800bdc0:	fb2e 4409 	smlad	r4, lr, r9, r4
 800bdc4:	f857 eb04 	ldr.w	lr, [r7], #4
 800bdc8:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800bdcc:	fa2f fe8e 	sxtb16	lr, lr
 800bdd0:	fb2c 550a 	smlad	r5, ip, sl, r5
 800bdd4:	fb2e 5509 	smlad	r5, lr, r9, r5
 800bdd8:	3e02      	subs	r6, #2
 800bdda:	dc81      	bgt.n	800bce0 <Loop4>

0800bddc <FinalLoop>:
 800bddc:	2e00      	cmp	r6, #0
 800bdde:	db3d      	blt.n	800be5c <EndLoop4>
 800bde0:	f857 eb04 	ldr.w	lr, [r7], #4
 800bde4:	e8b8 0600 	ldmia.w	r8!, {r9, sl}
 800bde8:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800bdec:	fa2f fe8e 	sxtb16	lr, lr
 800bdf0:	fb2c 000a 	smlad	r0, ip, sl, r0
 800bdf4:	fb2e 0009 	smlad	r0, lr, r9, r0
 800bdf8:	f857 eb04 	ldr.w	lr, [r7], #4
 800bdfc:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800be00:	fa2f fe8e 	sxtb16	lr, lr
 800be04:	fb2c 110a 	smlad	r1, ip, sl, r1
 800be08:	fb2e 1109 	smlad	r1, lr, r9, r1
 800be0c:	f857 eb04 	ldr.w	lr, [r7], #4
 800be10:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800be14:	fa2f fe8e 	sxtb16	lr, lr
 800be18:	fb2c 220a 	smlad	r2, ip, sl, r2
 800be1c:	fb2e 2209 	smlad	r2, lr, r9, r2
 800be20:	f857 eb04 	ldr.w	lr, [r7], #4
 800be24:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800be28:	fa2f fe8e 	sxtb16	lr, lr
 800be2c:	fb2c 330a 	smlad	r3, ip, sl, r3
 800be30:	fb2e 3309 	smlad	r3, lr, r9, r3
 800be34:	f857 eb04 	ldr.w	lr, [r7], #4
 800be38:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800be3c:	fa2f fe8e 	sxtb16	lr, lr
 800be40:	fb2c 440a 	smlad	r4, ip, sl, r4
 800be44:	fb2e 4409 	smlad	r4, lr, r9, r4
 800be48:	f857 eb04 	ldr.w	lr, [r7], #4
 800be4c:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800be50:	fa2f fe8e 	sxtb16	lr, lr
 800be54:	fb2c 550a 	smlad	r5, ip, sl, r5
 800be58:	fb2e 5509 	smlad	r5, lr, r9, r5

0800be5c <EndLoop4>:
 800be5c:	9e04      	ldr	r6, [sp, #16]
 800be5e:	b1ee      	cbz	r6, 800be9c <OutputFormatting>

0800be60 <Loop1>:
 800be60:	f938 9b02 	ldrsh.w	r9, [r8], #2
 800be64:	f997 e000 	ldrsb.w	lr, [r7]
 800be68:	f997 c001 	ldrsb.w	ip, [r7, #1]
 800be6c:	fb1e 0009 	smlabb	r0, lr, r9, r0
 800be70:	fb1c 1109 	smlabb	r1, ip, r9, r1
 800be74:	f997 e002 	ldrsb.w	lr, [r7, #2]
 800be78:	f997 c003 	ldrsb.w	ip, [r7, #3]
 800be7c:	fb1e 2209 	smlabb	r2, lr, r9, r2
 800be80:	fb1c 3309 	smlabb	r3, ip, r9, r3
 800be84:	f997 e004 	ldrsb.w	lr, [r7, #4]
 800be88:	f997 c005 	ldrsb.w	ip, [r7, #5]
 800be8c:	fb1e 4409 	smlabb	r4, lr, r9, r4
 800be90:	fb1c 5509 	smlabb	r5, ip, r9, r5
 800be94:	3e01      	subs	r6, #1
 800be96:	f107 0706 	add.w	r7, r7, #6
 800be9a:	d1e1      	bne.n	800be60 <Loop1>

0800be9c <OutputFormatting>:
 800be9c:	9e00      	ldr	r6, [sp, #0]
 800be9e:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 800bea2:	f8dd c048 	ldr.w	ip, [sp, #72]	@ 0x48
 800bea6:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 800beaa:	2e00      	cmp	r6, #0
 800beac:	d142      	bne.n	800bf34 <OutputFormatting_ex>
 800beae:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800beb2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800beb6:	fb50 a00e 	smmla	r0, r0, lr, sl
 800beba:	fb51 a10e 	smmla	r1, r1, lr, sl
 800bebe:	fa40 f00c 	asr.w	r0, r0, ip
 800bec2:	fa41 f10c 	asr.w	r1, r1, ip
 800bec6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800beca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bece:	fb52 a20e 	smmla	r2, r2, lr, sl
 800bed2:	fb53 a30e 	smmla	r3, r3, lr, sl
 800bed6:	fa42 f20c 	asr.w	r2, r2, ip
 800beda:	fa43 f30c 	asr.w	r3, r3, ip
 800bede:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800bee2:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800bee6:	fb54 a40e 	smmla	r4, r4, lr, sl
 800beea:	fb55 a50e 	smmla	r5, r5, lr, sl
 800beee:	fa44 f40c 	asr.w	r4, r4, ip
 800bef2:	fa45 f50c 	asr.w	r5, r5, ip

0800bef6 <EndScaling>:
 800bef6:	f300 0007 	ssat	r0, #8, r0
 800befa:	f301 0107 	ssat	r1, #8, r1
 800befe:	f302 0207 	ssat	r2, #8, r2
 800bf02:	f303 0307 	ssat	r3, #8, r3
 800bf06:	f304 0407 	ssat	r4, #8, r4
 800bf0a:	f305 0507 	ssat	r5, #8, r5
 800bf0e:	f80b 0b01 	strb.w	r0, [fp], #1
 800bf12:	f80b 1b01 	strb.w	r1, [fp], #1
 800bf16:	f80b 2b01 	strb.w	r2, [fp], #1
 800bf1a:	f80b 3b01 	strb.w	r3, [fp], #1
 800bf1e:	f80b 4b01 	strb.w	r4, [fp], #1
 800bf22:	9b02      	ldr	r3, [sp, #8]
 800bf24:	f80b 5b01 	strb.w	r5, [fp], #1
 800bf28:	459b      	cmp	fp, r3
 800bf2a:	f47f aece 	bne.w	800bcca <MainLoop>

0800bf2e <Exit>:
 800bf2e:	b006      	add	sp, #24
 800bf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf34 <OutputFormatting_ex>:
 800bf34:	f116 0801 	adds.w	r8, r6, #1
 800bf38:	d03c      	beq.n	800bfb4 <OutputFormatting_Neg>
 800bf3a:	f04f 0801 	mov.w	r8, #1
 800bf3e:	fa08 f80c 	lsl.w	r8, r8, ip
 800bf42:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800bf46:	fb50 800e 	smmla	r0, r0, lr, r8
 800bf4a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800bf4e:	fa40 f00c 	asr.w	r0, r0, ip
 800bf52:	4450      	add	r0, sl
 800bf54:	fb51 810e 	smmla	r1, r1, lr, r8
 800bf58:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bf5c:	fa41 f10c 	asr.w	r1, r1, ip
 800bf60:	4451      	add	r1, sl
 800bf62:	f04f 0801 	mov.w	r8, #1
 800bf66:	fa08 f80c 	lsl.w	r8, r8, ip
 800bf6a:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800bf6e:	fb52 820e 	smmla	r2, r2, lr, r8
 800bf72:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bf76:	fa42 f20c 	asr.w	r2, r2, ip
 800bf7a:	4452      	add	r2, sl
 800bf7c:	fb53 830e 	smmla	r3, r3, lr, r8
 800bf80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf84:	fa43 f30c 	asr.w	r3, r3, ip
 800bf88:	4453      	add	r3, sl
 800bf8a:	f04f 0801 	mov.w	r8, #1
 800bf8e:	fa08 f80c 	lsl.w	r8, r8, ip
 800bf92:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800bf96:	fb54 840e 	smmla	r4, r4, lr, r8
 800bf9a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800bf9e:	fa44 f40c 	asr.w	r4, r4, ip
 800bfa2:	4454      	add	r4, sl
 800bfa4:	fb55 850e 	smmla	r5, r5, lr, r8
 800bfa8:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800bfac:	fa45 f50c 	asr.w	r5, r5, ip
 800bfb0:	4455      	add	r5, sl
 800bfb2:	e7a0      	b.n	800bef6 <EndScaling>

0800bfb4 <OutputFormatting_Neg>:
 800bfb4:	f1cc 0801 	rsb	r8, ip, #1
 800bfb8:	fa00 f008 	lsl.w	r0, r0, r8
 800bfbc:	f300 001f 	ssat	r0, #32, r0
 800bfc0:	fb50 f01e 	smmulr	r0, r0, lr
 800bfc4:	fa01 f108 	lsl.w	r1, r1, r8
 800bfc8:	f301 011f 	ssat	r1, #32, r1
 800bfcc:	fb51 f11e 	smmulr	r1, r1, lr
 800bfd0:	4450      	add	r0, sl
 800bfd2:	4451      	add	r1, sl
 800bfd4:	f1cc 0801 	rsb	r8, ip, #1
 800bfd8:	fa02 f208 	lsl.w	r2, r2, r8
 800bfdc:	f302 021f 	ssat	r2, #32, r2
 800bfe0:	fb52 f21e 	smmulr	r2, r2, lr
 800bfe4:	fa03 f308 	lsl.w	r3, r3, r8
 800bfe8:	f303 031f 	ssat	r3, #32, r3
 800bfec:	fb53 f31e 	smmulr	r3, r3, lr
 800bff0:	4452      	add	r2, sl
 800bff2:	4453      	add	r3, sl
 800bff4:	f1cc 0801 	rsb	r8, ip, #1
 800bff8:	fa04 f408 	lsl.w	r4, r4, r8
 800bffc:	f304 041f 	ssat	r4, #32, r4
 800c000:	fb54 f41e 	smmulr	r4, r4, lr
 800c004:	fa05 f508 	lsl.w	r5, r5, r8
 800c008:	f305 051f 	ssat	r5, #32, r5
 800c00c:	fb55 f51e 	smmulr	r5, r5, lr
 800c010:	4454      	add	r4, sl
 800c012:	4455      	add	r5, sl
 800c014:	e76f      	b.n	800bef6 <EndScaling>
 800c016:	bf00      	nop
 800c018:	f3af 8000 	nop.w
 800c01c:	f3af 8000 	nop.w

0800c020 <st_sssa8_dense_memopt_loop>:
 800c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c024:	b087      	sub	sp, #28
 800c026:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 800c02a:	f1bb 0f00 	cmp.w	fp, #0
 800c02e:	bfcc      	ite	gt
 800c030:	f04f 0c00 	movgt.w	ip, #0
 800c034:	f04f 3cff 	movle.w	ip, #4294967295
 800c038:	f1bb 0f15 	cmp.w	fp, #21
 800c03c:	bfc8      	it	gt
 800c03e:	f04f 0c01 	movgt.w	ip, #1
 800c042:	f8cd c000 	str.w	ip, [sp]
 800c046:	9001      	str	r0, [sp, #4]
 800c048:	4692      	mov	sl, r2
 800c04a:	4699      	mov	r9, r3
 800c04c:	f8cd 9014 	str.w	r9, [sp, #20]
 800c050:	f8dd b054 	ldr.w	fp, [sp, #84]	@ 0x54
 800c054:	460f      	mov	r7, r1
 800c056:	f8cd b018 	str.w	fp, [sp, #24]
 800c05a:	ea4f 06aa 	mov.w	r6, sl, asr #2
 800c05e:	9603      	str	r6, [sp, #12]
 800c060:	f00a 0603 	and.w	r6, sl, #3
 800c064:	9604      	str	r6, [sp, #16]
 800c066:	f8bd 4040 	ldrh.w	r4, [sp, #64]	@ 0x40
 800c06a:	eb0b 0284 	add.w	r2, fp, r4, lsl #2
 800c06e:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800c072:	9202      	str	r2, [sp, #8]
 800c074:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 800c076:	f1c5 0b00 	rsb	fp, r5, #0
 800c07a:	eacb 4b0b 	pkhbt	fp, fp, fp, lsl #16
 800c07e:	2c00      	cmp	r4, #0
 800c080:	f000 814c 	beq.w	800c31c <Exit_m>

0800c084 <MainLoop_m>:
 800c084:	9e03      	ldr	r6, [sp, #12]
 800c086:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c08a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c08e:	e8be 003f 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5}
 800c092:	f8cd e014 	str.w	lr, [sp, #20]
 800c096:	3e01      	subs	r6, #1
 800c098:	f340 808b 	ble.w	800c1b2 <FinalLoop_m>

0800c09c <Loop4_m>:
 800c09c:	f857 eb04 	ldr.w	lr, [r7], #4
 800c0a0:	f858 9b04 	ldr.w	r9, [r8], #4
 800c0a4:	ea4f 2a39 	mov.w	sl, r9, ror #8
 800c0a8:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c0ac:	fa2f fe8e 	sxtb16	lr, lr
 800c0b0:	fa2b f989 	sxtab16	r9, fp, r9
 800c0b4:	fa2b fa8a 	sxtab16	sl, fp, sl
 800c0b8:	fb2c 000a 	smlad	r0, ip, sl, r0
 800c0bc:	fb2e 0009 	smlad	r0, lr, r9, r0
 800c0c0:	f857 eb04 	ldr.w	lr, [r7], #4
 800c0c4:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c0c8:	fa2f fe8e 	sxtb16	lr, lr
 800c0cc:	fb2c 110a 	smlad	r1, ip, sl, r1
 800c0d0:	fb2e 1109 	smlad	r1, lr, r9, r1
 800c0d4:	f857 eb04 	ldr.w	lr, [r7], #4
 800c0d8:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c0dc:	fa2f fe8e 	sxtb16	lr, lr
 800c0e0:	fb2c 220a 	smlad	r2, ip, sl, r2
 800c0e4:	fb2e 2209 	smlad	r2, lr, r9, r2
 800c0e8:	f857 eb04 	ldr.w	lr, [r7], #4
 800c0ec:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c0f0:	fa2f fe8e 	sxtb16	lr, lr
 800c0f4:	fb2c 330a 	smlad	r3, ip, sl, r3
 800c0f8:	fb2e 3309 	smlad	r3, lr, r9, r3
 800c0fc:	f857 eb04 	ldr.w	lr, [r7], #4
 800c100:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c104:	fa2f fe8e 	sxtb16	lr, lr
 800c108:	fb2c 440a 	smlad	r4, ip, sl, r4
 800c10c:	fb2e 4409 	smlad	r4, lr, r9, r4
 800c110:	f857 eb04 	ldr.w	lr, [r7], #4
 800c114:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c118:	fa2f fe8e 	sxtb16	lr, lr
 800c11c:	fb2c 550a 	smlad	r5, ip, sl, r5
 800c120:	fb2e 5509 	smlad	r5, lr, r9, r5
 800c124:	f857 eb04 	ldr.w	lr, [r7], #4
 800c128:	f858 9b04 	ldr.w	r9, [r8], #4
 800c12c:	ea4f 2a39 	mov.w	sl, r9, ror #8
 800c130:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c134:	fa2f fe8e 	sxtb16	lr, lr
 800c138:	fa2b f989 	sxtab16	r9, fp, r9
 800c13c:	fa2b fa8a 	sxtab16	sl, fp, sl
 800c140:	fb2c 000a 	smlad	r0, ip, sl, r0
 800c144:	fb2e 0009 	smlad	r0, lr, r9, r0
 800c148:	f857 eb04 	ldr.w	lr, [r7], #4
 800c14c:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c150:	fa2f fe8e 	sxtb16	lr, lr
 800c154:	fb2c 110a 	smlad	r1, ip, sl, r1
 800c158:	fb2e 1109 	smlad	r1, lr, r9, r1
 800c15c:	f857 eb04 	ldr.w	lr, [r7], #4
 800c160:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c164:	fa2f fe8e 	sxtb16	lr, lr
 800c168:	fb2c 220a 	smlad	r2, ip, sl, r2
 800c16c:	fb2e 2209 	smlad	r2, lr, r9, r2
 800c170:	f857 eb04 	ldr.w	lr, [r7], #4
 800c174:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c178:	fa2f fe8e 	sxtb16	lr, lr
 800c17c:	fb2c 330a 	smlad	r3, ip, sl, r3
 800c180:	fb2e 3309 	smlad	r3, lr, r9, r3
 800c184:	f857 eb04 	ldr.w	lr, [r7], #4
 800c188:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c18c:	fa2f fe8e 	sxtb16	lr, lr
 800c190:	fb2c 440a 	smlad	r4, ip, sl, r4
 800c194:	fb2e 4409 	smlad	r4, lr, r9, r4
 800c198:	f857 eb04 	ldr.w	lr, [r7], #4
 800c19c:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c1a0:	fa2f fe8e 	sxtb16	lr, lr
 800c1a4:	fb2c 550a 	smlad	r5, ip, sl, r5
 800c1a8:	fb2e 5509 	smlad	r5, lr, r9, r5
 800c1ac:	3e02      	subs	r6, #2
 800c1ae:	f73f af75 	bgt.w	800c09c <Loop4_m>

0800c1b2 <FinalLoop_m>:
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	db43      	blt.n	800c23e <EndLoop4_m>
 800c1b6:	f857 eb04 	ldr.w	lr, [r7], #4
 800c1ba:	f858 9b04 	ldr.w	r9, [r8], #4
 800c1be:	ea4f 2a39 	mov.w	sl, r9, ror #8
 800c1c2:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c1c6:	fa2f fe8e 	sxtb16	lr, lr
 800c1ca:	fa2b f989 	sxtab16	r9, fp, r9
 800c1ce:	fa2b fa8a 	sxtab16	sl, fp, sl
 800c1d2:	fb2c 000a 	smlad	r0, ip, sl, r0
 800c1d6:	fb2e 0009 	smlad	r0, lr, r9, r0
 800c1da:	f857 eb04 	ldr.w	lr, [r7], #4
 800c1de:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c1e2:	fa2f fe8e 	sxtb16	lr, lr
 800c1e6:	fb2c 110a 	smlad	r1, ip, sl, r1
 800c1ea:	fb2e 1109 	smlad	r1, lr, r9, r1
 800c1ee:	f857 eb04 	ldr.w	lr, [r7], #4
 800c1f2:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c1f6:	fa2f fe8e 	sxtb16	lr, lr
 800c1fa:	fb2c 220a 	smlad	r2, ip, sl, r2
 800c1fe:	fb2e 2209 	smlad	r2, lr, r9, r2
 800c202:	f857 eb04 	ldr.w	lr, [r7], #4
 800c206:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c20a:	fa2f fe8e 	sxtb16	lr, lr
 800c20e:	fb2c 330a 	smlad	r3, ip, sl, r3
 800c212:	fb2e 3309 	smlad	r3, lr, r9, r3
 800c216:	f857 eb04 	ldr.w	lr, [r7], #4
 800c21a:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c21e:	fa2f fe8e 	sxtb16	lr, lr
 800c222:	fb2c 440a 	smlad	r4, ip, sl, r4
 800c226:	fb2e 4409 	smlad	r4, lr, r9, r4
 800c22a:	f857 eb04 	ldr.w	lr, [r7], #4
 800c22e:	fa2f fc9e 	sxtb16	ip, lr, ror #8
 800c232:	fa2f fe8e 	sxtb16	lr, lr
 800c236:	fb2c 550a 	smlad	r5, ip, sl, r5
 800c23a:	fb2e 5509 	smlad	r5, lr, r9, r5

0800c23e <EndLoop4_m>:
 800c23e:	9e04      	ldr	r6, [sp, #16]
 800c240:	b30e      	cbz	r6, 800c286 <OutputFormatting_m>
 800c242:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48

0800c246 <Loop1_m>:
 800c246:	f918 9b01 	ldrsb.w	r9, [r8], #1
 800c24a:	f997 e000 	ldrsb.w	lr, [r7]
 800c24e:	f997 c001 	ldrsb.w	ip, [r7, #1]
 800c252:	eba9 090a 	sub.w	r9, r9, sl
 800c256:	fb1e 0009 	smlabb	r0, lr, r9, r0
 800c25a:	fb1c 1109 	smlabb	r1, ip, r9, r1
 800c25e:	f997 e002 	ldrsb.w	lr, [r7, #2]
 800c262:	f997 c003 	ldrsb.w	ip, [r7, #3]
 800c266:	fb1e 2209 	smlabb	r2, lr, r9, r2
 800c26a:	fb1c 3309 	smlabb	r3, ip, r9, r3
 800c26e:	f997 e004 	ldrsb.w	lr, [r7, #4]
 800c272:	f997 c005 	ldrsb.w	ip, [r7, #5]
 800c276:	fb1e 4409 	smlabb	r4, lr, r9, r4
 800c27a:	fb1c 5509 	smlabb	r5, ip, r9, r5
 800c27e:	3e01      	subs	r6, #1
 800c280:	f107 0706 	add.w	r7, r7, #6
 800c284:	dcdf      	bgt.n	800c246 <Loop1_m>

0800c286 <OutputFormatting_m>:
 800c286:	9e00      	ldr	r6, [sp, #0]
 800c288:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 800c28c:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 800c290:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 800c294:	2e00      	cmp	r6, #0
 800c296:	d144      	bne.n	800c322 <OutputFormatting_m_ex>
 800c298:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800c29c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c2a0:	fb50 a00e 	smmla	r0, r0, lr, sl
 800c2a4:	fb51 a10e 	smmla	r1, r1, lr, sl
 800c2a8:	fa40 f00c 	asr.w	r0, r0, ip
 800c2ac:	fa41 f10c 	asr.w	r1, r1, ip
 800c2b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c2b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c2b8:	fb52 a20e 	smmla	r2, r2, lr, sl
 800c2bc:	fb53 a30e 	smmla	r3, r3, lr, sl
 800c2c0:	fa42 f20c 	asr.w	r2, r2, ip
 800c2c4:	fa43 f30c 	asr.w	r3, r3, ip
 800c2c8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c2cc:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800c2d0:	fb54 a40e 	smmla	r4, r4, lr, sl
 800c2d4:	fb55 a50e 	smmla	r5, r5, lr, sl
 800c2d8:	fa44 f40c 	asr.w	r4, r4, ip
 800c2dc:	fa45 f50c 	asr.w	r5, r5, ip

0800c2e0 <EndScaling_m>:
 800c2e0:	9e06      	ldr	r6, [sp, #24]
 800c2e2:	f300 0007 	ssat	r0, #8, r0
 800c2e6:	f301 0107 	ssat	r1, #8, r1
 800c2ea:	f302 0207 	ssat	r2, #8, r2
 800c2ee:	f303 0307 	ssat	r3, #8, r3
 800c2f2:	f304 0407 	ssat	r4, #8, r4
 800c2f6:	f305 0507 	ssat	r5, #8, r5
 800c2fa:	f806 0b01 	strb.w	r0, [r6], #1
 800c2fe:	f806 1b01 	strb.w	r1, [r6], #1
 800c302:	f806 2b01 	strb.w	r2, [r6], #1
 800c306:	f806 3b01 	strb.w	r3, [r6], #1
 800c30a:	f806 4b01 	strb.w	r4, [r6], #1
 800c30e:	9b02      	ldr	r3, [sp, #8]
 800c310:	f806 5b01 	strb.w	r5, [r6], #1
 800c314:	9606      	str	r6, [sp, #24]
 800c316:	429e      	cmp	r6, r3
 800c318:	f47f aeb4 	bne.w	800c084 <MainLoop_m>

0800c31c <Exit_m>:
 800c31c:	b007      	add	sp, #28
 800c31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c322 <OutputFormatting_m_ex>:
 800c322:	f116 0801 	adds.w	r8, r6, #1
 800c326:	d03c      	beq.n	800c3a2 <OutputFormatting_m_Neg>
 800c328:	f04f 0801 	mov.w	r8, #1
 800c32c:	fa08 f80c 	lsl.w	r8, r8, ip
 800c330:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800c334:	fb50 800e 	smmla	r0, r0, lr, r8
 800c338:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800c33c:	fa40 f00c 	asr.w	r0, r0, ip
 800c340:	4450      	add	r0, sl
 800c342:	fb51 810e 	smmla	r1, r1, lr, r8
 800c346:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c34a:	fa41 f10c 	asr.w	r1, r1, ip
 800c34e:	4451      	add	r1, sl
 800c350:	f04f 0801 	mov.w	r8, #1
 800c354:	fa08 f80c 	lsl.w	r8, r8, ip
 800c358:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800c35c:	fb52 820e 	smmla	r2, r2, lr, r8
 800c360:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c364:	fa42 f20c 	asr.w	r2, r2, ip
 800c368:	4452      	add	r2, sl
 800c36a:	fb53 830e 	smmla	r3, r3, lr, r8
 800c36e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c372:	fa43 f30c 	asr.w	r3, r3, ip
 800c376:	4453      	add	r3, sl
 800c378:	f04f 0801 	mov.w	r8, #1
 800c37c:	fa08 f80c 	lsl.w	r8, r8, ip
 800c380:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800c384:	fb54 840e 	smmla	r4, r4, lr, r8
 800c388:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c38c:	fa44 f40c 	asr.w	r4, r4, ip
 800c390:	4454      	add	r4, sl
 800c392:	fb55 850e 	smmla	r5, r5, lr, r8
 800c396:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800c39a:	fa45 f50c 	asr.w	r5, r5, ip
 800c39e:	4455      	add	r5, sl
 800c3a0:	e79e      	b.n	800c2e0 <EndScaling_m>

0800c3a2 <OutputFormatting_m_Neg>:
 800c3a2:	f1cc 0801 	rsb	r8, ip, #1
 800c3a6:	fa00 f008 	lsl.w	r0, r0, r8
 800c3aa:	f300 001f 	ssat	r0, #32, r0
 800c3ae:	fb50 f01e 	smmulr	r0, r0, lr
 800c3b2:	fa01 f108 	lsl.w	r1, r1, r8
 800c3b6:	f301 011f 	ssat	r1, #32, r1
 800c3ba:	fb51 f11e 	smmulr	r1, r1, lr
 800c3be:	4450      	add	r0, sl
 800c3c0:	4451      	add	r1, sl
 800c3c2:	f1cc 0801 	rsb	r8, ip, #1
 800c3c6:	fa02 f208 	lsl.w	r2, r2, r8
 800c3ca:	f302 021f 	ssat	r2, #32, r2
 800c3ce:	fb52 f21e 	smmulr	r2, r2, lr
 800c3d2:	fa03 f308 	lsl.w	r3, r3, r8
 800c3d6:	f303 031f 	ssat	r3, #32, r3
 800c3da:	fb53 f31e 	smmulr	r3, r3, lr
 800c3de:	4452      	add	r2, sl
 800c3e0:	4453      	add	r3, sl
 800c3e2:	f1cc 0801 	rsb	r8, ip, #1
 800c3e6:	fa04 f408 	lsl.w	r4, r4, r8
 800c3ea:	f304 041f 	ssat	r4, #32, r4
 800c3ee:	fb54 f41e 	smmulr	r4, r4, lr
 800c3f2:	fa05 f508 	lsl.w	r5, r5, r8
 800c3f6:	f305 051f 	ssat	r5, #32, r5
 800c3fa:	fb55 f51e 	smmulr	r5, r5, lr
 800c3fe:	4454      	add	r4, sl
 800c400:	4455      	add	r5, sl
 800c402:	e76d      	b.n	800c2e0 <EndScaling_m>

0800c404 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800c404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c408:	b086      	sub	sp, #24
 800c40a:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 800c40e:	9100      	str	r1, [sp, #0]
 800c410:	9203      	str	r2, [sp, #12]
 800c412:	2f00      	cmp	r7, #0
 800c414:	9305      	str	r3, [sp, #20]
 800c416:	bf18      	it	ne
 800c418:	2301      	movne	r3, #1
 800c41a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800c41c:	fb04 3303 	mla	r3, r4, r3, r3
 800c420:	9304      	str	r3, [sp, #16]
 800c422:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c424:	bf14      	ite	ne
 800c426:	462f      	movne	r7, r5
 800c428:	2701      	moveq	r7, #1
 800c42a:	9701      	str	r7, [sp, #4]
 800c42c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800c430:	085b      	lsrs	r3, r3, #1
 800c432:	f000 809f 	beq.w	800c574 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x170>
 800c436:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 800c43a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c43c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c440:	9302      	str	r3, [sp, #8]
 800c442:	f8dd e048 	ldr.w	lr, [sp, #72]	@ 0x48
 800c446:	9f03      	ldr	r7, [sp, #12]
 800c448:	ea5f 089e 	movs.w	r8, lr, lsr #2
 800c44c:	f8dd c000 	ldr.w	ip, [sp]
 800c450:	f857 6b04 	ldr.w	r6, [r7], #4
 800c454:	f857 3b04 	ldr.w	r3, [r7], #4
 800c458:	9703      	str	r7, [sp, #12]
 800c45a:	461a      	mov	r2, r3
 800c45c:	4631      	mov	r1, r6
 800c45e:	d022      	beq.n	800c4a6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa2>
 800c460:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 800c464:	f85c 9b04 	ldr.w	r9, [ip], #4
 800c468:	f850 ab04 	ldr.w	sl, [r0], #4
 800c46c:	f850 5b04 	ldr.w	r5, [r0], #4
 800c470:	fb2a 6609 	smlad	r6, sl, r9, r6
 800c474:	fb2a 1107 	smlad	r1, sl, r7, r1
 800c478:	fb25 3309 	smlad	r3, r5, r9, r3
 800c47c:	fb25 2207 	smlad	r2, r5, r7, r2
 800c480:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 800c484:	f85c 9b04 	ldr.w	r9, [ip], #4
 800c488:	f850 ab04 	ldr.w	sl, [r0], #4
 800c48c:	f850 5b04 	ldr.w	r5, [r0], #4
 800c490:	fb2a 6609 	smlad	r6, sl, r9, r6
 800c494:	fb2a 1107 	smlad	r1, sl, r7, r1
 800c498:	fb25 3309 	smlad	r3, r5, r9, r3
 800c49c:	fb25 2207 	smlad	r2, r5, r7, r2
 800c4a0:	f1b8 0801 	subs.w	r8, r8, #1
 800c4a4:	d1dc      	bne.n	800c460 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c>
 800c4a6:	f00e 0703 	and.w	r7, lr, #3
 800c4aa:	b18f      	cbz	r7, 800c4d0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xcc>
 800c4ac:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
 800c4b0:	f93c ab02 	ldrsh.w	sl, [ip], #2
 800c4b4:	f930 5b02 	ldrsh.w	r5, [r0], #2
 800c4b8:	f930 9b02 	ldrsh.w	r9, [r0], #2
 800c4bc:	fb0a 6605 	mla	r6, sl, r5, r6
 800c4c0:	fb09 330a 	mla	r3, r9, sl, r3
 800c4c4:	fb08 1105 	mla	r1, r8, r5, r1
 800c4c8:	fb09 2208 	mla	r2, r9, r8, r2
 800c4cc:	3f01      	subs	r7, #1
 800c4ce:	dced      	bgt.n	800c4ac <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa8>
 800c4d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800c4d4:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800c4d6:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 800c4da:	f857 cb04 	ldr.w	ip, [r7], #4
 800c4de:	f85b 5b04 	ldr.w	r5, [fp], #4
 800c4e2:	f1c4 0915 	rsb	r9, r4, #21
 800c4e6:	ea99 0904 	eors.w	r9, r9, r4
 800c4ea:	f340 80c8 	ble.w	800c67e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x27a>
 800c4ee:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800c4f2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c4f6:	fb56 c605 	smmla	r6, r6, r5, ip
 800c4fa:	fb51 c105 	smmla	r1, r1, r5, ip
 800c4fe:	fa46 f604 	asr.w	r6, r6, r4
 800c502:	fa41 f104 	asr.w	r1, r1, r4
 800c506:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 800c50a:	f857 cb04 	ldr.w	ip, [r7], #4
 800c50e:	f85b 5b04 	ldr.w	r5, [fp], #4
 800c512:	f1c4 0915 	rsb	r9, r4, #21
 800c516:	ea99 0904 	eors.w	r9, r9, r4
 800c51a:	f340 8099 	ble.w	800c650 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24c>
 800c51e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c522:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c526:	fb53 c305 	smmla	r3, r3, r5, ip
 800c52a:	fb52 c205 	smmla	r2, r2, r5, ip
 800c52e:	fa43 f304 	asr.w	r3, r3, r4
 800c532:	fa42 f204 	asr.w	r2, r2, r4
 800c536:	f306 0607 	ssat	r6, #8, r6
 800c53a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c53e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 800c540:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c544:	7026      	strb	r6, [r4, #0]
 800c546:	44a0      	add	r8, r4
 800c548:	f301 0107 	ssat	r1, #8, r1
 800c54c:	f888 1000 	strb.w	r1, [r8]
 800c550:	f303 0307 	ssat	r3, #8, r3
 800c554:	f804 3009 	strb.w	r3, [r4, r9]
 800c558:	f302 0207 	ssat	r2, #8, r2
 800c55c:	f808 2009 	strb.w	r2, [r8, r9]
 800c560:	eb04 0249 	add.w	r2, r4, r9, lsl #1
 800c564:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c566:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
 800c56a:	9c02      	ldr	r4, [sp, #8]
 800c56c:	9715      	str	r7, [sp, #84]	@ 0x54
 800c56e:	45a2      	cmp	sl, r4
 800c570:	f47f af67 	bne.w	800c442 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e>
 800c574:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c576:	f013 0301 	ands.w	r3, r3, #1
 800c57a:	d054      	beq.n	800c626 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x222>
 800c57c:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 800c580:	9b03      	ldr	r3, [sp, #12]
 800c582:	f8dd c000 	ldr.w	ip, [sp]
 800c586:	6819      	ldr	r1, [r3, #0]
 800c588:	ea5f 079e 	movs.w	r7, lr, lsr #2
 800c58c:	eb0c 044e 	add.w	r4, ip, lr, lsl #1
 800c590:	460e      	mov	r6, r1
 800c592:	d015      	beq.n	800c5c0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 800c594:	f85c 501e 	ldr.w	r5, [ip, lr, lsl #1]
 800c598:	f85c 8b04 	ldr.w	r8, [ip], #4
 800c59c:	f850 ab04 	ldr.w	sl, [r0], #4
 800c5a0:	f850 3b04 	ldr.w	r3, [r0], #4
 800c5a4:	fb2a 6608 	smlad	r6, sl, r8, r6
 800c5a8:	fb2a 1105 	smlad	r1, sl, r5, r1
 800c5ac:	f85c a01e 	ldr.w	sl, [ip, lr, lsl #1]
 800c5b0:	f85c 8b04 	ldr.w	r8, [ip], #4
 800c5b4:	fb23 6608 	smlad	r6, r3, r8, r6
 800c5b8:	fb23 110a 	smlad	r1, r3, sl, r1
 800c5bc:	3f01      	subs	r7, #1
 800c5be:	d1e9      	bne.n	800c594 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x190>
 800c5c0:	f01e 0703 	ands.w	r7, lr, #3
 800c5c4:	d00b      	beq.n	800c5de <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 800c5c6:	f83c 301e 	ldrh.w	r3, [ip, lr, lsl #1]
 800c5ca:	f83c 9b02 	ldrh.w	r9, [ip], #2
 800c5ce:	f930 ab02 	ldrsh.w	sl, [r0], #2
 800c5d2:	fb19 660a 	smlabb	r6, r9, sl, r6
 800c5d6:	3f01      	subs	r7, #1
 800c5d8:	fb13 110a 	smlabb	r1, r3, sl, r1
 800c5dc:	dcf3      	bgt.n	800c5c6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c2>
 800c5de:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800c5e2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800c5e4:	f9ba 4000 	ldrsh.w	r4, [sl]
 800c5e8:	f8d7 c000 	ldr.w	ip, [r7]
 800c5ec:	f8db 5000 	ldr.w	r5, [fp]
 800c5f0:	f1c4 0915 	rsb	r9, r4, #21
 800c5f4:	ea99 0904 	eors.w	r9, r9, r4
 800c5f8:	dd58      	ble.n	800c6ac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2a8>
 800c5fa:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800c5fe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c602:	fb56 c605 	smmla	r6, r6, r5, ip
 800c606:	fb51 c105 	smmla	r1, r1, r5, ip
 800c60a:	fa46 f604 	asr.w	r6, r6, r4
 800c60e:	fa41 f104 	asr.w	r1, r1, r4
 800c612:	f306 0607 	ssat	r6, #8, r6
 800c616:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c618:	9c04      	ldr	r4, [sp, #16]
 800c61a:	7016      	strb	r6, [r2, #0]
 800c61c:	f301 0107 	ssat	r1, #8, r1
 800c620:	5511      	strb	r1, [r2, r4]
 800c622:	9b01      	ldr	r3, [sp, #4]
 800c624:	441a      	add	r2, r3
 800c626:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800c628:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c62a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800c62c:	b133      	cbz	r3, 800c63c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 800c62e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c630:	f104 0002 	add.w	r0, r4, #2
 800c634:	fb03 0011 	mls	r0, r3, r1, r0
 800c638:	4410      	add	r0, r2
 800c63a:	e006      	b.n	800c64a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x246>
 800c63c:	eba2 0001 	sub.w	r0, r2, r1
 800c640:	9a05      	ldr	r2, [sp, #20]
 800c642:	f104 0402 	add.w	r4, r4, #2
 800c646:	fb02 0004 	mla	r0, r2, r4, r0
 800c64a:	b006      	add	sp, #24
 800c64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c650:	2c00      	cmp	r4, #0
 800c652:	dd42      	ble.n	800c6da <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 800c654:	f04f 0901 	mov.w	r9, #1
 800c658:	fa09 f904 	lsl.w	r9, r9, r4
 800c65c:	ea4f 09a9 	mov.w	r9, r9, asr #2
 800c660:	fb53 9305 	smmla	r3, r3, r5, r9
 800c664:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c668:	fa43 f304 	asr.w	r3, r3, r4
 800c66c:	4463      	add	r3, ip
 800c66e:	fb52 9205 	smmla	r2, r2, r5, r9
 800c672:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c676:	fa42 f204 	asr.w	r2, r2, r4
 800c67a:	4462      	add	r2, ip
 800c67c:	e75b      	b.n	800c536 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 800c67e:	2c00      	cmp	r4, #0
 800c680:	dd3c      	ble.n	800c6fc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2f8>
 800c682:	f04f 0901 	mov.w	r9, #1
 800c686:	fa09 f904 	lsl.w	r9, r9, r4
 800c68a:	ea4f 09a9 	mov.w	r9, r9, asr #2
 800c68e:	fb56 9605 	smmla	r6, r6, r5, r9
 800c692:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800c696:	fa46 f604 	asr.w	r6, r6, r4
 800c69a:	4466      	add	r6, ip
 800c69c:	fb51 9105 	smmla	r1, r1, r5, r9
 800c6a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c6a4:	fa41 f104 	asr.w	r1, r1, r4
 800c6a8:	4461      	add	r1, ip
 800c6aa:	e72c      	b.n	800c506 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 800c6ac:	2c00      	cmp	r4, #0
 800c6ae:	dd36      	ble.n	800c71e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31a>
 800c6b0:	f04f 0901 	mov.w	r9, #1
 800c6b4:	fa09 f904 	lsl.w	r9, r9, r4
 800c6b8:	ea4f 09a9 	mov.w	r9, r9, asr #2
 800c6bc:	fb56 9605 	smmla	r6, r6, r5, r9
 800c6c0:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800c6c4:	fa46 f604 	asr.w	r6, r6, r4
 800c6c8:	4466      	add	r6, ip
 800c6ca:	fb51 9105 	smmla	r1, r1, r5, r9
 800c6ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c6d2:	fa41 f104 	asr.w	r1, r1, r4
 800c6d6:	4461      	add	r1, ip
 800c6d8:	e79b      	b.n	800c612 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>
 800c6da:	f1c4 0901 	rsb	r9, r4, #1
 800c6de:	fa03 f309 	lsl.w	r3, r3, r9
 800c6e2:	f303 031f 	ssat	r3, #32, r3
 800c6e6:	fb53 f315 	smmulr	r3, r3, r5
 800c6ea:	fa02 f209 	lsl.w	r2, r2, r9
 800c6ee:	f302 021f 	ssat	r2, #32, r2
 800c6f2:	fb52 f215 	smmulr	r2, r2, r5
 800c6f6:	4463      	add	r3, ip
 800c6f8:	4462      	add	r2, ip
 800c6fa:	e71c      	b.n	800c536 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 800c6fc:	f1c4 0901 	rsb	r9, r4, #1
 800c700:	fa06 f609 	lsl.w	r6, r6, r9
 800c704:	f306 061f 	ssat	r6, #32, r6
 800c708:	fb56 f615 	smmulr	r6, r6, r5
 800c70c:	fa01 f109 	lsl.w	r1, r1, r9
 800c710:	f301 011f 	ssat	r1, #32, r1
 800c714:	fb51 f115 	smmulr	r1, r1, r5
 800c718:	4466      	add	r6, ip
 800c71a:	4461      	add	r1, ip
 800c71c:	e6f3      	b.n	800c506 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 800c71e:	f1c4 0901 	rsb	r9, r4, #1
 800c722:	fa06 f609 	lsl.w	r6, r6, r9
 800c726:	f306 061f 	ssat	r6, #32, r6
 800c72a:	fb56 f615 	smmulr	r6, r6, r5
 800c72e:	fa01 f109 	lsl.w	r1, r1, r9
 800c732:	f301 011f 	ssat	r1, #32, r1
 800c736:	fb51 f115 	smmulr	r1, r1, r5
 800c73a:	4466      	add	r6, ip
 800c73c:	4461      	add	r1, ip
 800c73e:	e768      	b.n	800c612 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>

0800c740 <st_sssa8_ch_nn_mat_mult_pw_nt_t>:
 800c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	b099      	sub	sp, #100	@ 0x64
 800c746:	9014      	str	r0, [sp, #80]	@ 0x50
 800c748:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c74a:	9216      	str	r2, [sp, #88]	@ 0x58
 800c74c:	9312      	str	r3, [sp, #72]	@ 0x48
 800c74e:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 800c750:	f000 0303 	and.w	r3, r0, #3
 800c754:	2b03      	cmp	r3, #3
 800c756:	bf0c      	ite	eq
 800c758:	2601      	moveq	r6, #1
 800c75a:	2600      	movne	r6, #0
 800c75c:	9617      	str	r6, [sp, #92]	@ 0x5c
 800c75e:	2803      	cmp	r0, #3
 800c760:	bf0c      	ite	eq
 800c762:	2601      	moveq	r6, #1
 800c764:	2600      	movne	r6, #0
 800c766:	9618      	str	r6, [sp, #96]	@ 0x60
 800c768:	f010 0002 	ands.w	r0, r0, #2
 800c76c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800c76e:	2800      	cmp	r0, #0
 800c770:	bf14      	ite	ne
 800c772:	4618      	movne	r0, r3
 800c774:	2001      	moveq	r0, #1
 800c776:	9010      	str	r0, [sp, #64]	@ 0x40
 800c778:	9826      	ldr	r0, [sp, #152]	@ 0x98
 800c77a:	bf0c      	ite	eq
 800c77c:	4606      	moveq	r6, r0
 800c77e:	2601      	movne	r6, #1
 800c780:	9611      	str	r6, [sp, #68]	@ 0x44
 800c782:	e9dd 042c 	ldrd	r0, r4, [sp, #176]	@ 0xb0
 800c786:	2c00      	cmp	r4, #0
 800c788:	bf18      	it	ne
 800c78a:	4620      	movne	r0, r4
 800c78c:	902c      	str	r0, [sp, #176]	@ 0xb0
 800c78e:	9826      	ldr	r0, [sp, #152]	@ 0x98
 800c790:	2801      	cmp	r0, #1
 800c792:	f340 81be 	ble.w	800cb12 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x3d2>
 800c796:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c79a:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 800c79c:	f014 0f02 	tst.w	r4, #2
 800c7a0:	d101      	bne.n	800c7a6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x66>
 800c7a2:	f04f 0302 	mov.w	r3, #2
 800c7a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800c7a8:	f04f 0800 	mov.w	r8, #0
 800c7ac:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 800c7b0:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800c7b4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c7b6:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 800c7ba:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c7be:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800c7c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c7c6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c7c8:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c7cc:	e9d2 1200 	ldrd	r1, r2, [r2]
 800c7d0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c7d4:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 800c7d6:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c7da:	e9d2 1200 	ldrd	r1, r2, [r2]
 800c7de:	e9cd 1200 	strd	r1, r2, [sp]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	bfcc      	ite	gt
 800c7e6:	2000      	movgt	r0, #0
 800c7e8:	f04f 30ff 	movle.w	r0, #4294967295
 800c7ec:	2b15      	cmp	r3, #21
 800c7ee:	bfc8      	it	gt
 800c7f0:	2001      	movgt	r0, #1
 800c7f2:	2c00      	cmp	r4, #0
 800c7f4:	bfcc      	ite	gt
 800c7f6:	2100      	movgt	r1, #0
 800c7f8:	f04f 31ff 	movle.w	r1, #4294967295
 800c7fc:	2c15      	cmp	r4, #21
 800c7fe:	bfc8      	it	gt
 800c800:	2101      	movgt	r1, #1
 800c802:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c806:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 8297 	beq.w	800cd3c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5fc>
 800c80e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800c810:	2b00      	cmp	r3, #0
 800c812:	f040 82bb 	bne.w	800cd8c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x64c>
 800c816:	461a      	mov	r2, r3
 800c818:	4618      	mov	r0, r3
 800c81a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800c81c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800c820:	e9d1 3400 	ldrd	r3, r4, [r1]
 800c824:	4403      	add	r3, r0
 800c826:	4414      	add	r4, r2
 800c828:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
 800c82c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c82e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800c830:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800c832:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800c834:	2900      	cmp	r1, #0
 800c836:	bf1c      	itt	ne
 800c838:	3203      	addne	r2, #3
 800c83a:	18d2      	addne	r2, r2, r3
 800c83c:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 800c840:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c842:	1040      	asrs	r0, r0, #1
 800c844:	f000 8144 	beq.w	800cad0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x390>
 800c848:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c84a:	900e      	str	r0, [sp, #56]	@ 0x38
 800c84c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c84e:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 800c850:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c852:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 800c854:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 800c858:	46e2      	mov	sl, ip
 800c85a:	46f3      	mov	fp, lr
 800c85c:	4413      	add	r3, r2
 800c85e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c860:	ea5f 1827 	movs.w	r8, r7, asr #4
 800c864:	f000 8094 	beq.w	800c990 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x250>
 800c868:	f859 5007 	ldr.w	r5, [r9, r7]
 800c86c:	f856 0b04 	ldr.w	r0, [r6], #4
 800c870:	f856 1b04 	ldr.w	r1, [r6], #4
 800c874:	f856 2b04 	ldr.w	r2, [r6], #4
 800c878:	f856 3b04 	ldr.w	r3, [r6], #4
 800c87c:	fa2f f485 	sxtb16	r4, r5
 800c880:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c884:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c888:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c88c:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c890:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c894:	f859 4b04 	ldr.w	r4, [r9], #4
 800c898:	fa2f f584 	sxtb16	r5, r4
 800c89c:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c8a0:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c8a4:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c8a8:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c8ac:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c8b0:	f859 5007 	ldr.w	r5, [r9, r7]
 800c8b4:	f856 0b04 	ldr.w	r0, [r6], #4
 800c8b8:	f856 1b04 	ldr.w	r1, [r6], #4
 800c8bc:	f856 2b04 	ldr.w	r2, [r6], #4
 800c8c0:	f856 3b04 	ldr.w	r3, [r6], #4
 800c8c4:	fa2f f485 	sxtb16	r4, r5
 800c8c8:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c8cc:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c8d0:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c8d4:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c8d8:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c8dc:	f859 4b04 	ldr.w	r4, [r9], #4
 800c8e0:	fa2f f584 	sxtb16	r5, r4
 800c8e4:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c8e8:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c8ec:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c8f0:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c8f4:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c8f8:	f859 5007 	ldr.w	r5, [r9, r7]
 800c8fc:	f856 0b04 	ldr.w	r0, [r6], #4
 800c900:	f856 1b04 	ldr.w	r1, [r6], #4
 800c904:	f856 2b04 	ldr.w	r2, [r6], #4
 800c908:	f856 3b04 	ldr.w	r3, [r6], #4
 800c90c:	fa2f f485 	sxtb16	r4, r5
 800c910:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c914:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c918:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c91c:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c920:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c924:	f859 4b04 	ldr.w	r4, [r9], #4
 800c928:	fa2f f584 	sxtb16	r5, r4
 800c92c:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c930:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c934:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c938:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c93c:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c940:	f859 5007 	ldr.w	r5, [r9, r7]
 800c944:	f856 0b04 	ldr.w	r0, [r6], #4
 800c948:	f856 1b04 	ldr.w	r1, [r6], #4
 800c94c:	f856 2b04 	ldr.w	r2, [r6], #4
 800c950:	f856 3b04 	ldr.w	r3, [r6], #4
 800c954:	fa2f f485 	sxtb16	r4, r5
 800c958:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c95c:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c960:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c964:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c968:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c96c:	f859 4b04 	ldr.w	r4, [r9], #4
 800c970:	fa2f f584 	sxtb16	r5, r4
 800c974:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c978:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c97c:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c980:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c984:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c988:	f1b8 0801 	subs.w	r8, r8, #1
 800c98c:	f73f af6c 	bgt.w	800c868 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x128>
 800c990:	f017 000f 	ands.w	r0, r7, #15
 800c994:	d046      	beq.n	800ca24 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2e4>
 800c996:	f3c7 0881 	ubfx	r8, r7, #2, #2
 800c99a:	f1b8 0f00 	cmp.w	r8, #0
 800c99e:	d026      	beq.n	800c9ee <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2ae>
 800c9a0:	f859 5007 	ldr.w	r5, [r9, r7]
 800c9a4:	f856 0b04 	ldr.w	r0, [r6], #4
 800c9a8:	f856 1b04 	ldr.w	r1, [r6], #4
 800c9ac:	f856 2b04 	ldr.w	r2, [r6], #4
 800c9b0:	f856 3b04 	ldr.w	r3, [r6], #4
 800c9b4:	fa2f f485 	sxtb16	r4, r5
 800c9b8:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c9bc:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c9c0:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c9c4:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c9c8:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c9cc:	f859 4b04 	ldr.w	r4, [r9], #4
 800c9d0:	fa2f f584 	sxtb16	r5, r4
 800c9d4:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c9d8:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c9dc:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c9e0:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c9e4:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c9e8:	f1b8 0801 	subs.w	r8, r8, #1
 800c9ec:	dcd8      	bgt.n	800c9a0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x260>
 800c9ee:	f017 0803 	ands.w	r8, r7, #3
 800c9f2:	f1b8 0f00 	cmp.w	r8, #0
 800c9f6:	d015      	beq.n	800ca24 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2e4>
 800c9f8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 800c9fa:	f936 3b02 	ldrsh.w	r3, [r6], #2
 800c9fe:	f936 5b02 	ldrsh.w	r5, [r6], #2
 800ca02:	f999 1000 	ldrsb.w	r1, [r9]
 800ca06:	fb13 cc01 	smlabb	ip, r3, r1, ip
 800ca0a:	fb15 ee01 	smlabb	lr, r5, r1, lr
 800ca0e:	f919 1000 	ldrsb.w	r1, [r9, r0]
 800ca12:	fb13 aa01 	smlabb	sl, r3, r1, sl
 800ca16:	fb15 bb01 	smlabb	fp, r5, r1, fp
 800ca1a:	f109 0901 	add.w	r9, r9, #1
 800ca1e:	f1b8 0801 	subs.w	r8, r8, #1
 800ca22:	dcea      	bgt.n	800c9fa <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2ba>
 800ca24:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ca26:	462e      	mov	r6, r5
 800ca28:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800ca2a:	b168      	cbz	r0, 800ca48 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x308>
 800ca2c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca2e:	1e90      	subs	r0, r2, #2
 800ca30:	dc09      	bgt.n	800ca46 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x306>
 800ca32:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800ca34:	f1c2 0202 	rsb	r2, r2, #2
 800ca38:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800ca3c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ca3e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 800ca40:	4410      	add	r0, r2
 800ca42:	f105 0502 	add.w	r5, r5, #2
 800ca46:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ca48:	9800      	ldr	r0, [sp, #0]
 800ca4a:	9902      	ldr	r1, [sp, #8]
 800ca4c:	9a04      	ldr	r2, [sp, #16]
 800ca4e:	9b06      	ldr	r3, [sp, #24]
 800ca50:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f040 80c9 	bne.w	800cbea <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4aa>
 800ca58:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800ca5c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800ca60:	fb5c 0c01 	smmla	ip, ip, r1, r0
 800ca64:	fb5a 0a01 	smmla	sl, sl, r1, r0
 800ca68:	fa4c fc02 	asr.w	ip, ip, r2
 800ca6c:	fa4a fa02 	asr.w	sl, sl, r2
 800ca70:	f30c 0c07 	ssat	ip, #8, ip
 800ca74:	f30a 0a07 	ssat	sl, #8, sl
 800ca78:	f886 c000 	strb.w	ip, [r6]
 800ca7c:	f887 a000 	strb.w	sl, [r7]
 800ca80:	9801      	ldr	r0, [sp, #4]
 800ca82:	9903      	ldr	r1, [sp, #12]
 800ca84:	9a05      	ldr	r2, [sp, #20]
 800ca86:	9b07      	ldr	r3, [sp, #28]
 800ca88:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f040 80d4 	bne.w	800cc3a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4fa>
 800ca92:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800ca96:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800ca9a:	fb5e 0e01 	smmla	lr, lr, r1, r0
 800ca9e:	fb5b 0b01 	smmla	fp, fp, r1, r0
 800caa2:	fa4e fe02 	asr.w	lr, lr, r2
 800caa6:	fa4b fb02 	asr.w	fp, fp, r2
 800caaa:	f30e 0e07 	ssat	lr, #8, lr
 800caae:	f30b 0b07 	ssat	fp, #8, fp
 800cab2:	f806 e008 	strb.w	lr, [r6, r8]
 800cab6:	f807 b008 	strb.w	fp, [r7, r8]
 800caba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cabc:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800cabe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800cac2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cac4:	4491      	add	r9, r2
 800cac6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cac8:	3b01      	subs	r3, #1
 800caca:	930e      	str	r3, [sp, #56]	@ 0x38
 800cacc:	f47f aebe 	bne.w	800c84c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x10c>
 800cad0:	f8cd 9020 	str.w	r9, [sp, #32]
 800cad4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cad6:	f013 0f01 	tst.w	r3, #1
 800cada:	f040 80d6 	bne.w	800cc8a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x54a>
 800cade:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cae0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800cae2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800cae6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cae8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800caea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800caec:	4413      	add	r3, r2
 800caee:	9312      	str	r3, [sp, #72]	@ 0x48
 800caf0:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800caf2:	b123      	cbz	r3, 800cafe <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x3be>
 800caf4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800caf6:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800caf8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800cafc:	932c      	str	r3, [sp, #176]	@ 0xb0
 800cafe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb00:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800cb02:	ea4f 0363 	mov.w	r3, r3, asr #1
 800cb06:	f102 0201 	add.w	r2, r2, #1
 800cb0a:	920d      	str	r2, [sp, #52]	@ 0x34
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	f73f ae4f 	bgt.w	800c7b0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x70>
 800cb12:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 800cb14:	f015 0501 	ands.w	r5, r5, #1
 800cb18:	d060      	beq.n	800cbdc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x49c>
 800cb1a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 800cb1e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800cb20:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 800cb22:	2d00      	cmp	r5, #0
 800cb24:	bf1c      	itt	ne
 800cb26:	3603      	addne	r6, #3
 800cb28:	4446      	addne	r6, r8
 800cb2a:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800cb2c:	2900      	cmp	r1, #0
 800cb2e:	dd55      	ble.n	800cbdc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x49c>
 800cb30:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
 800cb34:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 800cb36:	9f26      	ldr	r7, [sp, #152]	@ 0x98
 800cb38:	f1a7 0701 	sub.w	r7, r7, #1
 800cb3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cb40:	f8dc c000 	ldr.w	ip, [ip]
 800cb44:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cb46:	eb03 0487 	add.w	r4, r3, r7, lsl #2
 800cb4a:	6824      	ldr	r4, [r4, #0]
 800cb4c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800cb4e:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 800cb52:	6800      	ldr	r0, [r0, #0]
 800cb54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb56:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 800cb5a:	f9b7 7000 	ldrsh.w	r7, [r7]
 800cb5e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800cb60:	2f00      	cmp	r7, #0
 800cb62:	bfcc      	ite	gt
 800cb64:	f04f 0900 	movgt.w	r9, #0
 800cb68:	f04f 39ff 	movle.w	r9, #4294967295
 800cb6c:	2f15      	cmp	r7, #21
 800cb6e:	bfc8      	it	gt
 800cb70:	f04f 0901 	movgt.w	r9, #1
 800cb74:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800cb76:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 800cb7a:	f1bb 0f00 	cmp.w	fp, #0
 800cb7e:	46e6      	mov	lr, ip
 800cb80:	dd0c      	ble.n	800cb9c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x45c>
 800cb82:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 800cb86:	f915 3b01 	ldrsb.w	r3, [r5], #1
 800cb8a:	f918 ab01 	ldrsb.w	sl, [r8], #1
 800cb8e:	eba3 0302 	sub.w	r3, r3, r2
 800cb92:	fb0a ee03 	mla	lr, sl, r3, lr
 800cb96:	f1bb 0b01 	subs.w	fp, fp, #1
 800cb9a:	dcf4      	bgt.n	800cb86 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x446>
 800cb9c:	f1b9 0f00 	cmp.w	r9, #0
 800cba0:	f040 8164 	bne.w	800ce6c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x72c>
 800cba4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800cba8:	fb5e 0e04 	smmla	lr, lr, r4, r0
 800cbac:	fa4e fe07 	asr.w	lr, lr, r7
 800cbb0:	f30e 0e07 	ssat	lr, #8, lr
 800cbb4:	f886 e000 	strb.w	lr, [r6]
 800cbb8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800cbba:	f013 0f02 	tst.w	r3, #2
 800cbbe:	d011      	beq.n	800cbe4 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4a4>
 800cbc0:	f013 0f01 	tst.w	r3, #1
 800cbc4:	d005      	beq.n	800cbd2 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x492>
 800cbc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	d102      	bne.n	800cbd2 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x492>
 800cbcc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800cbce:	f106 0602 	add.w	r6, r6, #2
 800cbd2:	f106 0601 	add.w	r6, r6, #1
 800cbd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cbd8:	3901      	subs	r1, #1
 800cbda:	dccc      	bgt.n	800cb76 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x436>
 800cbdc:	2000      	movs	r0, #0
 800cbde:	b019      	add	sp, #100	@ 0x64
 800cbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800cbe6:	441e      	add	r6, r3
 800cbe8:	e7f6      	b.n	800cbd8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x498>
 800cbea:	3301      	adds	r3, #1
 800cbec:	d014      	beq.n	800cc18 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4d8>
 800cbee:	f04f 0301 	mov.w	r3, #1
 800cbf2:	fa03 f302 	lsl.w	r3, r3, r2
 800cbf6:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800cbfa:	fb5c 3c01 	smmla	ip, ip, r1, r3
 800cbfe:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800cc02:	fa4c fc02 	asr.w	ip, ip, r2
 800cc06:	4484      	add	ip, r0
 800cc08:	fb5a 3a01 	smmla	sl, sl, r1, r3
 800cc0c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800cc10:	fa4a fa02 	asr.w	sl, sl, r2
 800cc14:	4482      	add	sl, r0
 800cc16:	e72b      	b.n	800ca70 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x330>
 800cc18:	f1c2 0301 	rsb	r3, r2, #1
 800cc1c:	fa0c fc03 	lsl.w	ip, ip, r3
 800cc20:	f30c 0c1f 	ssat	ip, #32, ip
 800cc24:	fb5c fc11 	smmulr	ip, ip, r1
 800cc28:	fa0a fa03 	lsl.w	sl, sl, r3
 800cc2c:	f30a 0a1f 	ssat	sl, #32, sl
 800cc30:	fb5a fa11 	smmulr	sl, sl, r1
 800cc34:	4484      	add	ip, r0
 800cc36:	4482      	add	sl, r0
 800cc38:	e71a      	b.n	800ca70 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x330>
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	d014      	beq.n	800cc68 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x528>
 800cc3e:	f04f 0301 	mov.w	r3, #1
 800cc42:	fa03 f302 	lsl.w	r3, r3, r2
 800cc46:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800cc4a:	fb5e 3e01 	smmla	lr, lr, r1, r3
 800cc4e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800cc52:	fa4e fe02 	asr.w	lr, lr, r2
 800cc56:	4486      	add	lr, r0
 800cc58:	fb5b 3b01 	smmla	fp, fp, r1, r3
 800cc5c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800cc60:	fa4b fb02 	asr.w	fp, fp, r2
 800cc64:	4483      	add	fp, r0
 800cc66:	e720      	b.n	800caaa <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x36a>
 800cc68:	f1c2 0301 	rsb	r3, r2, #1
 800cc6c:	fa0e fe03 	lsl.w	lr, lr, r3
 800cc70:	f30e 0e1f 	ssat	lr, #32, lr
 800cc74:	fb5e fe11 	smmulr	lr, lr, r1
 800cc78:	fa0b fb03 	lsl.w	fp, fp, r3
 800cc7c:	f30b 0b1f 	ssat	fp, #32, fp
 800cc80:	fb5b fb11 	smmulr	fp, fp, r1
 800cc84:	4486      	add	lr, r0
 800cc86:	4483      	add	fp, r0
 800cc88:	e70f      	b.n	800caaa <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x36a>
 800cc8a:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 800cc8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cc90:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 800cc92:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 800cc96:	ea5f 08a7 	movs.w	r8, r7, asr #2
 800cc9a:	d018      	beq.n	800ccce <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x58e>
 800cc9c:	f859 4b04 	ldr.w	r4, [r9], #4
 800cca0:	f856 0b04 	ldr.w	r0, [r6], #4
 800cca4:	f856 1b04 	ldr.w	r1, [r6], #4
 800cca8:	f856 2b04 	ldr.w	r2, [r6], #4
 800ccac:	f856 3b04 	ldr.w	r3, [r6], #4
 800ccb0:	fa2f f584 	sxtb16	r5, r4
 800ccb4:	fa2f f494 	sxtb16	r4, r4, ror #8
 800ccb8:	fb25 cc00 	smlad	ip, r5, r0, ip
 800ccbc:	fb25 ee02 	smlad	lr, r5, r2, lr
 800ccc0:	fb24 cc01 	smlad	ip, r4, r1, ip
 800ccc4:	fb24 ee03 	smlad	lr, r4, r3, lr
 800ccc8:	f1b8 0801 	subs.w	r8, r8, #1
 800cccc:	dce6      	bgt.n	800cc9c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x55c>
 800ccce:	f017 0803 	ands.w	r8, r7, #3
 800ccd2:	f1b8 0f00 	cmp.w	r8, #0
 800ccd6:	d00c      	beq.n	800ccf2 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5b2>
 800ccd8:	f936 3b02 	ldrsh.w	r3, [r6], #2
 800ccdc:	f936 5b02 	ldrsh.w	r5, [r6], #2
 800cce0:	f919 1b01 	ldrsb.w	r1, [r9], #1
 800cce4:	fb13 cc01 	smlabb	ip, r3, r1, ip
 800cce8:	fb15 ee01 	smlabb	lr, r5, r1, lr
 800ccec:	f1b8 0801 	subs.w	r8, r8, #1
 800ccf0:	dcf2      	bgt.n	800ccd8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x598>
 800ccf2:	9800      	ldr	r0, [sp, #0]
 800ccf4:	9902      	ldr	r1, [sp, #8]
 800ccf6:	9a04      	ldr	r2, [sp, #16]
 800ccf8:	9b06      	ldr	r3, [sp, #24]
 800ccfa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800ccfc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ccfe:	4437      	add	r7, r6
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f040 8099 	bne.w	800ce38 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6f8>
 800cd06:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800cd0a:	fb5c 0c01 	smmla	ip, ip, r1, r0
 800cd0e:	fa4c fc02 	asr.w	ip, ip, r2
 800cd12:	f30c 0c07 	ssat	ip, #8, ip
 800cd16:	f886 c000 	strb.w	ip, [r6]
 800cd1a:	9801      	ldr	r0, [sp, #4]
 800cd1c:	9903      	ldr	r1, [sp, #12]
 800cd1e:	9a05      	ldr	r2, [sp, #20]
 800cd20:	9b07      	ldr	r3, [sp, #28]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d166      	bne.n	800cdf4 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6b4>
 800cd26:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800cd2a:	fb5e 0e01 	smmla	lr, lr, r1, r0
 800cd2e:	fa4e fe02 	asr.w	lr, lr, r2
 800cd32:	f30e 0e07 	ssat	lr, #8, lr
 800cd36:	f887 e000 	strb.w	lr, [r7]
 800cd3a:	e6d0      	b.n	800cade <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 800cd3c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800cd3e:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 800cd40:	eb00 0907 	add.w	r9, r0, r7
 800cd44:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800cd46:	2f03      	cmp	r7, #3
 800cd48:	dd11      	ble.n	800cd6e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x62e>
 800cd4a:	ea4f 06a7 	mov.w	r6, r7, asr #2
 800cd4e:	f850 1b04 	ldr.w	r1, [r0], #4
 800cd52:	f859 4b04 	ldr.w	r4, [r9], #4
 800cd56:	fa2f f291 	sxtb16	r2, r1, ror #8
 800cd5a:	fa2f f181 	sxtb16	r1, r1
 800cd5e:	fa2f f894 	sxtb16	r8, r4, ror #8
 800cd62:	fa2f f484 	sxtb16	r4, r4
 800cd66:	e8a3 0116 	stmia.w	r3!, {r1, r2, r4, r8}
 800cd6a:	3e01      	subs	r6, #1
 800cd6c:	dcef      	bgt.n	800cd4e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x60e>
 800cd6e:	f017 0603 	ands.w	r6, r7, #3
 800cd72:	f77f ad4c 	ble.w	800c80e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xce>
 800cd76:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800cd7a:	f823 1b02 	strh.w	r1, [r3], #2
 800cd7e:	f919 1b01 	ldrsb.w	r1, [r9], #1
 800cd82:	f823 1b02 	strh.w	r1, [r3], #2
 800cd86:	3e01      	subs	r6, #1
 800cd88:	dcf5      	bgt.n	800cd76 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x636>
 800cd8a:	e540      	b.n	800c80e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xce>
 800cd8c:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 800cd8e:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800cd90:	f04f 0300 	mov.w	r3, #0
 800cd94:	4618      	mov	r0, r3
 800cd96:	10b1      	asrs	r1, r6, #2
 800cd98:	d017      	beq.n	800cdca <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x68a>
 800cd9a:	e8b2 1680 	ldmia.w	r2!, {r7, r9, sl, ip}
 800cd9e:	fa00 f087 	sxtah	r0, r0, r7
 800cda2:	fa00 f0a7 	sxtah	r0, r0, r7, ror #16
 800cda6:	fa00 f089 	sxtah	r0, r0, r9
 800cdaa:	fa00 f0a9 	sxtah	r0, r0, r9, ror #16
 800cdae:	fa03 f38a 	sxtah	r3, r3, sl
 800cdb2:	fa03 f3aa 	sxtah	r3, r3, sl, ror #16
 800cdb6:	fa03 f38c 	sxtah	r3, r3, ip
 800cdba:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 800cdbe:	3901      	subs	r1, #1
 800cdc0:	dceb      	bgt.n	800cd9a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x65a>
 800cdc2:	f1c0 0000 	rsb	r0, r0, #0
 800cdc6:	f1c3 0300 	rsb	r3, r3, #0
 800cdca:	f016 0103 	ands.w	r1, r6, #3
 800cdce:	d00b      	beq.n	800cde8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6a8>
 800cdd0:	f9b2 4000 	ldrsh.w	r4, [r2]
 800cdd4:	eba0 0004 	sub.w	r0, r0, r4
 800cdd8:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800cddc:	eba3 0304 	sub.w	r3, r3, r4
 800cde0:	3901      	subs	r1, #1
 800cde2:	f102 0204 	add.w	r2, r2, #4
 800cde6:	dcf3      	bgt.n	800cdd0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x690>
 800cde8:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800cdea:	fb02 f000 	mul.w	r0, r2, r0
 800cdee:	fb03 f202 	mul.w	r2, r3, r2
 800cdf2:	e512      	b.n	800c81a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xda>
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	d011      	beq.n	800ce1c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6dc>
 800cdf8:	f04f 0301 	mov.w	r3, #1
 800cdfc:	fa03 f302 	lsl.w	r3, r3, r2
 800ce00:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800ce04:	fb5e 3e01 	smmla	lr, lr, r1, r3
 800ce08:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800ce0c:	fa4e fe02 	asr.w	lr, lr, r2
 800ce10:	4486      	add	lr, r0
 800ce12:	f30e 0e07 	ssat	lr, #8, lr
 800ce16:	f887 e000 	strb.w	lr, [r7]
 800ce1a:	e660      	b.n	800cade <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 800ce1c:	f1c2 0301 	rsb	r3, r2, #1
 800ce20:	fa0e fe03 	lsl.w	lr, lr, r3
 800ce24:	f30e 0e1f 	ssat	lr, #32, lr
 800ce28:	fb5e fe11 	smmulr	lr, lr, r1
 800ce2c:	4486      	add	lr, r0
 800ce2e:	f30e 0e07 	ssat	lr, #8, lr
 800ce32:	f887 e000 	strb.w	lr, [r7]
 800ce36:	e652      	b.n	800cade <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 800ce38:	3301      	adds	r3, #1
 800ce3a:	d00d      	beq.n	800ce58 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x718>
 800ce3c:	f04f 0301 	mov.w	r3, #1
 800ce40:	fa03 f302 	lsl.w	r3, r3, r2
 800ce44:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800ce48:	fb5c 3c01 	smmla	ip, ip, r1, r3
 800ce4c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800ce50:	fa4c fc02 	asr.w	ip, ip, r2
 800ce54:	4484      	add	ip, r0
 800ce56:	e75c      	b.n	800cd12 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5d2>
 800ce58:	f1c2 0301 	rsb	r3, r2, #1
 800ce5c:	fa0c fc03 	lsl.w	ip, ip, r3
 800ce60:	f30c 0c1f 	ssat	ip, #32, ip
 800ce64:	fb5c fc11 	smmulr	ip, ip, r1
 800ce68:	4484      	add	ip, r0
 800ce6a:	e752      	b.n	800cd12 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5d2>
 800ce6c:	1c7b      	adds	r3, r7, #1
 800ce6e:	d00d      	beq.n	800ce8c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x74c>
 800ce70:	f04f 0301 	mov.w	r3, #1
 800ce74:	fa03 f307 	lsl.w	r3, r3, r7
 800ce78:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800ce7c:	fb5e 3e04 	smmla	lr, lr, r4, r3
 800ce80:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800ce84:	fa4e fe07 	asr.w	lr, lr, r7
 800ce88:	4486      	add	lr, r0
 800ce8a:	e691      	b.n	800cbb0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x470>
 800ce8c:	f1c7 0301 	rsb	r3, r7, #1
 800ce90:	fa0e fe03 	lsl.w	lr, lr, r3
 800ce94:	f30e 0e1f 	ssat	lr, #32, lr
 800ce98:	fb5e fe14 	smmulr	lr, lr, r4
 800ce9c:	4486      	add	lr, r0
 800ce9e:	e687      	b.n	800cbb0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x470>

0800cea0 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS>:
 800cea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea4:	b099      	sub	sp, #100	@ 0x64
 800cea6:	bf00      	nop
 800cea8:	9014      	str	r0, [sp, #80]	@ 0x50
 800ceaa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ceac:	9216      	str	r2, [sp, #88]	@ 0x58
 800ceae:	9312      	str	r3, [sp, #72]	@ 0x48
 800ceb0:	f04f 0800 	mov.w	r8, #0
 800ceb4:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 800ceb8:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800cebc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cebe:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 800cec2:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cec6:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800ceca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cece:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ced0:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800ced4:	e9d2 1200 	ldrd	r1, r2, [r2]
 800ced8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cedc:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 800cede:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800cee2:	e9d2 1200 	ldrd	r1, r2, [r2]
 800cee6:	e9cd 1200 	strd	r1, r2, [sp]
 800ceea:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800ceec:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800ceee:	f04f 0610 	mov.w	r6, #16
 800cef2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800cef4:	f850 1b04 	ldr.w	r1, [r0], #4
 800cef8:	fa2f f291 	sxtb16	r2, r1, ror #8
 800cefc:	fa2f f181 	sxtb16	r1, r1
 800cf00:	fa2f f894 	sxtb16	r8, r4, ror #8
 800cf04:	fa2f f484 	sxtb16	r4, r4
 800cf08:	e8a3 0116 	stmia.w	r3!, {r1, r2, r4, r8}
 800cf0c:	3e01      	subs	r6, #1
 800cf0e:	dcf0      	bgt.n	800cef2 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x52>
 800cf10:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800cf12:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800cf14:	f04f 0300 	mov.w	r3, #0
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f04f 0110 	mov.w	r1, #16
 800cf1e:	e8b2 1700 	ldmia.w	r2!, {r8, r9, sl, ip}
 800cf22:	fa00 f088 	sxtah	r0, r0, r8
 800cf26:	fa00 f0a8 	sxtah	r0, r0, r8, ror #16
 800cf2a:	fa00 f089 	sxtah	r0, r0, r9
 800cf2e:	fa00 f0a9 	sxtah	r0, r0, r9, ror #16
 800cf32:	fa03 f38a 	sxtah	r3, r3, sl
 800cf36:	fa03 f3aa 	sxtah	r3, r3, sl, ror #16
 800cf3a:	fa03 f38c 	sxtah	r3, r3, ip
 800cf3e:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 800cf42:	3901      	subs	r1, #1
 800cf44:	dceb      	bgt.n	800cf1e <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x7e>
 800cf46:	f1c0 0000 	rsb	r0, r0, #0
 800cf4a:	f1c3 0300 	rsb	r3, r3, #0
 800cf4e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800cf50:	fb02 f000 	mul.w	r0, r2, r0
 800cf54:	fb03 f202 	mul.w	r2, r3, r2
 800cf58:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800cf5a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800cf5e:	e9d1 3400 	ldrd	r3, r4, [r1]
 800cf62:	4403      	add	r3, r0
 800cf64:	4414      	add	r4, r2
 800cf66:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
 800cf6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cf6c:	f04f 0305 	mov.w	r3, #5
 800cf70:	f102 0203 	add.w	r2, r2, #3
 800cf74:	441a      	add	r2, r3
 800cf76:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 800cf7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cf7c:	f04f 073e 	mov.w	r7, #62	@ 0x3e
 800cf80:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf84:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 800cf86:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 800cf8a:	46e2      	mov	sl, ip
 800cf8c:	46f3      	mov	fp, lr
 800cf8e:	f103 0301 	add.w	r3, r3, #1
 800cf92:	930c      	str	r3, [sp, #48]	@ 0x30
 800cf94:	f04f 0802 	mov.w	r8, #2
 800cf98:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 800cf9c:	f856 0b04 	ldr.w	r0, [r6], #4
 800cfa0:	f856 1b04 	ldr.w	r1, [r6], #4
 800cfa4:	f856 2b04 	ldr.w	r2, [r6], #4
 800cfa8:	f856 3b04 	ldr.w	r3, [r6], #4
 800cfac:	fa2f f485 	sxtb16	r4, r5
 800cfb0:	fa2f f595 	sxtb16	r5, r5, ror #8
 800cfb4:	fb24 aa00 	smlad	sl, r4, r0, sl
 800cfb8:	fb24 bb02 	smlad	fp, r4, r2, fp
 800cfbc:	fb25 aa01 	smlad	sl, r5, r1, sl
 800cfc0:	fb25 bb03 	smlad	fp, r5, r3, fp
 800cfc4:	f859 4b04 	ldr.w	r4, [r9], #4
 800cfc8:	fa2f f584 	sxtb16	r5, r4
 800cfcc:	fa2f f494 	sxtb16	r4, r4, ror #8
 800cfd0:	fb25 cc00 	smlad	ip, r5, r0, ip
 800cfd4:	fb25 ee02 	smlad	lr, r5, r2, lr
 800cfd8:	fb24 cc01 	smlad	ip, r4, r1, ip
 800cfdc:	fb24 ee03 	smlad	lr, r4, r3, lr
 800cfe0:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 800cfe4:	f856 0b04 	ldr.w	r0, [r6], #4
 800cfe8:	f856 1b04 	ldr.w	r1, [r6], #4
 800cfec:	f856 2b04 	ldr.w	r2, [r6], #4
 800cff0:	f856 3b04 	ldr.w	r3, [r6], #4
 800cff4:	fa2f f485 	sxtb16	r4, r5
 800cff8:	fa2f f595 	sxtb16	r5, r5, ror #8
 800cffc:	fb24 aa00 	smlad	sl, r4, r0, sl
 800d000:	fb24 bb02 	smlad	fp, r4, r2, fp
 800d004:	fb25 aa01 	smlad	sl, r5, r1, sl
 800d008:	fb25 bb03 	smlad	fp, r5, r3, fp
 800d00c:	f859 4b04 	ldr.w	r4, [r9], #4
 800d010:	fa2f f584 	sxtb16	r5, r4
 800d014:	fa2f f494 	sxtb16	r4, r4, ror #8
 800d018:	fb25 cc00 	smlad	ip, r5, r0, ip
 800d01c:	fb25 ee02 	smlad	lr, r5, r2, lr
 800d020:	fb24 cc01 	smlad	ip, r4, r1, ip
 800d024:	fb24 ee03 	smlad	lr, r4, r3, lr
 800d028:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 800d02c:	f856 0b04 	ldr.w	r0, [r6], #4
 800d030:	f856 1b04 	ldr.w	r1, [r6], #4
 800d034:	f856 2b04 	ldr.w	r2, [r6], #4
 800d038:	f856 3b04 	ldr.w	r3, [r6], #4
 800d03c:	fa2f f485 	sxtb16	r4, r5
 800d040:	fa2f f595 	sxtb16	r5, r5, ror #8
 800d044:	fb24 aa00 	smlad	sl, r4, r0, sl
 800d048:	fb24 bb02 	smlad	fp, r4, r2, fp
 800d04c:	fb25 aa01 	smlad	sl, r5, r1, sl
 800d050:	fb25 bb03 	smlad	fp, r5, r3, fp
 800d054:	f859 4b04 	ldr.w	r4, [r9], #4
 800d058:	fa2f f584 	sxtb16	r5, r4
 800d05c:	fa2f f494 	sxtb16	r4, r4, ror #8
 800d060:	fb25 cc00 	smlad	ip, r5, r0, ip
 800d064:	fb25 ee02 	smlad	lr, r5, r2, lr
 800d068:	fb24 cc01 	smlad	ip, r4, r1, ip
 800d06c:	fb24 ee03 	smlad	lr, r4, r3, lr
 800d070:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 800d074:	f856 0b04 	ldr.w	r0, [r6], #4
 800d078:	f856 1b04 	ldr.w	r1, [r6], #4
 800d07c:	f856 2b04 	ldr.w	r2, [r6], #4
 800d080:	f856 3b04 	ldr.w	r3, [r6], #4
 800d084:	fa2f f485 	sxtb16	r4, r5
 800d088:	fa2f f595 	sxtb16	r5, r5, ror #8
 800d08c:	fb24 aa00 	smlad	sl, r4, r0, sl
 800d090:	fb24 bb02 	smlad	fp, r4, r2, fp
 800d094:	fb25 aa01 	smlad	sl, r5, r1, sl
 800d098:	fb25 bb03 	smlad	fp, r5, r3, fp
 800d09c:	f859 4b04 	ldr.w	r4, [r9], #4
 800d0a0:	fa2f f584 	sxtb16	r5, r4
 800d0a4:	fa2f f494 	sxtb16	r4, r4, ror #8
 800d0a8:	fb25 cc00 	smlad	ip, r5, r0, ip
 800d0ac:	fb25 ee02 	smlad	lr, r5, r2, lr
 800d0b0:	fb24 cc01 	smlad	ip, r4, r1, ip
 800d0b4:	fb24 ee03 	smlad	lr, r4, r3, lr
 800d0b8:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 800d0bc:	f856 0b04 	ldr.w	r0, [r6], #4
 800d0c0:	f856 1b04 	ldr.w	r1, [r6], #4
 800d0c4:	f856 2b04 	ldr.w	r2, [r6], #4
 800d0c8:	f856 3b04 	ldr.w	r3, [r6], #4
 800d0cc:	fa2f f485 	sxtb16	r4, r5
 800d0d0:	fa2f f595 	sxtb16	r5, r5, ror #8
 800d0d4:	fb24 aa00 	smlad	sl, r4, r0, sl
 800d0d8:	fb24 bb02 	smlad	fp, r4, r2, fp
 800d0dc:	fb25 aa01 	smlad	sl, r5, r1, sl
 800d0e0:	fb25 bb03 	smlad	fp, r5, r3, fp
 800d0e4:	f859 4b04 	ldr.w	r4, [r9], #4
 800d0e8:	fa2f f584 	sxtb16	r5, r4
 800d0ec:	fa2f f494 	sxtb16	r4, r4, ror #8
 800d0f0:	fb25 cc00 	smlad	ip, r5, r0, ip
 800d0f4:	fb25 ee02 	smlad	lr, r5, r2, lr
 800d0f8:	fb24 cc01 	smlad	ip, r4, r1, ip
 800d0fc:	fb24 ee03 	smlad	lr, r4, r3, lr
 800d100:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 800d104:	f856 0b04 	ldr.w	r0, [r6], #4
 800d108:	f856 1b04 	ldr.w	r1, [r6], #4
 800d10c:	f856 2b04 	ldr.w	r2, [r6], #4
 800d110:	f856 3b04 	ldr.w	r3, [r6], #4
 800d114:	fa2f f485 	sxtb16	r4, r5
 800d118:	fa2f f595 	sxtb16	r5, r5, ror #8
 800d11c:	fb24 aa00 	smlad	sl, r4, r0, sl
 800d120:	fb24 bb02 	smlad	fp, r4, r2, fp
 800d124:	fb25 aa01 	smlad	sl, r5, r1, sl
 800d128:	fb25 bb03 	smlad	fp, r5, r3, fp
 800d12c:	f859 4b04 	ldr.w	r4, [r9], #4
 800d130:	fa2f f584 	sxtb16	r5, r4
 800d134:	fa2f f494 	sxtb16	r4, r4, ror #8
 800d138:	fb25 cc00 	smlad	ip, r5, r0, ip
 800d13c:	fb25 ee02 	smlad	lr, r5, r2, lr
 800d140:	fb24 cc01 	smlad	ip, r4, r1, ip
 800d144:	fb24 ee03 	smlad	lr, r4, r3, lr
 800d148:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 800d14c:	f856 0b04 	ldr.w	r0, [r6], #4
 800d150:	f856 1b04 	ldr.w	r1, [r6], #4
 800d154:	f856 2b04 	ldr.w	r2, [r6], #4
 800d158:	f856 3b04 	ldr.w	r3, [r6], #4
 800d15c:	fa2f f485 	sxtb16	r4, r5
 800d160:	fa2f f595 	sxtb16	r5, r5, ror #8
 800d164:	fb24 aa00 	smlad	sl, r4, r0, sl
 800d168:	fb24 bb02 	smlad	fp, r4, r2, fp
 800d16c:	fb25 aa01 	smlad	sl, r5, r1, sl
 800d170:	fb25 bb03 	smlad	fp, r5, r3, fp
 800d174:	f859 4b04 	ldr.w	r4, [r9], #4
 800d178:	fa2f f584 	sxtb16	r5, r4
 800d17c:	fa2f f494 	sxtb16	r4, r4, ror #8
 800d180:	fb25 cc00 	smlad	ip, r5, r0, ip
 800d184:	fb25 ee02 	smlad	lr, r5, r2, lr
 800d188:	fb24 cc01 	smlad	ip, r4, r1, ip
 800d18c:	fb24 ee03 	smlad	lr, r4, r3, lr
 800d190:	f8d9 5040 	ldr.w	r5, [r9, #64]	@ 0x40
 800d194:	f856 0b04 	ldr.w	r0, [r6], #4
 800d198:	f856 1b04 	ldr.w	r1, [r6], #4
 800d19c:	f856 2b04 	ldr.w	r2, [r6], #4
 800d1a0:	f856 3b04 	ldr.w	r3, [r6], #4
 800d1a4:	fa2f f485 	sxtb16	r4, r5
 800d1a8:	fa2f f595 	sxtb16	r5, r5, ror #8
 800d1ac:	fb24 aa00 	smlad	sl, r4, r0, sl
 800d1b0:	fb24 bb02 	smlad	fp, r4, r2, fp
 800d1b4:	fb25 aa01 	smlad	sl, r5, r1, sl
 800d1b8:	fb25 bb03 	smlad	fp, r5, r3, fp
 800d1bc:	f859 4b04 	ldr.w	r4, [r9], #4
 800d1c0:	fa2f f584 	sxtb16	r5, r4
 800d1c4:	fa2f f494 	sxtb16	r4, r4, ror #8
 800d1c8:	fb25 cc00 	smlad	ip, r5, r0, ip
 800d1cc:	fb25 ee02 	smlad	lr, r5, r2, lr
 800d1d0:	fb24 cc01 	smlad	ip, r4, r1, ip
 800d1d4:	fb24 ee03 	smlad	lr, r4, r3, lr
 800d1d8:	f1b8 0801 	subs.w	r8, r8, #1
 800d1dc:	f73f aedc 	bgt.w	800cf98 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0xf8>
 800d1e0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d1e2:	462e      	mov	r6, r5
 800d1e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d1e6:	1e90      	subs	r0, r2, #2
 800d1e8:	dc09      	bgt.n	800d1fe <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x35e>
 800d1ea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d1ec:	f1c2 0202 	rsb	r2, r2, #2
 800d1f0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800d1f4:	920c      	str	r2, [sp, #48]	@ 0x30
 800d1f6:	f100 0005 	add.w	r0, r0, #5
 800d1fa:	f105 0502 	add.w	r5, r5, #2
 800d1fe:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d200:	9800      	ldr	r0, [sp, #0]
 800d202:	9902      	ldr	r1, [sp, #8]
 800d204:	9a04      	ldr	r2, [sp, #16]
 800d206:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d208:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800d20c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800d210:	fb5c 0c01 	smmla	ip, ip, r1, r0
 800d214:	fb5a 0a01 	smmla	sl, sl, r1, r0
 800d218:	fa4c fc02 	asr.w	ip, ip, r2
 800d21c:	fa4a fa02 	asr.w	sl, sl, r2
 800d220:	f30c 0c07 	ssat	ip, #8, ip
 800d224:	f30a 0a07 	ssat	sl, #8, sl
 800d228:	f886 c000 	strb.w	ip, [r6]
 800d22c:	f884 a000 	strb.w	sl, [r4]
 800d230:	9801      	ldr	r0, [sp, #4]
 800d232:	9903      	ldr	r1, [sp, #12]
 800d234:	9a05      	ldr	r2, [sp, #20]
 800d236:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800d23a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800d23e:	fb5e 0e01 	smmla	lr, lr, r1, r0
 800d242:	fb5b 0b01 	smmla	fp, fp, r1, r0
 800d246:	fa4e fe02 	asr.w	lr, lr, r2
 800d24a:	fa4b fb02 	asr.w	fp, fp, r2
 800d24e:	f30e 0e07 	ssat	lr, #8, lr
 800d252:	f30b 0b07 	ssat	fp, #8, fp
 800d256:	f886 e0bd 	strb.w	lr, [r6, #189]	@ 0xbd
 800d25a:	f884 b0bd 	strb.w	fp, [r4, #189]	@ 0xbd
 800d25e:	f105 0302 	add.w	r3, r5, #2
 800d262:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d264:	f109 0940 	add.w	r9, r9, #64	@ 0x40
 800d268:	3f01      	subs	r7, #1
 800d26a:	f47f ae8a 	bne.w	800cf82 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0xe2>
 800d26e:	f8cd 9020 	str.w	r9, [sp, #32]
 800d272:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d276:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 800d278:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	@ 0x24
 800d27c:	f04f 0810 	mov.w	r8, #16
 800d280:	f859 4b04 	ldr.w	r4, [r9], #4
 800d284:	f856 0b04 	ldr.w	r0, [r6], #4
 800d288:	f856 1b04 	ldr.w	r1, [r6], #4
 800d28c:	f856 2b04 	ldr.w	r2, [r6], #4
 800d290:	f856 3b04 	ldr.w	r3, [r6], #4
 800d294:	fa2f f584 	sxtb16	r5, r4
 800d298:	fa2f f494 	sxtb16	r4, r4, ror #8
 800d29c:	fb25 cc00 	smlad	ip, r5, r0, ip
 800d2a0:	fb25 ee02 	smlad	lr, r5, r2, lr
 800d2a4:	fb24 cc01 	smlad	ip, r4, r1, ip
 800d2a8:	fb24 ee03 	smlad	lr, r4, r3, lr
 800d2ac:	f1b8 0801 	subs.w	r8, r8, #1
 800d2b0:	dce6      	bgt.n	800d280 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x3e0>
 800d2b2:	9800      	ldr	r0, [sp, #0]
 800d2b4:	9902      	ldr	r1, [sp, #8]
 800d2b6:	9a04      	ldr	r2, [sp, #16]
 800d2b8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d2ba:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800d2be:	fb5c 0c01 	smmla	ip, ip, r1, r0
 800d2c2:	fa4c fc02 	asr.w	ip, ip, r2
 800d2c6:	f30c 0c07 	ssat	ip, #8, ip
 800d2ca:	f886 c000 	strb.w	ip, [r6]
 800d2ce:	9801      	ldr	r0, [sp, #4]
 800d2d0:	9903      	ldr	r1, [sp, #12]
 800d2d2:	9a05      	ldr	r2, [sp, #20]
 800d2d4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800d2d8:	fb5e 0e01 	smmla	lr, lr, r1, r0
 800d2dc:	fa4e fe02 	asr.w	lr, lr, r2
 800d2e0:	f30e 0e07 	ssat	lr, #8, lr
 800d2e4:	f886 e0bd 	strb.w	lr, [r6, #189]	@ 0xbd
 800d2e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d2ea:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 800d2ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d2f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d2f2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d2f4:	f503 73bd 	add.w	r3, r3, #378	@ 0x17a
 800d2f8:	9312      	str	r3, [sp, #72]	@ 0x48
 800d2fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d2fc:	f102 0201 	add.w	r2, r2, #1
 800d300:	920d      	str	r2, [sp, #52]	@ 0x34
 800d302:	2a20      	cmp	r2, #32
 800d304:	f6ff add8 	blt.w	800ceb8 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x18>
 800d308:	2000      	movs	r0, #0
 800d30a:	b019      	add	sp, #100	@ 0x64
 800d30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d310 <ai_sum_f32>:
 800d310:	edd1 7a00 	vldr	s15, [r1]
 800d314:	ed92 7a00 	vldr	s14, [r2]
 800d318:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d31c:	edc0 7a00 	vstr	s15, [r0]
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop

0800d324 <ai_sum_buffer_INT8>:
 800d324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d328:	9c07      	ldr	r4, [sp, #28]
 800d32a:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
 800d32e:	ed94 0a00 	vldr	s0, [r4]
 800d332:	9c08      	ldr	r4, [sp, #32]
 800d334:	f994 6000 	ldrsb.w	r6, [r4]
 800d338:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d33a:	edd4 0a00 	vldr	s1, [r4]
 800d33e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d340:	f994 c000 	ldrsb.w	ip, [r4]
 800d344:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d346:	ed94 1a00 	vldr	s2, [r4]
 800d34a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d34c:	f994 4000 	ldrsb.w	r4, [r4]
 800d350:	f1be 0f00 	cmp.w	lr, #0
 800d354:	d10e      	bne.n	800d374 <ai_sum_buffer_INT8+0x50>
 800d356:	eeb4 0a41 	vcmp.f32	s0, s2
 800d35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d35e:	d102      	bne.n	800d366 <ai_sum_buffer_INT8+0x42>
 800d360:	42a6      	cmp	r6, r4
 800d362:	f000 8122 	beq.w	800d5aa <ai_sum_buffer_INT8+0x286>
 800d366:	e9cd c408 	strd	ip, r4, [sp, #32]
 800d36a:	9607      	str	r6, [sp, #28]
 800d36c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d370:	f000 ba9a 	b.w	800d8a8 <ai_math_elementwise_sum_int8>
 800d374:	ee80 5a81 	vdiv.f32	s10, s1, s2
 800d378:	f04f 0801 	mov.w	r8, #1
 800d37c:	089f      	lsrs	r7, r3, #2
 800d37e:	eec0 6a01 	vdiv.f32	s13, s0, s2
 800d382:	ee07 4a90 	vmov	s15, r4
 800d386:	ee15 4a10 	vmov	r4, s10
 800d38a:	f3c4 55c7 	ubfx	r5, r4, #23, #8
 800d38e:	ee16 4a90 	vmov	r4, s13
 800d392:	f1c5 057e 	rsb	r5, r5, #126	@ 0x7e
 800d396:	f3c4 54c7 	ubfx	r4, r4, #23, #8
 800d39a:	ea05 75e5 	and.w	r5, r5, r5, asr #31
 800d39e:	f1c4 047e 	rsb	r4, r4, #126	@ 0x7e
 800d3a2:	42a5      	cmp	r5, r4
 800d3a4:	bfa8      	it	ge
 800d3a6:	4625      	movge	r5, r4
 800d3a8:	f105 041d 	add.w	r4, r5, #29
 800d3ac:	fa08 f404 	lsl.w	r4, r8, r4
 800d3b0:	ee07 4a10 	vmov	s14, r4
 800d3b4:	f105 0416 	add.w	r4, r5, #22
 800d3b8:	3515      	adds	r5, #21
 800d3ba:	fa08 f505 	lsl.w	r5, r8, r5
 800d3be:	fa08 f804 	lsl.w	r8, r8, r4
 800d3c2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800d3c6:	ee07 8a10 	vmov	s14, r8
 800d3ca:	f1be 0f01 	cmp.w	lr, #1
 800d3ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d3d6:	d075      	beq.n	800d4c4 <ai_sum_buffer_INT8+0x1a0>
 800d3d8:	ee06 6a10 	vmov	s12, r6
 800d3dc:	f992 2000 	ldrsb.w	r2, [r2]
 800d3e0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800d3e4:	eba2 020c 	sub.w	r2, r2, ip
 800d3e8:	eee6 7a66 	vfms.f32	s15, s12, s13
 800d3ec:	ee04 2a90 	vmov	s9, r2
 800d3f0:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800d3f4:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800d3f8:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d3fc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800d400:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d404:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 800d408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d40c:	ee17 6a10 	vmov	r6, s14
 800d410:	ee17 ea90 	vmov	lr, s15
 800d414:	44ae      	add	lr, r5
 800d416:	2f00      	cmp	r7, #0
 800d418:	f000 80e2 	beq.w	800d5e0 <ai_sum_buffer_INT8+0x2bc>
 800d41c:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800d420:	1d05      	adds	r5, r0, #4
 800d422:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d426:	f851 2b04 	ldr.w	r2, [r1], #4
 800d42a:	f002 29ff 	and.w	r9, r2, #4278255360	@ 0xff00ff00
 800d42e:	0212      	lsls	r2, r2, #8
 800d430:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 800d434:	fb36 ec02 	smlawb	ip, r6, r2, lr
 800d438:	fa4c fc04 	asr.w	ip, ip, r4
 800d43c:	f30c 0c07 	ssat	ip, #8, ip
 800d440:	f805 cc04 	strb.w	ip, [r5, #-4]
 800d444:	fb36 ec09 	smlawb	ip, r6, r9, lr
 800d448:	fa4c fc04 	asr.w	ip, ip, r4
 800d44c:	f30c 0c07 	ssat	ip, #8, ip
 800d450:	f805 cc03 	strb.w	ip, [r5, #-3]
 800d454:	fb36 ec12 	smlawt	ip, r6, r2, lr
 800d458:	fa4c fc04 	asr.w	ip, ip, r4
 800d45c:	f30c 0c07 	ssat	ip, #8, ip
 800d460:	f805 cc02 	strb.w	ip, [r5, #-2]
 800d464:	fb36 e219 	smlawt	r2, r6, r9, lr
 800d468:	4122      	asrs	r2, r4
 800d46a:	f302 0207 	ssat	r2, #8, r2
 800d46e:	428f      	cmp	r7, r1
 800d470:	f805 2c01 	strb.w	r2, [r5, #-1]
 800d474:	f105 0504 	add.w	r5, r5, #4
 800d478:	d1d5      	bne.n	800d426 <ai_sum_buffer_INT8+0x102>
 800d47a:	4440      	add	r0, r8
 800d47c:	f013 0303 	ands.w	r3, r3, #3
 800d480:	d01e      	beq.n	800d4c0 <ai_sum_buffer_INT8+0x19c>
 800d482:	f997 2000 	ldrsb.w	r2, [r7]
 800d486:	0212      	lsls	r2, r2, #8
 800d488:	fb36 e202 	smlawb	r2, r6, r2, lr
 800d48c:	4122      	asrs	r2, r4
 800d48e:	f302 0207 	ssat	r2, #8, r2
 800d492:	2b01      	cmp	r3, #1
 800d494:	7002      	strb	r2, [r0, #0]
 800d496:	d013      	beq.n	800d4c0 <ai_sum_buffer_INT8+0x19c>
 800d498:	f997 2001 	ldrsb.w	r2, [r7, #1]
 800d49c:	0212      	lsls	r2, r2, #8
 800d49e:	fb36 e202 	smlawb	r2, r6, r2, lr
 800d4a2:	4122      	asrs	r2, r4
 800d4a4:	f302 0207 	ssat	r2, #8, r2
 800d4a8:	2b02      	cmp	r3, #2
 800d4aa:	7042      	strb	r2, [r0, #1]
 800d4ac:	d008      	beq.n	800d4c0 <ai_sum_buffer_INT8+0x19c>
 800d4ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d4b2:	021b      	lsls	r3, r3, #8
 800d4b4:	fb36 e303 	smlawb	r3, r6, r3, lr
 800d4b8:	4123      	asrs	r3, r4
 800d4ba:	f303 0307 	ssat	r3, #8, r3
 800d4be:	7083      	strb	r3, [r0, #2]
 800d4c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4c4:	ee06 ca10 	vmov	s12, ip
 800d4c8:	f991 1000 	ldrsb.w	r1, [r1]
 800d4cc:	eef8 4ac6 	vcvt.f32.s32	s9, s12
 800d4d0:	1b89      	subs	r1, r1, r6
 800d4d2:	eee4 7ac5 	vfms.f32	s15, s9, s10
 800d4d6:	ee06 1a10 	vmov	s12, r1
 800d4da:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800d4de:	ee35 5a05 	vadd.f32	s10, s10, s10
 800d4e2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d4e6:	ee25 5a25 	vmul.f32	s10, s10, s11
 800d4ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d4ee:	eebd 7ac5 	vcvt.s32.f32	s14, s10
 800d4f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d4f6:	ee17 ca10 	vmov	ip, s14
 800d4fa:	ee17 6a90 	vmov	r6, s15
 800d4fe:	442e      	add	r6, r5
 800d500:	2f00      	cmp	r7, #0
 800d502:	d06f      	beq.n	800d5e4 <ai_sum_buffer_INT8+0x2c0>
 800d504:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800d508:	f100 0e04 	add.w	lr, r0, #4
 800d50c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d510:	f852 1b04 	ldr.w	r1, [r2], #4
 800d514:	020d      	lsls	r5, r1, #8
 800d516:	f005 25ff 	and.w	r5, r5, #4278255360	@ 0xff00ff00
 800d51a:	f001 21ff 	and.w	r1, r1, #4278255360	@ 0xff00ff00
 800d51e:	fb3c 6905 	smlawb	r9, ip, r5, r6
 800d522:	fa49 f904 	asr.w	r9, r9, r4
 800d526:	f309 0907 	ssat	r9, #8, r9
 800d52a:	f80e 9c04 	strb.w	r9, [lr, #-4]
 800d52e:	fb3c 6901 	smlawb	r9, ip, r1, r6
 800d532:	fa49 f904 	asr.w	r9, r9, r4
 800d536:	f309 0907 	ssat	r9, #8, r9
 800d53a:	f80e 9c03 	strb.w	r9, [lr, #-3]
 800d53e:	fb3c 6515 	smlawt	r5, ip, r5, r6
 800d542:	4125      	asrs	r5, r4
 800d544:	f305 0507 	ssat	r5, #8, r5
 800d548:	f80e 5c02 	strb.w	r5, [lr, #-2]
 800d54c:	fb3c 6111 	smlawt	r1, ip, r1, r6
 800d550:	4121      	asrs	r1, r4
 800d552:	f301 0107 	ssat	r1, #8, r1
 800d556:	42ba      	cmp	r2, r7
 800d558:	f80e 1c01 	strb.w	r1, [lr, #-1]
 800d55c:	f10e 0e04 	add.w	lr, lr, #4
 800d560:	d1d6      	bne.n	800d510 <ai_sum_buffer_INT8+0x1ec>
 800d562:	4440      	add	r0, r8
 800d564:	f013 0303 	ands.w	r3, r3, #3
 800d568:	d0aa      	beq.n	800d4c0 <ai_sum_buffer_INT8+0x19c>
 800d56a:	f997 2000 	ldrsb.w	r2, [r7]
 800d56e:	0212      	lsls	r2, r2, #8
 800d570:	fb3c 6202 	smlawb	r2, ip, r2, r6
 800d574:	4122      	asrs	r2, r4
 800d576:	f302 0207 	ssat	r2, #8, r2
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	7002      	strb	r2, [r0, #0]
 800d57e:	d09f      	beq.n	800d4c0 <ai_sum_buffer_INT8+0x19c>
 800d580:	f997 2001 	ldrsb.w	r2, [r7, #1]
 800d584:	0212      	lsls	r2, r2, #8
 800d586:	fb3c 6202 	smlawb	r2, ip, r2, r6
 800d58a:	4122      	asrs	r2, r4
 800d58c:	f302 0207 	ssat	r2, #8, r2
 800d590:	2b02      	cmp	r3, #2
 800d592:	7042      	strb	r2, [r0, #1]
 800d594:	d094      	beq.n	800d4c0 <ai_sum_buffer_INT8+0x19c>
 800d596:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d59a:	021b      	lsls	r3, r3, #8
 800d59c:	fb3c 6303 	smlawb	r3, ip, r3, r6
 800d5a0:	4123      	asrs	r3, r4
 800d5a2:	f303 0307 	ssat	r3, #8, r3
 800d5a6:	7083      	strb	r3, [r0, #2]
 800d5a8:	e78a      	b.n	800d4c0 <ai_sum_buffer_INT8+0x19c>
 800d5aa:	eef4 0a41 	vcmp.f32	s1, s2
 800d5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b2:	f47f aed8 	bne.w	800d366 <ai_sum_buffer_INT8+0x42>
 800d5b6:	45b4      	cmp	ip, r6
 800d5b8:	f47f aed5 	bne.w	800d366 <ai_sum_buffer_INT8+0x42>
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f43f af7f 	beq.w	800d4c0 <ai_sum_buffer_INT8+0x19c>
 800d5c2:	4403      	add	r3, r0
 800d5c4:	f911 4b01 	ldrsb.w	r4, [r1], #1
 800d5c8:	f912 5b01 	ldrsb.w	r5, [r2], #1
 800d5cc:	442c      	add	r4, r5
 800d5ce:	eba4 040c 	sub.w	r4, r4, ip
 800d5d2:	f304 0407 	ssat	r4, #8, r4
 800d5d6:	f800 4b01 	strb.w	r4, [r0], #1
 800d5da:	4283      	cmp	r3, r0
 800d5dc:	d1f2      	bne.n	800d5c4 <ai_sum_buffer_INT8+0x2a0>
 800d5de:	e76f      	b.n	800d4c0 <ai_sum_buffer_INT8+0x19c>
 800d5e0:	460f      	mov	r7, r1
 800d5e2:	e74b      	b.n	800d47c <ai_sum_buffer_INT8+0x158>
 800d5e4:	4617      	mov	r7, r2
 800d5e6:	e7bd      	b.n	800d564 <ai_sum_buffer_INT8+0x240>

0800d5e8 <ai_array_to_buffer_fmt>:
 800d5e8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800d5ec:	2b02      	cmp	r3, #2
 800d5ee:	d055      	beq.n	800d69c <ai_array_to_buffer_fmt+0xb4>
 800d5f0:	4a2d      	ldr	r2, [pc, #180]	@ (800d6a8 <ai_array_to_buffer_fmt+0xc0>)
 800d5f2:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d010      	beq.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d5fa:	dc21      	bgt.n	800d640 <ai_array_to_buffer_fmt+0x58>
 800d5fc:	4a2b      	ldr	r2, [pc, #172]	@ (800d6ac <ai_array_to_buffer_fmt+0xc4>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d00c      	beq.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d602:	dd0f      	ble.n	800d624 <ai_array_to_buffer_fmt+0x3c>
 800d604:	4a2a      	ldr	r2, [pc, #168]	@ (800d6b0 <ai_array_to_buffer_fmt+0xc8>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d008      	beq.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d60a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800d60e:	4293      	cmp	r3, r2
 800d610:	d004      	beq.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d612:	4a28      	ldr	r2, [pc, #160]	@ (800d6b4 <ai_array_to_buffer_fmt+0xcc>)
 800d614:	4293      	cmp	r3, r2
 800d616:	bf0c      	ite	eq
 800d618:	4613      	moveq	r3, r2
 800d61a:	2340      	movne	r3, #64	@ 0x40
 800d61c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800d620:	4318      	orrs	r0, r3
 800d622:	4770      	bx	lr
 800d624:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800d628:	4293      	cmp	r3, r2
 800d62a:	d0f7      	beq.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d62c:	dd2c      	ble.n	800d688 <ai_array_to_buffer_fmt+0xa0>
 800d62e:	4a22      	ldr	r2, [pc, #136]	@ (800d6b8 <ai_array_to_buffer_fmt+0xd0>)
 800d630:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800d634:	4293      	cmp	r3, r2
 800d636:	bf0c      	ite	eq
 800d638:	4613      	moveq	r3, r2
 800d63a:	2340      	movne	r3, #64	@ 0x40
 800d63c:	4318      	orrs	r0, r3
 800d63e:	4770      	bx	lr
 800d640:	4a1e      	ldr	r2, [pc, #120]	@ (800d6bc <ai_array_to_buffer_fmt+0xd4>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d0ea      	beq.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d646:	dd10      	ble.n	800d66a <ai_array_to_buffer_fmt+0x82>
 800d648:	4a1d      	ldr	r2, [pc, #116]	@ (800d6c0 <ai_array_to_buffer_fmt+0xd8>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d0e6      	beq.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d64e:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800d652:	4293      	cmp	r3, r2
 800d654:	d0e2      	beq.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d656:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800d65a:	4293      	cmp	r3, r2
 800d65c:	bf0c      	ite	eq
 800d65e:	4613      	moveq	r3, r2
 800d660:	2340      	movne	r3, #64	@ 0x40
 800d662:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800d666:	4318      	orrs	r0, r3
 800d668:	4770      	bx	lr
 800d66a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800d66e:	4293      	cmp	r3, r2
 800d670:	d0d4      	beq.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d672:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800d676:	4293      	cmp	r3, r2
 800d678:	d0d0      	beq.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d67a:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800d67e:	4293      	cmp	r3, r2
 800d680:	bf0c      	ite	eq
 800d682:	4613      	moveq	r3, r2
 800d684:	2340      	movne	r3, #64	@ 0x40
 800d686:	e7c9      	b.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d688:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d0c5      	beq.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d690:	3280      	adds	r2, #128	@ 0x80
 800d692:	4293      	cmp	r3, r2
 800d694:	bf0c      	ite	eq
 800d696:	4613      	moveq	r3, r2
 800d698:	2340      	movne	r3, #64	@ 0x40
 800d69a:	e7bf      	b.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d69c:	4b09      	ldr	r3, [pc, #36]	@ (800d6c4 <ai_array_to_buffer_fmt+0xdc>)
 800d69e:	4003      	ands	r3, r0
 800d6a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d6a4:	e7ba      	b.n	800d61c <ai_array_to_buffer_fmt+0x34>
 800d6a6:	bf00      	nop
 800d6a8:	00821040 	.word	0x00821040
 800d6ac:	00040840 	.word	0x00040840
 800d6b0:	00041040 	.word	0x00041040
 800d6b4:	0004084f 	.word	0x0004084f
 800d6b8:	00040447 	.word	0x00040447
 800d6bc:	00840447 	.word	0x00840447
 800d6c0:	0084084f 	.word	0x0084084f
 800d6c4:	00803fff 	.word	0x00803fff

0800d6c8 <ai_array_get_byte_size>:
 800d6c8:	b1d1      	cbz	r1, 800d700 <ai_array_get_byte_size+0x38>
 800d6ca:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d6ce:	fb03 f101 	mul.w	r1, r3, r1
 800d6d2:	f3c0 4c43 	ubfx	ip, r0, #17, #4
 800d6d6:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800d6da:	fa42 f20c 	asr.w	r2, r2, ip
 800d6de:	3107      	adds	r1, #7
 800d6e0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800d6e4:	07d2      	lsls	r2, r2, #31
 800d6e6:	f021 0107 	bic.w	r1, r1, #7
 800d6ea:	fa21 f100 	lsr.w	r1, r1, r0
 800d6ee:	bf5a      	itte	pl
 800d6f0:	fa43 f000 	asrpl.w	r0, r3, r0
 800d6f4:	4083      	lslpl	r3, r0
 800d6f6:	2300      	movmi	r3, #0
 800d6f8:	3107      	adds	r1, #7
 800d6fa:	4419      	add	r1, r3
 800d6fc:	08c8      	lsrs	r0, r1, #3
 800d6fe:	4770      	bx	lr
 800d700:	4608      	mov	r0, r1
 800d702:	4770      	bx	lr

0800d704 <ai_array_get_data_byte_size>:
 800d704:	b169      	cbz	r1, 800d722 <ai_array_get_data_byte_size+0x1e>
 800d706:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d70a:	fb01 f303 	mul.w	r3, r1, r3
 800d70e:	3307      	adds	r3, #7
 800d710:	f023 0307 	bic.w	r3, r3, #7
 800d714:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800d718:	fa23 f000 	lsr.w	r0, r3, r0
 800d71c:	3007      	adds	r0, #7
 800d71e:	08c0      	lsrs	r0, r0, #3
 800d720:	4770      	bx	lr
 800d722:	4608      	mov	r0, r1
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop

0800d728 <core_get_broadcasted_shape>:
 800d728:	b470      	push	{r4, r5, r6}
 800d72a:	6804      	ldr	r4, [r0, #0]
 800d72c:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800d730:	b314      	cbz	r4, 800d778 <core_get_broadcasted_shape+0x50>
 800d732:	4623      	mov	r3, r4
 800d734:	3b01      	subs	r3, #1
 800d736:	429c      	cmp	r4, r3
 800d738:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d73c:	d917      	bls.n	800d76e <core_get_broadcasted_shape+0x46>
 800d73e:	6815      	ldr	r5, [r2, #0]
 800d740:	680e      	ldr	r6, [r1, #0]
 800d742:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 800d746:	f04f 0401 	mov.w	r4, #1
 800d74a:	bf3c      	itt	cc
 800d74c:	6854      	ldrcc	r4, [r2, #4]
 800d74e:	f854 4023 	ldrcc.w	r4, [r4, r3, lsl #2]
 800d752:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 800d756:	f04f 0501 	mov.w	r5, #1
 800d75a:	bf3c      	itt	cc
 800d75c:	684d      	ldrcc	r5, [r1, #4]
 800d75e:	f855 500c 	ldrcc.w	r5, [r5, ip]
 800d762:	42ac      	cmp	r4, r5
 800d764:	bf38      	it	cc
 800d766:	462c      	movcc	r4, r5
 800d768:	6845      	ldr	r5, [r0, #4]
 800d76a:	f845 400c 	str.w	r4, [r5, ip]
 800d76e:	b11b      	cbz	r3, 800d778 <core_get_broadcasted_shape+0x50>
 800d770:	6804      	ldr	r4, [r0, #0]
 800d772:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800d776:	e7dd      	b.n	800d734 <core_get_broadcasted_shape+0xc>
 800d778:	bc70      	pop	{r4, r5, r6}
 800d77a:	4770      	bx	lr

0800d77c <core_compute_offsets>:
 800d77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d780:	e9d1 5400 	ldrd	r5, r4, [r1]
 800d784:	f5b5 6fa0 	cmp.w	r5, #1280	@ 0x500
 800d788:	6857      	ldr	r7, [r2, #4]
 800d78a:	6861      	ldr	r1, [r4, #4]
 800d78c:	bf28      	it	cs
 800d78e:	6925      	ldrcs	r5, [r4, #16]
 800d790:	6812      	ldr	r2, [r2, #0]
 800d792:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800d796:	bf2e      	itee	cs
 800d798:	fb05 fe01 	mulcs.w	lr, r5, r1
 800d79c:	468e      	movcc	lr, r1
 800d79e:	2501      	movcc	r5, #1
 800d7a0:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 800d7a4:	bf28      	it	cs
 800d7a6:	693e      	ldrcs	r6, [r7, #16]
 800d7a8:	e9d4 4202 	ldrd	r4, r2, [r4, #8]
 800d7ac:	e9d7 7c02 	ldrd	r7, ip, [r7, #8]
 800d7b0:	bf38      	it	cc
 800d7b2:	2601      	movcc	r6, #1
 800d7b4:	4562      	cmp	r2, ip
 800d7b6:	bf08      	it	eq
 800d7b8:	f1a2 0c01 	subeq.w	ip, r2, #1
 800d7bc:	6802      	ldr	r2, [r0, #0]
 800d7be:	bf08      	it	eq
 800d7c0:	fabc fc8c 	clzeq	ip, ip
 800d7c4:	b083      	sub	sp, #12
 800d7c6:	bf0c      	ite	eq
 800d7c8:	ea4f 1c5c 	moveq.w	ip, ip, lsr #5
 800d7cc:	f04f 0c01 	movne.w	ip, #1
 800d7d0:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800d7d4:	9701      	str	r7, [sp, #4]
 800d7d6:	d34e      	bcc.n	800d876 <core_compute_offsets+0xfa>
 800d7d8:	1baa      	subs	r2, r5, r6
 800d7da:	bf18      	it	ne
 800d7dc:	2201      	movne	r2, #1
 800d7de:	4541      	cmp	r1, r8
 800d7e0:	fb01 f902 	mul.w	r9, r1, r2
 800d7e4:	6842      	ldr	r2, [r0, #4]
 800d7e6:	d049      	beq.n	800d87c <core_compute_offsets+0x100>
 800d7e8:	f04f 0a00 	mov.w	sl, #0
 800d7ec:	f8c2 a004 	str.w	sl, [r2, #4]
 800d7f0:	6802      	ldr	r2, [r0, #0]
 800d7f2:	eba5 0a06 	sub.w	sl, r5, r6
 800d7f6:	faba fa8a 	clz	sl, sl
 800d7fa:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800d7fe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800d802:	2a04      	cmp	r2, #4
 800d804:	d906      	bls.n	800d814 <core_compute_offsets+0x98>
 800d806:	6847      	ldr	r7, [r0, #4]
 800d808:	fb03 f20a 	mul.w	r2, r3, sl
 800d80c:	613a      	str	r2, [r7, #16]
 800d80e:	6802      	ldr	r2, [r0, #0]
 800d810:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800d814:	9f01      	ldr	r7, [sp, #4]
 800d816:	42bc      	cmp	r4, r7
 800d818:	d03b      	beq.n	800d892 <core_compute_offsets+0x116>
 800d81a:	f04f 0b00 	mov.w	fp, #0
 800d81e:	ebb4 0a07 	subs.w	sl, r4, r7
 800d822:	bf18      	it	ne
 800d824:	f04f 0a01 	movne.w	sl, #1
 800d828:	2a02      	cmp	r2, #2
 800d82a:	fb0e fa0a 	mul.w	sl, lr, sl
 800d82e:	d922      	bls.n	800d876 <core_compute_offsets+0xfa>
 800d830:	ebab 0b0a 	sub.w	fp, fp, sl
 800d834:	6847      	ldr	r7, [r0, #4]
 800d836:	44cb      	add	fp, r9
 800d838:	fb03 f20b 	mul.w	r2, r3, fp
 800d83c:	60ba      	str	r2, [r7, #8]
 800d83e:	6802      	ldr	r2, [r0, #0]
 800d840:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800d844:	f1bc 0f00 	cmp.w	ip, #0
 800d848:	d109      	bne.n	800d85e <core_compute_offsets+0xe2>
 800d84a:	9f01      	ldr	r7, [sp, #4]
 800d84c:	42bc      	cmp	r4, r7
 800d84e:	d006      	beq.n	800d85e <core_compute_offsets+0xe2>
 800d850:	42b5      	cmp	r5, r6
 800d852:	d026      	beq.n	800d8a2 <core_compute_offsets+0x126>
 800d854:	ebb1 0108 	subs.w	r1, r1, r8
 800d858:	bf18      	it	ne
 800d85a:	2101      	movne	r1, #1
 800d85c:	e000      	b.n	800d860 <core_compute_offsets+0xe4>
 800d85e:	2100      	movs	r1, #0
 800d860:	2a03      	cmp	r2, #3
 800d862:	d908      	bls.n	800d876 <core_compute_offsets+0xfa>
 800d864:	fb0e f404 	mul.w	r4, lr, r4
 800d868:	fb0c 1114 	mls	r1, ip, r4, r1
 800d86c:	6842      	ldr	r2, [r0, #4]
 800d86e:	4451      	add	r1, sl
 800d870:	fb03 f101 	mul.w	r1, r3, r1
 800d874:	60d1      	str	r1, [r2, #12]
 800d876:	b003      	add	sp, #12
 800d878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d87c:	6053      	str	r3, [r2, #4]
 800d87e:	6802      	ldr	r2, [r0, #0]
 800d880:	42b5      	cmp	r5, r6
 800d882:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800d886:	bf14      	ite	ne
 800d888:	f1c1 0a00 	rsbne	sl, r1, #0
 800d88c:	f1c9 0a00 	rsbeq	sl, r9, #0
 800d890:	e7b7      	b.n	800d802 <core_compute_offsets+0x86>
 800d892:	42b5      	cmp	r5, r6
 800d894:	d0c1      	beq.n	800d81a <core_compute_offsets+0x9e>
 800d896:	ebb1 0b08 	subs.w	fp, r1, r8
 800d89a:	bf18      	it	ne
 800d89c:	f04f 0b01 	movne.w	fp, #1
 800d8a0:	e7bd      	b.n	800d81e <core_compute_offsets+0xa2>
 800d8a2:	4661      	mov	r1, ip
 800d8a4:	e7dc      	b.n	800d860 <core_compute_offsets+0xe4>
 800d8a6:	bf00      	nop

0800d8a8 <ai_math_elementwise_sum_int8>:
 800d8a8:	eec0 7a81 	vdiv.f32	s15, s1, s2
 800d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b0:	b085      	sub	sp, #20
 800d8b2:	4686      	mov	lr, r0
 800d8b4:	f99d 4038 	ldrsb.w	r4, [sp, #56]	@ 0x38
 800d8b8:	f99d 003c 	ldrsb.w	r0, [sp, #60]	@ 0x3c
 800d8bc:	4264      	negs	r4, r4
 800d8be:	2501      	movs	r5, #1
 800d8c0:	eec0 6a01 	vdiv.f32	s13, s0, s2
 800d8c4:	ee07 4a10 	vmov	s14, r4
 800d8c8:	461c      	mov	r4, r3
 800d8ca:	ee17 3a90 	vmov	r3, s15
 800d8ce:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800d8d2:	ee07 0a10 	vmov	s14, r0
 800d8d6:	ee16 0a90 	vmov	r0, s13
 800d8da:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800d8de:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 800d8e2:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 800d8e6:	ea03 73e3 	and.w	r3, r3, r3, asr #31
 800d8ea:	f1c0 007e 	rsb	r0, r0, #126	@ 0x7e
 800d8ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d8f2:	4283      	cmp	r3, r0
 800d8f4:	bfa8      	it	ge
 800d8f6:	4603      	movge	r3, r0
 800d8f8:	ee27 7ac7 	vnmul.f32	s14, s15, s14
 800d8fc:	f99d 0040 	ldrsb.w	r0, [sp, #64]	@ 0x40
 800d900:	eea6 7a26 	vfma.f32	s14, s12, s13
 800d904:	f103 0916 	add.w	r9, r3, #22
 800d908:	ea5f 0b94 	movs.w	fp, r4, lsr #2
 800d90c:	ee77 5aa7 	vadd.f32	s11, s15, s15
 800d910:	ee07 0a90 	vmov	s15, r0
 800d914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d918:	fa05 f009 	lsl.w	r0, r5, r9
 800d91c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d920:	ee07 0a10 	vmov	s14, r0
 800d924:	f103 001d 	add.w	r0, r3, #29
 800d928:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d92c:	fa05 f000 	lsl.w	r0, r5, r0
 800d930:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d934:	ee07 0a10 	vmov	s14, r0
 800d938:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800d93c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d944:	ee65 6a07 	vmul.f32	s13, s10, s14
 800d948:	ee17 6a90 	vmov	r6, s15
 800d94c:	ee25 7a87 	vmul.f32	s14, s11, s14
 800d950:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d954:	f103 0315 	add.w	r3, r3, #21
 800d958:	ee17 8a90 	vmov	r8, s15
 800d95c:	fa05 f503 	lsl.w	r5, r5, r3
 800d960:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800d964:	442e      	add	r6, r5
 800d966:	ee17 7a90 	vmov	r7, s15
 800d96a:	f106 36ff 	add.w	r6, r6, #4294967295
 800d96e:	f000 8084 	beq.w	800da7a <ai_math_elementwise_sum_int8+0x1d2>
 800d972:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d976:	e9cd 3e01 	strd	r3, lr, [sp, #4]
 800d97a:	f10e 0504 	add.w	r5, lr, #4
 800d97e:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 800d982:	4692      	mov	sl, r2
 800d984:	9203      	str	r2, [sp, #12]
 800d986:	f851 0b04 	ldr.w	r0, [r1], #4
 800d98a:	f85a 3b04 	ldr.w	r3, [sl], #4
 800d98e:	ea4f 2e00 	mov.w	lr, r0, lsl #8
 800d992:	f00e 2eff 	and.w	lr, lr, #4278255360	@ 0xff00ff00
 800d996:	f000 20ff 	and.w	r0, r0, #4278255360	@ 0xff00ff00
 800d99a:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d99e:	fb38 6c0e 	smlawb	ip, r8, lr, r6
 800d9a2:	021b      	lsls	r3, r3, #8
 800d9a4:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 800d9a8:	fb37 cc03 	smlawb	ip, r7, r3, ip
 800d9ac:	fa4c fc09 	asr.w	ip, ip, r9
 800d9b0:	f30c 0c07 	ssat	ip, #8, ip
 800d9b4:	f805 cc04 	strb.w	ip, [r5, #-4]
 800d9b8:	fb38 6c00 	smlawb	ip, r8, r0, r6
 800d9bc:	fb37 cc02 	smlawb	ip, r7, r2, ip
 800d9c0:	fa4c fc09 	asr.w	ip, ip, r9
 800d9c4:	f30c 0c07 	ssat	ip, #8, ip
 800d9c8:	f805 cc03 	strb.w	ip, [r5, #-3]
 800d9cc:	fb38 6e1e 	smlawt	lr, r8, lr, r6
 800d9d0:	fb37 e313 	smlawt	r3, r7, r3, lr
 800d9d4:	fa43 f309 	asr.w	r3, r3, r9
 800d9d8:	f303 0307 	ssat	r3, #8, r3
 800d9dc:	f805 3c02 	strb.w	r3, [r5, #-2]
 800d9e0:	fb38 6010 	smlawt	r0, r8, r0, r6
 800d9e4:	fb37 0212 	smlawt	r2, r7, r2, r0
 800d9e8:	fa42 f209 	asr.w	r2, r2, r9
 800d9ec:	f302 0207 	ssat	r2, #8, r2
 800d9f0:	458b      	cmp	fp, r1
 800d9f2:	f805 2c01 	strb.w	r2, [r5, #-1]
 800d9f6:	f105 0504 	add.w	r5, r5, #4
 800d9fa:	d1c4      	bne.n	800d986 <ai_math_elementwise_sum_int8+0xde>
 800d9fc:	e9dd 3e01 	ldrd	r3, lr, [sp, #4]
 800da00:	9a03      	ldr	r2, [sp, #12]
 800da02:	449e      	add	lr, r3
 800da04:	441a      	add	r2, r3
 800da06:	f014 0103 	ands.w	r1, r4, #3
 800da0a:	d033      	beq.n	800da74 <ai_math_elementwise_sum_int8+0x1cc>
 800da0c:	f99b 0000 	ldrsb.w	r0, [fp]
 800da10:	0200      	lsls	r0, r0, #8
 800da12:	fb38 6000 	smlawb	r0, r8, r0, r6
 800da16:	f992 3000 	ldrsb.w	r3, [r2]
 800da1a:	021b      	lsls	r3, r3, #8
 800da1c:	fb37 0303 	smlawb	r3, r7, r3, r0
 800da20:	fa43 f309 	asr.w	r3, r3, r9
 800da24:	f303 0307 	ssat	r3, #8, r3
 800da28:	2901      	cmp	r1, #1
 800da2a:	f88e 3000 	strb.w	r3, [lr]
 800da2e:	d021      	beq.n	800da74 <ai_math_elementwise_sum_int8+0x1cc>
 800da30:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 800da34:	0200      	lsls	r0, r0, #8
 800da36:	fb38 6000 	smlawb	r0, r8, r0, r6
 800da3a:	f992 3001 	ldrsb.w	r3, [r2, #1]
 800da3e:	021b      	lsls	r3, r3, #8
 800da40:	fb37 0303 	smlawb	r3, r7, r3, r0
 800da44:	fa43 f309 	asr.w	r3, r3, r9
 800da48:	f303 0307 	ssat	r3, #8, r3
 800da4c:	2902      	cmp	r1, #2
 800da4e:	f88e 3001 	strb.w	r3, [lr, #1]
 800da52:	d00f      	beq.n	800da74 <ai_math_elementwise_sum_int8+0x1cc>
 800da54:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 800da58:	021b      	lsls	r3, r3, #8
 800da5a:	fb38 6803 	smlawb	r8, r8, r3, r6
 800da5e:	f992 3002 	ldrsb.w	r3, [r2, #2]
 800da62:	021b      	lsls	r3, r3, #8
 800da64:	fb37 8303 	smlawb	r3, r7, r3, r8
 800da68:	fa43 f309 	asr.w	r3, r3, r9
 800da6c:	f303 0307 	ssat	r3, #8, r3
 800da70:	f88e 3002 	strb.w	r3, [lr, #2]
 800da74:	b005      	add	sp, #20
 800da76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da7a:	468b      	mov	fp, r1
 800da7c:	e7c3      	b.n	800da06 <ai_math_elementwise_sum_int8+0x15e>
 800da7e:	bf00      	nop

0800da80 <malloc>:
 800da80:	4b02      	ldr	r3, [pc, #8]	@ (800da8c <malloc+0xc>)
 800da82:	4601      	mov	r1, r0
 800da84:	6818      	ldr	r0, [r3, #0]
 800da86:	f000 b82d 	b.w	800dae4 <_malloc_r>
 800da8a:	bf00      	nop
 800da8c:	20006824 	.word	0x20006824

0800da90 <free>:
 800da90:	4b02      	ldr	r3, [pc, #8]	@ (800da9c <free+0xc>)
 800da92:	4601      	mov	r1, r0
 800da94:	6818      	ldr	r0, [r3, #0]
 800da96:	f001 bd17 	b.w	800f4c8 <_free_r>
 800da9a:	bf00      	nop
 800da9c:	20006824 	.word	0x20006824

0800daa0 <sbrk_aligned>:
 800daa0:	b570      	push	{r4, r5, r6, lr}
 800daa2:	4e0f      	ldr	r6, [pc, #60]	@ (800dae0 <sbrk_aligned+0x40>)
 800daa4:	460c      	mov	r4, r1
 800daa6:	6831      	ldr	r1, [r6, #0]
 800daa8:	4605      	mov	r5, r0
 800daaa:	b911      	cbnz	r1, 800dab2 <sbrk_aligned+0x12>
 800daac:	f000 fe54 	bl	800e758 <_sbrk_r>
 800dab0:	6030      	str	r0, [r6, #0]
 800dab2:	4621      	mov	r1, r4
 800dab4:	4628      	mov	r0, r5
 800dab6:	f000 fe4f 	bl	800e758 <_sbrk_r>
 800daba:	1c43      	adds	r3, r0, #1
 800dabc:	d103      	bne.n	800dac6 <sbrk_aligned+0x26>
 800dabe:	f04f 34ff 	mov.w	r4, #4294967295
 800dac2:	4620      	mov	r0, r4
 800dac4:	bd70      	pop	{r4, r5, r6, pc}
 800dac6:	1cc4      	adds	r4, r0, #3
 800dac8:	f024 0403 	bic.w	r4, r4, #3
 800dacc:	42a0      	cmp	r0, r4
 800dace:	d0f8      	beq.n	800dac2 <sbrk_aligned+0x22>
 800dad0:	1a21      	subs	r1, r4, r0
 800dad2:	4628      	mov	r0, r5
 800dad4:	f000 fe40 	bl	800e758 <_sbrk_r>
 800dad8:	3001      	adds	r0, #1
 800dada:	d1f2      	bne.n	800dac2 <sbrk_aligned+0x22>
 800dadc:	e7ef      	b.n	800dabe <sbrk_aligned+0x1e>
 800dade:	bf00      	nop
 800dae0:	2001324c 	.word	0x2001324c

0800dae4 <_malloc_r>:
 800dae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dae8:	1ccd      	adds	r5, r1, #3
 800daea:	f025 0503 	bic.w	r5, r5, #3
 800daee:	3508      	adds	r5, #8
 800daf0:	2d0c      	cmp	r5, #12
 800daf2:	bf38      	it	cc
 800daf4:	250c      	movcc	r5, #12
 800daf6:	2d00      	cmp	r5, #0
 800daf8:	4606      	mov	r6, r0
 800dafa:	db01      	blt.n	800db00 <_malloc_r+0x1c>
 800dafc:	42a9      	cmp	r1, r5
 800dafe:	d904      	bls.n	800db0a <_malloc_r+0x26>
 800db00:	230c      	movs	r3, #12
 800db02:	6033      	str	r3, [r6, #0]
 800db04:	2000      	movs	r0, #0
 800db06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dbe0 <_malloc_r+0xfc>
 800db0e:	f000 f869 	bl	800dbe4 <__malloc_lock>
 800db12:	f8d8 3000 	ldr.w	r3, [r8]
 800db16:	461c      	mov	r4, r3
 800db18:	bb44      	cbnz	r4, 800db6c <_malloc_r+0x88>
 800db1a:	4629      	mov	r1, r5
 800db1c:	4630      	mov	r0, r6
 800db1e:	f7ff ffbf 	bl	800daa0 <sbrk_aligned>
 800db22:	1c43      	adds	r3, r0, #1
 800db24:	4604      	mov	r4, r0
 800db26:	d158      	bne.n	800dbda <_malloc_r+0xf6>
 800db28:	f8d8 4000 	ldr.w	r4, [r8]
 800db2c:	4627      	mov	r7, r4
 800db2e:	2f00      	cmp	r7, #0
 800db30:	d143      	bne.n	800dbba <_malloc_r+0xd6>
 800db32:	2c00      	cmp	r4, #0
 800db34:	d04b      	beq.n	800dbce <_malloc_r+0xea>
 800db36:	6823      	ldr	r3, [r4, #0]
 800db38:	4639      	mov	r1, r7
 800db3a:	4630      	mov	r0, r6
 800db3c:	eb04 0903 	add.w	r9, r4, r3
 800db40:	f000 fe0a 	bl	800e758 <_sbrk_r>
 800db44:	4581      	cmp	r9, r0
 800db46:	d142      	bne.n	800dbce <_malloc_r+0xea>
 800db48:	6821      	ldr	r1, [r4, #0]
 800db4a:	1a6d      	subs	r5, r5, r1
 800db4c:	4629      	mov	r1, r5
 800db4e:	4630      	mov	r0, r6
 800db50:	f7ff ffa6 	bl	800daa0 <sbrk_aligned>
 800db54:	3001      	adds	r0, #1
 800db56:	d03a      	beq.n	800dbce <_malloc_r+0xea>
 800db58:	6823      	ldr	r3, [r4, #0]
 800db5a:	442b      	add	r3, r5
 800db5c:	6023      	str	r3, [r4, #0]
 800db5e:	f8d8 3000 	ldr.w	r3, [r8]
 800db62:	685a      	ldr	r2, [r3, #4]
 800db64:	bb62      	cbnz	r2, 800dbc0 <_malloc_r+0xdc>
 800db66:	f8c8 7000 	str.w	r7, [r8]
 800db6a:	e00f      	b.n	800db8c <_malloc_r+0xa8>
 800db6c:	6822      	ldr	r2, [r4, #0]
 800db6e:	1b52      	subs	r2, r2, r5
 800db70:	d420      	bmi.n	800dbb4 <_malloc_r+0xd0>
 800db72:	2a0b      	cmp	r2, #11
 800db74:	d917      	bls.n	800dba6 <_malloc_r+0xc2>
 800db76:	1961      	adds	r1, r4, r5
 800db78:	42a3      	cmp	r3, r4
 800db7a:	6025      	str	r5, [r4, #0]
 800db7c:	bf18      	it	ne
 800db7e:	6059      	strne	r1, [r3, #4]
 800db80:	6863      	ldr	r3, [r4, #4]
 800db82:	bf08      	it	eq
 800db84:	f8c8 1000 	streq.w	r1, [r8]
 800db88:	5162      	str	r2, [r4, r5]
 800db8a:	604b      	str	r3, [r1, #4]
 800db8c:	4630      	mov	r0, r6
 800db8e:	f000 f82f 	bl	800dbf0 <__malloc_unlock>
 800db92:	f104 000b 	add.w	r0, r4, #11
 800db96:	1d23      	adds	r3, r4, #4
 800db98:	f020 0007 	bic.w	r0, r0, #7
 800db9c:	1ac2      	subs	r2, r0, r3
 800db9e:	bf1c      	itt	ne
 800dba0:	1a1b      	subne	r3, r3, r0
 800dba2:	50a3      	strne	r3, [r4, r2]
 800dba4:	e7af      	b.n	800db06 <_malloc_r+0x22>
 800dba6:	6862      	ldr	r2, [r4, #4]
 800dba8:	42a3      	cmp	r3, r4
 800dbaa:	bf0c      	ite	eq
 800dbac:	f8c8 2000 	streq.w	r2, [r8]
 800dbb0:	605a      	strne	r2, [r3, #4]
 800dbb2:	e7eb      	b.n	800db8c <_malloc_r+0xa8>
 800dbb4:	4623      	mov	r3, r4
 800dbb6:	6864      	ldr	r4, [r4, #4]
 800dbb8:	e7ae      	b.n	800db18 <_malloc_r+0x34>
 800dbba:	463c      	mov	r4, r7
 800dbbc:	687f      	ldr	r7, [r7, #4]
 800dbbe:	e7b6      	b.n	800db2e <_malloc_r+0x4a>
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	42a3      	cmp	r3, r4
 800dbc6:	d1fb      	bne.n	800dbc0 <_malloc_r+0xdc>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	6053      	str	r3, [r2, #4]
 800dbcc:	e7de      	b.n	800db8c <_malloc_r+0xa8>
 800dbce:	230c      	movs	r3, #12
 800dbd0:	6033      	str	r3, [r6, #0]
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	f000 f80c 	bl	800dbf0 <__malloc_unlock>
 800dbd8:	e794      	b.n	800db04 <_malloc_r+0x20>
 800dbda:	6005      	str	r5, [r0, #0]
 800dbdc:	e7d6      	b.n	800db8c <_malloc_r+0xa8>
 800dbde:	bf00      	nop
 800dbe0:	20013250 	.word	0x20013250

0800dbe4 <__malloc_lock>:
 800dbe4:	4801      	ldr	r0, [pc, #4]	@ (800dbec <__malloc_lock+0x8>)
 800dbe6:	f000 be04 	b.w	800e7f2 <__retarget_lock_acquire_recursive>
 800dbea:	bf00      	nop
 800dbec:	20013394 	.word	0x20013394

0800dbf0 <__malloc_unlock>:
 800dbf0:	4801      	ldr	r0, [pc, #4]	@ (800dbf8 <__malloc_unlock+0x8>)
 800dbf2:	f000 bdff 	b.w	800e7f4 <__retarget_lock_release_recursive>
 800dbf6:	bf00      	nop
 800dbf8:	20013394 	.word	0x20013394

0800dbfc <__cvt>:
 800dbfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc00:	ec57 6b10 	vmov	r6, r7, d0
 800dc04:	2f00      	cmp	r7, #0
 800dc06:	460c      	mov	r4, r1
 800dc08:	4619      	mov	r1, r3
 800dc0a:	463b      	mov	r3, r7
 800dc0c:	bfbb      	ittet	lt
 800dc0e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800dc12:	461f      	movlt	r7, r3
 800dc14:	2300      	movge	r3, #0
 800dc16:	232d      	movlt	r3, #45	@ 0x2d
 800dc18:	700b      	strb	r3, [r1, #0]
 800dc1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc1c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dc20:	4691      	mov	r9, r2
 800dc22:	f023 0820 	bic.w	r8, r3, #32
 800dc26:	bfbc      	itt	lt
 800dc28:	4632      	movlt	r2, r6
 800dc2a:	4616      	movlt	r6, r2
 800dc2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dc30:	d005      	beq.n	800dc3e <__cvt+0x42>
 800dc32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dc36:	d100      	bne.n	800dc3a <__cvt+0x3e>
 800dc38:	3401      	adds	r4, #1
 800dc3a:	2102      	movs	r1, #2
 800dc3c:	e000      	b.n	800dc40 <__cvt+0x44>
 800dc3e:	2103      	movs	r1, #3
 800dc40:	ab03      	add	r3, sp, #12
 800dc42:	9301      	str	r3, [sp, #4]
 800dc44:	ab02      	add	r3, sp, #8
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	ec47 6b10 	vmov	d0, r6, r7
 800dc4c:	4653      	mov	r3, sl
 800dc4e:	4622      	mov	r2, r4
 800dc50:	f000 fe6a 	bl	800e928 <_dtoa_r>
 800dc54:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800dc58:	4605      	mov	r5, r0
 800dc5a:	d119      	bne.n	800dc90 <__cvt+0x94>
 800dc5c:	f019 0f01 	tst.w	r9, #1
 800dc60:	d00e      	beq.n	800dc80 <__cvt+0x84>
 800dc62:	eb00 0904 	add.w	r9, r0, r4
 800dc66:	2200      	movs	r2, #0
 800dc68:	2300      	movs	r3, #0
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	4639      	mov	r1, r7
 800dc6e:	f7f2 ff3b 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc72:	b108      	cbz	r0, 800dc78 <__cvt+0x7c>
 800dc74:	f8cd 900c 	str.w	r9, [sp, #12]
 800dc78:	2230      	movs	r2, #48	@ 0x30
 800dc7a:	9b03      	ldr	r3, [sp, #12]
 800dc7c:	454b      	cmp	r3, r9
 800dc7e:	d31e      	bcc.n	800dcbe <__cvt+0xc2>
 800dc80:	9b03      	ldr	r3, [sp, #12]
 800dc82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc84:	1b5b      	subs	r3, r3, r5
 800dc86:	4628      	mov	r0, r5
 800dc88:	6013      	str	r3, [r2, #0]
 800dc8a:	b004      	add	sp, #16
 800dc8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dc94:	eb00 0904 	add.w	r9, r0, r4
 800dc98:	d1e5      	bne.n	800dc66 <__cvt+0x6a>
 800dc9a:	7803      	ldrb	r3, [r0, #0]
 800dc9c:	2b30      	cmp	r3, #48	@ 0x30
 800dc9e:	d10a      	bne.n	800dcb6 <__cvt+0xba>
 800dca0:	2200      	movs	r2, #0
 800dca2:	2300      	movs	r3, #0
 800dca4:	4630      	mov	r0, r6
 800dca6:	4639      	mov	r1, r7
 800dca8:	f7f2 ff1e 	bl	8000ae8 <__aeabi_dcmpeq>
 800dcac:	b918      	cbnz	r0, 800dcb6 <__cvt+0xba>
 800dcae:	f1c4 0401 	rsb	r4, r4, #1
 800dcb2:	f8ca 4000 	str.w	r4, [sl]
 800dcb6:	f8da 3000 	ldr.w	r3, [sl]
 800dcba:	4499      	add	r9, r3
 800dcbc:	e7d3      	b.n	800dc66 <__cvt+0x6a>
 800dcbe:	1c59      	adds	r1, r3, #1
 800dcc0:	9103      	str	r1, [sp, #12]
 800dcc2:	701a      	strb	r2, [r3, #0]
 800dcc4:	e7d9      	b.n	800dc7a <__cvt+0x7e>

0800dcc6 <__exponent>:
 800dcc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcc8:	2900      	cmp	r1, #0
 800dcca:	bfba      	itte	lt
 800dccc:	4249      	neglt	r1, r1
 800dcce:	232d      	movlt	r3, #45	@ 0x2d
 800dcd0:	232b      	movge	r3, #43	@ 0x2b
 800dcd2:	2909      	cmp	r1, #9
 800dcd4:	7002      	strb	r2, [r0, #0]
 800dcd6:	7043      	strb	r3, [r0, #1]
 800dcd8:	dd29      	ble.n	800dd2e <__exponent+0x68>
 800dcda:	f10d 0307 	add.w	r3, sp, #7
 800dcde:	461d      	mov	r5, r3
 800dce0:	270a      	movs	r7, #10
 800dce2:	461a      	mov	r2, r3
 800dce4:	fbb1 f6f7 	udiv	r6, r1, r7
 800dce8:	fb07 1416 	mls	r4, r7, r6, r1
 800dcec:	3430      	adds	r4, #48	@ 0x30
 800dcee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dcf2:	460c      	mov	r4, r1
 800dcf4:	2c63      	cmp	r4, #99	@ 0x63
 800dcf6:	f103 33ff 	add.w	r3, r3, #4294967295
 800dcfa:	4631      	mov	r1, r6
 800dcfc:	dcf1      	bgt.n	800dce2 <__exponent+0x1c>
 800dcfe:	3130      	adds	r1, #48	@ 0x30
 800dd00:	1e94      	subs	r4, r2, #2
 800dd02:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dd06:	1c41      	adds	r1, r0, #1
 800dd08:	4623      	mov	r3, r4
 800dd0a:	42ab      	cmp	r3, r5
 800dd0c:	d30a      	bcc.n	800dd24 <__exponent+0x5e>
 800dd0e:	f10d 0309 	add.w	r3, sp, #9
 800dd12:	1a9b      	subs	r3, r3, r2
 800dd14:	42ac      	cmp	r4, r5
 800dd16:	bf88      	it	hi
 800dd18:	2300      	movhi	r3, #0
 800dd1a:	3302      	adds	r3, #2
 800dd1c:	4403      	add	r3, r0
 800dd1e:	1a18      	subs	r0, r3, r0
 800dd20:	b003      	add	sp, #12
 800dd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd24:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dd28:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dd2c:	e7ed      	b.n	800dd0a <__exponent+0x44>
 800dd2e:	2330      	movs	r3, #48	@ 0x30
 800dd30:	3130      	adds	r1, #48	@ 0x30
 800dd32:	7083      	strb	r3, [r0, #2]
 800dd34:	70c1      	strb	r1, [r0, #3]
 800dd36:	1d03      	adds	r3, r0, #4
 800dd38:	e7f1      	b.n	800dd1e <__exponent+0x58>
	...

0800dd3c <_printf_float>:
 800dd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd40:	b08d      	sub	sp, #52	@ 0x34
 800dd42:	460c      	mov	r4, r1
 800dd44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dd48:	4616      	mov	r6, r2
 800dd4a:	461f      	mov	r7, r3
 800dd4c:	4605      	mov	r5, r0
 800dd4e:	f000 fccb 	bl	800e6e8 <_localeconv_r>
 800dd52:	6803      	ldr	r3, [r0, #0]
 800dd54:	9304      	str	r3, [sp, #16]
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7f2 fa9a 	bl	8000290 <strlen>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd60:	f8d8 3000 	ldr.w	r3, [r8]
 800dd64:	9005      	str	r0, [sp, #20]
 800dd66:	3307      	adds	r3, #7
 800dd68:	f023 0307 	bic.w	r3, r3, #7
 800dd6c:	f103 0208 	add.w	r2, r3, #8
 800dd70:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dd74:	f8d4 b000 	ldr.w	fp, [r4]
 800dd78:	f8c8 2000 	str.w	r2, [r8]
 800dd7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800dd84:	9307      	str	r3, [sp, #28]
 800dd86:	f8cd 8018 	str.w	r8, [sp, #24]
 800dd8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800dd8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd92:	4b9c      	ldr	r3, [pc, #624]	@ (800e004 <_printf_float+0x2c8>)
 800dd94:	f04f 32ff 	mov.w	r2, #4294967295
 800dd98:	f7f2 fed8 	bl	8000b4c <__aeabi_dcmpun>
 800dd9c:	bb70      	cbnz	r0, 800ddfc <_printf_float+0xc0>
 800dd9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dda2:	4b98      	ldr	r3, [pc, #608]	@ (800e004 <_printf_float+0x2c8>)
 800dda4:	f04f 32ff 	mov.w	r2, #4294967295
 800dda8:	f7f2 feb2 	bl	8000b10 <__aeabi_dcmple>
 800ddac:	bb30      	cbnz	r0, 800ddfc <_printf_float+0xc0>
 800ddae:	2200      	movs	r2, #0
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4640      	mov	r0, r8
 800ddb4:	4649      	mov	r1, r9
 800ddb6:	f7f2 fea1 	bl	8000afc <__aeabi_dcmplt>
 800ddba:	b110      	cbz	r0, 800ddc2 <_printf_float+0x86>
 800ddbc:	232d      	movs	r3, #45	@ 0x2d
 800ddbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ddc2:	4a91      	ldr	r2, [pc, #580]	@ (800e008 <_printf_float+0x2cc>)
 800ddc4:	4b91      	ldr	r3, [pc, #580]	@ (800e00c <_printf_float+0x2d0>)
 800ddc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ddca:	bf8c      	ite	hi
 800ddcc:	4690      	movhi	r8, r2
 800ddce:	4698      	movls	r8, r3
 800ddd0:	2303      	movs	r3, #3
 800ddd2:	6123      	str	r3, [r4, #16]
 800ddd4:	f02b 0304 	bic.w	r3, fp, #4
 800ddd8:	6023      	str	r3, [r4, #0]
 800ddda:	f04f 0900 	mov.w	r9, #0
 800ddde:	9700      	str	r7, [sp, #0]
 800dde0:	4633      	mov	r3, r6
 800dde2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dde4:	4621      	mov	r1, r4
 800dde6:	4628      	mov	r0, r5
 800dde8:	f000 f9d2 	bl	800e190 <_printf_common>
 800ddec:	3001      	adds	r0, #1
 800ddee:	f040 808d 	bne.w	800df0c <_printf_float+0x1d0>
 800ddf2:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf6:	b00d      	add	sp, #52	@ 0x34
 800ddf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddfc:	4642      	mov	r2, r8
 800ddfe:	464b      	mov	r3, r9
 800de00:	4640      	mov	r0, r8
 800de02:	4649      	mov	r1, r9
 800de04:	f7f2 fea2 	bl	8000b4c <__aeabi_dcmpun>
 800de08:	b140      	cbz	r0, 800de1c <_printf_float+0xe0>
 800de0a:	464b      	mov	r3, r9
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	bfbc      	itt	lt
 800de10:	232d      	movlt	r3, #45	@ 0x2d
 800de12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800de16:	4a7e      	ldr	r2, [pc, #504]	@ (800e010 <_printf_float+0x2d4>)
 800de18:	4b7e      	ldr	r3, [pc, #504]	@ (800e014 <_printf_float+0x2d8>)
 800de1a:	e7d4      	b.n	800ddc6 <_printf_float+0x8a>
 800de1c:	6863      	ldr	r3, [r4, #4]
 800de1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800de22:	9206      	str	r2, [sp, #24]
 800de24:	1c5a      	adds	r2, r3, #1
 800de26:	d13b      	bne.n	800dea0 <_printf_float+0x164>
 800de28:	2306      	movs	r3, #6
 800de2a:	6063      	str	r3, [r4, #4]
 800de2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800de30:	2300      	movs	r3, #0
 800de32:	6022      	str	r2, [r4, #0]
 800de34:	9303      	str	r3, [sp, #12]
 800de36:	ab0a      	add	r3, sp, #40	@ 0x28
 800de38:	e9cd a301 	strd	sl, r3, [sp, #4]
 800de3c:	ab09      	add	r3, sp, #36	@ 0x24
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	6861      	ldr	r1, [r4, #4]
 800de42:	ec49 8b10 	vmov	d0, r8, r9
 800de46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800de4a:	4628      	mov	r0, r5
 800de4c:	f7ff fed6 	bl	800dbfc <__cvt>
 800de50:	9b06      	ldr	r3, [sp, #24]
 800de52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de54:	2b47      	cmp	r3, #71	@ 0x47
 800de56:	4680      	mov	r8, r0
 800de58:	d129      	bne.n	800deae <_printf_float+0x172>
 800de5a:	1cc8      	adds	r0, r1, #3
 800de5c:	db02      	blt.n	800de64 <_printf_float+0x128>
 800de5e:	6863      	ldr	r3, [r4, #4]
 800de60:	4299      	cmp	r1, r3
 800de62:	dd41      	ble.n	800dee8 <_printf_float+0x1ac>
 800de64:	f1aa 0a02 	sub.w	sl, sl, #2
 800de68:	fa5f fa8a 	uxtb.w	sl, sl
 800de6c:	3901      	subs	r1, #1
 800de6e:	4652      	mov	r2, sl
 800de70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800de74:	9109      	str	r1, [sp, #36]	@ 0x24
 800de76:	f7ff ff26 	bl	800dcc6 <__exponent>
 800de7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de7c:	1813      	adds	r3, r2, r0
 800de7e:	2a01      	cmp	r2, #1
 800de80:	4681      	mov	r9, r0
 800de82:	6123      	str	r3, [r4, #16]
 800de84:	dc02      	bgt.n	800de8c <_printf_float+0x150>
 800de86:	6822      	ldr	r2, [r4, #0]
 800de88:	07d2      	lsls	r2, r2, #31
 800de8a:	d501      	bpl.n	800de90 <_printf_float+0x154>
 800de8c:	3301      	adds	r3, #1
 800de8e:	6123      	str	r3, [r4, #16]
 800de90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800de94:	2b00      	cmp	r3, #0
 800de96:	d0a2      	beq.n	800ddde <_printf_float+0xa2>
 800de98:	232d      	movs	r3, #45	@ 0x2d
 800de9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de9e:	e79e      	b.n	800ddde <_printf_float+0xa2>
 800dea0:	9a06      	ldr	r2, [sp, #24]
 800dea2:	2a47      	cmp	r2, #71	@ 0x47
 800dea4:	d1c2      	bne.n	800de2c <_printf_float+0xf0>
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d1c0      	bne.n	800de2c <_printf_float+0xf0>
 800deaa:	2301      	movs	r3, #1
 800deac:	e7bd      	b.n	800de2a <_printf_float+0xee>
 800deae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800deb2:	d9db      	bls.n	800de6c <_printf_float+0x130>
 800deb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800deb8:	d118      	bne.n	800deec <_printf_float+0x1b0>
 800deba:	2900      	cmp	r1, #0
 800debc:	6863      	ldr	r3, [r4, #4]
 800debe:	dd0b      	ble.n	800ded8 <_printf_float+0x19c>
 800dec0:	6121      	str	r1, [r4, #16]
 800dec2:	b913      	cbnz	r3, 800deca <_printf_float+0x18e>
 800dec4:	6822      	ldr	r2, [r4, #0]
 800dec6:	07d0      	lsls	r0, r2, #31
 800dec8:	d502      	bpl.n	800ded0 <_printf_float+0x194>
 800deca:	3301      	adds	r3, #1
 800decc:	440b      	add	r3, r1
 800dece:	6123      	str	r3, [r4, #16]
 800ded0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ded2:	f04f 0900 	mov.w	r9, #0
 800ded6:	e7db      	b.n	800de90 <_printf_float+0x154>
 800ded8:	b913      	cbnz	r3, 800dee0 <_printf_float+0x1a4>
 800deda:	6822      	ldr	r2, [r4, #0]
 800dedc:	07d2      	lsls	r2, r2, #31
 800dede:	d501      	bpl.n	800dee4 <_printf_float+0x1a8>
 800dee0:	3302      	adds	r3, #2
 800dee2:	e7f4      	b.n	800dece <_printf_float+0x192>
 800dee4:	2301      	movs	r3, #1
 800dee6:	e7f2      	b.n	800dece <_printf_float+0x192>
 800dee8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800deec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800deee:	4299      	cmp	r1, r3
 800def0:	db05      	blt.n	800defe <_printf_float+0x1c2>
 800def2:	6823      	ldr	r3, [r4, #0]
 800def4:	6121      	str	r1, [r4, #16]
 800def6:	07d8      	lsls	r0, r3, #31
 800def8:	d5ea      	bpl.n	800ded0 <_printf_float+0x194>
 800defa:	1c4b      	adds	r3, r1, #1
 800defc:	e7e7      	b.n	800dece <_printf_float+0x192>
 800defe:	2900      	cmp	r1, #0
 800df00:	bfd4      	ite	le
 800df02:	f1c1 0202 	rsble	r2, r1, #2
 800df06:	2201      	movgt	r2, #1
 800df08:	4413      	add	r3, r2
 800df0a:	e7e0      	b.n	800dece <_printf_float+0x192>
 800df0c:	6823      	ldr	r3, [r4, #0]
 800df0e:	055a      	lsls	r2, r3, #21
 800df10:	d407      	bmi.n	800df22 <_printf_float+0x1e6>
 800df12:	6923      	ldr	r3, [r4, #16]
 800df14:	4642      	mov	r2, r8
 800df16:	4631      	mov	r1, r6
 800df18:	4628      	mov	r0, r5
 800df1a:	47b8      	blx	r7
 800df1c:	3001      	adds	r0, #1
 800df1e:	d12b      	bne.n	800df78 <_printf_float+0x23c>
 800df20:	e767      	b.n	800ddf2 <_printf_float+0xb6>
 800df22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800df26:	f240 80dd 	bls.w	800e0e4 <_printf_float+0x3a8>
 800df2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800df2e:	2200      	movs	r2, #0
 800df30:	2300      	movs	r3, #0
 800df32:	f7f2 fdd9 	bl	8000ae8 <__aeabi_dcmpeq>
 800df36:	2800      	cmp	r0, #0
 800df38:	d033      	beq.n	800dfa2 <_printf_float+0x266>
 800df3a:	4a37      	ldr	r2, [pc, #220]	@ (800e018 <_printf_float+0x2dc>)
 800df3c:	2301      	movs	r3, #1
 800df3e:	4631      	mov	r1, r6
 800df40:	4628      	mov	r0, r5
 800df42:	47b8      	blx	r7
 800df44:	3001      	adds	r0, #1
 800df46:	f43f af54 	beq.w	800ddf2 <_printf_float+0xb6>
 800df4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800df4e:	4543      	cmp	r3, r8
 800df50:	db02      	blt.n	800df58 <_printf_float+0x21c>
 800df52:	6823      	ldr	r3, [r4, #0]
 800df54:	07d8      	lsls	r0, r3, #31
 800df56:	d50f      	bpl.n	800df78 <_printf_float+0x23c>
 800df58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df5c:	4631      	mov	r1, r6
 800df5e:	4628      	mov	r0, r5
 800df60:	47b8      	blx	r7
 800df62:	3001      	adds	r0, #1
 800df64:	f43f af45 	beq.w	800ddf2 <_printf_float+0xb6>
 800df68:	f04f 0900 	mov.w	r9, #0
 800df6c:	f108 38ff 	add.w	r8, r8, #4294967295
 800df70:	f104 0a1a 	add.w	sl, r4, #26
 800df74:	45c8      	cmp	r8, r9
 800df76:	dc09      	bgt.n	800df8c <_printf_float+0x250>
 800df78:	6823      	ldr	r3, [r4, #0]
 800df7a:	079b      	lsls	r3, r3, #30
 800df7c:	f100 8103 	bmi.w	800e186 <_printf_float+0x44a>
 800df80:	68e0      	ldr	r0, [r4, #12]
 800df82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df84:	4298      	cmp	r0, r3
 800df86:	bfb8      	it	lt
 800df88:	4618      	movlt	r0, r3
 800df8a:	e734      	b.n	800ddf6 <_printf_float+0xba>
 800df8c:	2301      	movs	r3, #1
 800df8e:	4652      	mov	r2, sl
 800df90:	4631      	mov	r1, r6
 800df92:	4628      	mov	r0, r5
 800df94:	47b8      	blx	r7
 800df96:	3001      	adds	r0, #1
 800df98:	f43f af2b 	beq.w	800ddf2 <_printf_float+0xb6>
 800df9c:	f109 0901 	add.w	r9, r9, #1
 800dfa0:	e7e8      	b.n	800df74 <_printf_float+0x238>
 800dfa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	dc39      	bgt.n	800e01c <_printf_float+0x2e0>
 800dfa8:	4a1b      	ldr	r2, [pc, #108]	@ (800e018 <_printf_float+0x2dc>)
 800dfaa:	2301      	movs	r3, #1
 800dfac:	4631      	mov	r1, r6
 800dfae:	4628      	mov	r0, r5
 800dfb0:	47b8      	blx	r7
 800dfb2:	3001      	adds	r0, #1
 800dfb4:	f43f af1d 	beq.w	800ddf2 <_printf_float+0xb6>
 800dfb8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dfbc:	ea59 0303 	orrs.w	r3, r9, r3
 800dfc0:	d102      	bne.n	800dfc8 <_printf_float+0x28c>
 800dfc2:	6823      	ldr	r3, [r4, #0]
 800dfc4:	07d9      	lsls	r1, r3, #31
 800dfc6:	d5d7      	bpl.n	800df78 <_printf_float+0x23c>
 800dfc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfcc:	4631      	mov	r1, r6
 800dfce:	4628      	mov	r0, r5
 800dfd0:	47b8      	blx	r7
 800dfd2:	3001      	adds	r0, #1
 800dfd4:	f43f af0d 	beq.w	800ddf2 <_printf_float+0xb6>
 800dfd8:	f04f 0a00 	mov.w	sl, #0
 800dfdc:	f104 0b1a 	add.w	fp, r4, #26
 800dfe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfe2:	425b      	negs	r3, r3
 800dfe4:	4553      	cmp	r3, sl
 800dfe6:	dc01      	bgt.n	800dfec <_printf_float+0x2b0>
 800dfe8:	464b      	mov	r3, r9
 800dfea:	e793      	b.n	800df14 <_printf_float+0x1d8>
 800dfec:	2301      	movs	r3, #1
 800dfee:	465a      	mov	r2, fp
 800dff0:	4631      	mov	r1, r6
 800dff2:	4628      	mov	r0, r5
 800dff4:	47b8      	blx	r7
 800dff6:	3001      	adds	r0, #1
 800dff8:	f43f aefb 	beq.w	800ddf2 <_printf_float+0xb6>
 800dffc:	f10a 0a01 	add.w	sl, sl, #1
 800e000:	e7ee      	b.n	800dfe0 <_printf_float+0x2a4>
 800e002:	bf00      	nop
 800e004:	7fefffff 	.word	0x7fefffff
 800e008:	08011606 	.word	0x08011606
 800e00c:	08011602 	.word	0x08011602
 800e010:	0801160e 	.word	0x0801160e
 800e014:	0801160a 	.word	0x0801160a
 800e018:	080115eb 	.word	0x080115eb
 800e01c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e01e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e022:	4553      	cmp	r3, sl
 800e024:	bfa8      	it	ge
 800e026:	4653      	movge	r3, sl
 800e028:	2b00      	cmp	r3, #0
 800e02a:	4699      	mov	r9, r3
 800e02c:	dc36      	bgt.n	800e09c <_printf_float+0x360>
 800e02e:	f04f 0b00 	mov.w	fp, #0
 800e032:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e036:	f104 021a 	add.w	r2, r4, #26
 800e03a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e03c:	9306      	str	r3, [sp, #24]
 800e03e:	eba3 0309 	sub.w	r3, r3, r9
 800e042:	455b      	cmp	r3, fp
 800e044:	dc31      	bgt.n	800e0aa <_printf_float+0x36e>
 800e046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e048:	459a      	cmp	sl, r3
 800e04a:	dc3a      	bgt.n	800e0c2 <_printf_float+0x386>
 800e04c:	6823      	ldr	r3, [r4, #0]
 800e04e:	07da      	lsls	r2, r3, #31
 800e050:	d437      	bmi.n	800e0c2 <_printf_float+0x386>
 800e052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e054:	ebaa 0903 	sub.w	r9, sl, r3
 800e058:	9b06      	ldr	r3, [sp, #24]
 800e05a:	ebaa 0303 	sub.w	r3, sl, r3
 800e05e:	4599      	cmp	r9, r3
 800e060:	bfa8      	it	ge
 800e062:	4699      	movge	r9, r3
 800e064:	f1b9 0f00 	cmp.w	r9, #0
 800e068:	dc33      	bgt.n	800e0d2 <_printf_float+0x396>
 800e06a:	f04f 0800 	mov.w	r8, #0
 800e06e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e072:	f104 0b1a 	add.w	fp, r4, #26
 800e076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e078:	ebaa 0303 	sub.w	r3, sl, r3
 800e07c:	eba3 0309 	sub.w	r3, r3, r9
 800e080:	4543      	cmp	r3, r8
 800e082:	f77f af79 	ble.w	800df78 <_printf_float+0x23c>
 800e086:	2301      	movs	r3, #1
 800e088:	465a      	mov	r2, fp
 800e08a:	4631      	mov	r1, r6
 800e08c:	4628      	mov	r0, r5
 800e08e:	47b8      	blx	r7
 800e090:	3001      	adds	r0, #1
 800e092:	f43f aeae 	beq.w	800ddf2 <_printf_float+0xb6>
 800e096:	f108 0801 	add.w	r8, r8, #1
 800e09a:	e7ec      	b.n	800e076 <_printf_float+0x33a>
 800e09c:	4642      	mov	r2, r8
 800e09e:	4631      	mov	r1, r6
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	47b8      	blx	r7
 800e0a4:	3001      	adds	r0, #1
 800e0a6:	d1c2      	bne.n	800e02e <_printf_float+0x2f2>
 800e0a8:	e6a3      	b.n	800ddf2 <_printf_float+0xb6>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	4631      	mov	r1, r6
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	9206      	str	r2, [sp, #24]
 800e0b2:	47b8      	blx	r7
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	f43f ae9c 	beq.w	800ddf2 <_printf_float+0xb6>
 800e0ba:	9a06      	ldr	r2, [sp, #24]
 800e0bc:	f10b 0b01 	add.w	fp, fp, #1
 800e0c0:	e7bb      	b.n	800e03a <_printf_float+0x2fe>
 800e0c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0c6:	4631      	mov	r1, r6
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	47b8      	blx	r7
 800e0cc:	3001      	adds	r0, #1
 800e0ce:	d1c0      	bne.n	800e052 <_printf_float+0x316>
 800e0d0:	e68f      	b.n	800ddf2 <_printf_float+0xb6>
 800e0d2:	9a06      	ldr	r2, [sp, #24]
 800e0d4:	464b      	mov	r3, r9
 800e0d6:	4442      	add	r2, r8
 800e0d8:	4631      	mov	r1, r6
 800e0da:	4628      	mov	r0, r5
 800e0dc:	47b8      	blx	r7
 800e0de:	3001      	adds	r0, #1
 800e0e0:	d1c3      	bne.n	800e06a <_printf_float+0x32e>
 800e0e2:	e686      	b.n	800ddf2 <_printf_float+0xb6>
 800e0e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e0e8:	f1ba 0f01 	cmp.w	sl, #1
 800e0ec:	dc01      	bgt.n	800e0f2 <_printf_float+0x3b6>
 800e0ee:	07db      	lsls	r3, r3, #31
 800e0f0:	d536      	bpl.n	800e160 <_printf_float+0x424>
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	4642      	mov	r2, r8
 800e0f6:	4631      	mov	r1, r6
 800e0f8:	4628      	mov	r0, r5
 800e0fa:	47b8      	blx	r7
 800e0fc:	3001      	adds	r0, #1
 800e0fe:	f43f ae78 	beq.w	800ddf2 <_printf_float+0xb6>
 800e102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e106:	4631      	mov	r1, r6
 800e108:	4628      	mov	r0, r5
 800e10a:	47b8      	blx	r7
 800e10c:	3001      	adds	r0, #1
 800e10e:	f43f ae70 	beq.w	800ddf2 <_printf_float+0xb6>
 800e112:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e116:	2200      	movs	r2, #0
 800e118:	2300      	movs	r3, #0
 800e11a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e11e:	f7f2 fce3 	bl	8000ae8 <__aeabi_dcmpeq>
 800e122:	b9c0      	cbnz	r0, 800e156 <_printf_float+0x41a>
 800e124:	4653      	mov	r3, sl
 800e126:	f108 0201 	add.w	r2, r8, #1
 800e12a:	4631      	mov	r1, r6
 800e12c:	4628      	mov	r0, r5
 800e12e:	47b8      	blx	r7
 800e130:	3001      	adds	r0, #1
 800e132:	d10c      	bne.n	800e14e <_printf_float+0x412>
 800e134:	e65d      	b.n	800ddf2 <_printf_float+0xb6>
 800e136:	2301      	movs	r3, #1
 800e138:	465a      	mov	r2, fp
 800e13a:	4631      	mov	r1, r6
 800e13c:	4628      	mov	r0, r5
 800e13e:	47b8      	blx	r7
 800e140:	3001      	adds	r0, #1
 800e142:	f43f ae56 	beq.w	800ddf2 <_printf_float+0xb6>
 800e146:	f108 0801 	add.w	r8, r8, #1
 800e14a:	45d0      	cmp	r8, sl
 800e14c:	dbf3      	blt.n	800e136 <_printf_float+0x3fa>
 800e14e:	464b      	mov	r3, r9
 800e150:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e154:	e6df      	b.n	800df16 <_printf_float+0x1da>
 800e156:	f04f 0800 	mov.w	r8, #0
 800e15a:	f104 0b1a 	add.w	fp, r4, #26
 800e15e:	e7f4      	b.n	800e14a <_printf_float+0x40e>
 800e160:	2301      	movs	r3, #1
 800e162:	4642      	mov	r2, r8
 800e164:	e7e1      	b.n	800e12a <_printf_float+0x3ee>
 800e166:	2301      	movs	r3, #1
 800e168:	464a      	mov	r2, r9
 800e16a:	4631      	mov	r1, r6
 800e16c:	4628      	mov	r0, r5
 800e16e:	47b8      	blx	r7
 800e170:	3001      	adds	r0, #1
 800e172:	f43f ae3e 	beq.w	800ddf2 <_printf_float+0xb6>
 800e176:	f108 0801 	add.w	r8, r8, #1
 800e17a:	68e3      	ldr	r3, [r4, #12]
 800e17c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e17e:	1a5b      	subs	r3, r3, r1
 800e180:	4543      	cmp	r3, r8
 800e182:	dcf0      	bgt.n	800e166 <_printf_float+0x42a>
 800e184:	e6fc      	b.n	800df80 <_printf_float+0x244>
 800e186:	f04f 0800 	mov.w	r8, #0
 800e18a:	f104 0919 	add.w	r9, r4, #25
 800e18e:	e7f4      	b.n	800e17a <_printf_float+0x43e>

0800e190 <_printf_common>:
 800e190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e194:	4616      	mov	r6, r2
 800e196:	4698      	mov	r8, r3
 800e198:	688a      	ldr	r2, [r1, #8]
 800e19a:	690b      	ldr	r3, [r1, #16]
 800e19c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	bfb8      	it	lt
 800e1a4:	4613      	movlt	r3, r2
 800e1a6:	6033      	str	r3, [r6, #0]
 800e1a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e1ac:	4607      	mov	r7, r0
 800e1ae:	460c      	mov	r4, r1
 800e1b0:	b10a      	cbz	r2, 800e1b6 <_printf_common+0x26>
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	6033      	str	r3, [r6, #0]
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	0699      	lsls	r1, r3, #26
 800e1ba:	bf42      	ittt	mi
 800e1bc:	6833      	ldrmi	r3, [r6, #0]
 800e1be:	3302      	addmi	r3, #2
 800e1c0:	6033      	strmi	r3, [r6, #0]
 800e1c2:	6825      	ldr	r5, [r4, #0]
 800e1c4:	f015 0506 	ands.w	r5, r5, #6
 800e1c8:	d106      	bne.n	800e1d8 <_printf_common+0x48>
 800e1ca:	f104 0a19 	add.w	sl, r4, #25
 800e1ce:	68e3      	ldr	r3, [r4, #12]
 800e1d0:	6832      	ldr	r2, [r6, #0]
 800e1d2:	1a9b      	subs	r3, r3, r2
 800e1d4:	42ab      	cmp	r3, r5
 800e1d6:	dc26      	bgt.n	800e226 <_printf_common+0x96>
 800e1d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e1dc:	6822      	ldr	r2, [r4, #0]
 800e1de:	3b00      	subs	r3, #0
 800e1e0:	bf18      	it	ne
 800e1e2:	2301      	movne	r3, #1
 800e1e4:	0692      	lsls	r2, r2, #26
 800e1e6:	d42b      	bmi.n	800e240 <_printf_common+0xb0>
 800e1e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e1ec:	4641      	mov	r1, r8
 800e1ee:	4638      	mov	r0, r7
 800e1f0:	47c8      	blx	r9
 800e1f2:	3001      	adds	r0, #1
 800e1f4:	d01e      	beq.n	800e234 <_printf_common+0xa4>
 800e1f6:	6823      	ldr	r3, [r4, #0]
 800e1f8:	6922      	ldr	r2, [r4, #16]
 800e1fa:	f003 0306 	and.w	r3, r3, #6
 800e1fe:	2b04      	cmp	r3, #4
 800e200:	bf02      	ittt	eq
 800e202:	68e5      	ldreq	r5, [r4, #12]
 800e204:	6833      	ldreq	r3, [r6, #0]
 800e206:	1aed      	subeq	r5, r5, r3
 800e208:	68a3      	ldr	r3, [r4, #8]
 800e20a:	bf0c      	ite	eq
 800e20c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e210:	2500      	movne	r5, #0
 800e212:	4293      	cmp	r3, r2
 800e214:	bfc4      	itt	gt
 800e216:	1a9b      	subgt	r3, r3, r2
 800e218:	18ed      	addgt	r5, r5, r3
 800e21a:	2600      	movs	r6, #0
 800e21c:	341a      	adds	r4, #26
 800e21e:	42b5      	cmp	r5, r6
 800e220:	d11a      	bne.n	800e258 <_printf_common+0xc8>
 800e222:	2000      	movs	r0, #0
 800e224:	e008      	b.n	800e238 <_printf_common+0xa8>
 800e226:	2301      	movs	r3, #1
 800e228:	4652      	mov	r2, sl
 800e22a:	4641      	mov	r1, r8
 800e22c:	4638      	mov	r0, r7
 800e22e:	47c8      	blx	r9
 800e230:	3001      	adds	r0, #1
 800e232:	d103      	bne.n	800e23c <_printf_common+0xac>
 800e234:	f04f 30ff 	mov.w	r0, #4294967295
 800e238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e23c:	3501      	adds	r5, #1
 800e23e:	e7c6      	b.n	800e1ce <_printf_common+0x3e>
 800e240:	18e1      	adds	r1, r4, r3
 800e242:	1c5a      	adds	r2, r3, #1
 800e244:	2030      	movs	r0, #48	@ 0x30
 800e246:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e24a:	4422      	add	r2, r4
 800e24c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e250:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e254:	3302      	adds	r3, #2
 800e256:	e7c7      	b.n	800e1e8 <_printf_common+0x58>
 800e258:	2301      	movs	r3, #1
 800e25a:	4622      	mov	r2, r4
 800e25c:	4641      	mov	r1, r8
 800e25e:	4638      	mov	r0, r7
 800e260:	47c8      	blx	r9
 800e262:	3001      	adds	r0, #1
 800e264:	d0e6      	beq.n	800e234 <_printf_common+0xa4>
 800e266:	3601      	adds	r6, #1
 800e268:	e7d9      	b.n	800e21e <_printf_common+0x8e>
	...

0800e26c <_printf_i>:
 800e26c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e270:	7e0f      	ldrb	r7, [r1, #24]
 800e272:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e274:	2f78      	cmp	r7, #120	@ 0x78
 800e276:	4691      	mov	r9, r2
 800e278:	4680      	mov	r8, r0
 800e27a:	460c      	mov	r4, r1
 800e27c:	469a      	mov	sl, r3
 800e27e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e282:	d807      	bhi.n	800e294 <_printf_i+0x28>
 800e284:	2f62      	cmp	r7, #98	@ 0x62
 800e286:	d80a      	bhi.n	800e29e <_printf_i+0x32>
 800e288:	2f00      	cmp	r7, #0
 800e28a:	f000 80d1 	beq.w	800e430 <_printf_i+0x1c4>
 800e28e:	2f58      	cmp	r7, #88	@ 0x58
 800e290:	f000 80b8 	beq.w	800e404 <_printf_i+0x198>
 800e294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e298:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e29c:	e03a      	b.n	800e314 <_printf_i+0xa8>
 800e29e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e2a2:	2b15      	cmp	r3, #21
 800e2a4:	d8f6      	bhi.n	800e294 <_printf_i+0x28>
 800e2a6:	a101      	add	r1, pc, #4	@ (adr r1, 800e2ac <_printf_i+0x40>)
 800e2a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2ac:	0800e305 	.word	0x0800e305
 800e2b0:	0800e319 	.word	0x0800e319
 800e2b4:	0800e295 	.word	0x0800e295
 800e2b8:	0800e295 	.word	0x0800e295
 800e2bc:	0800e295 	.word	0x0800e295
 800e2c0:	0800e295 	.word	0x0800e295
 800e2c4:	0800e319 	.word	0x0800e319
 800e2c8:	0800e295 	.word	0x0800e295
 800e2cc:	0800e295 	.word	0x0800e295
 800e2d0:	0800e295 	.word	0x0800e295
 800e2d4:	0800e295 	.word	0x0800e295
 800e2d8:	0800e417 	.word	0x0800e417
 800e2dc:	0800e343 	.word	0x0800e343
 800e2e0:	0800e3d1 	.word	0x0800e3d1
 800e2e4:	0800e295 	.word	0x0800e295
 800e2e8:	0800e295 	.word	0x0800e295
 800e2ec:	0800e439 	.word	0x0800e439
 800e2f0:	0800e295 	.word	0x0800e295
 800e2f4:	0800e343 	.word	0x0800e343
 800e2f8:	0800e295 	.word	0x0800e295
 800e2fc:	0800e295 	.word	0x0800e295
 800e300:	0800e3d9 	.word	0x0800e3d9
 800e304:	6833      	ldr	r3, [r6, #0]
 800e306:	1d1a      	adds	r2, r3, #4
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	6032      	str	r2, [r6, #0]
 800e30c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e310:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e314:	2301      	movs	r3, #1
 800e316:	e09c      	b.n	800e452 <_printf_i+0x1e6>
 800e318:	6833      	ldr	r3, [r6, #0]
 800e31a:	6820      	ldr	r0, [r4, #0]
 800e31c:	1d19      	adds	r1, r3, #4
 800e31e:	6031      	str	r1, [r6, #0]
 800e320:	0606      	lsls	r6, r0, #24
 800e322:	d501      	bpl.n	800e328 <_printf_i+0xbc>
 800e324:	681d      	ldr	r5, [r3, #0]
 800e326:	e003      	b.n	800e330 <_printf_i+0xc4>
 800e328:	0645      	lsls	r5, r0, #25
 800e32a:	d5fb      	bpl.n	800e324 <_printf_i+0xb8>
 800e32c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e330:	2d00      	cmp	r5, #0
 800e332:	da03      	bge.n	800e33c <_printf_i+0xd0>
 800e334:	232d      	movs	r3, #45	@ 0x2d
 800e336:	426d      	negs	r5, r5
 800e338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e33c:	4858      	ldr	r0, [pc, #352]	@ (800e4a0 <_printf_i+0x234>)
 800e33e:	230a      	movs	r3, #10
 800e340:	e011      	b.n	800e366 <_printf_i+0xfa>
 800e342:	6821      	ldr	r1, [r4, #0]
 800e344:	6833      	ldr	r3, [r6, #0]
 800e346:	0608      	lsls	r0, r1, #24
 800e348:	f853 5b04 	ldr.w	r5, [r3], #4
 800e34c:	d402      	bmi.n	800e354 <_printf_i+0xe8>
 800e34e:	0649      	lsls	r1, r1, #25
 800e350:	bf48      	it	mi
 800e352:	b2ad      	uxthmi	r5, r5
 800e354:	2f6f      	cmp	r7, #111	@ 0x6f
 800e356:	4852      	ldr	r0, [pc, #328]	@ (800e4a0 <_printf_i+0x234>)
 800e358:	6033      	str	r3, [r6, #0]
 800e35a:	bf14      	ite	ne
 800e35c:	230a      	movne	r3, #10
 800e35e:	2308      	moveq	r3, #8
 800e360:	2100      	movs	r1, #0
 800e362:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e366:	6866      	ldr	r6, [r4, #4]
 800e368:	60a6      	str	r6, [r4, #8]
 800e36a:	2e00      	cmp	r6, #0
 800e36c:	db05      	blt.n	800e37a <_printf_i+0x10e>
 800e36e:	6821      	ldr	r1, [r4, #0]
 800e370:	432e      	orrs	r6, r5
 800e372:	f021 0104 	bic.w	r1, r1, #4
 800e376:	6021      	str	r1, [r4, #0]
 800e378:	d04b      	beq.n	800e412 <_printf_i+0x1a6>
 800e37a:	4616      	mov	r6, r2
 800e37c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e380:	fb03 5711 	mls	r7, r3, r1, r5
 800e384:	5dc7      	ldrb	r7, [r0, r7]
 800e386:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e38a:	462f      	mov	r7, r5
 800e38c:	42bb      	cmp	r3, r7
 800e38e:	460d      	mov	r5, r1
 800e390:	d9f4      	bls.n	800e37c <_printf_i+0x110>
 800e392:	2b08      	cmp	r3, #8
 800e394:	d10b      	bne.n	800e3ae <_printf_i+0x142>
 800e396:	6823      	ldr	r3, [r4, #0]
 800e398:	07df      	lsls	r7, r3, #31
 800e39a:	d508      	bpl.n	800e3ae <_printf_i+0x142>
 800e39c:	6923      	ldr	r3, [r4, #16]
 800e39e:	6861      	ldr	r1, [r4, #4]
 800e3a0:	4299      	cmp	r1, r3
 800e3a2:	bfde      	ittt	le
 800e3a4:	2330      	movle	r3, #48	@ 0x30
 800e3a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e3aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e3ae:	1b92      	subs	r2, r2, r6
 800e3b0:	6122      	str	r2, [r4, #16]
 800e3b2:	f8cd a000 	str.w	sl, [sp]
 800e3b6:	464b      	mov	r3, r9
 800e3b8:	aa03      	add	r2, sp, #12
 800e3ba:	4621      	mov	r1, r4
 800e3bc:	4640      	mov	r0, r8
 800e3be:	f7ff fee7 	bl	800e190 <_printf_common>
 800e3c2:	3001      	adds	r0, #1
 800e3c4:	d14a      	bne.n	800e45c <_printf_i+0x1f0>
 800e3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ca:	b004      	add	sp, #16
 800e3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3d0:	6823      	ldr	r3, [r4, #0]
 800e3d2:	f043 0320 	orr.w	r3, r3, #32
 800e3d6:	6023      	str	r3, [r4, #0]
 800e3d8:	4832      	ldr	r0, [pc, #200]	@ (800e4a4 <_printf_i+0x238>)
 800e3da:	2778      	movs	r7, #120	@ 0x78
 800e3dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e3e0:	6823      	ldr	r3, [r4, #0]
 800e3e2:	6831      	ldr	r1, [r6, #0]
 800e3e4:	061f      	lsls	r7, r3, #24
 800e3e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800e3ea:	d402      	bmi.n	800e3f2 <_printf_i+0x186>
 800e3ec:	065f      	lsls	r7, r3, #25
 800e3ee:	bf48      	it	mi
 800e3f0:	b2ad      	uxthmi	r5, r5
 800e3f2:	6031      	str	r1, [r6, #0]
 800e3f4:	07d9      	lsls	r1, r3, #31
 800e3f6:	bf44      	itt	mi
 800e3f8:	f043 0320 	orrmi.w	r3, r3, #32
 800e3fc:	6023      	strmi	r3, [r4, #0]
 800e3fe:	b11d      	cbz	r5, 800e408 <_printf_i+0x19c>
 800e400:	2310      	movs	r3, #16
 800e402:	e7ad      	b.n	800e360 <_printf_i+0xf4>
 800e404:	4826      	ldr	r0, [pc, #152]	@ (800e4a0 <_printf_i+0x234>)
 800e406:	e7e9      	b.n	800e3dc <_printf_i+0x170>
 800e408:	6823      	ldr	r3, [r4, #0]
 800e40a:	f023 0320 	bic.w	r3, r3, #32
 800e40e:	6023      	str	r3, [r4, #0]
 800e410:	e7f6      	b.n	800e400 <_printf_i+0x194>
 800e412:	4616      	mov	r6, r2
 800e414:	e7bd      	b.n	800e392 <_printf_i+0x126>
 800e416:	6833      	ldr	r3, [r6, #0]
 800e418:	6825      	ldr	r5, [r4, #0]
 800e41a:	6961      	ldr	r1, [r4, #20]
 800e41c:	1d18      	adds	r0, r3, #4
 800e41e:	6030      	str	r0, [r6, #0]
 800e420:	062e      	lsls	r6, r5, #24
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	d501      	bpl.n	800e42a <_printf_i+0x1be>
 800e426:	6019      	str	r1, [r3, #0]
 800e428:	e002      	b.n	800e430 <_printf_i+0x1c4>
 800e42a:	0668      	lsls	r0, r5, #25
 800e42c:	d5fb      	bpl.n	800e426 <_printf_i+0x1ba>
 800e42e:	8019      	strh	r1, [r3, #0]
 800e430:	2300      	movs	r3, #0
 800e432:	6123      	str	r3, [r4, #16]
 800e434:	4616      	mov	r6, r2
 800e436:	e7bc      	b.n	800e3b2 <_printf_i+0x146>
 800e438:	6833      	ldr	r3, [r6, #0]
 800e43a:	1d1a      	adds	r2, r3, #4
 800e43c:	6032      	str	r2, [r6, #0]
 800e43e:	681e      	ldr	r6, [r3, #0]
 800e440:	6862      	ldr	r2, [r4, #4]
 800e442:	2100      	movs	r1, #0
 800e444:	4630      	mov	r0, r6
 800e446:	f7f1 fed3 	bl	80001f0 <memchr>
 800e44a:	b108      	cbz	r0, 800e450 <_printf_i+0x1e4>
 800e44c:	1b80      	subs	r0, r0, r6
 800e44e:	6060      	str	r0, [r4, #4]
 800e450:	6863      	ldr	r3, [r4, #4]
 800e452:	6123      	str	r3, [r4, #16]
 800e454:	2300      	movs	r3, #0
 800e456:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e45a:	e7aa      	b.n	800e3b2 <_printf_i+0x146>
 800e45c:	6923      	ldr	r3, [r4, #16]
 800e45e:	4632      	mov	r2, r6
 800e460:	4649      	mov	r1, r9
 800e462:	4640      	mov	r0, r8
 800e464:	47d0      	blx	sl
 800e466:	3001      	adds	r0, #1
 800e468:	d0ad      	beq.n	800e3c6 <_printf_i+0x15a>
 800e46a:	6823      	ldr	r3, [r4, #0]
 800e46c:	079b      	lsls	r3, r3, #30
 800e46e:	d413      	bmi.n	800e498 <_printf_i+0x22c>
 800e470:	68e0      	ldr	r0, [r4, #12]
 800e472:	9b03      	ldr	r3, [sp, #12]
 800e474:	4298      	cmp	r0, r3
 800e476:	bfb8      	it	lt
 800e478:	4618      	movlt	r0, r3
 800e47a:	e7a6      	b.n	800e3ca <_printf_i+0x15e>
 800e47c:	2301      	movs	r3, #1
 800e47e:	4632      	mov	r2, r6
 800e480:	4649      	mov	r1, r9
 800e482:	4640      	mov	r0, r8
 800e484:	47d0      	blx	sl
 800e486:	3001      	adds	r0, #1
 800e488:	d09d      	beq.n	800e3c6 <_printf_i+0x15a>
 800e48a:	3501      	adds	r5, #1
 800e48c:	68e3      	ldr	r3, [r4, #12]
 800e48e:	9903      	ldr	r1, [sp, #12]
 800e490:	1a5b      	subs	r3, r3, r1
 800e492:	42ab      	cmp	r3, r5
 800e494:	dcf2      	bgt.n	800e47c <_printf_i+0x210>
 800e496:	e7eb      	b.n	800e470 <_printf_i+0x204>
 800e498:	2500      	movs	r5, #0
 800e49a:	f104 0619 	add.w	r6, r4, #25
 800e49e:	e7f5      	b.n	800e48c <_printf_i+0x220>
 800e4a0:	08011612 	.word	0x08011612
 800e4a4:	08011623 	.word	0x08011623

0800e4a8 <std>:
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	b510      	push	{r4, lr}
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	e9c0 3300 	strd	r3, r3, [r0]
 800e4b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4b6:	6083      	str	r3, [r0, #8]
 800e4b8:	8181      	strh	r1, [r0, #12]
 800e4ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800e4bc:	81c2      	strh	r2, [r0, #14]
 800e4be:	6183      	str	r3, [r0, #24]
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	2208      	movs	r2, #8
 800e4c4:	305c      	adds	r0, #92	@ 0x5c
 800e4c6:	f000 f8f4 	bl	800e6b2 <memset>
 800e4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e500 <std+0x58>)
 800e4cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800e4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e504 <std+0x5c>)
 800e4d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e508 <std+0x60>)
 800e4d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e50c <std+0x64>)
 800e4d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800e4da:	4b0d      	ldr	r3, [pc, #52]	@ (800e510 <std+0x68>)
 800e4dc:	6224      	str	r4, [r4, #32]
 800e4de:	429c      	cmp	r4, r3
 800e4e0:	d006      	beq.n	800e4f0 <std+0x48>
 800e4e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e4e6:	4294      	cmp	r4, r2
 800e4e8:	d002      	beq.n	800e4f0 <std+0x48>
 800e4ea:	33d0      	adds	r3, #208	@ 0xd0
 800e4ec:	429c      	cmp	r4, r3
 800e4ee:	d105      	bne.n	800e4fc <std+0x54>
 800e4f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4f8:	f000 b97a 	b.w	800e7f0 <__retarget_lock_init_recursive>
 800e4fc:	bd10      	pop	{r4, pc}
 800e4fe:	bf00      	nop
 800e500:	0800e62d 	.word	0x0800e62d
 800e504:	0800e64f 	.word	0x0800e64f
 800e508:	0800e687 	.word	0x0800e687
 800e50c:	0800e6ab 	.word	0x0800e6ab
 800e510:	20013254 	.word	0x20013254

0800e514 <stdio_exit_handler>:
 800e514:	4a02      	ldr	r2, [pc, #8]	@ (800e520 <stdio_exit_handler+0xc>)
 800e516:	4903      	ldr	r1, [pc, #12]	@ (800e524 <stdio_exit_handler+0x10>)
 800e518:	4803      	ldr	r0, [pc, #12]	@ (800e528 <stdio_exit_handler+0x14>)
 800e51a:	f000 b869 	b.w	800e5f0 <_fwalk_sglue>
 800e51e:	bf00      	nop
 800e520:	20006818 	.word	0x20006818
 800e524:	0800fd59 	.word	0x0800fd59
 800e528:	20006828 	.word	0x20006828

0800e52c <cleanup_stdio>:
 800e52c:	6841      	ldr	r1, [r0, #4]
 800e52e:	4b0c      	ldr	r3, [pc, #48]	@ (800e560 <cleanup_stdio+0x34>)
 800e530:	4299      	cmp	r1, r3
 800e532:	b510      	push	{r4, lr}
 800e534:	4604      	mov	r4, r0
 800e536:	d001      	beq.n	800e53c <cleanup_stdio+0x10>
 800e538:	f001 fc0e 	bl	800fd58 <_fflush_r>
 800e53c:	68a1      	ldr	r1, [r4, #8]
 800e53e:	4b09      	ldr	r3, [pc, #36]	@ (800e564 <cleanup_stdio+0x38>)
 800e540:	4299      	cmp	r1, r3
 800e542:	d002      	beq.n	800e54a <cleanup_stdio+0x1e>
 800e544:	4620      	mov	r0, r4
 800e546:	f001 fc07 	bl	800fd58 <_fflush_r>
 800e54a:	68e1      	ldr	r1, [r4, #12]
 800e54c:	4b06      	ldr	r3, [pc, #24]	@ (800e568 <cleanup_stdio+0x3c>)
 800e54e:	4299      	cmp	r1, r3
 800e550:	d004      	beq.n	800e55c <cleanup_stdio+0x30>
 800e552:	4620      	mov	r0, r4
 800e554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e558:	f001 bbfe 	b.w	800fd58 <_fflush_r>
 800e55c:	bd10      	pop	{r4, pc}
 800e55e:	bf00      	nop
 800e560:	20013254 	.word	0x20013254
 800e564:	200132bc 	.word	0x200132bc
 800e568:	20013324 	.word	0x20013324

0800e56c <global_stdio_init.part.0>:
 800e56c:	b510      	push	{r4, lr}
 800e56e:	4b0b      	ldr	r3, [pc, #44]	@ (800e59c <global_stdio_init.part.0+0x30>)
 800e570:	4c0b      	ldr	r4, [pc, #44]	@ (800e5a0 <global_stdio_init.part.0+0x34>)
 800e572:	4a0c      	ldr	r2, [pc, #48]	@ (800e5a4 <global_stdio_init.part.0+0x38>)
 800e574:	601a      	str	r2, [r3, #0]
 800e576:	4620      	mov	r0, r4
 800e578:	2200      	movs	r2, #0
 800e57a:	2104      	movs	r1, #4
 800e57c:	f7ff ff94 	bl	800e4a8 <std>
 800e580:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e584:	2201      	movs	r2, #1
 800e586:	2109      	movs	r1, #9
 800e588:	f7ff ff8e 	bl	800e4a8 <std>
 800e58c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e590:	2202      	movs	r2, #2
 800e592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e596:	2112      	movs	r1, #18
 800e598:	f7ff bf86 	b.w	800e4a8 <std>
 800e59c:	2001338c 	.word	0x2001338c
 800e5a0:	20013254 	.word	0x20013254
 800e5a4:	0800e515 	.word	0x0800e515

0800e5a8 <__sfp_lock_acquire>:
 800e5a8:	4801      	ldr	r0, [pc, #4]	@ (800e5b0 <__sfp_lock_acquire+0x8>)
 800e5aa:	f000 b922 	b.w	800e7f2 <__retarget_lock_acquire_recursive>
 800e5ae:	bf00      	nop
 800e5b0:	20013395 	.word	0x20013395

0800e5b4 <__sfp_lock_release>:
 800e5b4:	4801      	ldr	r0, [pc, #4]	@ (800e5bc <__sfp_lock_release+0x8>)
 800e5b6:	f000 b91d 	b.w	800e7f4 <__retarget_lock_release_recursive>
 800e5ba:	bf00      	nop
 800e5bc:	20013395 	.word	0x20013395

0800e5c0 <__sinit>:
 800e5c0:	b510      	push	{r4, lr}
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	f7ff fff0 	bl	800e5a8 <__sfp_lock_acquire>
 800e5c8:	6a23      	ldr	r3, [r4, #32]
 800e5ca:	b11b      	cbz	r3, 800e5d4 <__sinit+0x14>
 800e5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5d0:	f7ff bff0 	b.w	800e5b4 <__sfp_lock_release>
 800e5d4:	4b04      	ldr	r3, [pc, #16]	@ (800e5e8 <__sinit+0x28>)
 800e5d6:	6223      	str	r3, [r4, #32]
 800e5d8:	4b04      	ldr	r3, [pc, #16]	@ (800e5ec <__sinit+0x2c>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1f5      	bne.n	800e5cc <__sinit+0xc>
 800e5e0:	f7ff ffc4 	bl	800e56c <global_stdio_init.part.0>
 800e5e4:	e7f2      	b.n	800e5cc <__sinit+0xc>
 800e5e6:	bf00      	nop
 800e5e8:	0800e52d 	.word	0x0800e52d
 800e5ec:	2001338c 	.word	0x2001338c

0800e5f0 <_fwalk_sglue>:
 800e5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5f4:	4607      	mov	r7, r0
 800e5f6:	4688      	mov	r8, r1
 800e5f8:	4614      	mov	r4, r2
 800e5fa:	2600      	movs	r6, #0
 800e5fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e600:	f1b9 0901 	subs.w	r9, r9, #1
 800e604:	d505      	bpl.n	800e612 <_fwalk_sglue+0x22>
 800e606:	6824      	ldr	r4, [r4, #0]
 800e608:	2c00      	cmp	r4, #0
 800e60a:	d1f7      	bne.n	800e5fc <_fwalk_sglue+0xc>
 800e60c:	4630      	mov	r0, r6
 800e60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e612:	89ab      	ldrh	r3, [r5, #12]
 800e614:	2b01      	cmp	r3, #1
 800e616:	d907      	bls.n	800e628 <_fwalk_sglue+0x38>
 800e618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e61c:	3301      	adds	r3, #1
 800e61e:	d003      	beq.n	800e628 <_fwalk_sglue+0x38>
 800e620:	4629      	mov	r1, r5
 800e622:	4638      	mov	r0, r7
 800e624:	47c0      	blx	r8
 800e626:	4306      	orrs	r6, r0
 800e628:	3568      	adds	r5, #104	@ 0x68
 800e62a:	e7e9      	b.n	800e600 <_fwalk_sglue+0x10>

0800e62c <__sread>:
 800e62c:	b510      	push	{r4, lr}
 800e62e:	460c      	mov	r4, r1
 800e630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e634:	f000 f87e 	bl	800e734 <_read_r>
 800e638:	2800      	cmp	r0, #0
 800e63a:	bfab      	itete	ge
 800e63c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e63e:	89a3      	ldrhlt	r3, [r4, #12]
 800e640:	181b      	addge	r3, r3, r0
 800e642:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e646:	bfac      	ite	ge
 800e648:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e64a:	81a3      	strhlt	r3, [r4, #12]
 800e64c:	bd10      	pop	{r4, pc}

0800e64e <__swrite>:
 800e64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e652:	461f      	mov	r7, r3
 800e654:	898b      	ldrh	r3, [r1, #12]
 800e656:	05db      	lsls	r3, r3, #23
 800e658:	4605      	mov	r5, r0
 800e65a:	460c      	mov	r4, r1
 800e65c:	4616      	mov	r6, r2
 800e65e:	d505      	bpl.n	800e66c <__swrite+0x1e>
 800e660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e664:	2302      	movs	r3, #2
 800e666:	2200      	movs	r2, #0
 800e668:	f000 f852 	bl	800e710 <_lseek_r>
 800e66c:	89a3      	ldrh	r3, [r4, #12]
 800e66e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e672:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e676:	81a3      	strh	r3, [r4, #12]
 800e678:	4632      	mov	r2, r6
 800e67a:	463b      	mov	r3, r7
 800e67c:	4628      	mov	r0, r5
 800e67e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e682:	f000 b879 	b.w	800e778 <_write_r>

0800e686 <__sseek>:
 800e686:	b510      	push	{r4, lr}
 800e688:	460c      	mov	r4, r1
 800e68a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e68e:	f000 f83f 	bl	800e710 <_lseek_r>
 800e692:	1c43      	adds	r3, r0, #1
 800e694:	89a3      	ldrh	r3, [r4, #12]
 800e696:	bf15      	itete	ne
 800e698:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e69a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e69e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e6a2:	81a3      	strheq	r3, [r4, #12]
 800e6a4:	bf18      	it	ne
 800e6a6:	81a3      	strhne	r3, [r4, #12]
 800e6a8:	bd10      	pop	{r4, pc}

0800e6aa <__sclose>:
 800e6aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6ae:	f000 b81f 	b.w	800e6f0 <_close_r>

0800e6b2 <memset>:
 800e6b2:	4402      	add	r2, r0
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d100      	bne.n	800e6bc <memset+0xa>
 800e6ba:	4770      	bx	lr
 800e6bc:	f803 1b01 	strb.w	r1, [r3], #1
 800e6c0:	e7f9      	b.n	800e6b6 <memset+0x4>

0800e6c2 <strncmp>:
 800e6c2:	b510      	push	{r4, lr}
 800e6c4:	b16a      	cbz	r2, 800e6e2 <strncmp+0x20>
 800e6c6:	3901      	subs	r1, #1
 800e6c8:	1884      	adds	r4, r0, r2
 800e6ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d103      	bne.n	800e6de <strncmp+0x1c>
 800e6d6:	42a0      	cmp	r0, r4
 800e6d8:	d001      	beq.n	800e6de <strncmp+0x1c>
 800e6da:	2a00      	cmp	r2, #0
 800e6dc:	d1f5      	bne.n	800e6ca <strncmp+0x8>
 800e6de:	1ad0      	subs	r0, r2, r3
 800e6e0:	bd10      	pop	{r4, pc}
 800e6e2:	4610      	mov	r0, r2
 800e6e4:	e7fc      	b.n	800e6e0 <strncmp+0x1e>
	...

0800e6e8 <_localeconv_r>:
 800e6e8:	4800      	ldr	r0, [pc, #0]	@ (800e6ec <_localeconv_r+0x4>)
 800e6ea:	4770      	bx	lr
 800e6ec:	20006964 	.word	0x20006964

0800e6f0 <_close_r>:
 800e6f0:	b538      	push	{r3, r4, r5, lr}
 800e6f2:	4d06      	ldr	r5, [pc, #24]	@ (800e70c <_close_r+0x1c>)
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	4608      	mov	r0, r1
 800e6fa:	602b      	str	r3, [r5, #0]
 800e6fc:	f002 fa22 	bl	8010b44 <_close>
 800e700:	1c43      	adds	r3, r0, #1
 800e702:	d102      	bne.n	800e70a <_close_r+0x1a>
 800e704:	682b      	ldr	r3, [r5, #0]
 800e706:	b103      	cbz	r3, 800e70a <_close_r+0x1a>
 800e708:	6023      	str	r3, [r4, #0]
 800e70a:	bd38      	pop	{r3, r4, r5, pc}
 800e70c:	20013390 	.word	0x20013390

0800e710 <_lseek_r>:
 800e710:	b538      	push	{r3, r4, r5, lr}
 800e712:	4d07      	ldr	r5, [pc, #28]	@ (800e730 <_lseek_r+0x20>)
 800e714:	4604      	mov	r4, r0
 800e716:	4608      	mov	r0, r1
 800e718:	4611      	mov	r1, r2
 800e71a:	2200      	movs	r2, #0
 800e71c:	602a      	str	r2, [r5, #0]
 800e71e:	461a      	mov	r2, r3
 800e720:	f002 fa38 	bl	8010b94 <_lseek>
 800e724:	1c43      	adds	r3, r0, #1
 800e726:	d102      	bne.n	800e72e <_lseek_r+0x1e>
 800e728:	682b      	ldr	r3, [r5, #0]
 800e72a:	b103      	cbz	r3, 800e72e <_lseek_r+0x1e>
 800e72c:	6023      	str	r3, [r4, #0]
 800e72e:	bd38      	pop	{r3, r4, r5, pc}
 800e730:	20013390 	.word	0x20013390

0800e734 <_read_r>:
 800e734:	b538      	push	{r3, r4, r5, lr}
 800e736:	4d07      	ldr	r5, [pc, #28]	@ (800e754 <_read_r+0x20>)
 800e738:	4604      	mov	r4, r0
 800e73a:	4608      	mov	r0, r1
 800e73c:	4611      	mov	r1, r2
 800e73e:	2200      	movs	r2, #0
 800e740:	602a      	str	r2, [r5, #0]
 800e742:	461a      	mov	r2, r3
 800e744:	f002 fa2e 	bl	8010ba4 <_read>
 800e748:	1c43      	adds	r3, r0, #1
 800e74a:	d102      	bne.n	800e752 <_read_r+0x1e>
 800e74c:	682b      	ldr	r3, [r5, #0]
 800e74e:	b103      	cbz	r3, 800e752 <_read_r+0x1e>
 800e750:	6023      	str	r3, [r4, #0]
 800e752:	bd38      	pop	{r3, r4, r5, pc}
 800e754:	20013390 	.word	0x20013390

0800e758 <_sbrk_r>:
 800e758:	b538      	push	{r3, r4, r5, lr}
 800e75a:	4d06      	ldr	r5, [pc, #24]	@ (800e774 <_sbrk_r+0x1c>)
 800e75c:	2300      	movs	r3, #0
 800e75e:	4604      	mov	r4, r0
 800e760:	4608      	mov	r0, r1
 800e762:	602b      	str	r3, [r5, #0]
 800e764:	f7f3 f81c 	bl	80017a0 <_sbrk>
 800e768:	1c43      	adds	r3, r0, #1
 800e76a:	d102      	bne.n	800e772 <_sbrk_r+0x1a>
 800e76c:	682b      	ldr	r3, [r5, #0]
 800e76e:	b103      	cbz	r3, 800e772 <_sbrk_r+0x1a>
 800e770:	6023      	str	r3, [r4, #0]
 800e772:	bd38      	pop	{r3, r4, r5, pc}
 800e774:	20013390 	.word	0x20013390

0800e778 <_write_r>:
 800e778:	b538      	push	{r3, r4, r5, lr}
 800e77a:	4d07      	ldr	r5, [pc, #28]	@ (800e798 <_write_r+0x20>)
 800e77c:	4604      	mov	r4, r0
 800e77e:	4608      	mov	r0, r1
 800e780:	4611      	mov	r1, r2
 800e782:	2200      	movs	r2, #0
 800e784:	602a      	str	r2, [r5, #0]
 800e786:	461a      	mov	r2, r3
 800e788:	f7f4 fe64 	bl	8003454 <_write>
 800e78c:	1c43      	adds	r3, r0, #1
 800e78e:	d102      	bne.n	800e796 <_write_r+0x1e>
 800e790:	682b      	ldr	r3, [r5, #0]
 800e792:	b103      	cbz	r3, 800e796 <_write_r+0x1e>
 800e794:	6023      	str	r3, [r4, #0]
 800e796:	bd38      	pop	{r3, r4, r5, pc}
 800e798:	20013390 	.word	0x20013390

0800e79c <__errno>:
 800e79c:	4b01      	ldr	r3, [pc, #4]	@ (800e7a4 <__errno+0x8>)
 800e79e:	6818      	ldr	r0, [r3, #0]
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	20006824 	.word	0x20006824

0800e7a8 <__libc_init_array>:
 800e7a8:	b570      	push	{r4, r5, r6, lr}
 800e7aa:	4d0d      	ldr	r5, [pc, #52]	@ (800e7e0 <__libc_init_array+0x38>)
 800e7ac:	4c0d      	ldr	r4, [pc, #52]	@ (800e7e4 <__libc_init_array+0x3c>)
 800e7ae:	1b64      	subs	r4, r4, r5
 800e7b0:	10a4      	asrs	r4, r4, #2
 800e7b2:	2600      	movs	r6, #0
 800e7b4:	42a6      	cmp	r6, r4
 800e7b6:	d109      	bne.n	800e7cc <__libc_init_array+0x24>
 800e7b8:	4d0b      	ldr	r5, [pc, #44]	@ (800e7e8 <__libc_init_array+0x40>)
 800e7ba:	4c0c      	ldr	r4, [pc, #48]	@ (800e7ec <__libc_init_array+0x44>)
 800e7bc:	f002 f9fc 	bl	8010bb8 <_init>
 800e7c0:	1b64      	subs	r4, r4, r5
 800e7c2:	10a4      	asrs	r4, r4, #2
 800e7c4:	2600      	movs	r6, #0
 800e7c6:	42a6      	cmp	r6, r4
 800e7c8:	d105      	bne.n	800e7d6 <__libc_init_array+0x2e>
 800e7ca:	bd70      	pop	{r4, r5, r6, pc}
 800e7cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7d0:	4798      	blx	r3
 800e7d2:	3601      	adds	r6, #1
 800e7d4:	e7ee      	b.n	800e7b4 <__libc_init_array+0xc>
 800e7d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7da:	4798      	blx	r3
 800e7dc:	3601      	adds	r6, #1
 800e7de:	e7f2      	b.n	800e7c6 <__libc_init_array+0x1e>
 800e7e0:	0807fe54 	.word	0x0807fe54
 800e7e4:	0807fe54 	.word	0x0807fe54
 800e7e8:	0807fe54 	.word	0x0807fe54
 800e7ec:	0807fe58 	.word	0x0807fe58

0800e7f0 <__retarget_lock_init_recursive>:
 800e7f0:	4770      	bx	lr

0800e7f2 <__retarget_lock_acquire_recursive>:
 800e7f2:	4770      	bx	lr

0800e7f4 <__retarget_lock_release_recursive>:
 800e7f4:	4770      	bx	lr

0800e7f6 <memcpy>:
 800e7f6:	440a      	add	r2, r1
 800e7f8:	4291      	cmp	r1, r2
 800e7fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7fe:	d100      	bne.n	800e802 <memcpy+0xc>
 800e800:	4770      	bx	lr
 800e802:	b510      	push	{r4, lr}
 800e804:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e80c:	4291      	cmp	r1, r2
 800e80e:	d1f9      	bne.n	800e804 <memcpy+0xe>
 800e810:	bd10      	pop	{r4, pc}

0800e812 <quorem>:
 800e812:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e816:	6903      	ldr	r3, [r0, #16]
 800e818:	690c      	ldr	r4, [r1, #16]
 800e81a:	42a3      	cmp	r3, r4
 800e81c:	4607      	mov	r7, r0
 800e81e:	db7e      	blt.n	800e91e <quorem+0x10c>
 800e820:	3c01      	subs	r4, #1
 800e822:	f101 0814 	add.w	r8, r1, #20
 800e826:	00a3      	lsls	r3, r4, #2
 800e828:	f100 0514 	add.w	r5, r0, #20
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e832:	9301      	str	r3, [sp, #4]
 800e834:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e838:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e83c:	3301      	adds	r3, #1
 800e83e:	429a      	cmp	r2, r3
 800e840:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e844:	fbb2 f6f3 	udiv	r6, r2, r3
 800e848:	d32e      	bcc.n	800e8a8 <quorem+0x96>
 800e84a:	f04f 0a00 	mov.w	sl, #0
 800e84e:	46c4      	mov	ip, r8
 800e850:	46ae      	mov	lr, r5
 800e852:	46d3      	mov	fp, sl
 800e854:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e858:	b298      	uxth	r0, r3
 800e85a:	fb06 a000 	mla	r0, r6, r0, sl
 800e85e:	0c02      	lsrs	r2, r0, #16
 800e860:	0c1b      	lsrs	r3, r3, #16
 800e862:	fb06 2303 	mla	r3, r6, r3, r2
 800e866:	f8de 2000 	ldr.w	r2, [lr]
 800e86a:	b280      	uxth	r0, r0
 800e86c:	b292      	uxth	r2, r2
 800e86e:	1a12      	subs	r2, r2, r0
 800e870:	445a      	add	r2, fp
 800e872:	f8de 0000 	ldr.w	r0, [lr]
 800e876:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e880:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e884:	b292      	uxth	r2, r2
 800e886:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e88a:	45e1      	cmp	r9, ip
 800e88c:	f84e 2b04 	str.w	r2, [lr], #4
 800e890:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e894:	d2de      	bcs.n	800e854 <quorem+0x42>
 800e896:	9b00      	ldr	r3, [sp, #0]
 800e898:	58eb      	ldr	r3, [r5, r3]
 800e89a:	b92b      	cbnz	r3, 800e8a8 <quorem+0x96>
 800e89c:	9b01      	ldr	r3, [sp, #4]
 800e89e:	3b04      	subs	r3, #4
 800e8a0:	429d      	cmp	r5, r3
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	d32f      	bcc.n	800e906 <quorem+0xf4>
 800e8a6:	613c      	str	r4, [r7, #16]
 800e8a8:	4638      	mov	r0, r7
 800e8aa:	f001 f8c9 	bl	800fa40 <__mcmp>
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	db25      	blt.n	800e8fe <quorem+0xec>
 800e8b2:	4629      	mov	r1, r5
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	f858 2b04 	ldr.w	r2, [r8], #4
 800e8ba:	f8d1 c000 	ldr.w	ip, [r1]
 800e8be:	fa1f fe82 	uxth.w	lr, r2
 800e8c2:	fa1f f38c 	uxth.w	r3, ip
 800e8c6:	eba3 030e 	sub.w	r3, r3, lr
 800e8ca:	4403      	add	r3, r0
 800e8cc:	0c12      	lsrs	r2, r2, #16
 800e8ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e8d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8dc:	45c1      	cmp	r9, r8
 800e8de:	f841 3b04 	str.w	r3, [r1], #4
 800e8e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e8e6:	d2e6      	bcs.n	800e8b6 <quorem+0xa4>
 800e8e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e8ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e8f0:	b922      	cbnz	r2, 800e8fc <quorem+0xea>
 800e8f2:	3b04      	subs	r3, #4
 800e8f4:	429d      	cmp	r5, r3
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	d30b      	bcc.n	800e912 <quorem+0x100>
 800e8fa:	613c      	str	r4, [r7, #16]
 800e8fc:	3601      	adds	r6, #1
 800e8fe:	4630      	mov	r0, r6
 800e900:	b003      	add	sp, #12
 800e902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e906:	6812      	ldr	r2, [r2, #0]
 800e908:	3b04      	subs	r3, #4
 800e90a:	2a00      	cmp	r2, #0
 800e90c:	d1cb      	bne.n	800e8a6 <quorem+0x94>
 800e90e:	3c01      	subs	r4, #1
 800e910:	e7c6      	b.n	800e8a0 <quorem+0x8e>
 800e912:	6812      	ldr	r2, [r2, #0]
 800e914:	3b04      	subs	r3, #4
 800e916:	2a00      	cmp	r2, #0
 800e918:	d1ef      	bne.n	800e8fa <quorem+0xe8>
 800e91a:	3c01      	subs	r4, #1
 800e91c:	e7ea      	b.n	800e8f4 <quorem+0xe2>
 800e91e:	2000      	movs	r0, #0
 800e920:	e7ee      	b.n	800e900 <quorem+0xee>
 800e922:	0000      	movs	r0, r0
 800e924:	0000      	movs	r0, r0
	...

0800e928 <_dtoa_r>:
 800e928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e92c:	69c7      	ldr	r7, [r0, #28]
 800e92e:	b097      	sub	sp, #92	@ 0x5c
 800e930:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e934:	ec55 4b10 	vmov	r4, r5, d0
 800e938:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e93a:	9107      	str	r1, [sp, #28]
 800e93c:	4681      	mov	r9, r0
 800e93e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e940:	9311      	str	r3, [sp, #68]	@ 0x44
 800e942:	b97f      	cbnz	r7, 800e964 <_dtoa_r+0x3c>
 800e944:	2010      	movs	r0, #16
 800e946:	f7f4 fe07 	bl	8003558 <__wrap_malloc>
 800e94a:	4602      	mov	r2, r0
 800e94c:	f8c9 001c 	str.w	r0, [r9, #28]
 800e950:	b920      	cbnz	r0, 800e95c <_dtoa_r+0x34>
 800e952:	4ba9      	ldr	r3, [pc, #676]	@ (800ebf8 <_dtoa_r+0x2d0>)
 800e954:	21ef      	movs	r1, #239	@ 0xef
 800e956:	48a9      	ldr	r0, [pc, #676]	@ (800ebfc <_dtoa_r+0x2d4>)
 800e958:	f001 fa26 	bl	800fda8 <__assert_func>
 800e95c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e960:	6007      	str	r7, [r0, #0]
 800e962:	60c7      	str	r7, [r0, #12]
 800e964:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e968:	6819      	ldr	r1, [r3, #0]
 800e96a:	b159      	cbz	r1, 800e984 <_dtoa_r+0x5c>
 800e96c:	685a      	ldr	r2, [r3, #4]
 800e96e:	604a      	str	r2, [r1, #4]
 800e970:	2301      	movs	r3, #1
 800e972:	4093      	lsls	r3, r2
 800e974:	608b      	str	r3, [r1, #8]
 800e976:	4648      	mov	r0, r9
 800e978:	f000 fe30 	bl	800f5dc <_Bfree>
 800e97c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e980:	2200      	movs	r2, #0
 800e982:	601a      	str	r2, [r3, #0]
 800e984:	1e2b      	subs	r3, r5, #0
 800e986:	bfb9      	ittee	lt
 800e988:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e98c:	9305      	strlt	r3, [sp, #20]
 800e98e:	2300      	movge	r3, #0
 800e990:	6033      	strge	r3, [r6, #0]
 800e992:	9f05      	ldr	r7, [sp, #20]
 800e994:	4b9a      	ldr	r3, [pc, #616]	@ (800ec00 <_dtoa_r+0x2d8>)
 800e996:	bfbc      	itt	lt
 800e998:	2201      	movlt	r2, #1
 800e99a:	6032      	strlt	r2, [r6, #0]
 800e99c:	43bb      	bics	r3, r7
 800e99e:	d112      	bne.n	800e9c6 <_dtoa_r+0x9e>
 800e9a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e9a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e9a6:	6013      	str	r3, [r2, #0]
 800e9a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e9ac:	4323      	orrs	r3, r4
 800e9ae:	f000 855a 	beq.w	800f466 <_dtoa_r+0xb3e>
 800e9b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e9b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ec14 <_dtoa_r+0x2ec>
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	f000 855c 	beq.w	800f476 <_dtoa_r+0xb4e>
 800e9be:	f10a 0303 	add.w	r3, sl, #3
 800e9c2:	f000 bd56 	b.w	800f472 <_dtoa_r+0xb4a>
 800e9c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	ec51 0b17 	vmov	r0, r1, d7
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e9d6:	f7f2 f887 	bl	8000ae8 <__aeabi_dcmpeq>
 800e9da:	4680      	mov	r8, r0
 800e9dc:	b158      	cbz	r0, 800e9f6 <_dtoa_r+0xce>
 800e9de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	6013      	str	r3, [r2, #0]
 800e9e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e9e6:	b113      	cbz	r3, 800e9ee <_dtoa_r+0xc6>
 800e9e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e9ea:	4b86      	ldr	r3, [pc, #536]	@ (800ec04 <_dtoa_r+0x2dc>)
 800e9ec:	6013      	str	r3, [r2, #0]
 800e9ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ec18 <_dtoa_r+0x2f0>
 800e9f2:	f000 bd40 	b.w	800f476 <_dtoa_r+0xb4e>
 800e9f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e9fa:	aa14      	add	r2, sp, #80	@ 0x50
 800e9fc:	a915      	add	r1, sp, #84	@ 0x54
 800e9fe:	4648      	mov	r0, r9
 800ea00:	f001 f8ce 	bl	800fba0 <__d2b>
 800ea04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ea08:	9002      	str	r0, [sp, #8]
 800ea0a:	2e00      	cmp	r6, #0
 800ea0c:	d078      	beq.n	800eb00 <_dtoa_r+0x1d8>
 800ea0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea10:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ea14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ea1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ea20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ea24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ea28:	4619      	mov	r1, r3
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	4b76      	ldr	r3, [pc, #472]	@ (800ec08 <_dtoa_r+0x2e0>)
 800ea2e:	f7f1 fc3b 	bl	80002a8 <__aeabi_dsub>
 800ea32:	a36b      	add	r3, pc, #428	@ (adr r3, 800ebe0 <_dtoa_r+0x2b8>)
 800ea34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea38:	f7f1 fdee 	bl	8000618 <__aeabi_dmul>
 800ea3c:	a36a      	add	r3, pc, #424	@ (adr r3, 800ebe8 <_dtoa_r+0x2c0>)
 800ea3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea42:	f7f1 fc33 	bl	80002ac <__adddf3>
 800ea46:	4604      	mov	r4, r0
 800ea48:	4630      	mov	r0, r6
 800ea4a:	460d      	mov	r5, r1
 800ea4c:	f7f1 fd7a 	bl	8000544 <__aeabi_i2d>
 800ea50:	a367      	add	r3, pc, #412	@ (adr r3, 800ebf0 <_dtoa_r+0x2c8>)
 800ea52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea56:	f7f1 fddf 	bl	8000618 <__aeabi_dmul>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	4620      	mov	r0, r4
 800ea60:	4629      	mov	r1, r5
 800ea62:	f7f1 fc23 	bl	80002ac <__adddf3>
 800ea66:	4604      	mov	r4, r0
 800ea68:	460d      	mov	r5, r1
 800ea6a:	f7f2 f885 	bl	8000b78 <__aeabi_d2iz>
 800ea6e:	2200      	movs	r2, #0
 800ea70:	4607      	mov	r7, r0
 800ea72:	2300      	movs	r3, #0
 800ea74:	4620      	mov	r0, r4
 800ea76:	4629      	mov	r1, r5
 800ea78:	f7f2 f840 	bl	8000afc <__aeabi_dcmplt>
 800ea7c:	b140      	cbz	r0, 800ea90 <_dtoa_r+0x168>
 800ea7e:	4638      	mov	r0, r7
 800ea80:	f7f1 fd60 	bl	8000544 <__aeabi_i2d>
 800ea84:	4622      	mov	r2, r4
 800ea86:	462b      	mov	r3, r5
 800ea88:	f7f2 f82e 	bl	8000ae8 <__aeabi_dcmpeq>
 800ea8c:	b900      	cbnz	r0, 800ea90 <_dtoa_r+0x168>
 800ea8e:	3f01      	subs	r7, #1
 800ea90:	2f16      	cmp	r7, #22
 800ea92:	d852      	bhi.n	800eb3a <_dtoa_r+0x212>
 800ea94:	4b5d      	ldr	r3, [pc, #372]	@ (800ec0c <_dtoa_r+0x2e4>)
 800ea96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ea9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800eaa2:	f7f2 f82b 	bl	8000afc <__aeabi_dcmplt>
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	d049      	beq.n	800eb3e <_dtoa_r+0x216>
 800eaaa:	3f01      	subs	r7, #1
 800eaac:	2300      	movs	r3, #0
 800eaae:	9310      	str	r3, [sp, #64]	@ 0x40
 800eab0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eab2:	1b9b      	subs	r3, r3, r6
 800eab4:	1e5a      	subs	r2, r3, #1
 800eab6:	bf45      	ittet	mi
 800eab8:	f1c3 0301 	rsbmi	r3, r3, #1
 800eabc:	9300      	strmi	r3, [sp, #0]
 800eabe:	2300      	movpl	r3, #0
 800eac0:	2300      	movmi	r3, #0
 800eac2:	9206      	str	r2, [sp, #24]
 800eac4:	bf54      	ite	pl
 800eac6:	9300      	strpl	r3, [sp, #0]
 800eac8:	9306      	strmi	r3, [sp, #24]
 800eaca:	2f00      	cmp	r7, #0
 800eacc:	db39      	blt.n	800eb42 <_dtoa_r+0x21a>
 800eace:	9b06      	ldr	r3, [sp, #24]
 800ead0:	970d      	str	r7, [sp, #52]	@ 0x34
 800ead2:	443b      	add	r3, r7
 800ead4:	9306      	str	r3, [sp, #24]
 800ead6:	2300      	movs	r3, #0
 800ead8:	9308      	str	r3, [sp, #32]
 800eada:	9b07      	ldr	r3, [sp, #28]
 800eadc:	2b09      	cmp	r3, #9
 800eade:	d863      	bhi.n	800eba8 <_dtoa_r+0x280>
 800eae0:	2b05      	cmp	r3, #5
 800eae2:	bfc4      	itt	gt
 800eae4:	3b04      	subgt	r3, #4
 800eae6:	9307      	strgt	r3, [sp, #28]
 800eae8:	9b07      	ldr	r3, [sp, #28]
 800eaea:	f1a3 0302 	sub.w	r3, r3, #2
 800eaee:	bfcc      	ite	gt
 800eaf0:	2400      	movgt	r4, #0
 800eaf2:	2401      	movle	r4, #1
 800eaf4:	2b03      	cmp	r3, #3
 800eaf6:	d863      	bhi.n	800ebc0 <_dtoa_r+0x298>
 800eaf8:	e8df f003 	tbb	[pc, r3]
 800eafc:	2b375452 	.word	0x2b375452
 800eb00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800eb04:	441e      	add	r6, r3
 800eb06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800eb0a:	2b20      	cmp	r3, #32
 800eb0c:	bfc1      	itttt	gt
 800eb0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800eb12:	409f      	lslgt	r7, r3
 800eb14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800eb18:	fa24 f303 	lsrgt.w	r3, r4, r3
 800eb1c:	bfd6      	itet	le
 800eb1e:	f1c3 0320 	rsble	r3, r3, #32
 800eb22:	ea47 0003 	orrgt.w	r0, r7, r3
 800eb26:	fa04 f003 	lslle.w	r0, r4, r3
 800eb2a:	f7f1 fcfb 	bl	8000524 <__aeabi_ui2d>
 800eb2e:	2201      	movs	r2, #1
 800eb30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800eb34:	3e01      	subs	r6, #1
 800eb36:	9212      	str	r2, [sp, #72]	@ 0x48
 800eb38:	e776      	b.n	800ea28 <_dtoa_r+0x100>
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	e7b7      	b.n	800eaae <_dtoa_r+0x186>
 800eb3e:	9010      	str	r0, [sp, #64]	@ 0x40
 800eb40:	e7b6      	b.n	800eab0 <_dtoa_r+0x188>
 800eb42:	9b00      	ldr	r3, [sp, #0]
 800eb44:	1bdb      	subs	r3, r3, r7
 800eb46:	9300      	str	r3, [sp, #0]
 800eb48:	427b      	negs	r3, r7
 800eb4a:	9308      	str	r3, [sp, #32]
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	930d      	str	r3, [sp, #52]	@ 0x34
 800eb50:	e7c3      	b.n	800eada <_dtoa_r+0x1b2>
 800eb52:	2301      	movs	r3, #1
 800eb54:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb58:	eb07 0b03 	add.w	fp, r7, r3
 800eb5c:	f10b 0301 	add.w	r3, fp, #1
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	9303      	str	r3, [sp, #12]
 800eb64:	bfb8      	it	lt
 800eb66:	2301      	movlt	r3, #1
 800eb68:	e006      	b.n	800eb78 <_dtoa_r+0x250>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	dd28      	ble.n	800ebc6 <_dtoa_r+0x29e>
 800eb74:	469b      	mov	fp, r3
 800eb76:	9303      	str	r3, [sp, #12]
 800eb78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	2204      	movs	r2, #4
 800eb80:	f102 0514 	add.w	r5, r2, #20
 800eb84:	429d      	cmp	r5, r3
 800eb86:	d926      	bls.n	800ebd6 <_dtoa_r+0x2ae>
 800eb88:	6041      	str	r1, [r0, #4]
 800eb8a:	4648      	mov	r0, r9
 800eb8c:	f000 fce6 	bl	800f55c <_Balloc>
 800eb90:	4682      	mov	sl, r0
 800eb92:	2800      	cmp	r0, #0
 800eb94:	d142      	bne.n	800ec1c <_dtoa_r+0x2f4>
 800eb96:	4b1e      	ldr	r3, [pc, #120]	@ (800ec10 <_dtoa_r+0x2e8>)
 800eb98:	4602      	mov	r2, r0
 800eb9a:	f240 11af 	movw	r1, #431	@ 0x1af
 800eb9e:	e6da      	b.n	800e956 <_dtoa_r+0x2e>
 800eba0:	2300      	movs	r3, #0
 800eba2:	e7e3      	b.n	800eb6c <_dtoa_r+0x244>
 800eba4:	2300      	movs	r3, #0
 800eba6:	e7d5      	b.n	800eb54 <_dtoa_r+0x22c>
 800eba8:	2401      	movs	r4, #1
 800ebaa:	2300      	movs	r3, #0
 800ebac:	9307      	str	r3, [sp, #28]
 800ebae:	9409      	str	r4, [sp, #36]	@ 0x24
 800ebb0:	f04f 3bff 	mov.w	fp, #4294967295
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f8cd b00c 	str.w	fp, [sp, #12]
 800ebba:	2312      	movs	r3, #18
 800ebbc:	920c      	str	r2, [sp, #48]	@ 0x30
 800ebbe:	e7db      	b.n	800eb78 <_dtoa_r+0x250>
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebc4:	e7f4      	b.n	800ebb0 <_dtoa_r+0x288>
 800ebc6:	f04f 0b01 	mov.w	fp, #1
 800ebca:	f8cd b00c 	str.w	fp, [sp, #12]
 800ebce:	465b      	mov	r3, fp
 800ebd0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ebd4:	e7d0      	b.n	800eb78 <_dtoa_r+0x250>
 800ebd6:	3101      	adds	r1, #1
 800ebd8:	0052      	lsls	r2, r2, #1
 800ebda:	e7d1      	b.n	800eb80 <_dtoa_r+0x258>
 800ebdc:	f3af 8000 	nop.w
 800ebe0:	636f4361 	.word	0x636f4361
 800ebe4:	3fd287a7 	.word	0x3fd287a7
 800ebe8:	8b60c8b3 	.word	0x8b60c8b3
 800ebec:	3fc68a28 	.word	0x3fc68a28
 800ebf0:	509f79fb 	.word	0x509f79fb
 800ebf4:	3fd34413 	.word	0x3fd34413
 800ebf8:	08011641 	.word	0x08011641
 800ebfc:	08011658 	.word	0x08011658
 800ec00:	7ff00000 	.word	0x7ff00000
 800ec04:	080115ec 	.word	0x080115ec
 800ec08:	3ff80000 	.word	0x3ff80000
 800ec0c:	0807fc68 	.word	0x0807fc68
 800ec10:	080116b0 	.word	0x080116b0
 800ec14:	0801163d 	.word	0x0801163d
 800ec18:	080115eb 	.word	0x080115eb
 800ec1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ec20:	6018      	str	r0, [r3, #0]
 800ec22:	9b03      	ldr	r3, [sp, #12]
 800ec24:	2b0e      	cmp	r3, #14
 800ec26:	f200 80a1 	bhi.w	800ed6c <_dtoa_r+0x444>
 800ec2a:	2c00      	cmp	r4, #0
 800ec2c:	f000 809e 	beq.w	800ed6c <_dtoa_r+0x444>
 800ec30:	2f00      	cmp	r7, #0
 800ec32:	dd33      	ble.n	800ec9c <_dtoa_r+0x374>
 800ec34:	4b9c      	ldr	r3, [pc, #624]	@ (800eea8 <_dtoa_r+0x580>)
 800ec36:	f007 020f 	and.w	r2, r7, #15
 800ec3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec3e:	ed93 7b00 	vldr	d7, [r3]
 800ec42:	05f8      	lsls	r0, r7, #23
 800ec44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ec48:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ec4c:	d516      	bpl.n	800ec7c <_dtoa_r+0x354>
 800ec4e:	4b97      	ldr	r3, [pc, #604]	@ (800eeac <_dtoa_r+0x584>)
 800ec50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ec54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ec58:	f7f1 fe08 	bl	800086c <__aeabi_ddiv>
 800ec5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec60:	f004 040f 	and.w	r4, r4, #15
 800ec64:	2603      	movs	r6, #3
 800ec66:	4d91      	ldr	r5, [pc, #580]	@ (800eeac <_dtoa_r+0x584>)
 800ec68:	b954      	cbnz	r4, 800ec80 <_dtoa_r+0x358>
 800ec6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ec6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec72:	f7f1 fdfb 	bl	800086c <__aeabi_ddiv>
 800ec76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec7a:	e028      	b.n	800ecce <_dtoa_r+0x3a6>
 800ec7c:	2602      	movs	r6, #2
 800ec7e:	e7f2      	b.n	800ec66 <_dtoa_r+0x33e>
 800ec80:	07e1      	lsls	r1, r4, #31
 800ec82:	d508      	bpl.n	800ec96 <_dtoa_r+0x36e>
 800ec84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ec88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ec8c:	f7f1 fcc4 	bl	8000618 <__aeabi_dmul>
 800ec90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ec94:	3601      	adds	r6, #1
 800ec96:	1064      	asrs	r4, r4, #1
 800ec98:	3508      	adds	r5, #8
 800ec9a:	e7e5      	b.n	800ec68 <_dtoa_r+0x340>
 800ec9c:	f000 80af 	beq.w	800edfe <_dtoa_r+0x4d6>
 800eca0:	427c      	negs	r4, r7
 800eca2:	4b81      	ldr	r3, [pc, #516]	@ (800eea8 <_dtoa_r+0x580>)
 800eca4:	4d81      	ldr	r5, [pc, #516]	@ (800eeac <_dtoa_r+0x584>)
 800eca6:	f004 020f 	and.w	r2, r4, #15
 800ecaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ecb6:	f7f1 fcaf 	bl	8000618 <__aeabi_dmul>
 800ecba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecbe:	1124      	asrs	r4, r4, #4
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	2602      	movs	r6, #2
 800ecc4:	2c00      	cmp	r4, #0
 800ecc6:	f040 808f 	bne.w	800ede8 <_dtoa_r+0x4c0>
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d1d3      	bne.n	800ec76 <_dtoa_r+0x34e>
 800ecce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ecd0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f000 8094 	beq.w	800ee02 <_dtoa_r+0x4da>
 800ecda:	4b75      	ldr	r3, [pc, #468]	@ (800eeb0 <_dtoa_r+0x588>)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	4620      	mov	r0, r4
 800ece0:	4629      	mov	r1, r5
 800ece2:	f7f1 ff0b 	bl	8000afc <__aeabi_dcmplt>
 800ece6:	2800      	cmp	r0, #0
 800ece8:	f000 808b 	beq.w	800ee02 <_dtoa_r+0x4da>
 800ecec:	9b03      	ldr	r3, [sp, #12]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	f000 8087 	beq.w	800ee02 <_dtoa_r+0x4da>
 800ecf4:	f1bb 0f00 	cmp.w	fp, #0
 800ecf8:	dd34      	ble.n	800ed64 <_dtoa_r+0x43c>
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	4b6d      	ldr	r3, [pc, #436]	@ (800eeb4 <_dtoa_r+0x58c>)
 800ecfe:	2200      	movs	r2, #0
 800ed00:	4629      	mov	r1, r5
 800ed02:	f7f1 fc89 	bl	8000618 <__aeabi_dmul>
 800ed06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed0a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ed0e:	3601      	adds	r6, #1
 800ed10:	465c      	mov	r4, fp
 800ed12:	4630      	mov	r0, r6
 800ed14:	f7f1 fc16 	bl	8000544 <__aeabi_i2d>
 800ed18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed1c:	f7f1 fc7c 	bl	8000618 <__aeabi_dmul>
 800ed20:	4b65      	ldr	r3, [pc, #404]	@ (800eeb8 <_dtoa_r+0x590>)
 800ed22:	2200      	movs	r2, #0
 800ed24:	f7f1 fac2 	bl	80002ac <__adddf3>
 800ed28:	4605      	mov	r5, r0
 800ed2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ed2e:	2c00      	cmp	r4, #0
 800ed30:	d16a      	bne.n	800ee08 <_dtoa_r+0x4e0>
 800ed32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed36:	4b61      	ldr	r3, [pc, #388]	@ (800eebc <_dtoa_r+0x594>)
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f7f1 fab5 	bl	80002a8 <__aeabi_dsub>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	460b      	mov	r3, r1
 800ed42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ed46:	462a      	mov	r2, r5
 800ed48:	4633      	mov	r3, r6
 800ed4a:	f7f1 fef5 	bl	8000b38 <__aeabi_dcmpgt>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	f040 8298 	bne.w	800f284 <_dtoa_r+0x95c>
 800ed54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed58:	462a      	mov	r2, r5
 800ed5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ed5e:	f7f1 fecd 	bl	8000afc <__aeabi_dcmplt>
 800ed62:	bb38      	cbnz	r0, 800edb4 <_dtoa_r+0x48c>
 800ed64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ed68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ed6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f2c0 8157 	blt.w	800f022 <_dtoa_r+0x6fa>
 800ed74:	2f0e      	cmp	r7, #14
 800ed76:	f300 8154 	bgt.w	800f022 <_dtoa_r+0x6fa>
 800ed7a:	4b4b      	ldr	r3, [pc, #300]	@ (800eea8 <_dtoa_r+0x580>)
 800ed7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ed80:	ed93 7b00 	vldr	d7, [r3]
 800ed84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	ed8d 7b00 	vstr	d7, [sp]
 800ed8c:	f280 80e5 	bge.w	800ef5a <_dtoa_r+0x632>
 800ed90:	9b03      	ldr	r3, [sp, #12]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	f300 80e1 	bgt.w	800ef5a <_dtoa_r+0x632>
 800ed98:	d10c      	bne.n	800edb4 <_dtoa_r+0x48c>
 800ed9a:	4b48      	ldr	r3, [pc, #288]	@ (800eebc <_dtoa_r+0x594>)
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	ec51 0b17 	vmov	r0, r1, d7
 800eda2:	f7f1 fc39 	bl	8000618 <__aeabi_dmul>
 800eda6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edaa:	f7f1 febb 	bl	8000b24 <__aeabi_dcmpge>
 800edae:	2800      	cmp	r0, #0
 800edb0:	f000 8266 	beq.w	800f280 <_dtoa_r+0x958>
 800edb4:	2400      	movs	r4, #0
 800edb6:	4625      	mov	r5, r4
 800edb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800edba:	4656      	mov	r6, sl
 800edbc:	ea6f 0803 	mvn.w	r8, r3
 800edc0:	2700      	movs	r7, #0
 800edc2:	4621      	mov	r1, r4
 800edc4:	4648      	mov	r0, r9
 800edc6:	f000 fc09 	bl	800f5dc <_Bfree>
 800edca:	2d00      	cmp	r5, #0
 800edcc:	f000 80bd 	beq.w	800ef4a <_dtoa_r+0x622>
 800edd0:	b12f      	cbz	r7, 800edde <_dtoa_r+0x4b6>
 800edd2:	42af      	cmp	r7, r5
 800edd4:	d003      	beq.n	800edde <_dtoa_r+0x4b6>
 800edd6:	4639      	mov	r1, r7
 800edd8:	4648      	mov	r0, r9
 800edda:	f000 fbff 	bl	800f5dc <_Bfree>
 800edde:	4629      	mov	r1, r5
 800ede0:	4648      	mov	r0, r9
 800ede2:	f000 fbfb 	bl	800f5dc <_Bfree>
 800ede6:	e0b0      	b.n	800ef4a <_dtoa_r+0x622>
 800ede8:	07e2      	lsls	r2, r4, #31
 800edea:	d505      	bpl.n	800edf8 <_dtoa_r+0x4d0>
 800edec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800edf0:	f7f1 fc12 	bl	8000618 <__aeabi_dmul>
 800edf4:	3601      	adds	r6, #1
 800edf6:	2301      	movs	r3, #1
 800edf8:	1064      	asrs	r4, r4, #1
 800edfa:	3508      	adds	r5, #8
 800edfc:	e762      	b.n	800ecc4 <_dtoa_r+0x39c>
 800edfe:	2602      	movs	r6, #2
 800ee00:	e765      	b.n	800ecce <_dtoa_r+0x3a6>
 800ee02:	9c03      	ldr	r4, [sp, #12]
 800ee04:	46b8      	mov	r8, r7
 800ee06:	e784      	b.n	800ed12 <_dtoa_r+0x3ea>
 800ee08:	4b27      	ldr	r3, [pc, #156]	@ (800eea8 <_dtoa_r+0x580>)
 800ee0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ee0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ee10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee14:	4454      	add	r4, sl
 800ee16:	2900      	cmp	r1, #0
 800ee18:	d054      	beq.n	800eec4 <_dtoa_r+0x59c>
 800ee1a:	4929      	ldr	r1, [pc, #164]	@ (800eec0 <_dtoa_r+0x598>)
 800ee1c:	2000      	movs	r0, #0
 800ee1e:	f7f1 fd25 	bl	800086c <__aeabi_ddiv>
 800ee22:	4633      	mov	r3, r6
 800ee24:	462a      	mov	r2, r5
 800ee26:	f7f1 fa3f 	bl	80002a8 <__aeabi_dsub>
 800ee2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ee2e:	4656      	mov	r6, sl
 800ee30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee34:	f7f1 fea0 	bl	8000b78 <__aeabi_d2iz>
 800ee38:	4605      	mov	r5, r0
 800ee3a:	f7f1 fb83 	bl	8000544 <__aeabi_i2d>
 800ee3e:	4602      	mov	r2, r0
 800ee40:	460b      	mov	r3, r1
 800ee42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee46:	f7f1 fa2f 	bl	80002a8 <__aeabi_dsub>
 800ee4a:	3530      	adds	r5, #48	@ 0x30
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	460b      	mov	r3, r1
 800ee50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ee54:	f806 5b01 	strb.w	r5, [r6], #1
 800ee58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ee5c:	f7f1 fe4e 	bl	8000afc <__aeabi_dcmplt>
 800ee60:	2800      	cmp	r0, #0
 800ee62:	d172      	bne.n	800ef4a <_dtoa_r+0x622>
 800ee64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee68:	4911      	ldr	r1, [pc, #68]	@ (800eeb0 <_dtoa_r+0x588>)
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	f7f1 fa1c 	bl	80002a8 <__aeabi_dsub>
 800ee70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ee74:	f7f1 fe42 	bl	8000afc <__aeabi_dcmplt>
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	f040 80b4 	bne.w	800efe6 <_dtoa_r+0x6be>
 800ee7e:	42a6      	cmp	r6, r4
 800ee80:	f43f af70 	beq.w	800ed64 <_dtoa_r+0x43c>
 800ee84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ee88:	4b0a      	ldr	r3, [pc, #40]	@ (800eeb4 <_dtoa_r+0x58c>)
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f7f1 fbc4 	bl	8000618 <__aeabi_dmul>
 800ee90:	4b08      	ldr	r3, [pc, #32]	@ (800eeb4 <_dtoa_r+0x58c>)
 800ee92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ee96:	2200      	movs	r2, #0
 800ee98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee9c:	f7f1 fbbc 	bl	8000618 <__aeabi_dmul>
 800eea0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eea4:	e7c4      	b.n	800ee30 <_dtoa_r+0x508>
 800eea6:	bf00      	nop
 800eea8:	0807fc68 	.word	0x0807fc68
 800eeac:	0807fc40 	.word	0x0807fc40
 800eeb0:	3ff00000 	.word	0x3ff00000
 800eeb4:	40240000 	.word	0x40240000
 800eeb8:	401c0000 	.word	0x401c0000
 800eebc:	40140000 	.word	0x40140000
 800eec0:	3fe00000 	.word	0x3fe00000
 800eec4:	4631      	mov	r1, r6
 800eec6:	4628      	mov	r0, r5
 800eec8:	f7f1 fba6 	bl	8000618 <__aeabi_dmul>
 800eecc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800eed0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800eed2:	4656      	mov	r6, sl
 800eed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eed8:	f7f1 fe4e 	bl	8000b78 <__aeabi_d2iz>
 800eedc:	4605      	mov	r5, r0
 800eede:	f7f1 fb31 	bl	8000544 <__aeabi_i2d>
 800eee2:	4602      	mov	r2, r0
 800eee4:	460b      	mov	r3, r1
 800eee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eeea:	f7f1 f9dd 	bl	80002a8 <__aeabi_dsub>
 800eeee:	3530      	adds	r5, #48	@ 0x30
 800eef0:	f806 5b01 	strb.w	r5, [r6], #1
 800eef4:	4602      	mov	r2, r0
 800eef6:	460b      	mov	r3, r1
 800eef8:	42a6      	cmp	r6, r4
 800eefa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eefe:	f04f 0200 	mov.w	r2, #0
 800ef02:	d124      	bne.n	800ef4e <_dtoa_r+0x626>
 800ef04:	4baf      	ldr	r3, [pc, #700]	@ (800f1c4 <_dtoa_r+0x89c>)
 800ef06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ef0a:	f7f1 f9cf 	bl	80002ac <__adddf3>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	460b      	mov	r3, r1
 800ef12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef16:	f7f1 fe0f 	bl	8000b38 <__aeabi_dcmpgt>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	d163      	bne.n	800efe6 <_dtoa_r+0x6be>
 800ef1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ef22:	49a8      	ldr	r1, [pc, #672]	@ (800f1c4 <_dtoa_r+0x89c>)
 800ef24:	2000      	movs	r0, #0
 800ef26:	f7f1 f9bf 	bl	80002a8 <__aeabi_dsub>
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef32:	f7f1 fde3 	bl	8000afc <__aeabi_dcmplt>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	f43f af14 	beq.w	800ed64 <_dtoa_r+0x43c>
 800ef3c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ef3e:	1e73      	subs	r3, r6, #1
 800ef40:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef42:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ef46:	2b30      	cmp	r3, #48	@ 0x30
 800ef48:	d0f8      	beq.n	800ef3c <_dtoa_r+0x614>
 800ef4a:	4647      	mov	r7, r8
 800ef4c:	e03b      	b.n	800efc6 <_dtoa_r+0x69e>
 800ef4e:	4b9e      	ldr	r3, [pc, #632]	@ (800f1c8 <_dtoa_r+0x8a0>)
 800ef50:	f7f1 fb62 	bl	8000618 <__aeabi_dmul>
 800ef54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef58:	e7bc      	b.n	800eed4 <_dtoa_r+0x5ac>
 800ef5a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ef5e:	4656      	mov	r6, sl
 800ef60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef64:	4620      	mov	r0, r4
 800ef66:	4629      	mov	r1, r5
 800ef68:	f7f1 fc80 	bl	800086c <__aeabi_ddiv>
 800ef6c:	f7f1 fe04 	bl	8000b78 <__aeabi_d2iz>
 800ef70:	4680      	mov	r8, r0
 800ef72:	f7f1 fae7 	bl	8000544 <__aeabi_i2d>
 800ef76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef7a:	f7f1 fb4d 	bl	8000618 <__aeabi_dmul>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	460b      	mov	r3, r1
 800ef82:	4620      	mov	r0, r4
 800ef84:	4629      	mov	r1, r5
 800ef86:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ef8a:	f7f1 f98d 	bl	80002a8 <__aeabi_dsub>
 800ef8e:	f806 4b01 	strb.w	r4, [r6], #1
 800ef92:	9d03      	ldr	r5, [sp, #12]
 800ef94:	eba6 040a 	sub.w	r4, r6, sl
 800ef98:	42a5      	cmp	r5, r4
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	d133      	bne.n	800f008 <_dtoa_r+0x6e0>
 800efa0:	f7f1 f984 	bl	80002ac <__adddf3>
 800efa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efa8:	4604      	mov	r4, r0
 800efaa:	460d      	mov	r5, r1
 800efac:	f7f1 fdc4 	bl	8000b38 <__aeabi_dcmpgt>
 800efb0:	b9c0      	cbnz	r0, 800efe4 <_dtoa_r+0x6bc>
 800efb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efb6:	4620      	mov	r0, r4
 800efb8:	4629      	mov	r1, r5
 800efba:	f7f1 fd95 	bl	8000ae8 <__aeabi_dcmpeq>
 800efbe:	b110      	cbz	r0, 800efc6 <_dtoa_r+0x69e>
 800efc0:	f018 0f01 	tst.w	r8, #1
 800efc4:	d10e      	bne.n	800efe4 <_dtoa_r+0x6bc>
 800efc6:	9902      	ldr	r1, [sp, #8]
 800efc8:	4648      	mov	r0, r9
 800efca:	f000 fb07 	bl	800f5dc <_Bfree>
 800efce:	2300      	movs	r3, #0
 800efd0:	7033      	strb	r3, [r6, #0]
 800efd2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800efd4:	3701      	adds	r7, #1
 800efd6:	601f      	str	r7, [r3, #0]
 800efd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f000 824b 	beq.w	800f476 <_dtoa_r+0xb4e>
 800efe0:	601e      	str	r6, [r3, #0]
 800efe2:	e248      	b.n	800f476 <_dtoa_r+0xb4e>
 800efe4:	46b8      	mov	r8, r7
 800efe6:	4633      	mov	r3, r6
 800efe8:	461e      	mov	r6, r3
 800efea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efee:	2a39      	cmp	r2, #57	@ 0x39
 800eff0:	d106      	bne.n	800f000 <_dtoa_r+0x6d8>
 800eff2:	459a      	cmp	sl, r3
 800eff4:	d1f8      	bne.n	800efe8 <_dtoa_r+0x6c0>
 800eff6:	2230      	movs	r2, #48	@ 0x30
 800eff8:	f108 0801 	add.w	r8, r8, #1
 800effc:	f88a 2000 	strb.w	r2, [sl]
 800f000:	781a      	ldrb	r2, [r3, #0]
 800f002:	3201      	adds	r2, #1
 800f004:	701a      	strb	r2, [r3, #0]
 800f006:	e7a0      	b.n	800ef4a <_dtoa_r+0x622>
 800f008:	4b6f      	ldr	r3, [pc, #444]	@ (800f1c8 <_dtoa_r+0x8a0>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	f7f1 fb04 	bl	8000618 <__aeabi_dmul>
 800f010:	2200      	movs	r2, #0
 800f012:	2300      	movs	r3, #0
 800f014:	4604      	mov	r4, r0
 800f016:	460d      	mov	r5, r1
 800f018:	f7f1 fd66 	bl	8000ae8 <__aeabi_dcmpeq>
 800f01c:	2800      	cmp	r0, #0
 800f01e:	d09f      	beq.n	800ef60 <_dtoa_r+0x638>
 800f020:	e7d1      	b.n	800efc6 <_dtoa_r+0x69e>
 800f022:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f024:	2a00      	cmp	r2, #0
 800f026:	f000 80ea 	beq.w	800f1fe <_dtoa_r+0x8d6>
 800f02a:	9a07      	ldr	r2, [sp, #28]
 800f02c:	2a01      	cmp	r2, #1
 800f02e:	f300 80cd 	bgt.w	800f1cc <_dtoa_r+0x8a4>
 800f032:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f034:	2a00      	cmp	r2, #0
 800f036:	f000 80c1 	beq.w	800f1bc <_dtoa_r+0x894>
 800f03a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f03e:	9c08      	ldr	r4, [sp, #32]
 800f040:	9e00      	ldr	r6, [sp, #0]
 800f042:	9a00      	ldr	r2, [sp, #0]
 800f044:	441a      	add	r2, r3
 800f046:	9200      	str	r2, [sp, #0]
 800f048:	9a06      	ldr	r2, [sp, #24]
 800f04a:	2101      	movs	r1, #1
 800f04c:	441a      	add	r2, r3
 800f04e:	4648      	mov	r0, r9
 800f050:	9206      	str	r2, [sp, #24]
 800f052:	f000 fb77 	bl	800f744 <__i2b>
 800f056:	4605      	mov	r5, r0
 800f058:	b166      	cbz	r6, 800f074 <_dtoa_r+0x74c>
 800f05a:	9b06      	ldr	r3, [sp, #24]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	dd09      	ble.n	800f074 <_dtoa_r+0x74c>
 800f060:	42b3      	cmp	r3, r6
 800f062:	9a00      	ldr	r2, [sp, #0]
 800f064:	bfa8      	it	ge
 800f066:	4633      	movge	r3, r6
 800f068:	1ad2      	subs	r2, r2, r3
 800f06a:	9200      	str	r2, [sp, #0]
 800f06c:	9a06      	ldr	r2, [sp, #24]
 800f06e:	1af6      	subs	r6, r6, r3
 800f070:	1ad3      	subs	r3, r2, r3
 800f072:	9306      	str	r3, [sp, #24]
 800f074:	9b08      	ldr	r3, [sp, #32]
 800f076:	b30b      	cbz	r3, 800f0bc <_dtoa_r+0x794>
 800f078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	f000 80c6 	beq.w	800f20c <_dtoa_r+0x8e4>
 800f080:	2c00      	cmp	r4, #0
 800f082:	f000 80c0 	beq.w	800f206 <_dtoa_r+0x8de>
 800f086:	4629      	mov	r1, r5
 800f088:	4622      	mov	r2, r4
 800f08a:	4648      	mov	r0, r9
 800f08c:	f000 fc12 	bl	800f8b4 <__pow5mult>
 800f090:	9a02      	ldr	r2, [sp, #8]
 800f092:	4601      	mov	r1, r0
 800f094:	4605      	mov	r5, r0
 800f096:	4648      	mov	r0, r9
 800f098:	f000 fb6a 	bl	800f770 <__multiply>
 800f09c:	9902      	ldr	r1, [sp, #8]
 800f09e:	4680      	mov	r8, r0
 800f0a0:	4648      	mov	r0, r9
 800f0a2:	f000 fa9b 	bl	800f5dc <_Bfree>
 800f0a6:	9b08      	ldr	r3, [sp, #32]
 800f0a8:	1b1b      	subs	r3, r3, r4
 800f0aa:	9308      	str	r3, [sp, #32]
 800f0ac:	f000 80b1 	beq.w	800f212 <_dtoa_r+0x8ea>
 800f0b0:	9a08      	ldr	r2, [sp, #32]
 800f0b2:	4641      	mov	r1, r8
 800f0b4:	4648      	mov	r0, r9
 800f0b6:	f000 fbfd 	bl	800f8b4 <__pow5mult>
 800f0ba:	9002      	str	r0, [sp, #8]
 800f0bc:	2101      	movs	r1, #1
 800f0be:	4648      	mov	r0, r9
 800f0c0:	f000 fb40 	bl	800f744 <__i2b>
 800f0c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f000 81d8 	beq.w	800f47e <_dtoa_r+0xb56>
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	4601      	mov	r1, r0
 800f0d2:	4648      	mov	r0, r9
 800f0d4:	f000 fbee 	bl	800f8b4 <__pow5mult>
 800f0d8:	9b07      	ldr	r3, [sp, #28]
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	4604      	mov	r4, r0
 800f0de:	f300 809f 	bgt.w	800f220 <_dtoa_r+0x8f8>
 800f0e2:	9b04      	ldr	r3, [sp, #16]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	f040 8097 	bne.w	800f218 <_dtoa_r+0x8f0>
 800f0ea:	9b05      	ldr	r3, [sp, #20]
 800f0ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f040 8093 	bne.w	800f21c <_dtoa_r+0x8f4>
 800f0f6:	9b05      	ldr	r3, [sp, #20]
 800f0f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f0fc:	0d1b      	lsrs	r3, r3, #20
 800f0fe:	051b      	lsls	r3, r3, #20
 800f100:	b133      	cbz	r3, 800f110 <_dtoa_r+0x7e8>
 800f102:	9b00      	ldr	r3, [sp, #0]
 800f104:	3301      	adds	r3, #1
 800f106:	9300      	str	r3, [sp, #0]
 800f108:	9b06      	ldr	r3, [sp, #24]
 800f10a:	3301      	adds	r3, #1
 800f10c:	9306      	str	r3, [sp, #24]
 800f10e:	2301      	movs	r3, #1
 800f110:	9308      	str	r3, [sp, #32]
 800f112:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f114:	2b00      	cmp	r3, #0
 800f116:	f000 81b8 	beq.w	800f48a <_dtoa_r+0xb62>
 800f11a:	6923      	ldr	r3, [r4, #16]
 800f11c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f120:	6918      	ldr	r0, [r3, #16]
 800f122:	f000 fac3 	bl	800f6ac <__hi0bits>
 800f126:	f1c0 0020 	rsb	r0, r0, #32
 800f12a:	9b06      	ldr	r3, [sp, #24]
 800f12c:	4418      	add	r0, r3
 800f12e:	f010 001f 	ands.w	r0, r0, #31
 800f132:	f000 8082 	beq.w	800f23a <_dtoa_r+0x912>
 800f136:	f1c0 0320 	rsb	r3, r0, #32
 800f13a:	2b04      	cmp	r3, #4
 800f13c:	dd73      	ble.n	800f226 <_dtoa_r+0x8fe>
 800f13e:	9b00      	ldr	r3, [sp, #0]
 800f140:	f1c0 001c 	rsb	r0, r0, #28
 800f144:	4403      	add	r3, r0
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	9b06      	ldr	r3, [sp, #24]
 800f14a:	4403      	add	r3, r0
 800f14c:	4406      	add	r6, r0
 800f14e:	9306      	str	r3, [sp, #24]
 800f150:	9b00      	ldr	r3, [sp, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	dd05      	ble.n	800f162 <_dtoa_r+0x83a>
 800f156:	9902      	ldr	r1, [sp, #8]
 800f158:	461a      	mov	r2, r3
 800f15a:	4648      	mov	r0, r9
 800f15c:	f000 fc04 	bl	800f968 <__lshift>
 800f160:	9002      	str	r0, [sp, #8]
 800f162:	9b06      	ldr	r3, [sp, #24]
 800f164:	2b00      	cmp	r3, #0
 800f166:	dd05      	ble.n	800f174 <_dtoa_r+0x84c>
 800f168:	4621      	mov	r1, r4
 800f16a:	461a      	mov	r2, r3
 800f16c:	4648      	mov	r0, r9
 800f16e:	f000 fbfb 	bl	800f968 <__lshift>
 800f172:	4604      	mov	r4, r0
 800f174:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f176:	2b00      	cmp	r3, #0
 800f178:	d061      	beq.n	800f23e <_dtoa_r+0x916>
 800f17a:	9802      	ldr	r0, [sp, #8]
 800f17c:	4621      	mov	r1, r4
 800f17e:	f000 fc5f 	bl	800fa40 <__mcmp>
 800f182:	2800      	cmp	r0, #0
 800f184:	da5b      	bge.n	800f23e <_dtoa_r+0x916>
 800f186:	2300      	movs	r3, #0
 800f188:	9902      	ldr	r1, [sp, #8]
 800f18a:	220a      	movs	r2, #10
 800f18c:	4648      	mov	r0, r9
 800f18e:	f000 fa47 	bl	800f620 <__multadd>
 800f192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f194:	9002      	str	r0, [sp, #8]
 800f196:	f107 38ff 	add.w	r8, r7, #4294967295
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	f000 8177 	beq.w	800f48e <_dtoa_r+0xb66>
 800f1a0:	4629      	mov	r1, r5
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	220a      	movs	r2, #10
 800f1a6:	4648      	mov	r0, r9
 800f1a8:	f000 fa3a 	bl	800f620 <__multadd>
 800f1ac:	f1bb 0f00 	cmp.w	fp, #0
 800f1b0:	4605      	mov	r5, r0
 800f1b2:	dc6f      	bgt.n	800f294 <_dtoa_r+0x96c>
 800f1b4:	9b07      	ldr	r3, [sp, #28]
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	dc49      	bgt.n	800f24e <_dtoa_r+0x926>
 800f1ba:	e06b      	b.n	800f294 <_dtoa_r+0x96c>
 800f1bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f1be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f1c2:	e73c      	b.n	800f03e <_dtoa_r+0x716>
 800f1c4:	3fe00000 	.word	0x3fe00000
 800f1c8:	40240000 	.word	0x40240000
 800f1cc:	9b03      	ldr	r3, [sp, #12]
 800f1ce:	1e5c      	subs	r4, r3, #1
 800f1d0:	9b08      	ldr	r3, [sp, #32]
 800f1d2:	42a3      	cmp	r3, r4
 800f1d4:	db09      	blt.n	800f1ea <_dtoa_r+0x8c2>
 800f1d6:	1b1c      	subs	r4, r3, r4
 800f1d8:	9b03      	ldr	r3, [sp, #12]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f6bf af30 	bge.w	800f040 <_dtoa_r+0x718>
 800f1e0:	9b00      	ldr	r3, [sp, #0]
 800f1e2:	9a03      	ldr	r2, [sp, #12]
 800f1e4:	1a9e      	subs	r6, r3, r2
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	e72b      	b.n	800f042 <_dtoa_r+0x71a>
 800f1ea:	9b08      	ldr	r3, [sp, #32]
 800f1ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f1ee:	9408      	str	r4, [sp, #32]
 800f1f0:	1ae3      	subs	r3, r4, r3
 800f1f2:	441a      	add	r2, r3
 800f1f4:	9e00      	ldr	r6, [sp, #0]
 800f1f6:	9b03      	ldr	r3, [sp, #12]
 800f1f8:	920d      	str	r2, [sp, #52]	@ 0x34
 800f1fa:	2400      	movs	r4, #0
 800f1fc:	e721      	b.n	800f042 <_dtoa_r+0x71a>
 800f1fe:	9c08      	ldr	r4, [sp, #32]
 800f200:	9e00      	ldr	r6, [sp, #0]
 800f202:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f204:	e728      	b.n	800f058 <_dtoa_r+0x730>
 800f206:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f20a:	e751      	b.n	800f0b0 <_dtoa_r+0x788>
 800f20c:	9a08      	ldr	r2, [sp, #32]
 800f20e:	9902      	ldr	r1, [sp, #8]
 800f210:	e750      	b.n	800f0b4 <_dtoa_r+0x78c>
 800f212:	f8cd 8008 	str.w	r8, [sp, #8]
 800f216:	e751      	b.n	800f0bc <_dtoa_r+0x794>
 800f218:	2300      	movs	r3, #0
 800f21a:	e779      	b.n	800f110 <_dtoa_r+0x7e8>
 800f21c:	9b04      	ldr	r3, [sp, #16]
 800f21e:	e777      	b.n	800f110 <_dtoa_r+0x7e8>
 800f220:	2300      	movs	r3, #0
 800f222:	9308      	str	r3, [sp, #32]
 800f224:	e779      	b.n	800f11a <_dtoa_r+0x7f2>
 800f226:	d093      	beq.n	800f150 <_dtoa_r+0x828>
 800f228:	9a00      	ldr	r2, [sp, #0]
 800f22a:	331c      	adds	r3, #28
 800f22c:	441a      	add	r2, r3
 800f22e:	9200      	str	r2, [sp, #0]
 800f230:	9a06      	ldr	r2, [sp, #24]
 800f232:	441a      	add	r2, r3
 800f234:	441e      	add	r6, r3
 800f236:	9206      	str	r2, [sp, #24]
 800f238:	e78a      	b.n	800f150 <_dtoa_r+0x828>
 800f23a:	4603      	mov	r3, r0
 800f23c:	e7f4      	b.n	800f228 <_dtoa_r+0x900>
 800f23e:	9b03      	ldr	r3, [sp, #12]
 800f240:	2b00      	cmp	r3, #0
 800f242:	46b8      	mov	r8, r7
 800f244:	dc20      	bgt.n	800f288 <_dtoa_r+0x960>
 800f246:	469b      	mov	fp, r3
 800f248:	9b07      	ldr	r3, [sp, #28]
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	dd1e      	ble.n	800f28c <_dtoa_r+0x964>
 800f24e:	f1bb 0f00 	cmp.w	fp, #0
 800f252:	f47f adb1 	bne.w	800edb8 <_dtoa_r+0x490>
 800f256:	4621      	mov	r1, r4
 800f258:	465b      	mov	r3, fp
 800f25a:	2205      	movs	r2, #5
 800f25c:	4648      	mov	r0, r9
 800f25e:	f000 f9df 	bl	800f620 <__multadd>
 800f262:	4601      	mov	r1, r0
 800f264:	4604      	mov	r4, r0
 800f266:	9802      	ldr	r0, [sp, #8]
 800f268:	f000 fbea 	bl	800fa40 <__mcmp>
 800f26c:	2800      	cmp	r0, #0
 800f26e:	f77f ada3 	ble.w	800edb8 <_dtoa_r+0x490>
 800f272:	4656      	mov	r6, sl
 800f274:	2331      	movs	r3, #49	@ 0x31
 800f276:	f806 3b01 	strb.w	r3, [r6], #1
 800f27a:	f108 0801 	add.w	r8, r8, #1
 800f27e:	e59f      	b.n	800edc0 <_dtoa_r+0x498>
 800f280:	9c03      	ldr	r4, [sp, #12]
 800f282:	46b8      	mov	r8, r7
 800f284:	4625      	mov	r5, r4
 800f286:	e7f4      	b.n	800f272 <_dtoa_r+0x94a>
 800f288:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f28e:	2b00      	cmp	r3, #0
 800f290:	f000 8101 	beq.w	800f496 <_dtoa_r+0xb6e>
 800f294:	2e00      	cmp	r6, #0
 800f296:	dd05      	ble.n	800f2a4 <_dtoa_r+0x97c>
 800f298:	4629      	mov	r1, r5
 800f29a:	4632      	mov	r2, r6
 800f29c:	4648      	mov	r0, r9
 800f29e:	f000 fb63 	bl	800f968 <__lshift>
 800f2a2:	4605      	mov	r5, r0
 800f2a4:	9b08      	ldr	r3, [sp, #32]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d05c      	beq.n	800f364 <_dtoa_r+0xa3c>
 800f2aa:	6869      	ldr	r1, [r5, #4]
 800f2ac:	4648      	mov	r0, r9
 800f2ae:	f000 f955 	bl	800f55c <_Balloc>
 800f2b2:	4606      	mov	r6, r0
 800f2b4:	b928      	cbnz	r0, 800f2c2 <_dtoa_r+0x99a>
 800f2b6:	4b82      	ldr	r3, [pc, #520]	@ (800f4c0 <_dtoa_r+0xb98>)
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f2be:	f7ff bb4a 	b.w	800e956 <_dtoa_r+0x2e>
 800f2c2:	692a      	ldr	r2, [r5, #16]
 800f2c4:	3202      	adds	r2, #2
 800f2c6:	0092      	lsls	r2, r2, #2
 800f2c8:	f105 010c 	add.w	r1, r5, #12
 800f2cc:	300c      	adds	r0, #12
 800f2ce:	f7ff fa92 	bl	800e7f6 <memcpy>
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	4631      	mov	r1, r6
 800f2d6:	4648      	mov	r0, r9
 800f2d8:	f000 fb46 	bl	800f968 <__lshift>
 800f2dc:	f10a 0301 	add.w	r3, sl, #1
 800f2e0:	9300      	str	r3, [sp, #0]
 800f2e2:	eb0a 030b 	add.w	r3, sl, fp
 800f2e6:	9308      	str	r3, [sp, #32]
 800f2e8:	9b04      	ldr	r3, [sp, #16]
 800f2ea:	f003 0301 	and.w	r3, r3, #1
 800f2ee:	462f      	mov	r7, r5
 800f2f0:	9306      	str	r3, [sp, #24]
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	9b00      	ldr	r3, [sp, #0]
 800f2f6:	9802      	ldr	r0, [sp, #8]
 800f2f8:	4621      	mov	r1, r4
 800f2fa:	f103 3bff 	add.w	fp, r3, #4294967295
 800f2fe:	f7ff fa88 	bl	800e812 <quorem>
 800f302:	4603      	mov	r3, r0
 800f304:	3330      	adds	r3, #48	@ 0x30
 800f306:	9003      	str	r0, [sp, #12]
 800f308:	4639      	mov	r1, r7
 800f30a:	9802      	ldr	r0, [sp, #8]
 800f30c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f30e:	f000 fb97 	bl	800fa40 <__mcmp>
 800f312:	462a      	mov	r2, r5
 800f314:	9004      	str	r0, [sp, #16]
 800f316:	4621      	mov	r1, r4
 800f318:	4648      	mov	r0, r9
 800f31a:	f000 fbad 	bl	800fa78 <__mdiff>
 800f31e:	68c2      	ldr	r2, [r0, #12]
 800f320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f322:	4606      	mov	r6, r0
 800f324:	bb02      	cbnz	r2, 800f368 <_dtoa_r+0xa40>
 800f326:	4601      	mov	r1, r0
 800f328:	9802      	ldr	r0, [sp, #8]
 800f32a:	f000 fb89 	bl	800fa40 <__mcmp>
 800f32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f330:	4602      	mov	r2, r0
 800f332:	4631      	mov	r1, r6
 800f334:	4648      	mov	r0, r9
 800f336:	920c      	str	r2, [sp, #48]	@ 0x30
 800f338:	9309      	str	r3, [sp, #36]	@ 0x24
 800f33a:	f000 f94f 	bl	800f5dc <_Bfree>
 800f33e:	9b07      	ldr	r3, [sp, #28]
 800f340:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f342:	9e00      	ldr	r6, [sp, #0]
 800f344:	ea42 0103 	orr.w	r1, r2, r3
 800f348:	9b06      	ldr	r3, [sp, #24]
 800f34a:	4319      	orrs	r1, r3
 800f34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f34e:	d10d      	bne.n	800f36c <_dtoa_r+0xa44>
 800f350:	2b39      	cmp	r3, #57	@ 0x39
 800f352:	d027      	beq.n	800f3a4 <_dtoa_r+0xa7c>
 800f354:	9a04      	ldr	r2, [sp, #16]
 800f356:	2a00      	cmp	r2, #0
 800f358:	dd01      	ble.n	800f35e <_dtoa_r+0xa36>
 800f35a:	9b03      	ldr	r3, [sp, #12]
 800f35c:	3331      	adds	r3, #49	@ 0x31
 800f35e:	f88b 3000 	strb.w	r3, [fp]
 800f362:	e52e      	b.n	800edc2 <_dtoa_r+0x49a>
 800f364:	4628      	mov	r0, r5
 800f366:	e7b9      	b.n	800f2dc <_dtoa_r+0x9b4>
 800f368:	2201      	movs	r2, #1
 800f36a:	e7e2      	b.n	800f332 <_dtoa_r+0xa0a>
 800f36c:	9904      	ldr	r1, [sp, #16]
 800f36e:	2900      	cmp	r1, #0
 800f370:	db04      	blt.n	800f37c <_dtoa_r+0xa54>
 800f372:	9807      	ldr	r0, [sp, #28]
 800f374:	4301      	orrs	r1, r0
 800f376:	9806      	ldr	r0, [sp, #24]
 800f378:	4301      	orrs	r1, r0
 800f37a:	d120      	bne.n	800f3be <_dtoa_r+0xa96>
 800f37c:	2a00      	cmp	r2, #0
 800f37e:	ddee      	ble.n	800f35e <_dtoa_r+0xa36>
 800f380:	9902      	ldr	r1, [sp, #8]
 800f382:	9300      	str	r3, [sp, #0]
 800f384:	2201      	movs	r2, #1
 800f386:	4648      	mov	r0, r9
 800f388:	f000 faee 	bl	800f968 <__lshift>
 800f38c:	4621      	mov	r1, r4
 800f38e:	9002      	str	r0, [sp, #8]
 800f390:	f000 fb56 	bl	800fa40 <__mcmp>
 800f394:	2800      	cmp	r0, #0
 800f396:	9b00      	ldr	r3, [sp, #0]
 800f398:	dc02      	bgt.n	800f3a0 <_dtoa_r+0xa78>
 800f39a:	d1e0      	bne.n	800f35e <_dtoa_r+0xa36>
 800f39c:	07da      	lsls	r2, r3, #31
 800f39e:	d5de      	bpl.n	800f35e <_dtoa_r+0xa36>
 800f3a0:	2b39      	cmp	r3, #57	@ 0x39
 800f3a2:	d1da      	bne.n	800f35a <_dtoa_r+0xa32>
 800f3a4:	2339      	movs	r3, #57	@ 0x39
 800f3a6:	f88b 3000 	strb.w	r3, [fp]
 800f3aa:	4633      	mov	r3, r6
 800f3ac:	461e      	mov	r6, r3
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f3b4:	2a39      	cmp	r2, #57	@ 0x39
 800f3b6:	d04e      	beq.n	800f456 <_dtoa_r+0xb2e>
 800f3b8:	3201      	adds	r2, #1
 800f3ba:	701a      	strb	r2, [r3, #0]
 800f3bc:	e501      	b.n	800edc2 <_dtoa_r+0x49a>
 800f3be:	2a00      	cmp	r2, #0
 800f3c0:	dd03      	ble.n	800f3ca <_dtoa_r+0xaa2>
 800f3c2:	2b39      	cmp	r3, #57	@ 0x39
 800f3c4:	d0ee      	beq.n	800f3a4 <_dtoa_r+0xa7c>
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	e7c9      	b.n	800f35e <_dtoa_r+0xa36>
 800f3ca:	9a00      	ldr	r2, [sp, #0]
 800f3cc:	9908      	ldr	r1, [sp, #32]
 800f3ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f3d2:	428a      	cmp	r2, r1
 800f3d4:	d028      	beq.n	800f428 <_dtoa_r+0xb00>
 800f3d6:	9902      	ldr	r1, [sp, #8]
 800f3d8:	2300      	movs	r3, #0
 800f3da:	220a      	movs	r2, #10
 800f3dc:	4648      	mov	r0, r9
 800f3de:	f000 f91f 	bl	800f620 <__multadd>
 800f3e2:	42af      	cmp	r7, r5
 800f3e4:	9002      	str	r0, [sp, #8]
 800f3e6:	f04f 0300 	mov.w	r3, #0
 800f3ea:	f04f 020a 	mov.w	r2, #10
 800f3ee:	4639      	mov	r1, r7
 800f3f0:	4648      	mov	r0, r9
 800f3f2:	d107      	bne.n	800f404 <_dtoa_r+0xadc>
 800f3f4:	f000 f914 	bl	800f620 <__multadd>
 800f3f8:	4607      	mov	r7, r0
 800f3fa:	4605      	mov	r5, r0
 800f3fc:	9b00      	ldr	r3, [sp, #0]
 800f3fe:	3301      	adds	r3, #1
 800f400:	9300      	str	r3, [sp, #0]
 800f402:	e777      	b.n	800f2f4 <_dtoa_r+0x9cc>
 800f404:	f000 f90c 	bl	800f620 <__multadd>
 800f408:	4629      	mov	r1, r5
 800f40a:	4607      	mov	r7, r0
 800f40c:	2300      	movs	r3, #0
 800f40e:	220a      	movs	r2, #10
 800f410:	4648      	mov	r0, r9
 800f412:	f000 f905 	bl	800f620 <__multadd>
 800f416:	4605      	mov	r5, r0
 800f418:	e7f0      	b.n	800f3fc <_dtoa_r+0xad4>
 800f41a:	f1bb 0f00 	cmp.w	fp, #0
 800f41e:	bfcc      	ite	gt
 800f420:	465e      	movgt	r6, fp
 800f422:	2601      	movle	r6, #1
 800f424:	4456      	add	r6, sl
 800f426:	2700      	movs	r7, #0
 800f428:	9902      	ldr	r1, [sp, #8]
 800f42a:	9300      	str	r3, [sp, #0]
 800f42c:	2201      	movs	r2, #1
 800f42e:	4648      	mov	r0, r9
 800f430:	f000 fa9a 	bl	800f968 <__lshift>
 800f434:	4621      	mov	r1, r4
 800f436:	9002      	str	r0, [sp, #8]
 800f438:	f000 fb02 	bl	800fa40 <__mcmp>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	dcb4      	bgt.n	800f3aa <_dtoa_r+0xa82>
 800f440:	d102      	bne.n	800f448 <_dtoa_r+0xb20>
 800f442:	9b00      	ldr	r3, [sp, #0]
 800f444:	07db      	lsls	r3, r3, #31
 800f446:	d4b0      	bmi.n	800f3aa <_dtoa_r+0xa82>
 800f448:	4633      	mov	r3, r6
 800f44a:	461e      	mov	r6, r3
 800f44c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f450:	2a30      	cmp	r2, #48	@ 0x30
 800f452:	d0fa      	beq.n	800f44a <_dtoa_r+0xb22>
 800f454:	e4b5      	b.n	800edc2 <_dtoa_r+0x49a>
 800f456:	459a      	cmp	sl, r3
 800f458:	d1a8      	bne.n	800f3ac <_dtoa_r+0xa84>
 800f45a:	2331      	movs	r3, #49	@ 0x31
 800f45c:	f108 0801 	add.w	r8, r8, #1
 800f460:	f88a 3000 	strb.w	r3, [sl]
 800f464:	e4ad      	b.n	800edc2 <_dtoa_r+0x49a>
 800f466:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f468:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f4c4 <_dtoa_r+0xb9c>
 800f46c:	b11b      	cbz	r3, 800f476 <_dtoa_r+0xb4e>
 800f46e:	f10a 0308 	add.w	r3, sl, #8
 800f472:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f474:	6013      	str	r3, [r2, #0]
 800f476:	4650      	mov	r0, sl
 800f478:	b017      	add	sp, #92	@ 0x5c
 800f47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f47e:	9b07      	ldr	r3, [sp, #28]
 800f480:	2b01      	cmp	r3, #1
 800f482:	f77f ae2e 	ble.w	800f0e2 <_dtoa_r+0x7ba>
 800f486:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f488:	9308      	str	r3, [sp, #32]
 800f48a:	2001      	movs	r0, #1
 800f48c:	e64d      	b.n	800f12a <_dtoa_r+0x802>
 800f48e:	f1bb 0f00 	cmp.w	fp, #0
 800f492:	f77f aed9 	ble.w	800f248 <_dtoa_r+0x920>
 800f496:	4656      	mov	r6, sl
 800f498:	9802      	ldr	r0, [sp, #8]
 800f49a:	4621      	mov	r1, r4
 800f49c:	f7ff f9b9 	bl	800e812 <quorem>
 800f4a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f4a4:	f806 3b01 	strb.w	r3, [r6], #1
 800f4a8:	eba6 020a 	sub.w	r2, r6, sl
 800f4ac:	4593      	cmp	fp, r2
 800f4ae:	ddb4      	ble.n	800f41a <_dtoa_r+0xaf2>
 800f4b0:	9902      	ldr	r1, [sp, #8]
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	220a      	movs	r2, #10
 800f4b6:	4648      	mov	r0, r9
 800f4b8:	f000 f8b2 	bl	800f620 <__multadd>
 800f4bc:	9002      	str	r0, [sp, #8]
 800f4be:	e7eb      	b.n	800f498 <_dtoa_r+0xb70>
 800f4c0:	080116b0 	.word	0x080116b0
 800f4c4:	08011634 	.word	0x08011634

0800f4c8 <_free_r>:
 800f4c8:	b538      	push	{r3, r4, r5, lr}
 800f4ca:	4605      	mov	r5, r0
 800f4cc:	2900      	cmp	r1, #0
 800f4ce:	d041      	beq.n	800f554 <_free_r+0x8c>
 800f4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4d4:	1f0c      	subs	r4, r1, #4
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	bfb8      	it	lt
 800f4da:	18e4      	addlt	r4, r4, r3
 800f4dc:	f7fe fb82 	bl	800dbe4 <__malloc_lock>
 800f4e0:	4a1d      	ldr	r2, [pc, #116]	@ (800f558 <_free_r+0x90>)
 800f4e2:	6813      	ldr	r3, [r2, #0]
 800f4e4:	b933      	cbnz	r3, 800f4f4 <_free_r+0x2c>
 800f4e6:	6063      	str	r3, [r4, #4]
 800f4e8:	6014      	str	r4, [r2, #0]
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4f0:	f7fe bb7e 	b.w	800dbf0 <__malloc_unlock>
 800f4f4:	42a3      	cmp	r3, r4
 800f4f6:	d908      	bls.n	800f50a <_free_r+0x42>
 800f4f8:	6820      	ldr	r0, [r4, #0]
 800f4fa:	1821      	adds	r1, r4, r0
 800f4fc:	428b      	cmp	r3, r1
 800f4fe:	bf01      	itttt	eq
 800f500:	6819      	ldreq	r1, [r3, #0]
 800f502:	685b      	ldreq	r3, [r3, #4]
 800f504:	1809      	addeq	r1, r1, r0
 800f506:	6021      	streq	r1, [r4, #0]
 800f508:	e7ed      	b.n	800f4e6 <_free_r+0x1e>
 800f50a:	461a      	mov	r2, r3
 800f50c:	685b      	ldr	r3, [r3, #4]
 800f50e:	b10b      	cbz	r3, 800f514 <_free_r+0x4c>
 800f510:	42a3      	cmp	r3, r4
 800f512:	d9fa      	bls.n	800f50a <_free_r+0x42>
 800f514:	6811      	ldr	r1, [r2, #0]
 800f516:	1850      	adds	r0, r2, r1
 800f518:	42a0      	cmp	r0, r4
 800f51a:	d10b      	bne.n	800f534 <_free_r+0x6c>
 800f51c:	6820      	ldr	r0, [r4, #0]
 800f51e:	4401      	add	r1, r0
 800f520:	1850      	adds	r0, r2, r1
 800f522:	4283      	cmp	r3, r0
 800f524:	6011      	str	r1, [r2, #0]
 800f526:	d1e0      	bne.n	800f4ea <_free_r+0x22>
 800f528:	6818      	ldr	r0, [r3, #0]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	6053      	str	r3, [r2, #4]
 800f52e:	4408      	add	r0, r1
 800f530:	6010      	str	r0, [r2, #0]
 800f532:	e7da      	b.n	800f4ea <_free_r+0x22>
 800f534:	d902      	bls.n	800f53c <_free_r+0x74>
 800f536:	230c      	movs	r3, #12
 800f538:	602b      	str	r3, [r5, #0]
 800f53a:	e7d6      	b.n	800f4ea <_free_r+0x22>
 800f53c:	6820      	ldr	r0, [r4, #0]
 800f53e:	1821      	adds	r1, r4, r0
 800f540:	428b      	cmp	r3, r1
 800f542:	bf04      	itt	eq
 800f544:	6819      	ldreq	r1, [r3, #0]
 800f546:	685b      	ldreq	r3, [r3, #4]
 800f548:	6063      	str	r3, [r4, #4]
 800f54a:	bf04      	itt	eq
 800f54c:	1809      	addeq	r1, r1, r0
 800f54e:	6021      	streq	r1, [r4, #0]
 800f550:	6054      	str	r4, [r2, #4]
 800f552:	e7ca      	b.n	800f4ea <_free_r+0x22>
 800f554:	bd38      	pop	{r3, r4, r5, pc}
 800f556:	bf00      	nop
 800f558:	20013250 	.word	0x20013250

0800f55c <_Balloc>:
 800f55c:	b570      	push	{r4, r5, r6, lr}
 800f55e:	69c6      	ldr	r6, [r0, #28]
 800f560:	4604      	mov	r4, r0
 800f562:	460d      	mov	r5, r1
 800f564:	b976      	cbnz	r6, 800f584 <_Balloc+0x28>
 800f566:	2010      	movs	r0, #16
 800f568:	f7f3 fff6 	bl	8003558 <__wrap_malloc>
 800f56c:	4602      	mov	r2, r0
 800f56e:	61e0      	str	r0, [r4, #28]
 800f570:	b920      	cbnz	r0, 800f57c <_Balloc+0x20>
 800f572:	4b18      	ldr	r3, [pc, #96]	@ (800f5d4 <_Balloc+0x78>)
 800f574:	4818      	ldr	r0, [pc, #96]	@ (800f5d8 <_Balloc+0x7c>)
 800f576:	216b      	movs	r1, #107	@ 0x6b
 800f578:	f000 fc16 	bl	800fda8 <__assert_func>
 800f57c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f580:	6006      	str	r6, [r0, #0]
 800f582:	60c6      	str	r6, [r0, #12]
 800f584:	69e6      	ldr	r6, [r4, #28]
 800f586:	68f3      	ldr	r3, [r6, #12]
 800f588:	b183      	cbz	r3, 800f5ac <_Balloc+0x50>
 800f58a:	69e3      	ldr	r3, [r4, #28]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f592:	b9b8      	cbnz	r0, 800f5c4 <_Balloc+0x68>
 800f594:	2101      	movs	r1, #1
 800f596:	fa01 f605 	lsl.w	r6, r1, r5
 800f59a:	1d72      	adds	r2, r6, #5
 800f59c:	0092      	lsls	r2, r2, #2
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f000 fc20 	bl	800fde4 <_calloc_r>
 800f5a4:	b160      	cbz	r0, 800f5c0 <_Balloc+0x64>
 800f5a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f5aa:	e00e      	b.n	800f5ca <_Balloc+0x6e>
 800f5ac:	2221      	movs	r2, #33	@ 0x21
 800f5ae:	2104      	movs	r1, #4
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	f000 fc17 	bl	800fde4 <_calloc_r>
 800f5b6:	69e3      	ldr	r3, [r4, #28]
 800f5b8:	60f0      	str	r0, [r6, #12]
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d1e4      	bne.n	800f58a <_Balloc+0x2e>
 800f5c0:	2000      	movs	r0, #0
 800f5c2:	bd70      	pop	{r4, r5, r6, pc}
 800f5c4:	6802      	ldr	r2, [r0, #0]
 800f5c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f5d0:	e7f7      	b.n	800f5c2 <_Balloc+0x66>
 800f5d2:	bf00      	nop
 800f5d4:	08011641 	.word	0x08011641
 800f5d8:	080116c1 	.word	0x080116c1

0800f5dc <_Bfree>:
 800f5dc:	b570      	push	{r4, r5, r6, lr}
 800f5de:	69c6      	ldr	r6, [r0, #28]
 800f5e0:	4605      	mov	r5, r0
 800f5e2:	460c      	mov	r4, r1
 800f5e4:	b976      	cbnz	r6, 800f604 <_Bfree+0x28>
 800f5e6:	2010      	movs	r0, #16
 800f5e8:	f7f3 ffb6 	bl	8003558 <__wrap_malloc>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	61e8      	str	r0, [r5, #28]
 800f5f0:	b920      	cbnz	r0, 800f5fc <_Bfree+0x20>
 800f5f2:	4b09      	ldr	r3, [pc, #36]	@ (800f618 <_Bfree+0x3c>)
 800f5f4:	4809      	ldr	r0, [pc, #36]	@ (800f61c <_Bfree+0x40>)
 800f5f6:	218f      	movs	r1, #143	@ 0x8f
 800f5f8:	f000 fbd6 	bl	800fda8 <__assert_func>
 800f5fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f600:	6006      	str	r6, [r0, #0]
 800f602:	60c6      	str	r6, [r0, #12]
 800f604:	b13c      	cbz	r4, 800f616 <_Bfree+0x3a>
 800f606:	69eb      	ldr	r3, [r5, #28]
 800f608:	6862      	ldr	r2, [r4, #4]
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f610:	6021      	str	r1, [r4, #0]
 800f612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f616:	bd70      	pop	{r4, r5, r6, pc}
 800f618:	08011641 	.word	0x08011641
 800f61c:	080116c1 	.word	0x080116c1

0800f620 <__multadd>:
 800f620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f624:	690d      	ldr	r5, [r1, #16]
 800f626:	4607      	mov	r7, r0
 800f628:	460c      	mov	r4, r1
 800f62a:	461e      	mov	r6, r3
 800f62c:	f101 0c14 	add.w	ip, r1, #20
 800f630:	2000      	movs	r0, #0
 800f632:	f8dc 3000 	ldr.w	r3, [ip]
 800f636:	b299      	uxth	r1, r3
 800f638:	fb02 6101 	mla	r1, r2, r1, r6
 800f63c:	0c1e      	lsrs	r6, r3, #16
 800f63e:	0c0b      	lsrs	r3, r1, #16
 800f640:	fb02 3306 	mla	r3, r2, r6, r3
 800f644:	b289      	uxth	r1, r1
 800f646:	3001      	adds	r0, #1
 800f648:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f64c:	4285      	cmp	r5, r0
 800f64e:	f84c 1b04 	str.w	r1, [ip], #4
 800f652:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f656:	dcec      	bgt.n	800f632 <__multadd+0x12>
 800f658:	b30e      	cbz	r6, 800f69e <__multadd+0x7e>
 800f65a:	68a3      	ldr	r3, [r4, #8]
 800f65c:	42ab      	cmp	r3, r5
 800f65e:	dc19      	bgt.n	800f694 <__multadd+0x74>
 800f660:	6861      	ldr	r1, [r4, #4]
 800f662:	4638      	mov	r0, r7
 800f664:	3101      	adds	r1, #1
 800f666:	f7ff ff79 	bl	800f55c <_Balloc>
 800f66a:	4680      	mov	r8, r0
 800f66c:	b928      	cbnz	r0, 800f67a <__multadd+0x5a>
 800f66e:	4602      	mov	r2, r0
 800f670:	4b0c      	ldr	r3, [pc, #48]	@ (800f6a4 <__multadd+0x84>)
 800f672:	480d      	ldr	r0, [pc, #52]	@ (800f6a8 <__multadd+0x88>)
 800f674:	21ba      	movs	r1, #186	@ 0xba
 800f676:	f000 fb97 	bl	800fda8 <__assert_func>
 800f67a:	6922      	ldr	r2, [r4, #16]
 800f67c:	3202      	adds	r2, #2
 800f67e:	f104 010c 	add.w	r1, r4, #12
 800f682:	0092      	lsls	r2, r2, #2
 800f684:	300c      	adds	r0, #12
 800f686:	f7ff f8b6 	bl	800e7f6 <memcpy>
 800f68a:	4621      	mov	r1, r4
 800f68c:	4638      	mov	r0, r7
 800f68e:	f7ff ffa5 	bl	800f5dc <_Bfree>
 800f692:	4644      	mov	r4, r8
 800f694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f698:	3501      	adds	r5, #1
 800f69a:	615e      	str	r6, [r3, #20]
 800f69c:	6125      	str	r5, [r4, #16]
 800f69e:	4620      	mov	r0, r4
 800f6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6a4:	080116b0 	.word	0x080116b0
 800f6a8:	080116c1 	.word	0x080116c1

0800f6ac <__hi0bits>:
 800f6ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	bf36      	itet	cc
 800f6b4:	0403      	lslcc	r3, r0, #16
 800f6b6:	2000      	movcs	r0, #0
 800f6b8:	2010      	movcc	r0, #16
 800f6ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f6be:	bf3c      	itt	cc
 800f6c0:	021b      	lslcc	r3, r3, #8
 800f6c2:	3008      	addcc	r0, #8
 800f6c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f6c8:	bf3c      	itt	cc
 800f6ca:	011b      	lslcc	r3, r3, #4
 800f6cc:	3004      	addcc	r0, #4
 800f6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f6d2:	bf3c      	itt	cc
 800f6d4:	009b      	lslcc	r3, r3, #2
 800f6d6:	3002      	addcc	r0, #2
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	db05      	blt.n	800f6e8 <__hi0bits+0x3c>
 800f6dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f6e0:	f100 0001 	add.w	r0, r0, #1
 800f6e4:	bf08      	it	eq
 800f6e6:	2020      	moveq	r0, #32
 800f6e8:	4770      	bx	lr

0800f6ea <__lo0bits>:
 800f6ea:	6803      	ldr	r3, [r0, #0]
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	f013 0007 	ands.w	r0, r3, #7
 800f6f2:	d00b      	beq.n	800f70c <__lo0bits+0x22>
 800f6f4:	07d9      	lsls	r1, r3, #31
 800f6f6:	d421      	bmi.n	800f73c <__lo0bits+0x52>
 800f6f8:	0798      	lsls	r0, r3, #30
 800f6fa:	bf49      	itett	mi
 800f6fc:	085b      	lsrmi	r3, r3, #1
 800f6fe:	089b      	lsrpl	r3, r3, #2
 800f700:	2001      	movmi	r0, #1
 800f702:	6013      	strmi	r3, [r2, #0]
 800f704:	bf5c      	itt	pl
 800f706:	6013      	strpl	r3, [r2, #0]
 800f708:	2002      	movpl	r0, #2
 800f70a:	4770      	bx	lr
 800f70c:	b299      	uxth	r1, r3
 800f70e:	b909      	cbnz	r1, 800f714 <__lo0bits+0x2a>
 800f710:	0c1b      	lsrs	r3, r3, #16
 800f712:	2010      	movs	r0, #16
 800f714:	b2d9      	uxtb	r1, r3
 800f716:	b909      	cbnz	r1, 800f71c <__lo0bits+0x32>
 800f718:	3008      	adds	r0, #8
 800f71a:	0a1b      	lsrs	r3, r3, #8
 800f71c:	0719      	lsls	r1, r3, #28
 800f71e:	bf04      	itt	eq
 800f720:	091b      	lsreq	r3, r3, #4
 800f722:	3004      	addeq	r0, #4
 800f724:	0799      	lsls	r1, r3, #30
 800f726:	bf04      	itt	eq
 800f728:	089b      	lsreq	r3, r3, #2
 800f72a:	3002      	addeq	r0, #2
 800f72c:	07d9      	lsls	r1, r3, #31
 800f72e:	d403      	bmi.n	800f738 <__lo0bits+0x4e>
 800f730:	085b      	lsrs	r3, r3, #1
 800f732:	f100 0001 	add.w	r0, r0, #1
 800f736:	d003      	beq.n	800f740 <__lo0bits+0x56>
 800f738:	6013      	str	r3, [r2, #0]
 800f73a:	4770      	bx	lr
 800f73c:	2000      	movs	r0, #0
 800f73e:	4770      	bx	lr
 800f740:	2020      	movs	r0, #32
 800f742:	4770      	bx	lr

0800f744 <__i2b>:
 800f744:	b510      	push	{r4, lr}
 800f746:	460c      	mov	r4, r1
 800f748:	2101      	movs	r1, #1
 800f74a:	f7ff ff07 	bl	800f55c <_Balloc>
 800f74e:	4602      	mov	r2, r0
 800f750:	b928      	cbnz	r0, 800f75e <__i2b+0x1a>
 800f752:	4b05      	ldr	r3, [pc, #20]	@ (800f768 <__i2b+0x24>)
 800f754:	4805      	ldr	r0, [pc, #20]	@ (800f76c <__i2b+0x28>)
 800f756:	f240 1145 	movw	r1, #325	@ 0x145
 800f75a:	f000 fb25 	bl	800fda8 <__assert_func>
 800f75e:	2301      	movs	r3, #1
 800f760:	6144      	str	r4, [r0, #20]
 800f762:	6103      	str	r3, [r0, #16]
 800f764:	bd10      	pop	{r4, pc}
 800f766:	bf00      	nop
 800f768:	080116b0 	.word	0x080116b0
 800f76c:	080116c1 	.word	0x080116c1

0800f770 <__multiply>:
 800f770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f774:	4617      	mov	r7, r2
 800f776:	690a      	ldr	r2, [r1, #16]
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	bfa8      	it	ge
 800f77e:	463b      	movge	r3, r7
 800f780:	4689      	mov	r9, r1
 800f782:	bfa4      	itt	ge
 800f784:	460f      	movge	r7, r1
 800f786:	4699      	movge	r9, r3
 800f788:	693d      	ldr	r5, [r7, #16]
 800f78a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	6879      	ldr	r1, [r7, #4]
 800f792:	eb05 060a 	add.w	r6, r5, sl
 800f796:	42b3      	cmp	r3, r6
 800f798:	b085      	sub	sp, #20
 800f79a:	bfb8      	it	lt
 800f79c:	3101      	addlt	r1, #1
 800f79e:	f7ff fedd 	bl	800f55c <_Balloc>
 800f7a2:	b930      	cbnz	r0, 800f7b2 <__multiply+0x42>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	4b41      	ldr	r3, [pc, #260]	@ (800f8ac <__multiply+0x13c>)
 800f7a8:	4841      	ldr	r0, [pc, #260]	@ (800f8b0 <__multiply+0x140>)
 800f7aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f7ae:	f000 fafb 	bl	800fda8 <__assert_func>
 800f7b2:	f100 0414 	add.w	r4, r0, #20
 800f7b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f7ba:	4623      	mov	r3, r4
 800f7bc:	2200      	movs	r2, #0
 800f7be:	4573      	cmp	r3, lr
 800f7c0:	d320      	bcc.n	800f804 <__multiply+0x94>
 800f7c2:	f107 0814 	add.w	r8, r7, #20
 800f7c6:	f109 0114 	add.w	r1, r9, #20
 800f7ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f7ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f7d2:	9302      	str	r3, [sp, #8]
 800f7d4:	1beb      	subs	r3, r5, r7
 800f7d6:	3b15      	subs	r3, #21
 800f7d8:	f023 0303 	bic.w	r3, r3, #3
 800f7dc:	3304      	adds	r3, #4
 800f7de:	3715      	adds	r7, #21
 800f7e0:	42bd      	cmp	r5, r7
 800f7e2:	bf38      	it	cc
 800f7e4:	2304      	movcc	r3, #4
 800f7e6:	9301      	str	r3, [sp, #4]
 800f7e8:	9b02      	ldr	r3, [sp, #8]
 800f7ea:	9103      	str	r1, [sp, #12]
 800f7ec:	428b      	cmp	r3, r1
 800f7ee:	d80c      	bhi.n	800f80a <__multiply+0x9a>
 800f7f0:	2e00      	cmp	r6, #0
 800f7f2:	dd03      	ble.n	800f7fc <__multiply+0x8c>
 800f7f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d055      	beq.n	800f8a8 <__multiply+0x138>
 800f7fc:	6106      	str	r6, [r0, #16]
 800f7fe:	b005      	add	sp, #20
 800f800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f804:	f843 2b04 	str.w	r2, [r3], #4
 800f808:	e7d9      	b.n	800f7be <__multiply+0x4e>
 800f80a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f80e:	f1ba 0f00 	cmp.w	sl, #0
 800f812:	d01f      	beq.n	800f854 <__multiply+0xe4>
 800f814:	46c4      	mov	ip, r8
 800f816:	46a1      	mov	r9, r4
 800f818:	2700      	movs	r7, #0
 800f81a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f81e:	f8d9 3000 	ldr.w	r3, [r9]
 800f822:	fa1f fb82 	uxth.w	fp, r2
 800f826:	b29b      	uxth	r3, r3
 800f828:	fb0a 330b 	mla	r3, sl, fp, r3
 800f82c:	443b      	add	r3, r7
 800f82e:	f8d9 7000 	ldr.w	r7, [r9]
 800f832:	0c12      	lsrs	r2, r2, #16
 800f834:	0c3f      	lsrs	r7, r7, #16
 800f836:	fb0a 7202 	mla	r2, sl, r2, r7
 800f83a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f83e:	b29b      	uxth	r3, r3
 800f840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f844:	4565      	cmp	r5, ip
 800f846:	f849 3b04 	str.w	r3, [r9], #4
 800f84a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f84e:	d8e4      	bhi.n	800f81a <__multiply+0xaa>
 800f850:	9b01      	ldr	r3, [sp, #4]
 800f852:	50e7      	str	r7, [r4, r3]
 800f854:	9b03      	ldr	r3, [sp, #12]
 800f856:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f85a:	3104      	adds	r1, #4
 800f85c:	f1b9 0f00 	cmp.w	r9, #0
 800f860:	d020      	beq.n	800f8a4 <__multiply+0x134>
 800f862:	6823      	ldr	r3, [r4, #0]
 800f864:	4647      	mov	r7, r8
 800f866:	46a4      	mov	ip, r4
 800f868:	f04f 0a00 	mov.w	sl, #0
 800f86c:	f8b7 b000 	ldrh.w	fp, [r7]
 800f870:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f874:	fb09 220b 	mla	r2, r9, fp, r2
 800f878:	4452      	add	r2, sl
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f880:	f84c 3b04 	str.w	r3, [ip], #4
 800f884:	f857 3b04 	ldr.w	r3, [r7], #4
 800f888:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f88c:	f8bc 3000 	ldrh.w	r3, [ip]
 800f890:	fb09 330a 	mla	r3, r9, sl, r3
 800f894:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f898:	42bd      	cmp	r5, r7
 800f89a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f89e:	d8e5      	bhi.n	800f86c <__multiply+0xfc>
 800f8a0:	9a01      	ldr	r2, [sp, #4]
 800f8a2:	50a3      	str	r3, [r4, r2]
 800f8a4:	3404      	adds	r4, #4
 800f8a6:	e79f      	b.n	800f7e8 <__multiply+0x78>
 800f8a8:	3e01      	subs	r6, #1
 800f8aa:	e7a1      	b.n	800f7f0 <__multiply+0x80>
 800f8ac:	080116b0 	.word	0x080116b0
 800f8b0:	080116c1 	.word	0x080116c1

0800f8b4 <__pow5mult>:
 800f8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8b8:	4615      	mov	r5, r2
 800f8ba:	f012 0203 	ands.w	r2, r2, #3
 800f8be:	4607      	mov	r7, r0
 800f8c0:	460e      	mov	r6, r1
 800f8c2:	d007      	beq.n	800f8d4 <__pow5mult+0x20>
 800f8c4:	4c25      	ldr	r4, [pc, #148]	@ (800f95c <__pow5mult+0xa8>)
 800f8c6:	3a01      	subs	r2, #1
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f8ce:	f7ff fea7 	bl	800f620 <__multadd>
 800f8d2:	4606      	mov	r6, r0
 800f8d4:	10ad      	asrs	r5, r5, #2
 800f8d6:	d03d      	beq.n	800f954 <__pow5mult+0xa0>
 800f8d8:	69fc      	ldr	r4, [r7, #28]
 800f8da:	b97c      	cbnz	r4, 800f8fc <__pow5mult+0x48>
 800f8dc:	2010      	movs	r0, #16
 800f8de:	f7f3 fe3b 	bl	8003558 <__wrap_malloc>
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	61f8      	str	r0, [r7, #28]
 800f8e6:	b928      	cbnz	r0, 800f8f4 <__pow5mult+0x40>
 800f8e8:	4b1d      	ldr	r3, [pc, #116]	@ (800f960 <__pow5mult+0xac>)
 800f8ea:	481e      	ldr	r0, [pc, #120]	@ (800f964 <__pow5mult+0xb0>)
 800f8ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f8f0:	f000 fa5a 	bl	800fda8 <__assert_func>
 800f8f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f8f8:	6004      	str	r4, [r0, #0]
 800f8fa:	60c4      	str	r4, [r0, #12]
 800f8fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f904:	b94c      	cbnz	r4, 800f91a <__pow5mult+0x66>
 800f906:	f240 2171 	movw	r1, #625	@ 0x271
 800f90a:	4638      	mov	r0, r7
 800f90c:	f7ff ff1a 	bl	800f744 <__i2b>
 800f910:	2300      	movs	r3, #0
 800f912:	f8c8 0008 	str.w	r0, [r8, #8]
 800f916:	4604      	mov	r4, r0
 800f918:	6003      	str	r3, [r0, #0]
 800f91a:	f04f 0900 	mov.w	r9, #0
 800f91e:	07eb      	lsls	r3, r5, #31
 800f920:	d50a      	bpl.n	800f938 <__pow5mult+0x84>
 800f922:	4631      	mov	r1, r6
 800f924:	4622      	mov	r2, r4
 800f926:	4638      	mov	r0, r7
 800f928:	f7ff ff22 	bl	800f770 <__multiply>
 800f92c:	4631      	mov	r1, r6
 800f92e:	4680      	mov	r8, r0
 800f930:	4638      	mov	r0, r7
 800f932:	f7ff fe53 	bl	800f5dc <_Bfree>
 800f936:	4646      	mov	r6, r8
 800f938:	106d      	asrs	r5, r5, #1
 800f93a:	d00b      	beq.n	800f954 <__pow5mult+0xa0>
 800f93c:	6820      	ldr	r0, [r4, #0]
 800f93e:	b938      	cbnz	r0, 800f950 <__pow5mult+0x9c>
 800f940:	4622      	mov	r2, r4
 800f942:	4621      	mov	r1, r4
 800f944:	4638      	mov	r0, r7
 800f946:	f7ff ff13 	bl	800f770 <__multiply>
 800f94a:	6020      	str	r0, [r4, #0]
 800f94c:	f8c0 9000 	str.w	r9, [r0]
 800f950:	4604      	mov	r4, r0
 800f952:	e7e4      	b.n	800f91e <__pow5mult+0x6a>
 800f954:	4630      	mov	r0, r6
 800f956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f95a:	bf00      	nop
 800f95c:	0807fc34 	.word	0x0807fc34
 800f960:	08011641 	.word	0x08011641
 800f964:	080116c1 	.word	0x080116c1

0800f968 <__lshift>:
 800f968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f96c:	460c      	mov	r4, r1
 800f96e:	6849      	ldr	r1, [r1, #4]
 800f970:	6923      	ldr	r3, [r4, #16]
 800f972:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f976:	68a3      	ldr	r3, [r4, #8]
 800f978:	4607      	mov	r7, r0
 800f97a:	4691      	mov	r9, r2
 800f97c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f980:	f108 0601 	add.w	r6, r8, #1
 800f984:	42b3      	cmp	r3, r6
 800f986:	db0b      	blt.n	800f9a0 <__lshift+0x38>
 800f988:	4638      	mov	r0, r7
 800f98a:	f7ff fde7 	bl	800f55c <_Balloc>
 800f98e:	4605      	mov	r5, r0
 800f990:	b948      	cbnz	r0, 800f9a6 <__lshift+0x3e>
 800f992:	4602      	mov	r2, r0
 800f994:	4b28      	ldr	r3, [pc, #160]	@ (800fa38 <__lshift+0xd0>)
 800f996:	4829      	ldr	r0, [pc, #164]	@ (800fa3c <__lshift+0xd4>)
 800f998:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f99c:	f000 fa04 	bl	800fda8 <__assert_func>
 800f9a0:	3101      	adds	r1, #1
 800f9a2:	005b      	lsls	r3, r3, #1
 800f9a4:	e7ee      	b.n	800f984 <__lshift+0x1c>
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	f100 0114 	add.w	r1, r0, #20
 800f9ac:	f100 0210 	add.w	r2, r0, #16
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	4553      	cmp	r3, sl
 800f9b4:	db33      	blt.n	800fa1e <__lshift+0xb6>
 800f9b6:	6920      	ldr	r0, [r4, #16]
 800f9b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f9bc:	f104 0314 	add.w	r3, r4, #20
 800f9c0:	f019 091f 	ands.w	r9, r9, #31
 800f9c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f9c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f9cc:	d02b      	beq.n	800fa26 <__lshift+0xbe>
 800f9ce:	f1c9 0e20 	rsb	lr, r9, #32
 800f9d2:	468a      	mov	sl, r1
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	6818      	ldr	r0, [r3, #0]
 800f9d8:	fa00 f009 	lsl.w	r0, r0, r9
 800f9dc:	4310      	orrs	r0, r2
 800f9de:	f84a 0b04 	str.w	r0, [sl], #4
 800f9e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9e6:	459c      	cmp	ip, r3
 800f9e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800f9ec:	d8f3      	bhi.n	800f9d6 <__lshift+0x6e>
 800f9ee:	ebac 0304 	sub.w	r3, ip, r4
 800f9f2:	3b15      	subs	r3, #21
 800f9f4:	f023 0303 	bic.w	r3, r3, #3
 800f9f8:	3304      	adds	r3, #4
 800f9fa:	f104 0015 	add.w	r0, r4, #21
 800f9fe:	4560      	cmp	r0, ip
 800fa00:	bf88      	it	hi
 800fa02:	2304      	movhi	r3, #4
 800fa04:	50ca      	str	r2, [r1, r3]
 800fa06:	b10a      	cbz	r2, 800fa0c <__lshift+0xa4>
 800fa08:	f108 0602 	add.w	r6, r8, #2
 800fa0c:	3e01      	subs	r6, #1
 800fa0e:	4638      	mov	r0, r7
 800fa10:	612e      	str	r6, [r5, #16]
 800fa12:	4621      	mov	r1, r4
 800fa14:	f7ff fde2 	bl	800f5dc <_Bfree>
 800fa18:	4628      	mov	r0, r5
 800fa1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa22:	3301      	adds	r3, #1
 800fa24:	e7c5      	b.n	800f9b2 <__lshift+0x4a>
 800fa26:	3904      	subs	r1, #4
 800fa28:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa30:	459c      	cmp	ip, r3
 800fa32:	d8f9      	bhi.n	800fa28 <__lshift+0xc0>
 800fa34:	e7ea      	b.n	800fa0c <__lshift+0xa4>
 800fa36:	bf00      	nop
 800fa38:	080116b0 	.word	0x080116b0
 800fa3c:	080116c1 	.word	0x080116c1

0800fa40 <__mcmp>:
 800fa40:	690a      	ldr	r2, [r1, #16]
 800fa42:	4603      	mov	r3, r0
 800fa44:	6900      	ldr	r0, [r0, #16]
 800fa46:	1a80      	subs	r0, r0, r2
 800fa48:	b530      	push	{r4, r5, lr}
 800fa4a:	d10e      	bne.n	800fa6a <__mcmp+0x2a>
 800fa4c:	3314      	adds	r3, #20
 800fa4e:	3114      	adds	r1, #20
 800fa50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fa54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fa58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fa5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fa60:	4295      	cmp	r5, r2
 800fa62:	d003      	beq.n	800fa6c <__mcmp+0x2c>
 800fa64:	d205      	bcs.n	800fa72 <__mcmp+0x32>
 800fa66:	f04f 30ff 	mov.w	r0, #4294967295
 800fa6a:	bd30      	pop	{r4, r5, pc}
 800fa6c:	42a3      	cmp	r3, r4
 800fa6e:	d3f3      	bcc.n	800fa58 <__mcmp+0x18>
 800fa70:	e7fb      	b.n	800fa6a <__mcmp+0x2a>
 800fa72:	2001      	movs	r0, #1
 800fa74:	e7f9      	b.n	800fa6a <__mcmp+0x2a>
	...

0800fa78 <__mdiff>:
 800fa78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa7c:	4689      	mov	r9, r1
 800fa7e:	4606      	mov	r6, r0
 800fa80:	4611      	mov	r1, r2
 800fa82:	4648      	mov	r0, r9
 800fa84:	4614      	mov	r4, r2
 800fa86:	f7ff ffdb 	bl	800fa40 <__mcmp>
 800fa8a:	1e05      	subs	r5, r0, #0
 800fa8c:	d112      	bne.n	800fab4 <__mdiff+0x3c>
 800fa8e:	4629      	mov	r1, r5
 800fa90:	4630      	mov	r0, r6
 800fa92:	f7ff fd63 	bl	800f55c <_Balloc>
 800fa96:	4602      	mov	r2, r0
 800fa98:	b928      	cbnz	r0, 800faa6 <__mdiff+0x2e>
 800fa9a:	4b3f      	ldr	r3, [pc, #252]	@ (800fb98 <__mdiff+0x120>)
 800fa9c:	f240 2137 	movw	r1, #567	@ 0x237
 800faa0:	483e      	ldr	r0, [pc, #248]	@ (800fb9c <__mdiff+0x124>)
 800faa2:	f000 f981 	bl	800fda8 <__assert_func>
 800faa6:	2301      	movs	r3, #1
 800faa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800faac:	4610      	mov	r0, r2
 800faae:	b003      	add	sp, #12
 800fab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fab4:	bfbc      	itt	lt
 800fab6:	464b      	movlt	r3, r9
 800fab8:	46a1      	movlt	r9, r4
 800faba:	4630      	mov	r0, r6
 800fabc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fac0:	bfba      	itte	lt
 800fac2:	461c      	movlt	r4, r3
 800fac4:	2501      	movlt	r5, #1
 800fac6:	2500      	movge	r5, #0
 800fac8:	f7ff fd48 	bl	800f55c <_Balloc>
 800facc:	4602      	mov	r2, r0
 800face:	b918      	cbnz	r0, 800fad8 <__mdiff+0x60>
 800fad0:	4b31      	ldr	r3, [pc, #196]	@ (800fb98 <__mdiff+0x120>)
 800fad2:	f240 2145 	movw	r1, #581	@ 0x245
 800fad6:	e7e3      	b.n	800faa0 <__mdiff+0x28>
 800fad8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fadc:	6926      	ldr	r6, [r4, #16]
 800fade:	60c5      	str	r5, [r0, #12]
 800fae0:	f109 0310 	add.w	r3, r9, #16
 800fae4:	f109 0514 	add.w	r5, r9, #20
 800fae8:	f104 0e14 	add.w	lr, r4, #20
 800faec:	f100 0b14 	add.w	fp, r0, #20
 800faf0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800faf4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800faf8:	9301      	str	r3, [sp, #4]
 800fafa:	46d9      	mov	r9, fp
 800fafc:	f04f 0c00 	mov.w	ip, #0
 800fb00:	9b01      	ldr	r3, [sp, #4]
 800fb02:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fb06:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fb0a:	9301      	str	r3, [sp, #4]
 800fb0c:	fa1f f38a 	uxth.w	r3, sl
 800fb10:	4619      	mov	r1, r3
 800fb12:	b283      	uxth	r3, r0
 800fb14:	1acb      	subs	r3, r1, r3
 800fb16:	0c00      	lsrs	r0, r0, #16
 800fb18:	4463      	add	r3, ip
 800fb1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fb1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fb22:	b29b      	uxth	r3, r3
 800fb24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fb28:	4576      	cmp	r6, lr
 800fb2a:	f849 3b04 	str.w	r3, [r9], #4
 800fb2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fb32:	d8e5      	bhi.n	800fb00 <__mdiff+0x88>
 800fb34:	1b33      	subs	r3, r6, r4
 800fb36:	3b15      	subs	r3, #21
 800fb38:	f023 0303 	bic.w	r3, r3, #3
 800fb3c:	3415      	adds	r4, #21
 800fb3e:	3304      	adds	r3, #4
 800fb40:	42a6      	cmp	r6, r4
 800fb42:	bf38      	it	cc
 800fb44:	2304      	movcc	r3, #4
 800fb46:	441d      	add	r5, r3
 800fb48:	445b      	add	r3, fp
 800fb4a:	461e      	mov	r6, r3
 800fb4c:	462c      	mov	r4, r5
 800fb4e:	4544      	cmp	r4, r8
 800fb50:	d30e      	bcc.n	800fb70 <__mdiff+0xf8>
 800fb52:	f108 0103 	add.w	r1, r8, #3
 800fb56:	1b49      	subs	r1, r1, r5
 800fb58:	f021 0103 	bic.w	r1, r1, #3
 800fb5c:	3d03      	subs	r5, #3
 800fb5e:	45a8      	cmp	r8, r5
 800fb60:	bf38      	it	cc
 800fb62:	2100      	movcc	r1, #0
 800fb64:	440b      	add	r3, r1
 800fb66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fb6a:	b191      	cbz	r1, 800fb92 <__mdiff+0x11a>
 800fb6c:	6117      	str	r7, [r2, #16]
 800fb6e:	e79d      	b.n	800faac <__mdiff+0x34>
 800fb70:	f854 1b04 	ldr.w	r1, [r4], #4
 800fb74:	46e6      	mov	lr, ip
 800fb76:	0c08      	lsrs	r0, r1, #16
 800fb78:	fa1c fc81 	uxtah	ip, ip, r1
 800fb7c:	4471      	add	r1, lr
 800fb7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fb82:	b289      	uxth	r1, r1
 800fb84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fb88:	f846 1b04 	str.w	r1, [r6], #4
 800fb8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fb90:	e7dd      	b.n	800fb4e <__mdiff+0xd6>
 800fb92:	3f01      	subs	r7, #1
 800fb94:	e7e7      	b.n	800fb66 <__mdiff+0xee>
 800fb96:	bf00      	nop
 800fb98:	080116b0 	.word	0x080116b0
 800fb9c:	080116c1 	.word	0x080116c1

0800fba0 <__d2b>:
 800fba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fba4:	460f      	mov	r7, r1
 800fba6:	2101      	movs	r1, #1
 800fba8:	ec59 8b10 	vmov	r8, r9, d0
 800fbac:	4616      	mov	r6, r2
 800fbae:	f7ff fcd5 	bl	800f55c <_Balloc>
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	b930      	cbnz	r0, 800fbc4 <__d2b+0x24>
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	4b23      	ldr	r3, [pc, #140]	@ (800fc48 <__d2b+0xa8>)
 800fbba:	4824      	ldr	r0, [pc, #144]	@ (800fc4c <__d2b+0xac>)
 800fbbc:	f240 310f 	movw	r1, #783	@ 0x30f
 800fbc0:	f000 f8f2 	bl	800fda8 <__assert_func>
 800fbc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fbc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fbcc:	b10d      	cbz	r5, 800fbd2 <__d2b+0x32>
 800fbce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fbd2:	9301      	str	r3, [sp, #4]
 800fbd4:	f1b8 0300 	subs.w	r3, r8, #0
 800fbd8:	d023      	beq.n	800fc22 <__d2b+0x82>
 800fbda:	4668      	mov	r0, sp
 800fbdc:	9300      	str	r3, [sp, #0]
 800fbde:	f7ff fd84 	bl	800f6ea <__lo0bits>
 800fbe2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fbe6:	b1d0      	cbz	r0, 800fc1e <__d2b+0x7e>
 800fbe8:	f1c0 0320 	rsb	r3, r0, #32
 800fbec:	fa02 f303 	lsl.w	r3, r2, r3
 800fbf0:	430b      	orrs	r3, r1
 800fbf2:	40c2      	lsrs	r2, r0
 800fbf4:	6163      	str	r3, [r4, #20]
 800fbf6:	9201      	str	r2, [sp, #4]
 800fbf8:	9b01      	ldr	r3, [sp, #4]
 800fbfa:	61a3      	str	r3, [r4, #24]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	bf0c      	ite	eq
 800fc00:	2201      	moveq	r2, #1
 800fc02:	2202      	movne	r2, #2
 800fc04:	6122      	str	r2, [r4, #16]
 800fc06:	b1a5      	cbz	r5, 800fc32 <__d2b+0x92>
 800fc08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fc0c:	4405      	add	r5, r0
 800fc0e:	603d      	str	r5, [r7, #0]
 800fc10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fc14:	6030      	str	r0, [r6, #0]
 800fc16:	4620      	mov	r0, r4
 800fc18:	b003      	add	sp, #12
 800fc1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc1e:	6161      	str	r1, [r4, #20]
 800fc20:	e7ea      	b.n	800fbf8 <__d2b+0x58>
 800fc22:	a801      	add	r0, sp, #4
 800fc24:	f7ff fd61 	bl	800f6ea <__lo0bits>
 800fc28:	9b01      	ldr	r3, [sp, #4]
 800fc2a:	6163      	str	r3, [r4, #20]
 800fc2c:	3020      	adds	r0, #32
 800fc2e:	2201      	movs	r2, #1
 800fc30:	e7e8      	b.n	800fc04 <__d2b+0x64>
 800fc32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fc3a:	6038      	str	r0, [r7, #0]
 800fc3c:	6918      	ldr	r0, [r3, #16]
 800fc3e:	f7ff fd35 	bl	800f6ac <__hi0bits>
 800fc42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fc46:	e7e5      	b.n	800fc14 <__d2b+0x74>
 800fc48:	080116b0 	.word	0x080116b0
 800fc4c:	080116c1 	.word	0x080116c1

0800fc50 <__sflush_r>:
 800fc50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc58:	0716      	lsls	r6, r2, #28
 800fc5a:	4605      	mov	r5, r0
 800fc5c:	460c      	mov	r4, r1
 800fc5e:	d454      	bmi.n	800fd0a <__sflush_r+0xba>
 800fc60:	684b      	ldr	r3, [r1, #4]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	dc02      	bgt.n	800fc6c <__sflush_r+0x1c>
 800fc66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	dd48      	ble.n	800fcfe <__sflush_r+0xae>
 800fc6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc6e:	2e00      	cmp	r6, #0
 800fc70:	d045      	beq.n	800fcfe <__sflush_r+0xae>
 800fc72:	2300      	movs	r3, #0
 800fc74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fc78:	682f      	ldr	r7, [r5, #0]
 800fc7a:	6a21      	ldr	r1, [r4, #32]
 800fc7c:	602b      	str	r3, [r5, #0]
 800fc7e:	d030      	beq.n	800fce2 <__sflush_r+0x92>
 800fc80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fc82:	89a3      	ldrh	r3, [r4, #12]
 800fc84:	0759      	lsls	r1, r3, #29
 800fc86:	d505      	bpl.n	800fc94 <__sflush_r+0x44>
 800fc88:	6863      	ldr	r3, [r4, #4]
 800fc8a:	1ad2      	subs	r2, r2, r3
 800fc8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fc8e:	b10b      	cbz	r3, 800fc94 <__sflush_r+0x44>
 800fc90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fc92:	1ad2      	subs	r2, r2, r3
 800fc94:	2300      	movs	r3, #0
 800fc96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc98:	6a21      	ldr	r1, [r4, #32]
 800fc9a:	4628      	mov	r0, r5
 800fc9c:	47b0      	blx	r6
 800fc9e:	1c43      	adds	r3, r0, #1
 800fca0:	89a3      	ldrh	r3, [r4, #12]
 800fca2:	d106      	bne.n	800fcb2 <__sflush_r+0x62>
 800fca4:	6829      	ldr	r1, [r5, #0]
 800fca6:	291d      	cmp	r1, #29
 800fca8:	d82b      	bhi.n	800fd02 <__sflush_r+0xb2>
 800fcaa:	4a2a      	ldr	r2, [pc, #168]	@ (800fd54 <__sflush_r+0x104>)
 800fcac:	40ca      	lsrs	r2, r1
 800fcae:	07d6      	lsls	r6, r2, #31
 800fcb0:	d527      	bpl.n	800fd02 <__sflush_r+0xb2>
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	6062      	str	r2, [r4, #4]
 800fcb6:	04d9      	lsls	r1, r3, #19
 800fcb8:	6922      	ldr	r2, [r4, #16]
 800fcba:	6022      	str	r2, [r4, #0]
 800fcbc:	d504      	bpl.n	800fcc8 <__sflush_r+0x78>
 800fcbe:	1c42      	adds	r2, r0, #1
 800fcc0:	d101      	bne.n	800fcc6 <__sflush_r+0x76>
 800fcc2:	682b      	ldr	r3, [r5, #0]
 800fcc4:	b903      	cbnz	r3, 800fcc8 <__sflush_r+0x78>
 800fcc6:	6560      	str	r0, [r4, #84]	@ 0x54
 800fcc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fcca:	602f      	str	r7, [r5, #0]
 800fccc:	b1b9      	cbz	r1, 800fcfe <__sflush_r+0xae>
 800fcce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fcd2:	4299      	cmp	r1, r3
 800fcd4:	d002      	beq.n	800fcdc <__sflush_r+0x8c>
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	f7ff fbf6 	bl	800f4c8 <_free_r>
 800fcdc:	2300      	movs	r3, #0
 800fcde:	6363      	str	r3, [r4, #52]	@ 0x34
 800fce0:	e00d      	b.n	800fcfe <__sflush_r+0xae>
 800fce2:	2301      	movs	r3, #1
 800fce4:	4628      	mov	r0, r5
 800fce6:	47b0      	blx	r6
 800fce8:	4602      	mov	r2, r0
 800fcea:	1c50      	adds	r0, r2, #1
 800fcec:	d1c9      	bne.n	800fc82 <__sflush_r+0x32>
 800fcee:	682b      	ldr	r3, [r5, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d0c6      	beq.n	800fc82 <__sflush_r+0x32>
 800fcf4:	2b1d      	cmp	r3, #29
 800fcf6:	d001      	beq.n	800fcfc <__sflush_r+0xac>
 800fcf8:	2b16      	cmp	r3, #22
 800fcfa:	d11e      	bne.n	800fd3a <__sflush_r+0xea>
 800fcfc:	602f      	str	r7, [r5, #0]
 800fcfe:	2000      	movs	r0, #0
 800fd00:	e022      	b.n	800fd48 <__sflush_r+0xf8>
 800fd02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd06:	b21b      	sxth	r3, r3
 800fd08:	e01b      	b.n	800fd42 <__sflush_r+0xf2>
 800fd0a:	690f      	ldr	r7, [r1, #16]
 800fd0c:	2f00      	cmp	r7, #0
 800fd0e:	d0f6      	beq.n	800fcfe <__sflush_r+0xae>
 800fd10:	0793      	lsls	r3, r2, #30
 800fd12:	680e      	ldr	r6, [r1, #0]
 800fd14:	bf08      	it	eq
 800fd16:	694b      	ldreq	r3, [r1, #20]
 800fd18:	600f      	str	r7, [r1, #0]
 800fd1a:	bf18      	it	ne
 800fd1c:	2300      	movne	r3, #0
 800fd1e:	eba6 0807 	sub.w	r8, r6, r7
 800fd22:	608b      	str	r3, [r1, #8]
 800fd24:	f1b8 0f00 	cmp.w	r8, #0
 800fd28:	dde9      	ble.n	800fcfe <__sflush_r+0xae>
 800fd2a:	6a21      	ldr	r1, [r4, #32]
 800fd2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fd2e:	4643      	mov	r3, r8
 800fd30:	463a      	mov	r2, r7
 800fd32:	4628      	mov	r0, r5
 800fd34:	47b0      	blx	r6
 800fd36:	2800      	cmp	r0, #0
 800fd38:	dc08      	bgt.n	800fd4c <__sflush_r+0xfc>
 800fd3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd42:	81a3      	strh	r3, [r4, #12]
 800fd44:	f04f 30ff 	mov.w	r0, #4294967295
 800fd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd4c:	4407      	add	r7, r0
 800fd4e:	eba8 0800 	sub.w	r8, r8, r0
 800fd52:	e7e7      	b.n	800fd24 <__sflush_r+0xd4>
 800fd54:	20400001 	.word	0x20400001

0800fd58 <_fflush_r>:
 800fd58:	b538      	push	{r3, r4, r5, lr}
 800fd5a:	690b      	ldr	r3, [r1, #16]
 800fd5c:	4605      	mov	r5, r0
 800fd5e:	460c      	mov	r4, r1
 800fd60:	b913      	cbnz	r3, 800fd68 <_fflush_r+0x10>
 800fd62:	2500      	movs	r5, #0
 800fd64:	4628      	mov	r0, r5
 800fd66:	bd38      	pop	{r3, r4, r5, pc}
 800fd68:	b118      	cbz	r0, 800fd72 <_fflush_r+0x1a>
 800fd6a:	6a03      	ldr	r3, [r0, #32]
 800fd6c:	b90b      	cbnz	r3, 800fd72 <_fflush_r+0x1a>
 800fd6e:	f7fe fc27 	bl	800e5c0 <__sinit>
 800fd72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d0f3      	beq.n	800fd62 <_fflush_r+0xa>
 800fd7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fd7c:	07d0      	lsls	r0, r2, #31
 800fd7e:	d404      	bmi.n	800fd8a <_fflush_r+0x32>
 800fd80:	0599      	lsls	r1, r3, #22
 800fd82:	d402      	bmi.n	800fd8a <_fflush_r+0x32>
 800fd84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd86:	f7fe fd34 	bl	800e7f2 <__retarget_lock_acquire_recursive>
 800fd8a:	4628      	mov	r0, r5
 800fd8c:	4621      	mov	r1, r4
 800fd8e:	f7ff ff5f 	bl	800fc50 <__sflush_r>
 800fd92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fd94:	07da      	lsls	r2, r3, #31
 800fd96:	4605      	mov	r5, r0
 800fd98:	d4e4      	bmi.n	800fd64 <_fflush_r+0xc>
 800fd9a:	89a3      	ldrh	r3, [r4, #12]
 800fd9c:	059b      	lsls	r3, r3, #22
 800fd9e:	d4e1      	bmi.n	800fd64 <_fflush_r+0xc>
 800fda0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fda2:	f7fe fd27 	bl	800e7f4 <__retarget_lock_release_recursive>
 800fda6:	e7dd      	b.n	800fd64 <_fflush_r+0xc>

0800fda8 <__assert_func>:
 800fda8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdaa:	4614      	mov	r4, r2
 800fdac:	461a      	mov	r2, r3
 800fdae:	4b09      	ldr	r3, [pc, #36]	@ (800fdd4 <__assert_func+0x2c>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	4605      	mov	r5, r0
 800fdb4:	68d8      	ldr	r0, [r3, #12]
 800fdb6:	b14c      	cbz	r4, 800fdcc <__assert_func+0x24>
 800fdb8:	4b07      	ldr	r3, [pc, #28]	@ (800fdd8 <__assert_func+0x30>)
 800fdba:	9100      	str	r1, [sp, #0]
 800fdbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdc0:	4906      	ldr	r1, [pc, #24]	@ (800fddc <__assert_func+0x34>)
 800fdc2:	462b      	mov	r3, r5
 800fdc4:	f000 f842 	bl	800fe4c <fiprintf>
 800fdc8:	f000 f852 	bl	800fe70 <abort>
 800fdcc:	4b04      	ldr	r3, [pc, #16]	@ (800fde0 <__assert_func+0x38>)
 800fdce:	461c      	mov	r4, r3
 800fdd0:	e7f3      	b.n	800fdba <__assert_func+0x12>
 800fdd2:	bf00      	nop
 800fdd4:	20006824 	.word	0x20006824
 800fdd8:	08011724 	.word	0x08011724
 800fddc:	08011731 	.word	0x08011731
 800fde0:	0801175f 	.word	0x0801175f

0800fde4 <_calloc_r>:
 800fde4:	b570      	push	{r4, r5, r6, lr}
 800fde6:	fba1 5402 	umull	r5, r4, r1, r2
 800fdea:	b934      	cbnz	r4, 800fdfa <_calloc_r+0x16>
 800fdec:	4629      	mov	r1, r5
 800fdee:	f7fd fe79 	bl	800dae4 <_malloc_r>
 800fdf2:	4606      	mov	r6, r0
 800fdf4:	b928      	cbnz	r0, 800fe02 <_calloc_r+0x1e>
 800fdf6:	4630      	mov	r0, r6
 800fdf8:	bd70      	pop	{r4, r5, r6, pc}
 800fdfa:	220c      	movs	r2, #12
 800fdfc:	6002      	str	r2, [r0, #0]
 800fdfe:	2600      	movs	r6, #0
 800fe00:	e7f9      	b.n	800fdf6 <_calloc_r+0x12>
 800fe02:	462a      	mov	r2, r5
 800fe04:	4621      	mov	r1, r4
 800fe06:	f7fe fc54 	bl	800e6b2 <memset>
 800fe0a:	e7f4      	b.n	800fdf6 <_calloc_r+0x12>

0800fe0c <__ascii_mbtowc>:
 800fe0c:	b082      	sub	sp, #8
 800fe0e:	b901      	cbnz	r1, 800fe12 <__ascii_mbtowc+0x6>
 800fe10:	a901      	add	r1, sp, #4
 800fe12:	b142      	cbz	r2, 800fe26 <__ascii_mbtowc+0x1a>
 800fe14:	b14b      	cbz	r3, 800fe2a <__ascii_mbtowc+0x1e>
 800fe16:	7813      	ldrb	r3, [r2, #0]
 800fe18:	600b      	str	r3, [r1, #0]
 800fe1a:	7812      	ldrb	r2, [r2, #0]
 800fe1c:	1e10      	subs	r0, r2, #0
 800fe1e:	bf18      	it	ne
 800fe20:	2001      	movne	r0, #1
 800fe22:	b002      	add	sp, #8
 800fe24:	4770      	bx	lr
 800fe26:	4610      	mov	r0, r2
 800fe28:	e7fb      	b.n	800fe22 <__ascii_mbtowc+0x16>
 800fe2a:	f06f 0001 	mvn.w	r0, #1
 800fe2e:	e7f8      	b.n	800fe22 <__ascii_mbtowc+0x16>

0800fe30 <__ascii_wctomb>:
 800fe30:	4603      	mov	r3, r0
 800fe32:	4608      	mov	r0, r1
 800fe34:	b141      	cbz	r1, 800fe48 <__ascii_wctomb+0x18>
 800fe36:	2aff      	cmp	r2, #255	@ 0xff
 800fe38:	d904      	bls.n	800fe44 <__ascii_wctomb+0x14>
 800fe3a:	228a      	movs	r2, #138	@ 0x8a
 800fe3c:	601a      	str	r2, [r3, #0]
 800fe3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe42:	4770      	bx	lr
 800fe44:	700a      	strb	r2, [r1, #0]
 800fe46:	2001      	movs	r0, #1
 800fe48:	4770      	bx	lr
	...

0800fe4c <fiprintf>:
 800fe4c:	b40e      	push	{r1, r2, r3}
 800fe4e:	b503      	push	{r0, r1, lr}
 800fe50:	4601      	mov	r1, r0
 800fe52:	ab03      	add	r3, sp, #12
 800fe54:	4805      	ldr	r0, [pc, #20]	@ (800fe6c <fiprintf+0x20>)
 800fe56:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe5a:	6800      	ldr	r0, [r0, #0]
 800fe5c:	9301      	str	r3, [sp, #4]
 800fe5e:	f000 f837 	bl	800fed0 <_vfiprintf_r>
 800fe62:	b002      	add	sp, #8
 800fe64:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe68:	b003      	add	sp, #12
 800fe6a:	4770      	bx	lr
 800fe6c:	20006824 	.word	0x20006824

0800fe70 <abort>:
 800fe70:	b508      	push	{r3, lr}
 800fe72:	2006      	movs	r0, #6
 800fe74:	f000 fa00 	bl	8010278 <raise>
 800fe78:	2001      	movs	r0, #1
 800fe7a:	f000 fe9b 	bl	8010bb4 <_exit>

0800fe7e <__sfputc_r>:
 800fe7e:	6893      	ldr	r3, [r2, #8]
 800fe80:	3b01      	subs	r3, #1
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	b410      	push	{r4}
 800fe86:	6093      	str	r3, [r2, #8]
 800fe88:	da08      	bge.n	800fe9c <__sfputc_r+0x1e>
 800fe8a:	6994      	ldr	r4, [r2, #24]
 800fe8c:	42a3      	cmp	r3, r4
 800fe8e:	db01      	blt.n	800fe94 <__sfputc_r+0x16>
 800fe90:	290a      	cmp	r1, #10
 800fe92:	d103      	bne.n	800fe9c <__sfputc_r+0x1e>
 800fe94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe98:	f000 b932 	b.w	8010100 <__swbuf_r>
 800fe9c:	6813      	ldr	r3, [r2, #0]
 800fe9e:	1c58      	adds	r0, r3, #1
 800fea0:	6010      	str	r0, [r2, #0]
 800fea2:	7019      	strb	r1, [r3, #0]
 800fea4:	4608      	mov	r0, r1
 800fea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800feaa:	4770      	bx	lr

0800feac <__sfputs_r>:
 800feac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feae:	4606      	mov	r6, r0
 800feb0:	460f      	mov	r7, r1
 800feb2:	4614      	mov	r4, r2
 800feb4:	18d5      	adds	r5, r2, r3
 800feb6:	42ac      	cmp	r4, r5
 800feb8:	d101      	bne.n	800febe <__sfputs_r+0x12>
 800feba:	2000      	movs	r0, #0
 800febc:	e007      	b.n	800fece <__sfputs_r+0x22>
 800febe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fec2:	463a      	mov	r2, r7
 800fec4:	4630      	mov	r0, r6
 800fec6:	f7ff ffda 	bl	800fe7e <__sfputc_r>
 800feca:	1c43      	adds	r3, r0, #1
 800fecc:	d1f3      	bne.n	800feb6 <__sfputs_r+0xa>
 800fece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fed0 <_vfiprintf_r>:
 800fed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed4:	460d      	mov	r5, r1
 800fed6:	b09d      	sub	sp, #116	@ 0x74
 800fed8:	4614      	mov	r4, r2
 800feda:	4698      	mov	r8, r3
 800fedc:	4606      	mov	r6, r0
 800fede:	b118      	cbz	r0, 800fee8 <_vfiprintf_r+0x18>
 800fee0:	6a03      	ldr	r3, [r0, #32]
 800fee2:	b90b      	cbnz	r3, 800fee8 <_vfiprintf_r+0x18>
 800fee4:	f7fe fb6c 	bl	800e5c0 <__sinit>
 800fee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800feea:	07d9      	lsls	r1, r3, #31
 800feec:	d405      	bmi.n	800fefa <_vfiprintf_r+0x2a>
 800feee:	89ab      	ldrh	r3, [r5, #12]
 800fef0:	059a      	lsls	r2, r3, #22
 800fef2:	d402      	bmi.n	800fefa <_vfiprintf_r+0x2a>
 800fef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fef6:	f7fe fc7c 	bl	800e7f2 <__retarget_lock_acquire_recursive>
 800fefa:	89ab      	ldrh	r3, [r5, #12]
 800fefc:	071b      	lsls	r3, r3, #28
 800fefe:	d501      	bpl.n	800ff04 <_vfiprintf_r+0x34>
 800ff00:	692b      	ldr	r3, [r5, #16]
 800ff02:	b99b      	cbnz	r3, 800ff2c <_vfiprintf_r+0x5c>
 800ff04:	4629      	mov	r1, r5
 800ff06:	4630      	mov	r0, r6
 800ff08:	f000 f938 	bl	801017c <__swsetup_r>
 800ff0c:	b170      	cbz	r0, 800ff2c <_vfiprintf_r+0x5c>
 800ff0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff10:	07dc      	lsls	r4, r3, #31
 800ff12:	d504      	bpl.n	800ff1e <_vfiprintf_r+0x4e>
 800ff14:	f04f 30ff 	mov.w	r0, #4294967295
 800ff18:	b01d      	add	sp, #116	@ 0x74
 800ff1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff1e:	89ab      	ldrh	r3, [r5, #12]
 800ff20:	0598      	lsls	r0, r3, #22
 800ff22:	d4f7      	bmi.n	800ff14 <_vfiprintf_r+0x44>
 800ff24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff26:	f7fe fc65 	bl	800e7f4 <__retarget_lock_release_recursive>
 800ff2a:	e7f3      	b.n	800ff14 <_vfiprintf_r+0x44>
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff30:	2320      	movs	r3, #32
 800ff32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff3a:	2330      	movs	r3, #48	@ 0x30
 800ff3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80100ec <_vfiprintf_r+0x21c>
 800ff40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff44:	f04f 0901 	mov.w	r9, #1
 800ff48:	4623      	mov	r3, r4
 800ff4a:	469a      	mov	sl, r3
 800ff4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff50:	b10a      	cbz	r2, 800ff56 <_vfiprintf_r+0x86>
 800ff52:	2a25      	cmp	r2, #37	@ 0x25
 800ff54:	d1f9      	bne.n	800ff4a <_vfiprintf_r+0x7a>
 800ff56:	ebba 0b04 	subs.w	fp, sl, r4
 800ff5a:	d00b      	beq.n	800ff74 <_vfiprintf_r+0xa4>
 800ff5c:	465b      	mov	r3, fp
 800ff5e:	4622      	mov	r2, r4
 800ff60:	4629      	mov	r1, r5
 800ff62:	4630      	mov	r0, r6
 800ff64:	f7ff ffa2 	bl	800feac <__sfputs_r>
 800ff68:	3001      	adds	r0, #1
 800ff6a:	f000 80a7 	beq.w	80100bc <_vfiprintf_r+0x1ec>
 800ff6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff70:	445a      	add	r2, fp
 800ff72:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff74:	f89a 3000 	ldrb.w	r3, [sl]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f000 809f 	beq.w	80100bc <_vfiprintf_r+0x1ec>
 800ff7e:	2300      	movs	r3, #0
 800ff80:	f04f 32ff 	mov.w	r2, #4294967295
 800ff84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff88:	f10a 0a01 	add.w	sl, sl, #1
 800ff8c:	9304      	str	r3, [sp, #16]
 800ff8e:	9307      	str	r3, [sp, #28]
 800ff90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff94:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff96:	4654      	mov	r4, sl
 800ff98:	2205      	movs	r2, #5
 800ff9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff9e:	4853      	ldr	r0, [pc, #332]	@ (80100ec <_vfiprintf_r+0x21c>)
 800ffa0:	f7f0 f926 	bl	80001f0 <memchr>
 800ffa4:	9a04      	ldr	r2, [sp, #16]
 800ffa6:	b9d8      	cbnz	r0, 800ffe0 <_vfiprintf_r+0x110>
 800ffa8:	06d1      	lsls	r1, r2, #27
 800ffaa:	bf44      	itt	mi
 800ffac:	2320      	movmi	r3, #32
 800ffae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffb2:	0713      	lsls	r3, r2, #28
 800ffb4:	bf44      	itt	mi
 800ffb6:	232b      	movmi	r3, #43	@ 0x2b
 800ffb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffbc:	f89a 3000 	ldrb.w	r3, [sl]
 800ffc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffc2:	d015      	beq.n	800fff0 <_vfiprintf_r+0x120>
 800ffc4:	9a07      	ldr	r2, [sp, #28]
 800ffc6:	4654      	mov	r4, sl
 800ffc8:	2000      	movs	r0, #0
 800ffca:	f04f 0c0a 	mov.w	ip, #10
 800ffce:	4621      	mov	r1, r4
 800ffd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffd4:	3b30      	subs	r3, #48	@ 0x30
 800ffd6:	2b09      	cmp	r3, #9
 800ffd8:	d94b      	bls.n	8010072 <_vfiprintf_r+0x1a2>
 800ffda:	b1b0      	cbz	r0, 801000a <_vfiprintf_r+0x13a>
 800ffdc:	9207      	str	r2, [sp, #28]
 800ffde:	e014      	b.n	801000a <_vfiprintf_r+0x13a>
 800ffe0:	eba0 0308 	sub.w	r3, r0, r8
 800ffe4:	fa09 f303 	lsl.w	r3, r9, r3
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	9304      	str	r3, [sp, #16]
 800ffec:	46a2      	mov	sl, r4
 800ffee:	e7d2      	b.n	800ff96 <_vfiprintf_r+0xc6>
 800fff0:	9b03      	ldr	r3, [sp, #12]
 800fff2:	1d19      	adds	r1, r3, #4
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	9103      	str	r1, [sp, #12]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	bfbb      	ittet	lt
 800fffc:	425b      	neglt	r3, r3
 800fffe:	f042 0202 	orrlt.w	r2, r2, #2
 8010002:	9307      	strge	r3, [sp, #28]
 8010004:	9307      	strlt	r3, [sp, #28]
 8010006:	bfb8      	it	lt
 8010008:	9204      	strlt	r2, [sp, #16]
 801000a:	7823      	ldrb	r3, [r4, #0]
 801000c:	2b2e      	cmp	r3, #46	@ 0x2e
 801000e:	d10a      	bne.n	8010026 <_vfiprintf_r+0x156>
 8010010:	7863      	ldrb	r3, [r4, #1]
 8010012:	2b2a      	cmp	r3, #42	@ 0x2a
 8010014:	d132      	bne.n	801007c <_vfiprintf_r+0x1ac>
 8010016:	9b03      	ldr	r3, [sp, #12]
 8010018:	1d1a      	adds	r2, r3, #4
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	9203      	str	r2, [sp, #12]
 801001e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010022:	3402      	adds	r4, #2
 8010024:	9305      	str	r3, [sp, #20]
 8010026:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80100fc <_vfiprintf_r+0x22c>
 801002a:	7821      	ldrb	r1, [r4, #0]
 801002c:	2203      	movs	r2, #3
 801002e:	4650      	mov	r0, sl
 8010030:	f7f0 f8de 	bl	80001f0 <memchr>
 8010034:	b138      	cbz	r0, 8010046 <_vfiprintf_r+0x176>
 8010036:	9b04      	ldr	r3, [sp, #16]
 8010038:	eba0 000a 	sub.w	r0, r0, sl
 801003c:	2240      	movs	r2, #64	@ 0x40
 801003e:	4082      	lsls	r2, r0
 8010040:	4313      	orrs	r3, r2
 8010042:	3401      	adds	r4, #1
 8010044:	9304      	str	r3, [sp, #16]
 8010046:	f814 1b01 	ldrb.w	r1, [r4], #1
 801004a:	4829      	ldr	r0, [pc, #164]	@ (80100f0 <_vfiprintf_r+0x220>)
 801004c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010050:	2206      	movs	r2, #6
 8010052:	f7f0 f8cd 	bl	80001f0 <memchr>
 8010056:	2800      	cmp	r0, #0
 8010058:	d03f      	beq.n	80100da <_vfiprintf_r+0x20a>
 801005a:	4b26      	ldr	r3, [pc, #152]	@ (80100f4 <_vfiprintf_r+0x224>)
 801005c:	bb1b      	cbnz	r3, 80100a6 <_vfiprintf_r+0x1d6>
 801005e:	9b03      	ldr	r3, [sp, #12]
 8010060:	3307      	adds	r3, #7
 8010062:	f023 0307 	bic.w	r3, r3, #7
 8010066:	3308      	adds	r3, #8
 8010068:	9303      	str	r3, [sp, #12]
 801006a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801006c:	443b      	add	r3, r7
 801006e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010070:	e76a      	b.n	800ff48 <_vfiprintf_r+0x78>
 8010072:	fb0c 3202 	mla	r2, ip, r2, r3
 8010076:	460c      	mov	r4, r1
 8010078:	2001      	movs	r0, #1
 801007a:	e7a8      	b.n	800ffce <_vfiprintf_r+0xfe>
 801007c:	2300      	movs	r3, #0
 801007e:	3401      	adds	r4, #1
 8010080:	9305      	str	r3, [sp, #20]
 8010082:	4619      	mov	r1, r3
 8010084:	f04f 0c0a 	mov.w	ip, #10
 8010088:	4620      	mov	r0, r4
 801008a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801008e:	3a30      	subs	r2, #48	@ 0x30
 8010090:	2a09      	cmp	r2, #9
 8010092:	d903      	bls.n	801009c <_vfiprintf_r+0x1cc>
 8010094:	2b00      	cmp	r3, #0
 8010096:	d0c6      	beq.n	8010026 <_vfiprintf_r+0x156>
 8010098:	9105      	str	r1, [sp, #20]
 801009a:	e7c4      	b.n	8010026 <_vfiprintf_r+0x156>
 801009c:	fb0c 2101 	mla	r1, ip, r1, r2
 80100a0:	4604      	mov	r4, r0
 80100a2:	2301      	movs	r3, #1
 80100a4:	e7f0      	b.n	8010088 <_vfiprintf_r+0x1b8>
 80100a6:	ab03      	add	r3, sp, #12
 80100a8:	9300      	str	r3, [sp, #0]
 80100aa:	462a      	mov	r2, r5
 80100ac:	4b12      	ldr	r3, [pc, #72]	@ (80100f8 <_vfiprintf_r+0x228>)
 80100ae:	a904      	add	r1, sp, #16
 80100b0:	4630      	mov	r0, r6
 80100b2:	f7fd fe43 	bl	800dd3c <_printf_float>
 80100b6:	4607      	mov	r7, r0
 80100b8:	1c78      	adds	r0, r7, #1
 80100ba:	d1d6      	bne.n	801006a <_vfiprintf_r+0x19a>
 80100bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100be:	07d9      	lsls	r1, r3, #31
 80100c0:	d405      	bmi.n	80100ce <_vfiprintf_r+0x1fe>
 80100c2:	89ab      	ldrh	r3, [r5, #12]
 80100c4:	059a      	lsls	r2, r3, #22
 80100c6:	d402      	bmi.n	80100ce <_vfiprintf_r+0x1fe>
 80100c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100ca:	f7fe fb93 	bl	800e7f4 <__retarget_lock_release_recursive>
 80100ce:	89ab      	ldrh	r3, [r5, #12]
 80100d0:	065b      	lsls	r3, r3, #25
 80100d2:	f53f af1f 	bmi.w	800ff14 <_vfiprintf_r+0x44>
 80100d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100d8:	e71e      	b.n	800ff18 <_vfiprintf_r+0x48>
 80100da:	ab03      	add	r3, sp, #12
 80100dc:	9300      	str	r3, [sp, #0]
 80100de:	462a      	mov	r2, r5
 80100e0:	4b05      	ldr	r3, [pc, #20]	@ (80100f8 <_vfiprintf_r+0x228>)
 80100e2:	a904      	add	r1, sp, #16
 80100e4:	4630      	mov	r0, r6
 80100e6:	f7fe f8c1 	bl	800e26c <_printf_i>
 80100ea:	e7e4      	b.n	80100b6 <_vfiprintf_r+0x1e6>
 80100ec:	08011760 	.word	0x08011760
 80100f0:	0801176a 	.word	0x0801176a
 80100f4:	0800dd3d 	.word	0x0800dd3d
 80100f8:	0800fead 	.word	0x0800fead
 80100fc:	08011766 	.word	0x08011766

08010100 <__swbuf_r>:
 8010100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010102:	460e      	mov	r6, r1
 8010104:	4614      	mov	r4, r2
 8010106:	4605      	mov	r5, r0
 8010108:	b118      	cbz	r0, 8010112 <__swbuf_r+0x12>
 801010a:	6a03      	ldr	r3, [r0, #32]
 801010c:	b90b      	cbnz	r3, 8010112 <__swbuf_r+0x12>
 801010e:	f7fe fa57 	bl	800e5c0 <__sinit>
 8010112:	69a3      	ldr	r3, [r4, #24]
 8010114:	60a3      	str	r3, [r4, #8]
 8010116:	89a3      	ldrh	r3, [r4, #12]
 8010118:	071a      	lsls	r2, r3, #28
 801011a:	d501      	bpl.n	8010120 <__swbuf_r+0x20>
 801011c:	6923      	ldr	r3, [r4, #16]
 801011e:	b943      	cbnz	r3, 8010132 <__swbuf_r+0x32>
 8010120:	4621      	mov	r1, r4
 8010122:	4628      	mov	r0, r5
 8010124:	f000 f82a 	bl	801017c <__swsetup_r>
 8010128:	b118      	cbz	r0, 8010132 <__swbuf_r+0x32>
 801012a:	f04f 37ff 	mov.w	r7, #4294967295
 801012e:	4638      	mov	r0, r7
 8010130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010132:	6823      	ldr	r3, [r4, #0]
 8010134:	6922      	ldr	r2, [r4, #16]
 8010136:	1a98      	subs	r0, r3, r2
 8010138:	6963      	ldr	r3, [r4, #20]
 801013a:	b2f6      	uxtb	r6, r6
 801013c:	4283      	cmp	r3, r0
 801013e:	4637      	mov	r7, r6
 8010140:	dc05      	bgt.n	801014e <__swbuf_r+0x4e>
 8010142:	4621      	mov	r1, r4
 8010144:	4628      	mov	r0, r5
 8010146:	f7ff fe07 	bl	800fd58 <_fflush_r>
 801014a:	2800      	cmp	r0, #0
 801014c:	d1ed      	bne.n	801012a <__swbuf_r+0x2a>
 801014e:	68a3      	ldr	r3, [r4, #8]
 8010150:	3b01      	subs	r3, #1
 8010152:	60a3      	str	r3, [r4, #8]
 8010154:	6823      	ldr	r3, [r4, #0]
 8010156:	1c5a      	adds	r2, r3, #1
 8010158:	6022      	str	r2, [r4, #0]
 801015a:	701e      	strb	r6, [r3, #0]
 801015c:	6962      	ldr	r2, [r4, #20]
 801015e:	1c43      	adds	r3, r0, #1
 8010160:	429a      	cmp	r2, r3
 8010162:	d004      	beq.n	801016e <__swbuf_r+0x6e>
 8010164:	89a3      	ldrh	r3, [r4, #12]
 8010166:	07db      	lsls	r3, r3, #31
 8010168:	d5e1      	bpl.n	801012e <__swbuf_r+0x2e>
 801016a:	2e0a      	cmp	r6, #10
 801016c:	d1df      	bne.n	801012e <__swbuf_r+0x2e>
 801016e:	4621      	mov	r1, r4
 8010170:	4628      	mov	r0, r5
 8010172:	f7ff fdf1 	bl	800fd58 <_fflush_r>
 8010176:	2800      	cmp	r0, #0
 8010178:	d0d9      	beq.n	801012e <__swbuf_r+0x2e>
 801017a:	e7d6      	b.n	801012a <__swbuf_r+0x2a>

0801017c <__swsetup_r>:
 801017c:	b538      	push	{r3, r4, r5, lr}
 801017e:	4b29      	ldr	r3, [pc, #164]	@ (8010224 <__swsetup_r+0xa8>)
 8010180:	4605      	mov	r5, r0
 8010182:	6818      	ldr	r0, [r3, #0]
 8010184:	460c      	mov	r4, r1
 8010186:	b118      	cbz	r0, 8010190 <__swsetup_r+0x14>
 8010188:	6a03      	ldr	r3, [r0, #32]
 801018a:	b90b      	cbnz	r3, 8010190 <__swsetup_r+0x14>
 801018c:	f7fe fa18 	bl	800e5c0 <__sinit>
 8010190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010194:	0719      	lsls	r1, r3, #28
 8010196:	d422      	bmi.n	80101de <__swsetup_r+0x62>
 8010198:	06da      	lsls	r2, r3, #27
 801019a:	d407      	bmi.n	80101ac <__swsetup_r+0x30>
 801019c:	2209      	movs	r2, #9
 801019e:	602a      	str	r2, [r5, #0]
 80101a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101a4:	81a3      	strh	r3, [r4, #12]
 80101a6:	f04f 30ff 	mov.w	r0, #4294967295
 80101aa:	e033      	b.n	8010214 <__swsetup_r+0x98>
 80101ac:	0758      	lsls	r0, r3, #29
 80101ae:	d512      	bpl.n	80101d6 <__swsetup_r+0x5a>
 80101b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101b2:	b141      	cbz	r1, 80101c6 <__swsetup_r+0x4a>
 80101b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101b8:	4299      	cmp	r1, r3
 80101ba:	d002      	beq.n	80101c2 <__swsetup_r+0x46>
 80101bc:	4628      	mov	r0, r5
 80101be:	f7ff f983 	bl	800f4c8 <_free_r>
 80101c2:	2300      	movs	r3, #0
 80101c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80101c6:	89a3      	ldrh	r3, [r4, #12]
 80101c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80101cc:	81a3      	strh	r3, [r4, #12]
 80101ce:	2300      	movs	r3, #0
 80101d0:	6063      	str	r3, [r4, #4]
 80101d2:	6923      	ldr	r3, [r4, #16]
 80101d4:	6023      	str	r3, [r4, #0]
 80101d6:	89a3      	ldrh	r3, [r4, #12]
 80101d8:	f043 0308 	orr.w	r3, r3, #8
 80101dc:	81a3      	strh	r3, [r4, #12]
 80101de:	6923      	ldr	r3, [r4, #16]
 80101e0:	b94b      	cbnz	r3, 80101f6 <__swsetup_r+0x7a>
 80101e2:	89a3      	ldrh	r3, [r4, #12]
 80101e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80101e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80101ec:	d003      	beq.n	80101f6 <__swsetup_r+0x7a>
 80101ee:	4621      	mov	r1, r4
 80101f0:	4628      	mov	r0, r5
 80101f2:	f000 f883 	bl	80102fc <__smakebuf_r>
 80101f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101fa:	f013 0201 	ands.w	r2, r3, #1
 80101fe:	d00a      	beq.n	8010216 <__swsetup_r+0x9a>
 8010200:	2200      	movs	r2, #0
 8010202:	60a2      	str	r2, [r4, #8]
 8010204:	6962      	ldr	r2, [r4, #20]
 8010206:	4252      	negs	r2, r2
 8010208:	61a2      	str	r2, [r4, #24]
 801020a:	6922      	ldr	r2, [r4, #16]
 801020c:	b942      	cbnz	r2, 8010220 <__swsetup_r+0xa4>
 801020e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010212:	d1c5      	bne.n	80101a0 <__swsetup_r+0x24>
 8010214:	bd38      	pop	{r3, r4, r5, pc}
 8010216:	0799      	lsls	r1, r3, #30
 8010218:	bf58      	it	pl
 801021a:	6962      	ldrpl	r2, [r4, #20]
 801021c:	60a2      	str	r2, [r4, #8]
 801021e:	e7f4      	b.n	801020a <__swsetup_r+0x8e>
 8010220:	2000      	movs	r0, #0
 8010222:	e7f7      	b.n	8010214 <__swsetup_r+0x98>
 8010224:	20006824 	.word	0x20006824

08010228 <_raise_r>:
 8010228:	291f      	cmp	r1, #31
 801022a:	b538      	push	{r3, r4, r5, lr}
 801022c:	4605      	mov	r5, r0
 801022e:	460c      	mov	r4, r1
 8010230:	d904      	bls.n	801023c <_raise_r+0x14>
 8010232:	2316      	movs	r3, #22
 8010234:	6003      	str	r3, [r0, #0]
 8010236:	f04f 30ff 	mov.w	r0, #4294967295
 801023a:	bd38      	pop	{r3, r4, r5, pc}
 801023c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801023e:	b112      	cbz	r2, 8010246 <_raise_r+0x1e>
 8010240:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010244:	b94b      	cbnz	r3, 801025a <_raise_r+0x32>
 8010246:	4628      	mov	r0, r5
 8010248:	f000 f830 	bl	80102ac <_getpid_r>
 801024c:	4622      	mov	r2, r4
 801024e:	4601      	mov	r1, r0
 8010250:	4628      	mov	r0, r5
 8010252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010256:	f000 b817 	b.w	8010288 <_kill_r>
 801025a:	2b01      	cmp	r3, #1
 801025c:	d00a      	beq.n	8010274 <_raise_r+0x4c>
 801025e:	1c59      	adds	r1, r3, #1
 8010260:	d103      	bne.n	801026a <_raise_r+0x42>
 8010262:	2316      	movs	r3, #22
 8010264:	6003      	str	r3, [r0, #0]
 8010266:	2001      	movs	r0, #1
 8010268:	e7e7      	b.n	801023a <_raise_r+0x12>
 801026a:	2100      	movs	r1, #0
 801026c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010270:	4620      	mov	r0, r4
 8010272:	4798      	blx	r3
 8010274:	2000      	movs	r0, #0
 8010276:	e7e0      	b.n	801023a <_raise_r+0x12>

08010278 <raise>:
 8010278:	4b02      	ldr	r3, [pc, #8]	@ (8010284 <raise+0xc>)
 801027a:	4601      	mov	r1, r0
 801027c:	6818      	ldr	r0, [r3, #0]
 801027e:	f7ff bfd3 	b.w	8010228 <_raise_r>
 8010282:	bf00      	nop
 8010284:	20006824 	.word	0x20006824

08010288 <_kill_r>:
 8010288:	b538      	push	{r3, r4, r5, lr}
 801028a:	4d07      	ldr	r5, [pc, #28]	@ (80102a8 <_kill_r+0x20>)
 801028c:	2300      	movs	r3, #0
 801028e:	4604      	mov	r4, r0
 8010290:	4608      	mov	r0, r1
 8010292:	4611      	mov	r1, r2
 8010294:	602b      	str	r3, [r5, #0]
 8010296:	f000 fc75 	bl	8010b84 <_kill>
 801029a:	1c43      	adds	r3, r0, #1
 801029c:	d102      	bne.n	80102a4 <_kill_r+0x1c>
 801029e:	682b      	ldr	r3, [r5, #0]
 80102a0:	b103      	cbz	r3, 80102a4 <_kill_r+0x1c>
 80102a2:	6023      	str	r3, [r4, #0]
 80102a4:	bd38      	pop	{r3, r4, r5, pc}
 80102a6:	bf00      	nop
 80102a8:	20013390 	.word	0x20013390

080102ac <_getpid_r>:
 80102ac:	f000 bc5a 	b.w	8010b64 <_getpid>

080102b0 <__swhatbuf_r>:
 80102b0:	b570      	push	{r4, r5, r6, lr}
 80102b2:	460c      	mov	r4, r1
 80102b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102b8:	2900      	cmp	r1, #0
 80102ba:	b096      	sub	sp, #88	@ 0x58
 80102bc:	4615      	mov	r5, r2
 80102be:	461e      	mov	r6, r3
 80102c0:	da0d      	bge.n	80102de <__swhatbuf_r+0x2e>
 80102c2:	89a3      	ldrh	r3, [r4, #12]
 80102c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80102c8:	f04f 0100 	mov.w	r1, #0
 80102cc:	bf14      	ite	ne
 80102ce:	2340      	movne	r3, #64	@ 0x40
 80102d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80102d4:	2000      	movs	r0, #0
 80102d6:	6031      	str	r1, [r6, #0]
 80102d8:	602b      	str	r3, [r5, #0]
 80102da:	b016      	add	sp, #88	@ 0x58
 80102dc:	bd70      	pop	{r4, r5, r6, pc}
 80102de:	466a      	mov	r2, sp
 80102e0:	f000 f848 	bl	8010374 <_fstat_r>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	dbec      	blt.n	80102c2 <__swhatbuf_r+0x12>
 80102e8:	9901      	ldr	r1, [sp, #4]
 80102ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80102ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80102f2:	4259      	negs	r1, r3
 80102f4:	4159      	adcs	r1, r3
 80102f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80102fa:	e7eb      	b.n	80102d4 <__swhatbuf_r+0x24>

080102fc <__smakebuf_r>:
 80102fc:	898b      	ldrh	r3, [r1, #12]
 80102fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010300:	079d      	lsls	r5, r3, #30
 8010302:	4606      	mov	r6, r0
 8010304:	460c      	mov	r4, r1
 8010306:	d507      	bpl.n	8010318 <__smakebuf_r+0x1c>
 8010308:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801030c:	6023      	str	r3, [r4, #0]
 801030e:	6123      	str	r3, [r4, #16]
 8010310:	2301      	movs	r3, #1
 8010312:	6163      	str	r3, [r4, #20]
 8010314:	b003      	add	sp, #12
 8010316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010318:	ab01      	add	r3, sp, #4
 801031a:	466a      	mov	r2, sp
 801031c:	f7ff ffc8 	bl	80102b0 <__swhatbuf_r>
 8010320:	9f00      	ldr	r7, [sp, #0]
 8010322:	4605      	mov	r5, r0
 8010324:	4639      	mov	r1, r7
 8010326:	4630      	mov	r0, r6
 8010328:	f7fd fbdc 	bl	800dae4 <_malloc_r>
 801032c:	b948      	cbnz	r0, 8010342 <__smakebuf_r+0x46>
 801032e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010332:	059a      	lsls	r2, r3, #22
 8010334:	d4ee      	bmi.n	8010314 <__smakebuf_r+0x18>
 8010336:	f023 0303 	bic.w	r3, r3, #3
 801033a:	f043 0302 	orr.w	r3, r3, #2
 801033e:	81a3      	strh	r3, [r4, #12]
 8010340:	e7e2      	b.n	8010308 <__smakebuf_r+0xc>
 8010342:	89a3      	ldrh	r3, [r4, #12]
 8010344:	6020      	str	r0, [r4, #0]
 8010346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801034a:	81a3      	strh	r3, [r4, #12]
 801034c:	9b01      	ldr	r3, [sp, #4]
 801034e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010352:	b15b      	cbz	r3, 801036c <__smakebuf_r+0x70>
 8010354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010358:	4630      	mov	r0, r6
 801035a:	f000 f81d 	bl	8010398 <_isatty_r>
 801035e:	b128      	cbz	r0, 801036c <__smakebuf_r+0x70>
 8010360:	89a3      	ldrh	r3, [r4, #12]
 8010362:	f023 0303 	bic.w	r3, r3, #3
 8010366:	f043 0301 	orr.w	r3, r3, #1
 801036a:	81a3      	strh	r3, [r4, #12]
 801036c:	89a3      	ldrh	r3, [r4, #12]
 801036e:	431d      	orrs	r5, r3
 8010370:	81a5      	strh	r5, [r4, #12]
 8010372:	e7cf      	b.n	8010314 <__smakebuf_r+0x18>

08010374 <_fstat_r>:
 8010374:	b538      	push	{r3, r4, r5, lr}
 8010376:	4d07      	ldr	r5, [pc, #28]	@ (8010394 <_fstat_r+0x20>)
 8010378:	2300      	movs	r3, #0
 801037a:	4604      	mov	r4, r0
 801037c:	4608      	mov	r0, r1
 801037e:	4611      	mov	r1, r2
 8010380:	602b      	str	r3, [r5, #0]
 8010382:	f000 fbe7 	bl	8010b54 <_fstat>
 8010386:	1c43      	adds	r3, r0, #1
 8010388:	d102      	bne.n	8010390 <_fstat_r+0x1c>
 801038a:	682b      	ldr	r3, [r5, #0]
 801038c:	b103      	cbz	r3, 8010390 <_fstat_r+0x1c>
 801038e:	6023      	str	r3, [r4, #0]
 8010390:	bd38      	pop	{r3, r4, r5, pc}
 8010392:	bf00      	nop
 8010394:	20013390 	.word	0x20013390

08010398 <_isatty_r>:
 8010398:	b538      	push	{r3, r4, r5, lr}
 801039a:	4d06      	ldr	r5, [pc, #24]	@ (80103b4 <_isatty_r+0x1c>)
 801039c:	2300      	movs	r3, #0
 801039e:	4604      	mov	r4, r0
 80103a0:	4608      	mov	r0, r1
 80103a2:	602b      	str	r3, [r5, #0]
 80103a4:	f000 fbe6 	bl	8010b74 <_isatty>
 80103a8:	1c43      	adds	r3, r0, #1
 80103aa:	d102      	bne.n	80103b2 <_isatty_r+0x1a>
 80103ac:	682b      	ldr	r3, [r5, #0]
 80103ae:	b103      	cbz	r3, 80103b2 <_isatty_r+0x1a>
 80103b0:	6023      	str	r3, [r4, #0]
 80103b2:	bd38      	pop	{r3, r4, r5, pc}
 80103b4:	20013390 	.word	0x20013390

080103b8 <powf>:
 80103b8:	b508      	push	{r3, lr}
 80103ba:	ed2d 8b04 	vpush	{d8-d9}
 80103be:	eeb0 8a60 	vmov.f32	s16, s1
 80103c2:	eeb0 9a40 	vmov.f32	s18, s0
 80103c6:	f000 f885 	bl	80104d4 <__ieee754_powf>
 80103ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80103ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103d2:	eef0 8a40 	vmov.f32	s17, s0
 80103d6:	d63e      	bvs.n	8010456 <powf+0x9e>
 80103d8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80103dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e0:	d112      	bne.n	8010408 <powf+0x50>
 80103e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80103e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ea:	d039      	beq.n	8010460 <powf+0xa8>
 80103ec:	eeb0 0a48 	vmov.f32	s0, s16
 80103f0:	f000 f840 	bl	8010474 <finitef>
 80103f4:	b378      	cbz	r0, 8010456 <powf+0x9e>
 80103f6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80103fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103fe:	d52a      	bpl.n	8010456 <powf+0x9e>
 8010400:	f7fe f9cc 	bl	800e79c <__errno>
 8010404:	2322      	movs	r3, #34	@ 0x22
 8010406:	e014      	b.n	8010432 <powf+0x7a>
 8010408:	f000 f834 	bl	8010474 <finitef>
 801040c:	b998      	cbnz	r0, 8010436 <powf+0x7e>
 801040e:	eeb0 0a49 	vmov.f32	s0, s18
 8010412:	f000 f82f 	bl	8010474 <finitef>
 8010416:	b170      	cbz	r0, 8010436 <powf+0x7e>
 8010418:	eeb0 0a48 	vmov.f32	s0, s16
 801041c:	f000 f82a 	bl	8010474 <finitef>
 8010420:	b148      	cbz	r0, 8010436 <powf+0x7e>
 8010422:	eef4 8a68 	vcmp.f32	s17, s17
 8010426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801042a:	d7e9      	bvc.n	8010400 <powf+0x48>
 801042c:	f7fe f9b6 	bl	800e79c <__errno>
 8010430:	2321      	movs	r3, #33	@ 0x21
 8010432:	6003      	str	r3, [r0, #0]
 8010434:	e00f      	b.n	8010456 <powf+0x9e>
 8010436:	eef5 8a40 	vcmp.f32	s17, #0.0
 801043a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043e:	d10a      	bne.n	8010456 <powf+0x9e>
 8010440:	eeb0 0a49 	vmov.f32	s0, s18
 8010444:	f000 f816 	bl	8010474 <finitef>
 8010448:	b128      	cbz	r0, 8010456 <powf+0x9e>
 801044a:	eeb0 0a48 	vmov.f32	s0, s16
 801044e:	f000 f811 	bl	8010474 <finitef>
 8010452:	2800      	cmp	r0, #0
 8010454:	d1d4      	bne.n	8010400 <powf+0x48>
 8010456:	eeb0 0a68 	vmov.f32	s0, s17
 801045a:	ecbd 8b04 	vpop	{d8-d9}
 801045e:	bd08      	pop	{r3, pc}
 8010460:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010464:	e7f7      	b.n	8010456 <powf+0x9e>

08010466 <fabsf>:
 8010466:	ee10 3a10 	vmov	r3, s0
 801046a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801046e:	ee00 3a10 	vmov	s0, r3
 8010472:	4770      	bx	lr

08010474 <finitef>:
 8010474:	ee10 3a10 	vmov	r3, s0
 8010478:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801047c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8010480:	bfac      	ite	ge
 8010482:	2000      	movge	r0, #0
 8010484:	2001      	movlt	r0, #1
 8010486:	4770      	bx	lr

08010488 <with_errnof>:
 8010488:	b510      	push	{r4, lr}
 801048a:	ed2d 8b02 	vpush	{d8}
 801048e:	eeb0 8a40 	vmov.f32	s16, s0
 8010492:	4604      	mov	r4, r0
 8010494:	f7fe f982 	bl	800e79c <__errno>
 8010498:	eeb0 0a48 	vmov.f32	s0, s16
 801049c:	ecbd 8b02 	vpop	{d8}
 80104a0:	6004      	str	r4, [r0, #0]
 80104a2:	bd10      	pop	{r4, pc}

080104a4 <xflowf>:
 80104a4:	b130      	cbz	r0, 80104b4 <xflowf+0x10>
 80104a6:	eef1 7a40 	vneg.f32	s15, s0
 80104aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80104ae:	2022      	movs	r0, #34	@ 0x22
 80104b0:	f7ff bfea 	b.w	8010488 <with_errnof>
 80104b4:	eef0 7a40 	vmov.f32	s15, s0
 80104b8:	e7f7      	b.n	80104aa <xflowf+0x6>
	...

080104bc <__math_uflowf>:
 80104bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80104c4 <__math_uflowf+0x8>
 80104c0:	f7ff bff0 	b.w	80104a4 <xflowf>
 80104c4:	10000000 	.word	0x10000000

080104c8 <__math_oflowf>:
 80104c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80104d0 <__math_oflowf+0x8>
 80104cc:	f7ff bfea 	b.w	80104a4 <xflowf>
 80104d0:	70000000 	.word	0x70000000

080104d4 <__ieee754_powf>:
 80104d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104d8:	ee10 4a90 	vmov	r4, s1
 80104dc:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80104e0:	ed2d 8b02 	vpush	{d8}
 80104e4:	ee10 6a10 	vmov	r6, s0
 80104e8:	eeb0 8a40 	vmov.f32	s16, s0
 80104ec:	eef0 8a60 	vmov.f32	s17, s1
 80104f0:	d10c      	bne.n	801050c <__ieee754_powf+0x38>
 80104f2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80104f6:	0076      	lsls	r6, r6, #1
 80104f8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80104fc:	f240 8274 	bls.w	80109e8 <__ieee754_powf+0x514>
 8010500:	ee38 0a28 	vadd.f32	s0, s16, s17
 8010504:	ecbd 8b02 	vpop	{d8}
 8010508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801050c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8010510:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8010514:	d802      	bhi.n	801051c <__ieee754_powf+0x48>
 8010516:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801051a:	d908      	bls.n	801052e <__ieee754_powf+0x5a>
 801051c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8010520:	d1ee      	bne.n	8010500 <__ieee754_powf+0x2c>
 8010522:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8010526:	0064      	lsls	r4, r4, #1
 8010528:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801052c:	e7e6      	b.n	80104fc <__ieee754_powf+0x28>
 801052e:	2e00      	cmp	r6, #0
 8010530:	da1f      	bge.n	8010572 <__ieee754_powf+0x9e>
 8010532:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8010536:	f080 8260 	bcs.w	80109fa <__ieee754_powf+0x526>
 801053a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801053e:	d32f      	bcc.n	80105a0 <__ieee754_powf+0xcc>
 8010540:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8010544:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8010548:	fa49 f503 	asr.w	r5, r9, r3
 801054c:	fa05 f303 	lsl.w	r3, r5, r3
 8010550:	454b      	cmp	r3, r9
 8010552:	d123      	bne.n	801059c <__ieee754_powf+0xc8>
 8010554:	f005 0501 	and.w	r5, r5, #1
 8010558:	f1c5 0502 	rsb	r5, r5, #2
 801055c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8010560:	d11f      	bne.n	80105a2 <__ieee754_powf+0xce>
 8010562:	2c00      	cmp	r4, #0
 8010564:	f280 8246 	bge.w	80109f4 <__ieee754_powf+0x520>
 8010568:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801056c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010570:	e7c8      	b.n	8010504 <__ieee754_powf+0x30>
 8010572:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010576:	d111      	bne.n	801059c <__ieee754_powf+0xc8>
 8010578:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801057c:	f000 8234 	beq.w	80109e8 <__ieee754_powf+0x514>
 8010580:	d906      	bls.n	8010590 <__ieee754_powf+0xbc>
 8010582:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8010898 <__ieee754_powf+0x3c4>
 8010586:	2c00      	cmp	r4, #0
 8010588:	bfa8      	it	ge
 801058a:	eeb0 0a68 	vmovge.f32	s0, s17
 801058e:	e7b9      	b.n	8010504 <__ieee754_powf+0x30>
 8010590:	2c00      	cmp	r4, #0
 8010592:	f280 822c 	bge.w	80109ee <__ieee754_powf+0x51a>
 8010596:	eeb1 0a68 	vneg.f32	s0, s17
 801059a:	e7b3      	b.n	8010504 <__ieee754_powf+0x30>
 801059c:	2500      	movs	r5, #0
 801059e:	e7dd      	b.n	801055c <__ieee754_powf+0x88>
 80105a0:	2500      	movs	r5, #0
 80105a2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80105a6:	d102      	bne.n	80105ae <__ieee754_powf+0xda>
 80105a8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80105ac:	e7aa      	b.n	8010504 <__ieee754_powf+0x30>
 80105ae:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80105b2:	f040 8227 	bne.w	8010a04 <__ieee754_powf+0x530>
 80105b6:	2e00      	cmp	r6, #0
 80105b8:	f2c0 8224 	blt.w	8010a04 <__ieee754_powf+0x530>
 80105bc:	eeb0 0a48 	vmov.f32	s0, s16
 80105c0:	ecbd 8b02 	vpop	{d8}
 80105c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105c8:	f000 bab8 	b.w	8010b3c <__ieee754_sqrtf>
 80105cc:	2d01      	cmp	r5, #1
 80105ce:	d199      	bne.n	8010504 <__ieee754_powf+0x30>
 80105d0:	eeb1 0a40 	vneg.f32	s0, s0
 80105d4:	e796      	b.n	8010504 <__ieee754_powf+0x30>
 80105d6:	0ff0      	lsrs	r0, r6, #31
 80105d8:	3801      	subs	r0, #1
 80105da:	ea55 0300 	orrs.w	r3, r5, r0
 80105de:	d104      	bne.n	80105ea <__ieee754_powf+0x116>
 80105e0:	ee38 8a48 	vsub.f32	s16, s16, s16
 80105e4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80105e8:	e78c      	b.n	8010504 <__ieee754_powf+0x30>
 80105ea:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80105ee:	d96d      	bls.n	80106cc <__ieee754_powf+0x1f8>
 80105f0:	4baa      	ldr	r3, [pc, #680]	@ (801089c <__ieee754_powf+0x3c8>)
 80105f2:	4598      	cmp	r8, r3
 80105f4:	d808      	bhi.n	8010608 <__ieee754_powf+0x134>
 80105f6:	2c00      	cmp	r4, #0
 80105f8:	da0b      	bge.n	8010612 <__ieee754_powf+0x13e>
 80105fa:	2000      	movs	r0, #0
 80105fc:	ecbd 8b02 	vpop	{d8}
 8010600:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010604:	f7ff bf60 	b.w	80104c8 <__math_oflowf>
 8010608:	4ba5      	ldr	r3, [pc, #660]	@ (80108a0 <__ieee754_powf+0x3cc>)
 801060a:	4598      	cmp	r8, r3
 801060c:	d908      	bls.n	8010620 <__ieee754_powf+0x14c>
 801060e:	2c00      	cmp	r4, #0
 8010610:	dcf3      	bgt.n	80105fa <__ieee754_powf+0x126>
 8010612:	2000      	movs	r0, #0
 8010614:	ecbd 8b02 	vpop	{d8}
 8010618:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801061c:	f7ff bf4e 	b.w	80104bc <__math_uflowf>
 8010620:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010624:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010628:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80108a4 <__ieee754_powf+0x3d0>
 801062c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010630:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010634:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010638:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801063c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010640:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80108a8 <__ieee754_powf+0x3d4>
 8010644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010648:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80108ac <__ieee754_powf+0x3d8>
 801064c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010650:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80108b0 <__ieee754_powf+0x3dc>
 8010654:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010658:	eeb0 7a67 	vmov.f32	s14, s15
 801065c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010660:	ee17 3a10 	vmov	r3, s14
 8010664:	f36f 030b 	bfc	r3, #0, #12
 8010668:	ee07 3a10 	vmov	s14, r3
 801066c:	eeb0 6a47 	vmov.f32	s12, s14
 8010670:	eea0 6a66 	vfms.f32	s12, s0, s13
 8010674:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010678:	3d01      	subs	r5, #1
 801067a:	4305      	orrs	r5, r0
 801067c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010680:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8010684:	f36f 040b 	bfc	r4, #0, #12
 8010688:	bf18      	it	ne
 801068a:	eeb0 8a66 	vmovne.f32	s16, s13
 801068e:	ee06 4a90 	vmov	s13, r4
 8010692:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010696:	ee38 6ae6 	vsub.f32	s12, s17, s13
 801069a:	ee67 7a26 	vmul.f32	s15, s14, s13
 801069e:	eee6 0a07 	vfma.f32	s1, s12, s14
 80106a2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80106a6:	ee17 1a10 	vmov	r1, s14
 80106aa:	2900      	cmp	r1, #0
 80106ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80106b0:	f340 80dd 	ble.w	801086e <__ieee754_powf+0x39a>
 80106b4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80106b8:	f240 80ca 	bls.w	8010850 <__ieee754_powf+0x37c>
 80106bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80106c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106c4:	bf4c      	ite	mi
 80106c6:	2001      	movmi	r0, #1
 80106c8:	2000      	movpl	r0, #0
 80106ca:	e797      	b.n	80105fc <__ieee754_powf+0x128>
 80106cc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80106d0:	bf01      	itttt	eq
 80106d2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80108b4 <__ieee754_powf+0x3e0>
 80106d6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80106da:	f06f 0317 	mvneq.w	r3, #23
 80106de:	ee17 7a90 	vmoveq	r7, s15
 80106e2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80106e6:	bf18      	it	ne
 80106e8:	2300      	movne	r3, #0
 80106ea:	3a7f      	subs	r2, #127	@ 0x7f
 80106ec:	441a      	add	r2, r3
 80106ee:	4b72      	ldr	r3, [pc, #456]	@ (80108b8 <__ieee754_powf+0x3e4>)
 80106f0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80106f4:	429f      	cmp	r7, r3
 80106f6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80106fa:	dd06      	ble.n	801070a <__ieee754_powf+0x236>
 80106fc:	4b6f      	ldr	r3, [pc, #444]	@ (80108bc <__ieee754_powf+0x3e8>)
 80106fe:	429f      	cmp	r7, r3
 8010700:	f340 80a4 	ble.w	801084c <__ieee754_powf+0x378>
 8010704:	3201      	adds	r2, #1
 8010706:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 801070a:	2600      	movs	r6, #0
 801070c:	4b6c      	ldr	r3, [pc, #432]	@ (80108c0 <__ieee754_powf+0x3ec>)
 801070e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8010712:	ee07 1a10 	vmov	s14, r1
 8010716:	edd3 5a00 	vldr	s11, [r3]
 801071a:	4b6a      	ldr	r3, [pc, #424]	@ (80108c4 <__ieee754_powf+0x3f0>)
 801071c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8010720:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010724:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8010728:	1049      	asrs	r1, r1, #1
 801072a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801072e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8010732:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8010736:	ee37 6a65 	vsub.f32	s12, s14, s11
 801073a:	ee07 1a90 	vmov	s15, r1
 801073e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8010742:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8010746:	ee15 7a10 	vmov	r7, s10
 801074a:	401f      	ands	r7, r3
 801074c:	ee06 7a90 	vmov	s13, r7
 8010750:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8010754:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010758:	ee65 7a05 	vmul.f32	s15, s10, s10
 801075c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010760:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80108c8 <__ieee754_powf+0x3f4>
 8010764:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80108cc <__ieee754_powf+0x3f8>
 8010768:	eee7 5a87 	vfma.f32	s11, s15, s14
 801076c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80108d0 <__ieee754_powf+0x3fc>
 8010770:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010774:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80108a4 <__ieee754_powf+0x3d0>
 8010778:	eee7 5a27 	vfma.f32	s11, s14, s15
 801077c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80108d4 <__ieee754_powf+0x400>
 8010780:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010784:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80108d8 <__ieee754_powf+0x404>
 8010788:	ee26 6a24 	vmul.f32	s12, s12, s9
 801078c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010790:	ee35 7a26 	vadd.f32	s14, s10, s13
 8010794:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8010798:	ee27 7a06 	vmul.f32	s14, s14, s12
 801079c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80107a0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80107a4:	eef0 5a67 	vmov.f32	s11, s15
 80107a8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80107ac:	ee75 5a87 	vadd.f32	s11, s11, s14
 80107b0:	ee15 1a90 	vmov	r1, s11
 80107b4:	4019      	ands	r1, r3
 80107b6:	ee05 1a90 	vmov	s11, r1
 80107ba:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80107be:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80107c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107c6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80107ca:	eee6 7a25 	vfma.f32	s15, s12, s11
 80107ce:	eeb0 6a67 	vmov.f32	s12, s15
 80107d2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80107d6:	ee16 1a10 	vmov	r1, s12
 80107da:	4019      	ands	r1, r3
 80107dc:	ee06 1a10 	vmov	s12, r1
 80107e0:	eeb0 7a46 	vmov.f32	s14, s12
 80107e4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80107e8:	493c      	ldr	r1, [pc, #240]	@ (80108dc <__ieee754_powf+0x408>)
 80107ea:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80107ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80107f2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80108e0 <__ieee754_powf+0x40c>
 80107f6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80108e4 <__ieee754_powf+0x410>
 80107fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80107fe:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80108e8 <__ieee754_powf+0x414>
 8010802:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010806:	ed91 7a00 	vldr	s14, [r1]
 801080a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801080e:	ee07 2a10 	vmov	s14, r2
 8010812:	4a36      	ldr	r2, [pc, #216]	@ (80108ec <__ieee754_powf+0x418>)
 8010814:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8010818:	eeb0 7a67 	vmov.f32	s14, s15
 801081c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8010820:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8010824:	ed92 5a00 	vldr	s10, [r2]
 8010828:	ee37 7a05 	vadd.f32	s14, s14, s10
 801082c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010830:	ee17 2a10 	vmov	r2, s14
 8010834:	401a      	ands	r2, r3
 8010836:	ee07 2a10 	vmov	s14, r2
 801083a:	ee77 6a66 	vsub.f32	s13, s14, s13
 801083e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8010842:	eee6 6a65 	vfms.f32	s13, s12, s11
 8010846:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801084a:	e715      	b.n	8010678 <__ieee754_powf+0x1a4>
 801084c:	2601      	movs	r6, #1
 801084e:	e75d      	b.n	801070c <__ieee754_powf+0x238>
 8010850:	d152      	bne.n	80108f8 <__ieee754_powf+0x424>
 8010852:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80108f0 <__ieee754_powf+0x41c>
 8010856:	ee37 7a67 	vsub.f32	s14, s14, s15
 801085a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801085e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010866:	f73f af29 	bgt.w	80106bc <__ieee754_powf+0x1e8>
 801086a:	2386      	movs	r3, #134	@ 0x86
 801086c:	e048      	b.n	8010900 <__ieee754_powf+0x42c>
 801086e:	4a21      	ldr	r2, [pc, #132]	@ (80108f4 <__ieee754_powf+0x420>)
 8010870:	4293      	cmp	r3, r2
 8010872:	d907      	bls.n	8010884 <__ieee754_powf+0x3b0>
 8010874:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801087c:	bf4c      	ite	mi
 801087e:	2001      	movmi	r0, #1
 8010880:	2000      	movpl	r0, #0
 8010882:	e6c7      	b.n	8010614 <__ieee754_powf+0x140>
 8010884:	d138      	bne.n	80108f8 <__ieee754_powf+0x424>
 8010886:	ee37 7a67 	vsub.f32	s14, s14, s15
 801088a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801088e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010892:	dbea      	blt.n	801086a <__ieee754_powf+0x396>
 8010894:	e7ee      	b.n	8010874 <__ieee754_powf+0x3a0>
 8010896:	bf00      	nop
 8010898:	00000000 	.word	0x00000000
 801089c:	3f7ffff3 	.word	0x3f7ffff3
 80108a0:	3f800007 	.word	0x3f800007
 80108a4:	3eaaaaab 	.word	0x3eaaaaab
 80108a8:	3fb8aa00 	.word	0x3fb8aa00
 80108ac:	3fb8aa3b 	.word	0x3fb8aa3b
 80108b0:	36eca570 	.word	0x36eca570
 80108b4:	4b800000 	.word	0x4b800000
 80108b8:	001cc471 	.word	0x001cc471
 80108bc:	005db3d6 	.word	0x005db3d6
 80108c0:	0807fe44 	.word	0x0807fe44
 80108c4:	fffff000 	.word	0xfffff000
 80108c8:	3e6c3255 	.word	0x3e6c3255
 80108cc:	3e53f142 	.word	0x3e53f142
 80108d0:	3e8ba305 	.word	0x3e8ba305
 80108d4:	3edb6db7 	.word	0x3edb6db7
 80108d8:	3f19999a 	.word	0x3f19999a
 80108dc:	0807fe34 	.word	0x0807fe34
 80108e0:	3f76384f 	.word	0x3f76384f
 80108e4:	3f763800 	.word	0x3f763800
 80108e8:	369dc3a0 	.word	0x369dc3a0
 80108ec:	0807fe3c 	.word	0x0807fe3c
 80108f0:	3338aa3c 	.word	0x3338aa3c
 80108f4:	43160000 	.word	0x43160000
 80108f8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80108fc:	d96f      	bls.n	80109de <__ieee754_powf+0x50a>
 80108fe:	15db      	asrs	r3, r3, #23
 8010900:	3b7e      	subs	r3, #126	@ 0x7e
 8010902:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8010906:	4118      	asrs	r0, r3
 8010908:	4408      	add	r0, r1
 801090a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801090e:	4a4e      	ldr	r2, [pc, #312]	@ (8010a48 <__ieee754_powf+0x574>)
 8010910:	3b7f      	subs	r3, #127	@ 0x7f
 8010912:	411a      	asrs	r2, r3
 8010914:	4002      	ands	r2, r0
 8010916:	ee07 2a10 	vmov	s14, r2
 801091a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801091e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010922:	f1c3 0317 	rsb	r3, r3, #23
 8010926:	4118      	asrs	r0, r3
 8010928:	2900      	cmp	r1, #0
 801092a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801092e:	bfb8      	it	lt
 8010930:	4240      	neglt	r0, r0
 8010932:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8010936:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8010a4c <__ieee754_powf+0x578>
 801093a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8010a50 <__ieee754_powf+0x57c>
 801093e:	ee16 3a90 	vmov	r3, s13
 8010942:	f36f 030b 	bfc	r3, #0, #12
 8010946:	ee06 3a90 	vmov	s13, r3
 801094a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801094e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010952:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010956:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8010a54 <__ieee754_powf+0x580>
 801095a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801095e:	eee0 7a87 	vfma.f32	s15, s1, s14
 8010962:	eeb0 7a67 	vmov.f32	s14, s15
 8010966:	eea6 7a86 	vfma.f32	s14, s13, s12
 801096a:	eef0 5a47 	vmov.f32	s11, s14
 801096e:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8010972:	ee67 6a07 	vmul.f32	s13, s14, s14
 8010976:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801097a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8010a58 <__ieee754_powf+0x584>
 801097e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8010a5c <__ieee754_powf+0x588>
 8010982:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010986:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8010a60 <__ieee754_powf+0x58c>
 801098a:	eee6 5a26 	vfma.f32	s11, s12, s13
 801098e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8010a64 <__ieee754_powf+0x590>
 8010992:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8010996:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010a68 <__ieee754_powf+0x594>
 801099a:	eee6 5a26 	vfma.f32	s11, s12, s13
 801099e:	eeb0 6a47 	vmov.f32	s12, s14
 80109a2:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80109a6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80109aa:	ee67 5a06 	vmul.f32	s11, s14, s12
 80109ae:	ee36 6a66 	vsub.f32	s12, s12, s13
 80109b2:	eee7 7a27 	vfma.f32	s15, s14, s15
 80109b6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80109ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80109be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80109c6:	ee10 3a10 	vmov	r3, s0
 80109ca:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80109ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80109d2:	da06      	bge.n	80109e2 <__ieee754_powf+0x50e>
 80109d4:	f000 f84c 	bl	8010a70 <scalbnf>
 80109d8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80109dc:	e592      	b.n	8010504 <__ieee754_powf+0x30>
 80109de:	2000      	movs	r0, #0
 80109e0:	e7a7      	b.n	8010932 <__ieee754_powf+0x45e>
 80109e2:	ee00 3a10 	vmov	s0, r3
 80109e6:	e7f7      	b.n	80109d8 <__ieee754_powf+0x504>
 80109e8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80109ec:	e58a      	b.n	8010504 <__ieee754_powf+0x30>
 80109ee:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8010a6c <__ieee754_powf+0x598>
 80109f2:	e587      	b.n	8010504 <__ieee754_powf+0x30>
 80109f4:	eeb0 0a48 	vmov.f32	s0, s16
 80109f8:	e584      	b.n	8010504 <__ieee754_powf+0x30>
 80109fa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80109fe:	f43f adbb 	beq.w	8010578 <__ieee754_powf+0xa4>
 8010a02:	2502      	movs	r5, #2
 8010a04:	eeb0 0a48 	vmov.f32	s0, s16
 8010a08:	f7ff fd2d 	bl	8010466 <fabsf>
 8010a0c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8010a10:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8010a14:	4647      	mov	r7, r8
 8010a16:	d003      	beq.n	8010a20 <__ieee754_powf+0x54c>
 8010a18:	f1b8 0f00 	cmp.w	r8, #0
 8010a1c:	f47f addb 	bne.w	80105d6 <__ieee754_powf+0x102>
 8010a20:	2c00      	cmp	r4, #0
 8010a22:	bfbc      	itt	lt
 8010a24:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8010a28:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8010a2c:	2e00      	cmp	r6, #0
 8010a2e:	f6bf ad69 	bge.w	8010504 <__ieee754_powf+0x30>
 8010a32:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8010a36:	ea58 0805 	orrs.w	r8, r8, r5
 8010a3a:	f47f adc7 	bne.w	80105cc <__ieee754_powf+0xf8>
 8010a3e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010a42:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010a46:	e55d      	b.n	8010504 <__ieee754_powf+0x30>
 8010a48:	ff800000 	.word	0xff800000
 8010a4c:	3f317218 	.word	0x3f317218
 8010a50:	3f317200 	.word	0x3f317200
 8010a54:	35bfbe8c 	.word	0x35bfbe8c
 8010a58:	b5ddea0e 	.word	0xb5ddea0e
 8010a5c:	3331bb4c 	.word	0x3331bb4c
 8010a60:	388ab355 	.word	0x388ab355
 8010a64:	bb360b61 	.word	0xbb360b61
 8010a68:	3e2aaaab 	.word	0x3e2aaaab
 8010a6c:	00000000 	.word	0x00000000

08010a70 <scalbnf>:
 8010a70:	ee10 3a10 	vmov	r3, s0
 8010a74:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010a78:	d02b      	beq.n	8010ad2 <scalbnf+0x62>
 8010a7a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010a7e:	d302      	bcc.n	8010a86 <scalbnf+0x16>
 8010a80:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010a84:	4770      	bx	lr
 8010a86:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010a8a:	d123      	bne.n	8010ad4 <scalbnf+0x64>
 8010a8c:	4b24      	ldr	r3, [pc, #144]	@ (8010b20 <scalbnf+0xb0>)
 8010a8e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010b24 <scalbnf+0xb4>
 8010a92:	4298      	cmp	r0, r3
 8010a94:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010a98:	db17      	blt.n	8010aca <scalbnf+0x5a>
 8010a9a:	ee10 3a10 	vmov	r3, s0
 8010a9e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010aa2:	3a19      	subs	r2, #25
 8010aa4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010aa8:	4288      	cmp	r0, r1
 8010aaa:	dd15      	ble.n	8010ad8 <scalbnf+0x68>
 8010aac:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010b28 <scalbnf+0xb8>
 8010ab0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010b2c <scalbnf+0xbc>
 8010ab4:	ee10 3a10 	vmov	r3, s0
 8010ab8:	eeb0 7a67 	vmov.f32	s14, s15
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	bfb8      	it	lt
 8010ac0:	eef0 7a66 	vmovlt.f32	s15, s13
 8010ac4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010ac8:	4770      	bx	lr
 8010aca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010b30 <scalbnf+0xc0>
 8010ace:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010ad2:	4770      	bx	lr
 8010ad4:	0dd2      	lsrs	r2, r2, #23
 8010ad6:	e7e5      	b.n	8010aa4 <scalbnf+0x34>
 8010ad8:	4410      	add	r0, r2
 8010ada:	28fe      	cmp	r0, #254	@ 0xfe
 8010adc:	dce6      	bgt.n	8010aac <scalbnf+0x3c>
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	dd06      	ble.n	8010af0 <scalbnf+0x80>
 8010ae2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010ae6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010aea:	ee00 3a10 	vmov	s0, r3
 8010aee:	4770      	bx	lr
 8010af0:	f110 0f16 	cmn.w	r0, #22
 8010af4:	da09      	bge.n	8010b0a <scalbnf+0x9a>
 8010af6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010b30 <scalbnf+0xc0>
 8010afa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010b34 <scalbnf+0xc4>
 8010afe:	ee10 3a10 	vmov	r3, s0
 8010b02:	eeb0 7a67 	vmov.f32	s14, s15
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	e7d9      	b.n	8010abe <scalbnf+0x4e>
 8010b0a:	3019      	adds	r0, #25
 8010b0c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010b10:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010b14:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010b38 <scalbnf+0xc8>
 8010b18:	ee07 3a90 	vmov	s15, r3
 8010b1c:	e7d7      	b.n	8010ace <scalbnf+0x5e>
 8010b1e:	bf00      	nop
 8010b20:	ffff3cb0 	.word	0xffff3cb0
 8010b24:	4c000000 	.word	0x4c000000
 8010b28:	7149f2ca 	.word	0x7149f2ca
 8010b2c:	f149f2ca 	.word	0xf149f2ca
 8010b30:	0da24260 	.word	0x0da24260
 8010b34:	8da24260 	.word	0x8da24260
 8010b38:	33000000 	.word	0x33000000

08010b3c <__ieee754_sqrtf>:
 8010b3c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010b40:	4770      	bx	lr
	...

08010b44 <_close>:
 8010b44:	4b02      	ldr	r3, [pc, #8]	@ (8010b50 <_close+0xc>)
 8010b46:	2258      	movs	r2, #88	@ 0x58
 8010b48:	601a      	str	r2, [r3, #0]
 8010b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b4e:	4770      	bx	lr
 8010b50:	20013390 	.word	0x20013390

08010b54 <_fstat>:
 8010b54:	4b02      	ldr	r3, [pc, #8]	@ (8010b60 <_fstat+0xc>)
 8010b56:	2258      	movs	r2, #88	@ 0x58
 8010b58:	601a      	str	r2, [r3, #0]
 8010b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b5e:	4770      	bx	lr
 8010b60:	20013390 	.word	0x20013390

08010b64 <_getpid>:
 8010b64:	4b02      	ldr	r3, [pc, #8]	@ (8010b70 <_getpid+0xc>)
 8010b66:	2258      	movs	r2, #88	@ 0x58
 8010b68:	601a      	str	r2, [r3, #0]
 8010b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b6e:	4770      	bx	lr
 8010b70:	20013390 	.word	0x20013390

08010b74 <_isatty>:
 8010b74:	4b02      	ldr	r3, [pc, #8]	@ (8010b80 <_isatty+0xc>)
 8010b76:	2258      	movs	r2, #88	@ 0x58
 8010b78:	601a      	str	r2, [r3, #0]
 8010b7a:	2000      	movs	r0, #0
 8010b7c:	4770      	bx	lr
 8010b7e:	bf00      	nop
 8010b80:	20013390 	.word	0x20013390

08010b84 <_kill>:
 8010b84:	4b02      	ldr	r3, [pc, #8]	@ (8010b90 <_kill+0xc>)
 8010b86:	2258      	movs	r2, #88	@ 0x58
 8010b88:	601a      	str	r2, [r3, #0]
 8010b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b8e:	4770      	bx	lr
 8010b90:	20013390 	.word	0x20013390

08010b94 <_lseek>:
 8010b94:	4b02      	ldr	r3, [pc, #8]	@ (8010ba0 <_lseek+0xc>)
 8010b96:	2258      	movs	r2, #88	@ 0x58
 8010b98:	601a      	str	r2, [r3, #0]
 8010b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b9e:	4770      	bx	lr
 8010ba0:	20013390 	.word	0x20013390

08010ba4 <_read>:
 8010ba4:	4b02      	ldr	r3, [pc, #8]	@ (8010bb0 <_read+0xc>)
 8010ba6:	2258      	movs	r2, #88	@ 0x58
 8010ba8:	601a      	str	r2, [r3, #0]
 8010baa:	f04f 30ff 	mov.w	r0, #4294967295
 8010bae:	4770      	bx	lr
 8010bb0:	20013390 	.word	0x20013390

08010bb4 <_exit>:
 8010bb4:	e7fe      	b.n	8010bb4 <_exit>
	...

08010bb8 <_init>:
 8010bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bba:	bf00      	nop
 8010bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bbe:	bc08      	pop	{r3}
 8010bc0:	469e      	mov	lr, r3
 8010bc2:	4770      	bx	lr

08010bc4 <_fini>:
 8010bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bc6:	bf00      	nop
 8010bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bca:	bc08      	pop	{r3}
 8010bcc:	469e      	mov	lr, r3
 8010bce:	4770      	bx	lr
